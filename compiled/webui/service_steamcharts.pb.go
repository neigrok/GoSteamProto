// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_steamcharts.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamCharts_GetBestOfYearPages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamCharts_GetBestOfYearPages_Request) Reset() {
	*x = CSteamCharts_GetBestOfYearPages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetBestOfYearPages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetBestOfYearPages_Request) ProtoMessage() {}

func (x *CSteamCharts_GetBestOfYearPages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetBestOfYearPages_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetBestOfYearPages_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{0}
}

type CSteamCharts_GetBestOfYearPages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages []*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage `protobuf:"bytes,1,rep,name=pages" json:"pages,omitempty"`
}

func (x *CSteamCharts_GetBestOfYearPages_Response) Reset() {
	*x = CSteamCharts_GetBestOfYearPages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetBestOfYearPages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetBestOfYearPages_Response) ProtoMessage() {}

func (x *CSteamCharts_GetBestOfYearPages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetBestOfYearPages_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetBestOfYearPages_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamCharts_GetBestOfYearPages_Response) GetPages() []*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	UrlPath         *string  `protobuf:"bytes,2,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	BannerUrl       []string `protobuf:"bytes,3,rep,name=banner_url,json=bannerUrl" json:"banner_url,omitempty"`
	BannerUrlMobile []string `protobuf:"bytes,4,rep,name=banner_url_mobile,json=bannerUrlMobile" json:"banner_url_mobile,omitempty"`
	StartDate       *uint32  `protobuf:"varint,5,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) Reset() {
	*x = CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) ProtoMessage() {}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetBannerUrl() []string {
	if x != nil {
		return x.BannerUrl
	}
	return nil
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetBannerUrlMobile() []string {
	if x != nil {
		return x.BannerUrlMobile
	}
	return nil
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetStartDate() uint32 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

type CSteamCharts_GetGamesByConcurrentPlayers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     *StoreBrowseContext         `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DataRequest *StoreBrowseItemDataRequest `protobuf:"bytes,2,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) Reset() {
	*x = CSteamCharts_GetGamesByConcurrentPlayers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetGamesByConcurrentPlayers_Request) ProtoMessage() {}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetGamesByConcurrentPlayers_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetGamesByConcurrentPlayers_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CSteamCharts_GetGamesByConcurrentPlayers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdate *uint32                                                             `protobuf:"varint,1,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Ranks      []*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank `protobuf:"bytes,2,rep,name=ranks" json:"ranks,omitempty"`
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) Reset() {
	*x = CSteamCharts_GetGamesByConcurrentPlayers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetGamesByConcurrentPlayers_Response) ProtoMessage() {}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetGamesByConcurrentPlayers_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetGamesByConcurrentPlayers_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) GetLastUpdate() uint32 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) GetRanks() []*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank             *int32     `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Appid            *uint32    `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Item             *StoreItem `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	ConcurrentInGame *uint32    `protobuf:"varint,4,opt,name=concurrent_in_game,json=concurrentInGame" json:"concurrent_in_game,omitempty"`
	PeakInGame       *uint32    `protobuf:"varint,5,opt,name=peak_in_game,json=peakInGame" json:"peak_in_game,omitempty"`
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) Reset() {
	*x = CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) ProtoMessage() {}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetItem() *StoreItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetConcurrentInGame() uint32 {
	if x != nil && x.ConcurrentInGame != nil {
		return *x.ConcurrentInGame
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetPeakInGame() uint32 {
	if x != nil && x.PeakInGame != nil {
		return *x.PeakInGame
	}
	return 0
}

type CSteamCharts_GetMostPlayedGames_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     *StoreBrowseContext         `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DataRequest *StoreBrowseItemDataRequest `protobuf:"bytes,2,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
}

func (x *CSteamCharts_GetMostPlayedGames_Request) Reset() {
	*x = CSteamCharts_GetMostPlayedGames_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetMostPlayedGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedGames_Request) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedGames_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedGames_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamCharts_GetMostPlayedGames_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedGames_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CSteamCharts_GetMostPlayedGames_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollupDate *uint32                                                    `protobuf:"varint,1,opt,name=rollup_date,json=rollupDate" json:"rollup_date,omitempty"`
	Ranks      []*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank `protobuf:"bytes,2,rep,name=ranks" json:"ranks,omitempty"`
}

func (x *CSteamCharts_GetMostPlayedGames_Response) Reset() {
	*x = CSteamCharts_GetMostPlayedGames_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetMostPlayedGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedGames_Response) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedGames_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamCharts_GetMostPlayedGames_Response) GetRollupDate() uint32 {
	if x != nil && x.RollupDate != nil {
		return *x.RollupDate
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response) GetRanks() []*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank               *int32     `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Appid              *uint32    `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Item               *StoreItem `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	LastWeekRank       *int32     `protobuf:"varint,4,opt,name=last_week_rank,json=lastWeekRank" json:"last_week_rank,omitempty"`
	PeakInGame         *uint32    `protobuf:"varint,5,opt,name=peak_in_game,json=peakInGame" json:"peak_in_game,omitempty"`
	DailyActivePlayers *uint32    `protobuf:"varint,6,opt,name=daily_active_players,json=dailyActivePlayers" json:"daily_active_players,omitempty"`
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) Reset() {
	*x = CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetItem() *StoreItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetLastWeekRank() int32 {
	if x != nil && x.LastWeekRank != nil {
		return *x.LastWeekRank
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetPeakInGame() uint32 {
	if x != nil && x.PeakInGame != nil {
		return *x.PeakInGame
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetDailyActivePlayers() uint32 {
	if x != nil && x.DailyActivePlayers != nil {
		return *x.DailyActivePlayers
	}
	return 0
}

type CSteamCharts_GetMostPlayedSteamDeckGames_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *StoreBrowseContext         `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DataRequest     *StoreBrowseItemDataRequest `protobuf:"bytes,2,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
	TopPlayedPeriod *int32                      `protobuf:"varint,3,opt,name=top_played_period,json=topPlayedPeriod" json:"top_played_period,omitempty"`
	Count           *int32                      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) Reset() {
	*x = CSteamCharts_GetMostPlayedSteamDeckGames_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedSteamDeckGames_Request) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedSteamDeckGames_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedSteamDeckGames_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetTopPlayedPeriod() int32 {
	if x != nil && x.TopPlayedPeriod != nil {
		return *x.TopPlayedPeriod
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CSteamCharts_GetMostPlayedSteamDeckGames_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranks           []*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank `protobuf:"bytes,1,rep,name=ranks" json:"ranks,omitempty"`
	TopPlayedPeriod *int32                                                              `protobuf:"varint,2,opt,name=top_played_period,json=topPlayedPeriod" json:"top_played_period,omitempty"`
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) Reset() {
	*x = CSteamCharts_GetMostPlayedSteamDeckGames_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedSteamDeckGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) GetRanks() []*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) GetTopPlayedPeriod() int32 {
	if x != nil && x.TopPlayedPeriod != nil {
		return *x.TopPlayedPeriod
	}
	return 0
}

type CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank           *int32     `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Appid          *uint32    `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Item           *StoreItem `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	LastPeriodRank *int32     `protobuf:"varint,4,opt,name=last_period_rank,json=lastPeriodRank" json:"last_period_rank,omitempty"`
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) Reset() {
	*x = CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetItem() *StoreItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetLastPeriodRank() int32 {
	if x != nil && x.LastPeriodRank != nil {
		return *x.LastPeriodRank
	}
	return 0
}

type CSteamCharts_GetTopReleasesPages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamCharts_GetTopReleasesPages_Request) Reset() {
	*x = CSteamCharts_GetTopReleasesPages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetTopReleasesPages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetTopReleasesPages_Request) ProtoMessage() {}

func (x *CSteamCharts_GetTopReleasesPages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetTopReleasesPages_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetTopReleasesPages_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{12}
}

type CSteamCharts_GetTopReleasesPages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages []*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage `protobuf:"bytes,1,rep,name=pages" json:"pages,omitempty"`
}

func (x *CSteamCharts_GetTopReleasesPages_Response) Reset() {
	*x = CSteamCharts_GetTopReleasesPages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetTopReleasesPages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetTopReleasesPages_Response) ProtoMessage() {}

func (x *CSteamCharts_GetTopReleasesPages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetTopReleasesPages_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetTopReleasesPages_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{13}
}

func (x *CSteamCharts_GetTopReleasesPages_Response) GetPages() []*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartOfMonth *uint32        `protobuf:"varint,2,opt,name=start_of_month,json=startOfMonth" json:"start_of_month,omitempty"`
	UrlPath      *string        `protobuf:"bytes,3,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	ItemIds      []*StoreItemID `protobuf:"bytes,4,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) Reset() {
	*x = CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamcharts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) ProtoMessage() {}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{14}
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetStartOfMonth() uint32 {
	if x != nil && x.StartOfMonth != nil {
		return *x.StartOfMonth
	}
	return 0
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetItemIds() []*StoreItemID {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

var File_service_steamcharts_proto protoreflect.FileDescriptor

var file_service_steamcharts_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x27,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x65,
	0x73, 0x74, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x37, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x59, 0x65,
	0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x30, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a,
	0x31, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0xdc, 0x01, 0x0a,
	0x40, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x61,
	0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x65, 0x61, 0x6b, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x27,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4d,
	0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x37, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x74,
	0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x31, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4d, 0x6f,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08,
	0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x40, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x61,
	0x6e, 0x6b, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d,
	0x0a, 0x29, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x39, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x70, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x27, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x32, 0xdf, 0x04, 0x0a, 0x0b, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74,
	0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_steamcharts_proto_rawDescOnce sync.Once
	file_service_steamcharts_proto_rawDescData = file_service_steamcharts_proto_rawDesc
)

func file_service_steamcharts_proto_rawDescGZIP() []byte {
	file_service_steamcharts_proto_rawDescOnce.Do(func() {
		file_service_steamcharts_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_steamcharts_proto_rawDescData)
	})
	return file_service_steamcharts_proto_rawDescData
}

var file_service_steamcharts_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_service_steamcharts_proto_goTypes = []any{
	(*CSteamCharts_GetBestOfYearPages_Request)(nil),                          // 0: CSteamCharts_GetBestOfYearPages_Request
	(*CSteamCharts_GetBestOfYearPages_Response)(nil),                         // 1: CSteamCharts_GetBestOfYearPages_Response
	(*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage)(nil),          // 2: CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage
	(*CSteamCharts_GetGamesByConcurrentPlayers_Request)(nil),                 // 3: CSteamCharts_GetGamesByConcurrentPlayers_Request
	(*CSteamCharts_GetGamesByConcurrentPlayers_Response)(nil),                // 4: CSteamCharts_GetGamesByConcurrentPlayers_Response
	(*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank)(nil), // 5: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank
	(*CSteamCharts_GetMostPlayedGames_Request)(nil),                          // 6: CSteamCharts_GetMostPlayedGames_Request
	(*CSteamCharts_GetMostPlayedGames_Response)(nil),                         // 7: CSteamCharts_GetMostPlayedGames_Response
	(*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank)(nil),          // 8: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank
	(*CSteamCharts_GetMostPlayedSteamDeckGames_Request)(nil),                 // 9: CSteamCharts_GetMostPlayedSteamDeckGames_Request
	(*CSteamCharts_GetMostPlayedSteamDeckGames_Response)(nil),                // 10: CSteamCharts_GetMostPlayedSteamDeckGames_Response
	(*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank)(nil), // 11: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank
	(*CSteamCharts_GetTopReleasesPages_Request)(nil),                         // 12: CSteamCharts_GetTopReleasesPages_Request
	(*CSteamCharts_GetTopReleasesPages_Response)(nil),                        // 13: CSteamCharts_GetTopReleasesPages_Response
	(*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage)(nil),        // 14: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage
	(*StoreBrowseContext)(nil),                                               // 15: StoreBrowseContext
	(*StoreBrowseItemDataRequest)(nil),                                       // 16: StoreBrowseItemDataRequest
	(*StoreItem)(nil),                                                        // 17: StoreItem
	(*StoreItemID)(nil),                                                      // 18: StoreItemID
}
var file_service_steamcharts_proto_depIdxs = []int32{
	2,  // 0: CSteamCharts_GetBestOfYearPages_Response.pages:type_name -> CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage
	15, // 1: CSteamCharts_GetGamesByConcurrentPlayers_Request.context:type_name -> StoreBrowseContext
	16, // 2: CSteamCharts_GetGamesByConcurrentPlayers_Request.data_request:type_name -> StoreBrowseItemDataRequest
	5,  // 3: CSteamCharts_GetGamesByConcurrentPlayers_Response.ranks:type_name -> CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank
	17, // 4: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank.item:type_name -> StoreItem
	15, // 5: CSteamCharts_GetMostPlayedGames_Request.context:type_name -> StoreBrowseContext
	16, // 6: CSteamCharts_GetMostPlayedGames_Request.data_request:type_name -> StoreBrowseItemDataRequest
	8,  // 7: CSteamCharts_GetMostPlayedGames_Response.ranks:type_name -> CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank
	17, // 8: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank.item:type_name -> StoreItem
	15, // 9: CSteamCharts_GetMostPlayedSteamDeckGames_Request.context:type_name -> StoreBrowseContext
	16, // 10: CSteamCharts_GetMostPlayedSteamDeckGames_Request.data_request:type_name -> StoreBrowseItemDataRequest
	11, // 11: CSteamCharts_GetMostPlayedSteamDeckGames_Response.ranks:type_name -> CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank
	17, // 12: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank.item:type_name -> StoreItem
	14, // 13: CSteamCharts_GetTopReleasesPages_Response.pages:type_name -> CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage
	18, // 14: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage.item_ids:type_name -> StoreItemID
	0,  // 15: SteamCharts.GetBestOfYearPages:input_type -> CSteamCharts_GetBestOfYearPages_Request
	3,  // 16: SteamCharts.GetGamesByConcurrentPlayers:input_type -> CSteamCharts_GetGamesByConcurrentPlayers_Request
	6,  // 17: SteamCharts.GetMostPlayedGames:input_type -> CSteamCharts_GetMostPlayedGames_Request
	9,  // 18: SteamCharts.GetMostPlayedSteamDeckGames:input_type -> CSteamCharts_GetMostPlayedSteamDeckGames_Request
	12, // 19: SteamCharts.GetTopReleasesPages:input_type -> CSteamCharts_GetTopReleasesPages_Request
	1,  // 20: SteamCharts.GetBestOfYearPages:output_type -> CSteamCharts_GetBestOfYearPages_Response
	4,  // 21: SteamCharts.GetGamesByConcurrentPlayers:output_type -> CSteamCharts_GetGamesByConcurrentPlayers_Response
	7,  // 22: SteamCharts.GetMostPlayedGames:output_type -> CSteamCharts_GetMostPlayedGames_Response
	10, // 23: SteamCharts.GetMostPlayedSteamDeckGames:output_type -> CSteamCharts_GetMostPlayedSteamDeckGames_Response
	13, // 24: SteamCharts.GetTopReleasesPages:output_type -> CSteamCharts_GetTopReleasesPages_Response
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_service_steamcharts_proto_init() }
func file_service_steamcharts_proto_init() {
	if File_service_steamcharts_proto != nil {
		return
	}
	file_common_base_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_steamcharts_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetBestOfYearPages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetBestOfYearPages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetGamesByConcurrentPlayers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetGamesByConcurrentPlayers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetMostPlayedGames_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetMostPlayedGames_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetMostPlayedSteamDeckGames_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetMostPlayedSteamDeckGames_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetTopReleasesPages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetTopReleasesPages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamcharts_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_steamcharts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamcharts_proto_goTypes,
		DependencyIndexes: file_service_steamcharts_proto_depIdxs,
		MessageInfos:      file_service_steamcharts_proto_msgTypes,
	}.Build()
	File_service_steamcharts_proto = out.File
	file_service_steamcharts_proto_rawDesc = nil
	file_service_steamcharts_proto_goTypes = nil
	file_service_steamcharts_proto_depIdxs = nil
}
