// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_voicechat.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CVoiceChat_AllMembersStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64                                    `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	Users       []*CVoiceChat_UserVoiceStatus_Notification `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (x *CVoiceChat_AllMembersStatus_Notification) Reset() {
	*x = CVoiceChat_AllMembersStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AllMembersStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AllMembersStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_AllMembersStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AllMembersStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AllMembersStatus_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{0}
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetUsers() []*CVoiceChat_UserVoiceStatus_Notification {
	if x != nil {
		return x.Users
	}
	return nil
}

type CVoiceChat_AnswerOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid     *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner  *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool   `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{1}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_AnswerOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{2}
}

type CVoiceChat_EndOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_EndOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{3}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_EndOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_EndOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_EndOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{4}
}

type CVoiceChat_LeaveOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	VoiceChatid    *uint64 `protobuf:"fixed64,2,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{5}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{6}
}

type CVoiceChat_LeaveVoiceChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_LeaveVoiceChat_Request) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveVoiceChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{7}
}

func (x *CVoiceChat_LeaveVoiceChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveVoiceChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_LeaveVoiceChat_Response) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveVoiceChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{8}
}

type CVoiceChat_OneOnOneChatRequested_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid    *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequested_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequested_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequested_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequested_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{9}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_OneOnOneChatRequestResponse_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoicechatId     *uint64 `protobuf:"fixed64,1,opt,name=voicechat_id,json=voicechatId" json:"voicechat_id,omitempty"`
	SteamidPartner  *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool   `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequestResponse_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequestResponse_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{10}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetVoicechatId() uint64 {
	if x != nil && x.VoicechatId != nil {
		return *x.VoicechatId
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_RequestOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{11}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_RequestOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{12}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_UpdateUserVideoStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid       *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid       *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	AcceptWebrtcVideo *bool   `protobuf:"varint,3,opt,name=accept_webrtc_video,json=acceptWebrtcVideo" json:"accept_webrtc_video,omitempty"`
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) Reset() {
	*x = CVoiceChat_UpdateUserVideoStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateUserVideoStatus_Request) ProtoMessage() {}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateUserVideoStatus_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateUserVideoStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{13}
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) GetAcceptWebrtcVideo() bool {
	if x != nil && x.AcceptWebrtcVideo != nil {
		return *x.AcceptWebrtcVideo
	}
	return false
}

type CVoiceChat_UpdateUserVideoStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_UpdateUserVideoStatus_Response) Reset() {
	*x = CVoiceChat_UpdateUserVideoStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateUserVideoStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateUserVideoStatus_Response) ProtoMessage() {}

func (x *CVoiceChat_UpdateUserVideoStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateUserVideoStatus_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateUserVideoStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{14}
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid             *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	IpWebrtcServer          *uint32 `protobuf:"varint,2,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer        *uint32 `protobuf:"varint,3,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcClient          *uint32 `protobuf:"varint,4,opt,name=ip_webrtc_client,json=ipWebrtcClient" json:"ip_webrtc_client,omitempty"`
	PortWebrtcClient        *uint32 `protobuf:"varint,5,opt,name=port_webrtc_client,json=portWebrtcClient" json:"port_webrtc_client,omitempty"`
	SsrcMySendingStream     *uint32 `protobuf:"varint,6,opt,name=ssrc_my_sending_stream,json=ssrcMySendingStream" json:"ssrc_my_sending_stream,omitempty"`
	UserAgent               *string `protobuf:"bytes,7,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	HasAudioWorkletsSupport *bool   `protobuf:"varint,8,opt,name=has_audio_worklets_support,json=hasAudioWorkletsSupport" json:"has_audio_worklets_support,omitempty"`
	HasWebrtcDataChannel    *bool   `protobuf:"varint,9,opt,name=has_webrtc_data_channel,json=hasWebrtcDataChannel" json:"has_webrtc_data_channel,omitempty"`
	AcceptsWebrtcVideo      *bool   `protobuf:"varint,10,opt,name=accepts_webrtc_video,json=acceptsWebrtcVideo" json:"accepts_webrtc_video,omitempty"`
	SendsWebrtcVideo        *bool   `protobuf:"varint,11,opt,name=sends_webrtc_video,json=sendsWebrtcVideo" json:"sends_webrtc_video,omitempty"`
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{15}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcClient() uint32 {
	if x != nil && x.IpWebrtcClient != nil {
		return *x.IpWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcClient() uint32 {
	if x != nil && x.PortWebrtcClient != nil {
		return *x.PortWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetSsrcMySendingStream() uint32 {
	if x != nil && x.SsrcMySendingStream != nil {
		return *x.SsrcMySendingStream
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetHasAudioWorkletsSupport() bool {
	if x != nil && x.HasAudioWorkletsSupport != nil {
		return *x.HasAudioWorkletsSupport
	}
	return false
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetHasWebrtcDataChannel() bool {
	if x != nil && x.HasWebrtcDataChannel != nil {
		return *x.HasWebrtcDataChannel
	}
	return false
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetAcceptsWebrtcVideo() bool {
	if x != nil && x.AcceptsWebrtcVideo != nil {
		return *x.AcceptsWebrtcVideo
	}
	return false
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetSendsWebrtcVideo() bool {
	if x != nil && x.SendsWebrtcVideo != nil {
		return *x.SendsWebrtcVideo
	}
	return false
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendClientVoiceLogs *bool `protobuf:"varint,1,opt,name=send_client_voice_logs,json=sendClientVoiceLogs" json:"send_client_voice_logs,omitempty"`
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{16}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) GetSendClientVoiceLogs() bool {
	if x != nil && x.SendClientVoiceLogs != nil {
		return *x.SendClientVoiceLogs
	}
	return false
}

type CVoiceChat_UploadClientVoiceChatLogs_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid             *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	ClientVoiceLogsNewLines *string `protobuf:"bytes,2,opt,name=client_voice_logs_new_lines,json=clientVoiceLogsNewLines" json:"client_voice_logs_new_lines,omitempty"`
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{17}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetClientVoiceLogsNewLines() string {
	if x != nil && x.ClientVoiceLogsNewLines != nil {
		return *x.ClientVoiceLogsNewLines
	}
	return ""
}

type CVoiceChat_UploadClientVoiceChatLogs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{18}
}

type CVoiceChat_UserJoinedVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64 `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32 `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserJoinedVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserJoinedVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserJoinedVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserJoinedVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{19}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_UserLeftVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64 `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32 `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserLeftVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserLeftVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserLeftVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserLeftVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{20}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_UserVoiceStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid            *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid            *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	UserMutedMicLocally    *bool   `protobuf:"varint,3,opt,name=user_muted_mic_locally,json=userMutedMicLocally" json:"user_muted_mic_locally,omitempty"`
	UserMutedOutputLocally *bool   `protobuf:"varint,4,opt,name=user_muted_output_locally,json=userMutedOutputLocally" json:"user_muted_output_locally,omitempty"`
	UserHasNoMicForSession *bool   `protobuf:"varint,5,opt,name=user_has_no_mic_for_session,json=userHasNoMicForSession" json:"user_has_no_mic_for_session,omitempty"`
	UserWebaudioSampleRate *int32  `protobuf:"varint,6,opt,name=user_webaudio_sample_rate,json=userWebaudioSampleRate" json:"user_webaudio_sample_rate,omitempty"`
	UserSendsVideo         *bool   `protobuf:"varint,7,opt,name=user_sends_video,json=userSendsVideo" json:"user_sends_video,omitempty"`
}

func (x *CVoiceChat_UserVoiceStatus_Notification) Reset() {
	*x = CVoiceChat_UserVoiceStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserVoiceStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserVoiceStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserVoiceStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserVoiceStatus_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{21}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedMicLocally() bool {
	if x != nil && x.UserMutedMicLocally != nil {
		return *x.UserMutedMicLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedOutputLocally() bool {
	if x != nil && x.UserMutedOutputLocally != nil {
		return *x.UserMutedOutputLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserHasNoMicForSession() bool {
	if x != nil && x.UserHasNoMicForSession != nil {
		return *x.UserHasNoMicForSession
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserWebaudioSampleRate() int32 {
	if x != nil && x.UserWebaudioSampleRate != nil {
		return *x.UserWebaudioSampleRate
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserSendsVideo() bool {
	if x != nil && x.UserSendsVideo != nil {
		return *x.UserSendsVideo
	}
	return false
}

type CVoiceChat_VoiceChatEnded_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,2,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,3,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	Chatid                *uint64 `protobuf:"varint,4,opt,name=chatid" json:"chatid,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,5,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CVoiceChat_VoiceChatEnded_Notification) Reset() {
	*x = CVoiceChat_VoiceChatEnded_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_voicechat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_VoiceChatEnded_Notification) ProtoMessage() {}

func (x *CVoiceChat_VoiceChatEnded_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_VoiceChatEnded_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_VoiceChatEnded_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{22}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

var File_service_voicechat_proto protoreflect.FileDescriptor

var file_service_voicechat_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a,
	0x28, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x01, 0x0a,
	0x25, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a,
	0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x22, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a,
	0x24, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x21, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x2d, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x33, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x27, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x28, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x2c, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x73, 0x72,
	0x63, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x73, 0x72, 0x63, 0x4d,
	0x79, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x1a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x65, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x65, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x61,
	0x73, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x22, 0x64, 0x0a, 0x2d, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57,
	0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x2c, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x2b, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x29, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x81,
	0x03, 0x0a, 0x27, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x63, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79,
	0x12, 0x3b, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6d, 0x69, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x4e, 0x6f,
	0x4d, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x32, 0xb1,
	0x07, 0x0a, 0x09, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x65, 0x0a, 0x12,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x26, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x25, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xed, 0x04, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x1b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2c, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x2e, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65,
}

var (
	file_service_voicechat_proto_rawDescOnce sync.Once
	file_service_voicechat_proto_rawDescData = file_service_voicechat_proto_rawDesc
)

func file_service_voicechat_proto_rawDescGZIP() []byte {
	file_service_voicechat_proto_rawDescOnce.Do(func() {
		file_service_voicechat_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_voicechat_proto_rawDescData)
	})
	return file_service_voicechat_proto_rawDescData
}

var file_service_voicechat_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_voicechat_proto_goTypes = []any{
	(*CVoiceChat_AllMembersStatus_Notification)(nil),            // 0: CVoiceChat_AllMembersStatus_Notification
	(*CVoiceChat_AnswerOneOnOneChat_Request)(nil),               // 1: CVoiceChat_AnswerOneOnOneChat_Request
	(*CVoiceChat_AnswerOneOnOneChat_Response)(nil),              // 2: CVoiceChat_AnswerOneOnOneChat_Response
	(*CVoiceChat_EndOneOnOneChat_Request)(nil),                  // 3: CVoiceChat_EndOneOnOneChat_Request
	(*CVoiceChat_EndOneOnOneChat_Response)(nil),                 // 4: CVoiceChat_EndOneOnOneChat_Response
	(*CVoiceChat_LeaveOneOnOneChat_Request)(nil),                // 5: CVoiceChat_LeaveOneOnOneChat_Request
	(*CVoiceChat_LeaveOneOnOneChat_Response)(nil),               // 6: CVoiceChat_LeaveOneOnOneChat_Response
	(*CVoiceChat_LeaveVoiceChat_Request)(nil),                   // 7: CVoiceChat_LeaveVoiceChat_Request
	(*CVoiceChat_LeaveVoiceChat_Response)(nil),                  // 8: CVoiceChat_LeaveVoiceChat_Response
	(*CVoiceChat_OneOnOneChatRequested_Notification)(nil),       // 9: CVoiceChat_OneOnOneChatRequested_Notification
	(*CVoiceChat_OneOnOneChatRequestResponse_Notification)(nil), // 10: CVoiceChat_OneOnOneChatRequestResponse_Notification
	(*CVoiceChat_RequestOneOnOneChat_Request)(nil),              // 11: CVoiceChat_RequestOneOnOneChat_Request
	(*CVoiceChat_RequestOneOnOneChat_Response)(nil),             // 12: CVoiceChat_RequestOneOnOneChat_Response
	(*CVoiceChat_UpdateUserVideoStatus_Request)(nil),            // 13: CVoiceChat_UpdateUserVideoStatus_Request
	(*CVoiceChat_UpdateUserVideoStatus_Response)(nil),           // 14: CVoiceChat_UpdateUserVideoStatus_Response
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Request)(nil),        // 15: CVoiceChat_UpdateVoiceChatWebRTCData_Request
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Response)(nil),       // 16: CVoiceChat_UpdateVoiceChatWebRTCData_Response
	(*CVoiceChat_UploadClientVoiceChatLogs_Request)(nil),        // 17: CVoiceChat_UploadClientVoiceChatLogs_Request
	(*CVoiceChat_UploadClientVoiceChatLogs_Response)(nil),       // 18: CVoiceChat_UploadClientVoiceChatLogs_Response
	(*CVoiceChat_UserJoinedVoiceChat_Notification)(nil),         // 19: CVoiceChat_UserJoinedVoiceChat_Notification
	(*CVoiceChat_UserLeftVoiceChat_Notification)(nil),           // 20: CVoiceChat_UserLeftVoiceChat_Notification
	(*CVoiceChat_UserVoiceStatus_Notification)(nil),             // 21: CVoiceChat_UserVoiceStatus_Notification
	(*CVoiceChat_VoiceChatEnded_Notification)(nil),              // 22: CVoiceChat_VoiceChatEnded_Notification
	(*NoResponse)(nil), // 23: NoResponse
}
var file_service_voicechat_proto_depIdxs = []int32{
	21, // 0: CVoiceChat_AllMembersStatus_Notification.users:type_name -> CVoiceChat_UserVoiceStatus_Notification
	1,  // 1: VoiceChat.AnswerOneOnOneChat:input_type -> CVoiceChat_AnswerOneOnOneChat_Request
	3,  // 2: VoiceChat.EndOneOnOneChat:input_type -> CVoiceChat_EndOneOnOneChat_Request
	5,  // 3: VoiceChat.LeaveOneOnOneChat:input_type -> CVoiceChat_LeaveOneOnOneChat_Request
	7,  // 4: VoiceChat.LeaveVoiceChat:input_type -> CVoiceChat_LeaveVoiceChat_Request
	21, // 5: VoiceChat.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	11, // 6: VoiceChat.RequestOneOnOneChat:input_type -> CVoiceChat_RequestOneOnOneChat_Request
	13, // 7: VoiceChat.UpdateUserVideoStatus:input_type -> CVoiceChat_UpdateUserVideoStatus_Request
	15, // 8: VoiceChat.UpdateVoiceChatWebRTCData:input_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Request
	17, // 9: VoiceChat.UploadClientVoiceChatLogs:input_type -> CVoiceChat_UploadClientVoiceChatLogs_Request
	0,  // 10: VoiceChatClient.NotifyAllUsersVoiceStatus:input_type -> CVoiceChat_AllMembersStatus_Notification
	9,  // 11: VoiceChatClient.NotifyOneOnOneChatRequested:input_type -> CVoiceChat_OneOnOneChatRequested_Notification
	10, // 12: VoiceChatClient.NotifyOneOnOneChatResponse:input_type -> CVoiceChat_OneOnOneChatRequestResponse_Notification
	19, // 13: VoiceChatClient.NotifyUserJoinedVoiceChat:input_type -> CVoiceChat_UserJoinedVoiceChat_Notification
	20, // 14: VoiceChatClient.NotifyUserLeftVoiceChat:input_type -> CVoiceChat_UserLeftVoiceChat_Notification
	21, // 15: VoiceChatClient.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	22, // 16: VoiceChatClient.NotifyVoiceChatEnded:input_type -> CVoiceChat_VoiceChatEnded_Notification
	2,  // 17: VoiceChat.AnswerOneOnOneChat:output_type -> CVoiceChat_AnswerOneOnOneChat_Response
	4,  // 18: VoiceChat.EndOneOnOneChat:output_type -> CVoiceChat_EndOneOnOneChat_Response
	6,  // 19: VoiceChat.LeaveOneOnOneChat:output_type -> CVoiceChat_LeaveOneOnOneChat_Response
	8,  // 20: VoiceChat.LeaveVoiceChat:output_type -> CVoiceChat_LeaveVoiceChat_Response
	23, // 21: VoiceChat.NotifyUserVoiceStatus:output_type -> NoResponse
	12, // 22: VoiceChat.RequestOneOnOneChat:output_type -> CVoiceChat_RequestOneOnOneChat_Response
	14, // 23: VoiceChat.UpdateUserVideoStatus:output_type -> CVoiceChat_UpdateUserVideoStatus_Response
	16, // 24: VoiceChat.UpdateVoiceChatWebRTCData:output_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Response
	18, // 25: VoiceChat.UploadClientVoiceChatLogs:output_type -> CVoiceChat_UploadClientVoiceChatLogs_Response
	23, // 26: VoiceChatClient.NotifyAllUsersVoiceStatus:output_type -> NoResponse
	23, // 27: VoiceChatClient.NotifyOneOnOneChatRequested:output_type -> NoResponse
	23, // 28: VoiceChatClient.NotifyOneOnOneChatResponse:output_type -> NoResponse
	23, // 29: VoiceChatClient.NotifyUserJoinedVoiceChat:output_type -> NoResponse
	23, // 30: VoiceChatClient.NotifyUserLeftVoiceChat:output_type -> NoResponse
	23, // 31: VoiceChatClient.NotifyUserVoiceStatus:output_type -> NoResponse
	23, // 32: VoiceChatClient.NotifyVoiceChatEnded:output_type -> NoResponse
	17, // [17:33] is the sub-list for method output_type
	1,  // [1:17] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_voicechat_proto_init() }
func file_service_voicechat_proto_init() {
	if File_service_voicechat_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_voicechat_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_AllMembersStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_AnswerOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_AnswerOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_EndOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_EndOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_LeaveOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_LeaveOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_LeaveVoiceChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_LeaveVoiceChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_OneOnOneChatRequested_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_OneOnOneChatRequestResponse_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_RequestOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_RequestOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UpdateUserVideoStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UpdateUserVideoStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UpdateVoiceChatWebRTCData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UpdateVoiceChatWebRTCData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UploadClientVoiceChatLogs_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UploadClientVoiceChatLogs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UserJoinedVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UserLeftVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_UserVoiceStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_voicechat_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CVoiceChat_VoiceChatEnded_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_voicechat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_voicechat_proto_goTypes,
		DependencyIndexes: file_service_voicechat_proto_depIdxs,
		MessageInfos:      file_service_voicechat_proto_msgTypes,
	}.Build()
	File_service_voicechat_proto = out.File
	file_service_voicechat_proto_rawDesc = nil
	file_service_voicechat_proto_goTypes = nil
	file_service_voicechat_proto_depIdxs = nil
}
