// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_storebrowse.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CHardwarePackageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid                            *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	InventoryAvailable                   *bool   `protobuf:"varint,3,opt,name=inventory_available,json=inventoryAvailable" json:"inventory_available,omitempty"`
	HighPendingOrders                    *bool   `protobuf:"varint,4,opt,name=high_pending_orders,json=highPendingOrders" json:"high_pending_orders,omitempty"`
	AccountRestrictedFromPurchasing      *bool   `protobuf:"varint,5,opt,name=account_restricted_from_purchasing,json=accountRestrictedFromPurchasing" json:"account_restricted_from_purchasing,omitempty"`
	RequiresReservation                  *bool   `protobuf:"varint,6,opt,name=requires_reservation,json=requiresReservation" json:"requires_reservation,omitempty"`
	RtimeEstimatedNotification           *uint32 `protobuf:"varint,7,opt,name=rtime_estimated_notification,json=rtimeEstimatedNotification" json:"rtime_estimated_notification,omitempty"`
	NotificatonToken                     *string `protobuf:"bytes,8,opt,name=notificaton_token,json=notificatonToken" json:"notificaton_token,omitempty"`
	ReservationState                     *int32  `protobuf:"varint,9,opt,name=reservation_state,json=reservationState" json:"reservation_state,omitempty"`
	Expired                              *bool   `protobuf:"varint,10,opt,name=expired" json:"expired,omitempty"`
	TimeExpires                          *uint32 `protobuf:"varint,11,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	TimeReserved                         *uint32 `protobuf:"varint,12,opt,name=time_reserved,json=timeReserved" json:"time_reserved,omitempty"`
	AllowQuantityPurchase                *bool   `protobuf:"varint,13,opt,name=allow_quantity_purchase,json=allowQuantityPurchase" json:"allow_quantity_purchase,omitempty"`
	MaxQuantityPerPurchase               *int32  `protobuf:"varint,14,opt,name=max_quantity_per_purchase,json=maxQuantityPerPurchase" json:"max_quantity_per_purchase,omitempty"`
	AllowPurchaseInCountry               *bool   `protobuf:"varint,15,opt,name=allow_purchase_in_country,json=allowPurchaseInCountry" json:"allow_purchase_in_country,omitempty"`
	EstimatedDeliverySoonestBusinessDays *uint32 `protobuf:"varint,17,opt,name=estimated_delivery_soonest_business_days,json=estimatedDeliverySoonestBusinessDays" json:"estimated_delivery_soonest_business_days,omitempty"`
	EstimatedDeliveryLatestBusinessDays  *uint32 `protobuf:"varint,18,opt,name=estimated_delivery_latest_business_days,json=estimatedDeliveryLatestBusinessDays" json:"estimated_delivery_latest_business_days,omitempty"`
}

func (x *CHardwarePackageDetails) Reset() {
	*x = CHardwarePackageDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHardwarePackageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHardwarePackageDetails) ProtoMessage() {}

func (x *CHardwarePackageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHardwarePackageDetails.ProtoReflect.Descriptor instead.
func (*CHardwarePackageDetails) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{0}
}

func (x *CHardwarePackageDetails) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CHardwarePackageDetails) GetInventoryAvailable() bool {
	if x != nil && x.InventoryAvailable != nil {
		return *x.InventoryAvailable
	}
	return false
}

func (x *CHardwarePackageDetails) GetHighPendingOrders() bool {
	if x != nil && x.HighPendingOrders != nil {
		return *x.HighPendingOrders
	}
	return false
}

func (x *CHardwarePackageDetails) GetAccountRestrictedFromPurchasing() bool {
	if x != nil && x.AccountRestrictedFromPurchasing != nil {
		return *x.AccountRestrictedFromPurchasing
	}
	return false
}

func (x *CHardwarePackageDetails) GetRequiresReservation() bool {
	if x != nil && x.RequiresReservation != nil {
		return *x.RequiresReservation
	}
	return false
}

func (x *CHardwarePackageDetails) GetRtimeEstimatedNotification() uint32 {
	if x != nil && x.RtimeEstimatedNotification != nil {
		return *x.RtimeEstimatedNotification
	}
	return 0
}

func (x *CHardwarePackageDetails) GetNotificatonToken() string {
	if x != nil && x.NotificatonToken != nil {
		return *x.NotificatonToken
	}
	return ""
}

func (x *CHardwarePackageDetails) GetReservationState() int32 {
	if x != nil && x.ReservationState != nil {
		return *x.ReservationState
	}
	return 0
}

func (x *CHardwarePackageDetails) GetExpired() bool {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return false
}

func (x *CHardwarePackageDetails) GetTimeExpires() uint32 {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return 0
}

func (x *CHardwarePackageDetails) GetTimeReserved() uint32 {
	if x != nil && x.TimeReserved != nil {
		return *x.TimeReserved
	}
	return 0
}

func (x *CHardwarePackageDetails) GetAllowQuantityPurchase() bool {
	if x != nil && x.AllowQuantityPurchase != nil {
		return *x.AllowQuantityPurchase
	}
	return false
}

func (x *CHardwarePackageDetails) GetMaxQuantityPerPurchase() int32 {
	if x != nil && x.MaxQuantityPerPurchase != nil {
		return *x.MaxQuantityPerPurchase
	}
	return 0
}

func (x *CHardwarePackageDetails) GetAllowPurchaseInCountry() bool {
	if x != nil && x.AllowPurchaseInCountry != nil {
		return *x.AllowPurchaseInCountry
	}
	return false
}

func (x *CHardwarePackageDetails) GetEstimatedDeliverySoonestBusinessDays() uint32 {
	if x != nil && x.EstimatedDeliverySoonestBusinessDays != nil {
		return *x.EstimatedDeliverySoonestBusinessDays
	}
	return 0
}

func (x *CHardwarePackageDetails) GetEstimatedDeliveryLatestBusinessDays() uint32 {
	if x != nil && x.EstimatedDeliveryLatestBusinessDays != nil {
		return *x.EstimatedDeliveryLatestBusinessDays
	}
	return 0
}

type CStoreBrowse_GetDLCForApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *StoreBrowseContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	StorePageFilter *CStorePageFilter   `protobuf:"bytes,2,opt,name=store_page_filter,json=storePageFilter" json:"store_page_filter,omitempty"`
	Appids          []*StoreItemID      `protobuf:"bytes,3,rep,name=appids" json:"appids,omitempty"`
	Steamid         *uint64             `protobuf:"varint,4,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Request) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Request) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{1}
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetStorePageFilter() *CStorePageFilter {
	if x != nil {
		return x.StorePageFilter
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetAppids() []*StoreItemID {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CStoreBrowse_GetDLCForApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlcData  []*CStoreBrowse_GetDLCForApps_Response_DLCData        `protobuf:"bytes,1,rep,name=dlc_data,json=dlcData" json:"dlc_data,omitempty"`
	Playtime []*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp `protobuf:"bytes,2,rep,name=playtime" json:"playtime,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Response) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Response) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{2}
}

func (x *CStoreBrowse_GetDLCForApps_Response) GetDlcData() []*CStoreBrowse_GetDLCForApps_Response_DLCData {
	if x != nil {
		return x.DlcData
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Response) GetPlaytime() []*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp {
	if x != nil {
		return x.Playtime
	}
	return nil
}

type CStoreBrowse_GetDLCForApps_Response_DLCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Parentappid *uint32 `protobuf:"varint,2,opt,name=parentappid" json:"parentappid,omitempty"`
	ReleaseDate *uint32 `protobuf:"varint,3,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	ComingSoon  *bool   `protobuf:"varint,4,opt,name=coming_soon,json=comingSoon" json:"coming_soon,omitempty"`
	Price       *int64  `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Discount    *uint32 `protobuf:"varint,6,opt,name=discount" json:"discount,omitempty"`
	Free        *bool   `protobuf:"varint,7,opt,name=free" json:"free,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Response_DLCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Response_DLCData) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Response_DLCData.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Response_DLCData) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{3}
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetParentappid() uint32 {
	if x != nil && x.Parentappid != nil {
		return *x.Parentappid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetReleaseDate() uint32 {
	if x != nil && x.ReleaseDate != nil {
		return *x.ReleaseDate
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetComingSoon() bool {
	if x != nil && x.ComingSoon != nil {
		return *x.ComingSoon
	}
	return false
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetFree() bool {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return false
}

type CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Playtime   *uint32 `protobuf:"varint,2,opt,name=playtime" json:"playtime,omitempty"`
	LastPlayed *uint32 `protobuf:"varint,3,opt,name=last_played,json=lastPlayed" json:"last_played,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{4}
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) GetPlaytime() uint32 {
	if x != nil && x.Playtime != nil {
		return *x.Playtime
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) GetLastPlayed() uint32 {
	if x != nil && x.LastPlayed != nil {
		return *x.LastPlayed
	}
	return 0
}

type CStoreBrowse_GetDLCForAppsSolr_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *StoreBrowseContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Appids          []uint32            `protobuf:"varint,2,rep,name=appids" json:"appids,omitempty"`
	Flavor          *string             `protobuf:"bytes,3,opt,name=flavor" json:"flavor,omitempty"`
	Count           *uint32             `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	StorePageFilter *CStorePageFilter   `protobuf:"bytes,5,opt,name=store_page_filter,json=storePageFilter" json:"store_page_filter,omitempty"`
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) Reset() {
	*x = CStoreBrowse_GetDLCForAppsSolr_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForAppsSolr_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForAppsSolr_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForAppsSolr_Request) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{5}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetFlavor() string {
	if x != nil && x.Flavor != nil {
		return *x.Flavor
	}
	return ""
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetStorePageFilter() *CStorePageFilter {
	if x != nil {
		return x.StorePageFilter
	}
	return nil
}

type CStoreBrowse_GetDLCForAppsSolr_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlcLists []*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList `protobuf:"bytes,1,rep,name=dlc_lists,json=dlcLists" json:"dlc_lists,omitempty"`
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) Reset() {
	*x = CStoreBrowse_GetDLCForAppsSolr_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForAppsSolr_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForAppsSolr_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForAppsSolr_Response) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{6}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) GetDlcLists() []*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList {
	if x != nil {
		return x.DlcLists
	}
	return nil
}

type CStoreBrowse_GetDLCForAppsSolr_Response_DLCList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentAppid *uint32  `protobuf:"varint,1,opt,name=parent_appid,json=parentAppid" json:"parent_appid,omitempty"`
	DlcAppids   []uint32 `protobuf:"varint,2,rep,name=dlc_appids,json=dlcAppids" json:"dlc_appids,omitempty"`
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) Reset() {
	*x = CStoreBrowse_GetDLCForAppsSolr_Response_DLCList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForAppsSolr_Response_DLCList.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{7}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) GetParentAppid() uint32 {
	if x != nil && x.ParentAppid != nil {
		return *x.ParentAppid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) GetDlcAppids() []uint32 {
	if x != nil {
		return x.DlcAppids
	}
	return nil
}

type CStoreBrowse_GetHardwareItems_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid []uint32            `protobuf:"varint,1,rep,name=packageid" json:"packageid,omitempty"`
	Context   *StoreBrowseContext `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (x *CStoreBrowse_GetHardwareItems_Request) Reset() {
	*x = CStoreBrowse_GetHardwareItems_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetHardwareItems_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetHardwareItems_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetHardwareItems_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetHardwareItems_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetHardwareItems_Request) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{8}
}

func (x *CStoreBrowse_GetHardwareItems_Request) GetPackageid() []uint32 {
	if x != nil {
		return x.Packageid
	}
	return nil
}

func (x *CStoreBrowse_GetHardwareItems_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CStoreBrowse_GetHardwareItems_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*CHardwarePackageDetails `protobuf:"bytes,1,rep,name=details" json:"details,omitempty"`
}

func (x *CStoreBrowse_GetHardwareItems_Response) Reset() {
	*x = CStoreBrowse_GetHardwareItems_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetHardwareItems_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetHardwareItems_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetHardwareItems_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetHardwareItems_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetHardwareItems_Response) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{9}
}

func (x *CStoreBrowse_GetHardwareItems_Response) GetDetails() []*CHardwarePackageDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type CStoreBrowse_GetPriceStops_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode  *string `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	CurrencyCode *string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
}

func (x *CStoreBrowse_GetPriceStops_Request) Reset() {
	*x = CStoreBrowse_GetPriceStops_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetPriceStops_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetPriceStops_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetPriceStops_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetPriceStops_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetPriceStops_Request) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{10}
}

func (x *CStoreBrowse_GetPriceStops_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CStoreBrowse_GetPriceStops_Request) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

type CStoreBrowse_GetPriceStops_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceStops   []*CStoreBrowse_GetPriceStops_Response_PriceStop `protobuf:"bytes,1,rep,name=price_stops,json=priceStops" json:"price_stops,omitempty"`
	CurrencyCode *string                                          `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
}

func (x *CStoreBrowse_GetPriceStops_Response) Reset() {
	*x = CStoreBrowse_GetPriceStops_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetPriceStops_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetPriceStops_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetPriceStops_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetPriceStops_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetPriceStops_Response) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{11}
}

func (x *CStoreBrowse_GetPriceStops_Response) GetPriceStops() []*CStoreBrowse_GetPriceStops_Response_PriceStop {
	if x != nil {
		return x.PriceStops
	}
	return nil
}

func (x *CStoreBrowse_GetPriceStops_Response) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

type CStoreBrowse_GetPriceStops_Response_PriceStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormattedAmount *string `protobuf:"bytes,1,opt,name=formatted_amount,json=formattedAmount" json:"formatted_amount,omitempty"`
	AmountInCents   *int64  `protobuf:"varint,2,opt,name=amount_in_cents,json=amountInCents" json:"amount_in_cents,omitempty"`
}

func (x *CStoreBrowse_GetPriceStops_Response_PriceStop) Reset() {
	*x = CStoreBrowse_GetPriceStops_Response_PriceStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetPriceStops_Response_PriceStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetPriceStops_Response_PriceStop) ProtoMessage() {}

func (x *CStoreBrowse_GetPriceStops_Response_PriceStop) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetPriceStops_Response_PriceStop.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetPriceStops_Response_PriceStop) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{12}
}

func (x *CStoreBrowse_GetPriceStops_Response_PriceStop) GetFormattedAmount() string {
	if x != nil && x.FormattedAmount != nil {
		return *x.FormattedAmount
	}
	return ""
}

func (x *CStoreBrowse_GetPriceStops_Response_PriceStop) GetAmountInCents() int64 {
	if x != nil && x.AmountInCents != nil {
		return *x.AmountInCents
	}
	return 0
}

type CStoreBrowse_GetStoreCategories_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language  *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Elanguage *int32  `protobuf:"varint,2,opt,name=elanguage,def=-1" json:"elanguage,omitempty"`
}

// Default values for CStoreBrowse_GetStoreCategories_Request fields.
const (
	Default_CStoreBrowse_GetStoreCategories_Request_Elanguage = int32(-1)
)

func (x *CStoreBrowse_GetStoreCategories_Request) Reset() {
	*x = CStoreBrowse_GetStoreCategories_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetStoreCategories_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetStoreCategories_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetStoreCategories_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetStoreCategories_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetStoreCategories_Request) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{13}
}

func (x *CStoreBrowse_GetStoreCategories_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Request) GetElanguage() int32 {
	if x != nil && x.Elanguage != nil {
		return *x.Elanguage
	}
	return Default_CStoreBrowse_GetStoreCategories_Request_Elanguage
}

type CStoreBrowse_GetStoreCategories_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CStoreBrowse_GetStoreCategories_Response_Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (x *CStoreBrowse_GetStoreCategories_Response) Reset() {
	*x = CStoreBrowse_GetStoreCategories_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetStoreCategories_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetStoreCategories_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetStoreCategories_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetStoreCategories_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetStoreCategories_Response) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{14}
}

func (x *CStoreBrowse_GetStoreCategories_Response) GetCategories() []*CStoreBrowse_GetStoreCategories_Response_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CStoreBrowse_GetStoreCategories_Response_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categoryid    *uint32 `protobuf:"varint,1,opt,name=categoryid" json:"categoryid,omitempty"`
	Type          *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	InternalName  *string `protobuf:"bytes,3,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	DisplayName   *string `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	ImageUrl      *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	ShowInSearch  *bool   `protobuf:"varint,6,opt,name=show_in_search,json=showInSearch" json:"show_in_search,omitempty"`
	Computed      *bool   `protobuf:"varint,7,opt,name=computed" json:"computed,omitempty"`
	EditUrl       *string `protobuf:"bytes,8,opt,name=edit_url,json=editUrl" json:"edit_url,omitempty"`
	EditSortOrder *uint32 `protobuf:"varint,9,opt,name=edit_sort_order,json=editSortOrder" json:"edit_sort_order,omitempty"`
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) Reset() {
	*x = CStoreBrowse_GetStoreCategories_Response_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storebrowse_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetStoreCategories_Response_Category) ProtoMessage() {}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) ProtoReflect() protoreflect.Message {
	mi := &file_service_storebrowse_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetStoreCategories_Response_Category.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetStoreCategories_Response_Category) Descriptor() ([]byte, []int) {
	return file_service_storebrowse_proto_rawDescGZIP(), []int{15}
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetCategoryid() uint32 {
	if x != nil && x.Categoryid != nil {
		return *x.Categoryid
	}
	return 0
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetShowInSearch() bool {
	if x != nil && x.ShowInSearch != nil {
		return *x.ShowInSearch
	}
	return false
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetComputed() bool {
	if x != nil && x.Computed != nil {
		return *x.Computed
	}
	return false
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetEditUrl() string {
	if x != nil && x.EditUrl != nil {
		return *x.EditUrl
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetEditSortOrder() uint32 {
	if x != nil && x.EditSortOrder != nil {
		return *x.EditSortOrder
	}
	return 0
}

var File_service_storebrowse_proto protoreflect.FileDescriptor

var file_service_storebrowse_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x06, 0x0a,
	0x17, 0x43, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x28, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x6f, 0x6e, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79,
	0x73, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x08, 0x64, 0x6c, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x64, 0x6c, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x2b, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x44, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x6f, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x32, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44,
	0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x64, 0x6c, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f,
	0x6c, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x4c, 0x43, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x64, 0x6c, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x73, 0x0a,
	0x2f, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x4c, 0x43, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6c, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6c, 0x63, 0x41, 0x70, 0x70, 0x69,
	0x64, 0x73, 0x22, 0x74, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5c, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6c, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x2d, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x7e, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x22, 0xdb, 0x02, 0x0a, 0x31, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x64, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x65, 0x64, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0xca,
	0x04, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x12,
	0x23, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x12,
	0x27, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_storebrowse_proto_rawDescOnce sync.Once
	file_service_storebrowse_proto_rawDescData = file_service_storebrowse_proto_rawDesc
)

func file_service_storebrowse_proto_rawDescGZIP() []byte {
	file_service_storebrowse_proto_rawDescOnce.Do(func() {
		file_service_storebrowse_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_storebrowse_proto_rawDescData)
	})
	return file_service_storebrowse_proto_rawDescData
}

var file_service_storebrowse_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_storebrowse_proto_goTypes = []any{
	(*CHardwarePackageDetails)(nil),                            // 0: CHardwarePackageDetails
	(*CStoreBrowse_GetDLCForApps_Request)(nil),                 // 1: CStoreBrowse_GetDLCForApps_Request
	(*CStoreBrowse_GetDLCForApps_Response)(nil),                // 2: CStoreBrowse_GetDLCForApps_Response
	(*CStoreBrowse_GetDLCForApps_Response_DLCData)(nil),        // 3: CStoreBrowse_GetDLCForApps_Response_DLCData
	(*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp)(nil), // 4: CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp
	(*CStoreBrowse_GetDLCForAppsSolr_Request)(nil),             // 5: CStoreBrowse_GetDLCForAppsSolr_Request
	(*CStoreBrowse_GetDLCForAppsSolr_Response)(nil),            // 6: CStoreBrowse_GetDLCForAppsSolr_Response
	(*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList)(nil),    // 7: CStoreBrowse_GetDLCForAppsSolr_Response_DLCList
	(*CStoreBrowse_GetHardwareItems_Request)(nil),              // 8: CStoreBrowse_GetHardwareItems_Request
	(*CStoreBrowse_GetHardwareItems_Response)(nil),             // 9: CStoreBrowse_GetHardwareItems_Response
	(*CStoreBrowse_GetPriceStops_Request)(nil),                 // 10: CStoreBrowse_GetPriceStops_Request
	(*CStoreBrowse_GetPriceStops_Response)(nil),                // 11: CStoreBrowse_GetPriceStops_Response
	(*CStoreBrowse_GetPriceStops_Response_PriceStop)(nil),      // 12: CStoreBrowse_GetPriceStops_Response_PriceStop
	(*CStoreBrowse_GetStoreCategories_Request)(nil),            // 13: CStoreBrowse_GetStoreCategories_Request
	(*CStoreBrowse_GetStoreCategories_Response)(nil),           // 14: CStoreBrowse_GetStoreCategories_Response
	(*CStoreBrowse_GetStoreCategories_Response_Category)(nil),  // 15: CStoreBrowse_GetStoreCategories_Response_Category
	(*StoreBrowseContext)(nil),                                 // 16: StoreBrowseContext
	(*CStorePageFilter)(nil),                                   // 17: CStorePageFilter
	(*StoreItemID)(nil),                                        // 18: StoreItemID
	(*CStoreBrowse_GetItems_Request)(nil),                      // 19: CStoreBrowse_GetItems_Request
	(*CStoreBrowse_GetItems_Response)(nil),                     // 20: CStoreBrowse_GetItems_Response
}
var file_service_storebrowse_proto_depIdxs = []int32{
	16, // 0: CStoreBrowse_GetDLCForApps_Request.context:type_name -> StoreBrowseContext
	17, // 1: CStoreBrowse_GetDLCForApps_Request.store_page_filter:type_name -> CStorePageFilter
	18, // 2: CStoreBrowse_GetDLCForApps_Request.appids:type_name -> StoreItemID
	3,  // 3: CStoreBrowse_GetDLCForApps_Response.dlc_data:type_name -> CStoreBrowse_GetDLCForApps_Response_DLCData
	4,  // 4: CStoreBrowse_GetDLCForApps_Response.playtime:type_name -> CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp
	16, // 5: CStoreBrowse_GetDLCForAppsSolr_Request.context:type_name -> StoreBrowseContext
	17, // 6: CStoreBrowse_GetDLCForAppsSolr_Request.store_page_filter:type_name -> CStorePageFilter
	7,  // 7: CStoreBrowse_GetDLCForAppsSolr_Response.dlc_lists:type_name -> CStoreBrowse_GetDLCForAppsSolr_Response_DLCList
	16, // 8: CStoreBrowse_GetHardwareItems_Request.context:type_name -> StoreBrowseContext
	0,  // 9: CStoreBrowse_GetHardwareItems_Response.details:type_name -> CHardwarePackageDetails
	12, // 10: CStoreBrowse_GetPriceStops_Response.price_stops:type_name -> CStoreBrowse_GetPriceStops_Response_PriceStop
	15, // 11: CStoreBrowse_GetStoreCategories_Response.categories:type_name -> CStoreBrowse_GetStoreCategories_Response_Category
	1,  // 12: StoreBrowse.GetDLCForApps:input_type -> CStoreBrowse_GetDLCForApps_Request
	5,  // 13: StoreBrowse.GetDLCForAppsSolr:input_type -> CStoreBrowse_GetDLCForAppsSolr_Request
	8,  // 14: StoreBrowse.GetHardwareItems:input_type -> CStoreBrowse_GetHardwareItems_Request
	19, // 15: StoreBrowse.GetItems:input_type -> CStoreBrowse_GetItems_Request
	10, // 16: StoreBrowse.GetPriceStops:input_type -> CStoreBrowse_GetPriceStops_Request
	13, // 17: StoreBrowse.GetStoreCategories:input_type -> CStoreBrowse_GetStoreCategories_Request
	2,  // 18: StoreBrowse.GetDLCForApps:output_type -> CStoreBrowse_GetDLCForApps_Response
	6,  // 19: StoreBrowse.GetDLCForAppsSolr:output_type -> CStoreBrowse_GetDLCForAppsSolr_Response
	9,  // 20: StoreBrowse.GetHardwareItems:output_type -> CStoreBrowse_GetHardwareItems_Response
	20, // 21: StoreBrowse.GetItems:output_type -> CStoreBrowse_GetItems_Response
	11, // 22: StoreBrowse.GetPriceStops:output_type -> CStoreBrowse_GetPriceStops_Response
	14, // 23: StoreBrowse.GetStoreCategories:output_type -> CStoreBrowse_GetStoreCategories_Response
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_service_storebrowse_proto_init() }
func file_service_storebrowse_proto_init() {
	if File_service_storebrowse_proto != nil {
		return
	}
	file_common_proto_init()
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_storebrowse_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CHardwarePackageDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Response_DLCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForAppsSolr_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForAppsSolr_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetHardwareItems_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetHardwareItems_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetPriceStops_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetPriceStops_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetPriceStops_Response_PriceStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetStoreCategories_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetStoreCategories_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storebrowse_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreBrowse_GetStoreCategories_Response_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_storebrowse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_storebrowse_proto_goTypes,
		DependencyIndexes: file_service_storebrowse_proto_depIdxs,
		MessageInfos:      file_service_storebrowse_proto_msgTypes,
	}.Build()
	File_service_storebrowse_proto = out.File
	file_service_storebrowse_proto_rawDesc = nil
	file_service_storebrowse_proto_goTypes = nil
	file_service_storebrowse_proto_depIdxs = nil
}
