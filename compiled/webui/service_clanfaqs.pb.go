// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_clanfaqs.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CClanFAQContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId           *uint64 `protobuf:"varint,1,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	Language        *uint32 `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
	Version         *uint64 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Content         *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Title           *string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Timestamp       *uint32 `protobuf:"fixed32,6,opt,name=timestamp" json:"timestamp,omitempty"`
	AuthorAccountId *uint64 `protobuf:"varint,7,opt,name=author_account_id,json=authorAccountId" json:"author_account_id,omitempty"`
	UrlCode         *string `protobuf:"bytes,8,opt,name=url_code,json=urlCode" json:"url_code,omitempty"`
}

func (x *CClanFAQContent) Reset() {
	*x = CClanFAQContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQContent) ProtoMessage() {}

func (x *CClanFAQContent) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQContent.ProtoReflect.Descriptor instead.
func (*CClanFAQContent) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{0}
}

func (x *CClanFAQContent) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQContent) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CClanFAQContent) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CClanFAQContent) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CClanFAQContent) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CClanFAQContent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CClanFAQContent) GetAuthorAccountId() uint64 {
	if x != nil && x.AuthorAccountId != nil {
		return *x.AuthorAccountId
	}
	return 0
}

func (x *CClanFAQContent) GetUrlCode() string {
	if x != nil && x.UrlCode != nil {
		return *x.UrlCode
	}
	return ""
}

type CClanFAQS_CheckFAQPermissions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CClanFAQS_CheckFAQPermissions_Request) Reset() {
	*x = CClanFAQS_CheckFAQPermissions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_CheckFAQPermissions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_CheckFAQPermissions_Request) ProtoMessage() {}

func (x *CClanFAQS_CheckFAQPermissions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_CheckFAQPermissions_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_CheckFAQPermissions_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{1}
}

func (x *CClanFAQS_CheckFAQPermissions_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClanFAQS_CheckFAQPermissions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClanFAQS_CheckFAQPermissions_Response) Reset() {
	*x = CClanFAQS_CheckFAQPermissions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_CheckFAQPermissions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_CheckFAQPermissions_Response) ProtoMessage() {}

func (x *CClanFAQS_CheckFAQPermissions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_CheckFAQPermissions_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_CheckFAQPermissions_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{2}
}

type CClanFAQS_Create_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid      *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	InternalName *string `protobuf:"bytes,2,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	JsonData     *string `protobuf:"bytes,3,opt,name=json_data,json=jsonData" json:"json_data,omitempty"`
}

func (x *CClanFAQS_Create_Request) Reset() {
	*x = CClanFAQS_Create_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_Create_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_Create_Request) ProtoMessage() {}

func (x *CClanFAQS_Create_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_Create_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_Create_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{3}
}

func (x *CClanFAQS_Create_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_Create_Request) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *CClanFAQS_Create_Request) GetJsonData() string {
	if x != nil && x.JsonData != nil {
		return *x.JsonData
	}
	return ""
}

type CClanFAQS_Create_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId *uint64 `protobuf:"varint,1,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
}

func (x *CClanFAQS_Create_Response) Reset() {
	*x = CClanFAQS_Create_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_Create_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_Create_Response) ProtoMessage() {}

func (x *CClanFAQS_Create_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_Create_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_Create_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{4}
}

func (x *CClanFAQS_Create_Response) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

type CClanFAQS_Delete_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId   *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
}

func (x *CClanFAQS_Delete_Request) Reset() {
	*x = CClanFAQS_Delete_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_Delete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_Delete_Request) ProtoMessage() {}

func (x *CClanFAQS_Delete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_Delete_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_Delete_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{5}
}

func (x *CClanFAQS_Delete_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_Delete_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

type CClanFAQS_Delete_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClanFAQS_Delete_Response) Reset() {
	*x = CClanFAQS_Delete_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_Delete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_Delete_Response) ProtoMessage() {}

func (x *CClanFAQS_Delete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_Delete_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_Delete_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{6}
}

type CClanFAQS_GetAllDrafts_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId   *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
}

func (x *CClanFAQS_GetAllDrafts_Request) Reset() {
	*x = CClanFAQS_GetAllDrafts_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetAllDrafts_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetAllDrafts_Request) ProtoMessage() {}

func (x *CClanFAQS_GetAllDrafts_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetAllDrafts_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetAllDrafts_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{7}
}

func (x *CClanFAQS_GetAllDrafts_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_GetAllDrafts_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

type CClanFAQS_GetAllDrafts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CClanFAQSummary   `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	Draft   []*CClanFAQContent `protobuf:"bytes,2,rep,name=draft" json:"draft,omitempty"`
}

func (x *CClanFAQS_GetAllDrafts_Response) Reset() {
	*x = CClanFAQS_GetAllDrafts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetAllDrafts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetAllDrafts_Response) ProtoMessage() {}

func (x *CClanFAQS_GetAllDrafts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetAllDrafts_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetAllDrafts_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{8}
}

func (x *CClanFAQS_GetAllDrafts_Response) GetSummary() *CClanFAQSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *CClanFAQS_GetAllDrafts_Response) GetDraft() []*CClanFAQContent {
	if x != nil {
		return x.Draft
	}
	return nil
}

type CClanFAQS_GetAllFAQsForClan_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CClanFAQS_GetAllFAQsForClan_Request) Reset() {
	*x = CClanFAQS_GetAllFAQsForClan_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetAllFAQsForClan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetAllFAQsForClan_Request) ProtoMessage() {}

func (x *CClanFAQS_GetAllFAQsForClan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetAllFAQsForClan_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetAllFAQsForClan_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{9}
}

func (x *CClanFAQS_GetAllFAQsForClan_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClanFAQS_GetAllFAQsForClan_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faq []*CClanFAQSummary `protobuf:"bytes,1,rep,name=faq" json:"faq,omitempty"`
}

func (x *CClanFAQS_GetAllFAQsForClan_Response) Reset() {
	*x = CClanFAQS_GetAllFAQsForClan_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetAllFAQsForClan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetAllFAQsForClan_Response) ProtoMessage() {}

func (x *CClanFAQS_GetAllFAQsForClan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetAllFAQsForClan_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetAllFAQsForClan_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{10}
}

func (x *CClanFAQS_GetAllFAQsForClan_Response) GetFaq() []*CClanFAQSummary {
	if x != nil {
		return x.Faq
	}
	return nil
}

type CClanFAQS_GetAllLatestVersionPublishedFAQS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId   *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) Reset() {
	*x = CClanFAQS_GetAllLatestVersionPublishedFAQS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) ProtoMessage() {}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetAllLatestVersionPublishedFAQS_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{11}
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

type CClanFAQS_GetAllLatestVersionPublishedFAQS_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faqs []*CClanFAQContent `protobuf:"bytes,1,rep,name=faqs" json:"faqs,omitempty"`
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Response) Reset() {
	*x = CClanFAQS_GetAllLatestVersionPublishedFAQS_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetAllLatestVersionPublishedFAQS_Response) ProtoMessage() {}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetAllLatestVersionPublishedFAQS_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetAllLatestVersionPublishedFAQS_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{12}
}

func (x *CClanFAQS_GetAllLatestVersionPublishedFAQS_Response) GetFaqs() []*CClanFAQContent {
	if x != nil {
		return x.Faqs
	}
	return nil
}

type CClanFAQS_GetFAQ_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId    *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	Language *uint32 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
}

func (x *CClanFAQS_GetFAQ_Request) Reset() {
	*x = CClanFAQS_GetFAQ_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetFAQ_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetFAQ_Request) ProtoMessage() {}

func (x *CClanFAQS_GetFAQ_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetFAQ_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetFAQ_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{13}
}

func (x *CClanFAQS_GetFAQ_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_GetFAQ_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CClanFAQS_GetFAQ_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faq       *CClanFAQContent `protobuf:"bytes,1,opt,name=faq" json:"faq,omitempty"`
	FaqExists *bool            `protobuf:"varint,2,opt,name=faq_exists,json=faqExists,def=0" json:"faq_exists,omitempty"`
}

// Default values for CClanFAQS_GetFAQ_Response fields.
const (
	Default_CClanFAQS_GetFAQ_Response_FaqExists = bool(false)
)

func (x *CClanFAQS_GetFAQ_Response) Reset() {
	*x = CClanFAQS_GetFAQ_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetFAQ_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetFAQ_Response) ProtoMessage() {}

func (x *CClanFAQS_GetFAQ_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetFAQ_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetFAQ_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{14}
}

func (x *CClanFAQS_GetFAQ_Response) GetFaq() *CClanFAQContent {
	if x != nil {
		return x.Faq
	}
	return nil
}

func (x *CClanFAQS_GetFAQ_Response) GetFaqExists() bool {
	if x != nil && x.FaqExists != nil {
		return *x.FaqExists
	}
	return Default_CClanFAQS_GetFAQ_Response_FaqExists
}

type CClanFAQS_GetFAQVersion_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId    *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	Language *uint32 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	Version  *uint64 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (x *CClanFAQS_GetFAQVersion_Request) Reset() {
	*x = CClanFAQS_GetFAQVersion_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetFAQVersion_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetFAQVersion_Request) ProtoMessage() {}

func (x *CClanFAQS_GetFAQVersion_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetFAQVersion_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetFAQVersion_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{15}
}

func (x *CClanFAQS_GetFAQVersion_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_GetFAQVersion_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_GetFAQVersion_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CClanFAQS_GetFAQVersion_Request) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type CClanFAQS_GetFAQVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faq *CClanFAQContent `protobuf:"bytes,1,opt,name=faq" json:"faq,omitempty"`
}

func (x *CClanFAQS_GetFAQVersion_Response) Reset() {
	*x = CClanFAQS_GetFAQVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_GetFAQVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_GetFAQVersion_Response) ProtoMessage() {}

func (x *CClanFAQS_GetFAQVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_GetFAQVersion_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_GetFAQVersion_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{16}
}

func (x *CClanFAQS_GetFAQVersion_Response) GetFaq() *CClanFAQContent {
	if x != nil {
		return x.Faq
	}
	return nil
}

type CClanFAQS_PreviewDraft_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId    *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	Language *uint32 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
}

func (x *CClanFAQS_PreviewDraft_Request) Reset() {
	*x = CClanFAQS_PreviewDraft_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_PreviewDraft_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_PreviewDraft_Request) ProtoMessage() {}

func (x *CClanFAQS_PreviewDraft_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_PreviewDraft_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_PreviewDraft_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{17}
}

func (x *CClanFAQS_PreviewDraft_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_PreviewDraft_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_PreviewDraft_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CClanFAQS_PreviewDraft_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faq *CClanFAQContent `protobuf:"bytes,1,opt,name=faq" json:"faq,omitempty"`
}

func (x *CClanFAQS_PreviewDraft_Response) Reset() {
	*x = CClanFAQS_PreviewDraft_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_PreviewDraft_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_PreviewDraft_Response) ProtoMessage() {}

func (x *CClanFAQS_PreviewDraft_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_PreviewDraft_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_PreviewDraft_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{18}
}

func (x *CClanFAQS_PreviewDraft_Response) GetFaq() *CClanFAQContent {
	if x != nil {
		return x.Faq
	}
	return nil
}

type CClanFAQS_PublishDraft_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64  `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId    *uint64  `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	Language []uint32 `protobuf:"varint,3,rep,name=language" json:"language,omitempty"`
}

func (x *CClanFAQS_PublishDraft_Request) Reset() {
	*x = CClanFAQS_PublishDraft_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_PublishDraft_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_PublishDraft_Request) ProtoMessage() {}

func (x *CClanFAQS_PublishDraft_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_PublishDraft_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_PublishDraft_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{19}
}

func (x *CClanFAQS_PublishDraft_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_PublishDraft_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_PublishDraft_Request) GetLanguage() []uint32 {
	if x != nil {
		return x.Language
	}
	return nil
}

type CClanFAQS_PublishDraft_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPublishTimestamp *uint32 `protobuf:"fixed32,1,opt,name=last_publish_timestamp,json=lastPublishTimestamp" json:"last_publish_timestamp,omitempty"`
}

func (x *CClanFAQS_PublishDraft_Response) Reset() {
	*x = CClanFAQS_PublishDraft_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_PublishDraft_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_PublishDraft_Response) ProtoMessage() {}

func (x *CClanFAQS_PublishDraft_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_PublishDraft_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_PublishDraft_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{20}
}

func (x *CClanFAQS_PublishDraft_Response) GetLastPublishTimestamp() uint32 {
	if x != nil && x.LastPublishTimestamp != nil {
		return *x.LastPublishTimestamp
	}
	return 0
}

type CClanFAQS_SearchFAQs_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchText    *string  `protobuf:"bytes,1,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	Elanguages    []int32  `protobuf:"varint,2,rep,name=elanguages" json:"elanguages,omitempty"`
	Count         *int32   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Cursor        *string  `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
	FilterClanids []uint32 `protobuf:"varint,5,rep,name=filter_clanids,json=filterClanids" json:"filter_clanids,omitempty"`
}

func (x *CClanFAQS_SearchFAQs_Request) Reset() {
	*x = CClanFAQS_SearchFAQs_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_SearchFAQs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_SearchFAQs_Request) ProtoMessage() {}

func (x *CClanFAQS_SearchFAQs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_SearchFAQs_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_SearchFAQs_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{21}
}

func (x *CClanFAQS_SearchFAQs_Request) GetSearchText() string {
	if x != nil && x.SearchText != nil {
		return *x.SearchText
	}
	return ""
}

func (x *CClanFAQS_SearchFAQs_Request) GetElanguages() []int32 {
	if x != nil {
		return x.Elanguages
	}
	return nil
}

func (x *CClanFAQS_SearchFAQs_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CClanFAQS_SearchFAQs_Request) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *CClanFAQS_SearchFAQs_Request) GetFilterClanids() []uint32 {
	if x != nil {
		return x.FilterClanids
	}
	return nil
}

type CClanFAQS_SearchFAQs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faqs            []*CClanFAQS_SearchFAQs_Response_CFAQSearchResult `protobuf:"bytes,1,rep,name=faqs" json:"faqs,omitempty"`
	NumTotalResults *int32                                            `protobuf:"varint,2,opt,name=num_total_results,json=numTotalResults" json:"num_total_results,omitempty"`
	NextCursor      *string                                           `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
}

func (x *CClanFAQS_SearchFAQs_Response) Reset() {
	*x = CClanFAQS_SearchFAQs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_SearchFAQs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_SearchFAQs_Response) ProtoMessage() {}

func (x *CClanFAQS_SearchFAQs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_SearchFAQs_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_SearchFAQs_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{22}
}

func (x *CClanFAQS_SearchFAQs_Response) GetFaqs() []*CClanFAQS_SearchFAQs_Response_CFAQSearchResult {
	if x != nil {
		return x.Faqs
	}
	return nil
}

func (x *CClanFAQS_SearchFAQs_Response) GetNumTotalResults() int32 {
	if x != nil && x.NumTotalResults != nil {
		return *x.NumTotalResults
	}
	return 0
}

func (x *CClanFAQS_SearchFAQs_Response) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

type CClanFAQS_SearchFAQs_Response_CFAQSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articleid      *uint64  `protobuf:"varint,1,opt,name=articleid" json:"articleid,omitempty"`
	Name           *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Content        *string  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	ClanAccountid  *uint32  `protobuf:"varint,4,opt,name=clan_accountid,json=clanAccountid" json:"clan_accountid,omitempty"`
	UrlCode        *string  `protobuf:"bytes,5,opt,name=url_code,json=urlCode" json:"url_code,omitempty"`
	LocalizedNames []string `protobuf:"bytes,6,rep,name=localized_names,json=localizedNames" json:"localized_names,omitempty"`
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) Reset() {
	*x = CClanFAQS_SearchFAQs_Response_CFAQSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_SearchFAQs_Response_CFAQSearchResult) ProtoMessage() {}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_SearchFAQs_Response_CFAQSearchResult.ProtoReflect.Descriptor instead.
func (*CClanFAQS_SearchFAQs_Response_CFAQSearchResult) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{23}
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) GetArticleid() uint64 {
	if x != nil && x.Articleid != nil {
		return *x.Articleid
	}
	return 0
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) GetClanAccountid() uint32 {
	if x != nil && x.ClanAccountid != nil {
		return *x.ClanAccountid
	}
	return 0
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) GetUrlCode() string {
	if x != nil && x.UrlCode != nil {
		return *x.UrlCode
	}
	return ""
}

func (x *CClanFAQS_SearchFAQs_Response_CFAQSearchResult) GetLocalizedNames() []string {
	if x != nil {
		return x.LocalizedNames
	}
	return nil
}

type CClanFAQS_SetVisibility_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid              *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId                *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	VisibleInGlobalRealm *bool   `protobuf:"varint,3,opt,name=visible_in_global_realm,json=visibleInGlobalRealm" json:"visible_in_global_realm,omitempty"`
	VisibleInChinaRealm  *bool   `protobuf:"varint,4,opt,name=visible_in_china_realm,json=visibleInChinaRealm" json:"visible_in_china_realm,omitempty"`
}

func (x *CClanFAQS_SetVisibility_Request) Reset() {
	*x = CClanFAQS_SetVisibility_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_SetVisibility_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_SetVisibility_Request) ProtoMessage() {}

func (x *CClanFAQS_SetVisibility_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_SetVisibility_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_SetVisibility_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{24}
}

func (x *CClanFAQS_SetVisibility_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_SetVisibility_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_SetVisibility_Request) GetVisibleInGlobalRealm() bool {
	if x != nil && x.VisibleInGlobalRealm != nil {
		return *x.VisibleInGlobalRealm
	}
	return false
}

func (x *CClanFAQS_SetVisibility_Request) GetVisibleInChinaRealm() bool {
	if x != nil && x.VisibleInChinaRealm != nil {
		return *x.VisibleInChinaRealm
	}
	return false
}

type CClanFAQS_SetVisibility_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClanFAQS_SetVisibility_Response) Reset() {
	*x = CClanFAQS_SetVisibility_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_SetVisibility_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_SetVisibility_Response) ProtoMessage() {}

func (x *CClanFAQS_SetVisibility_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_SetVisibility_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_SetVisibility_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{25}
}

type CClanFAQS_UpdateDraft_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId    *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	Language *uint32 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	Content  *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Title    *string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
}

func (x *CClanFAQS_UpdateDraft_Request) Reset() {
	*x = CClanFAQS_UpdateDraft_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_UpdateDraft_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_UpdateDraft_Request) ProtoMessage() {}

func (x *CClanFAQS_UpdateDraft_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_UpdateDraft_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_UpdateDraft_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{26}
}

func (x *CClanFAQS_UpdateDraft_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_UpdateDraft_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_UpdateDraft_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CClanFAQS_UpdateDraft_Request) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CClanFAQS_UpdateDraft_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CClanFAQS_UpdateDraft_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdateTimestamp *uint32 `protobuf:"fixed32,1,opt,name=last_update_timestamp,json=lastUpdateTimestamp" json:"last_update_timestamp,omitempty"`
}

func (x *CClanFAQS_UpdateDraft_Response) Reset() {
	*x = CClanFAQS_UpdateDraft_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_UpdateDraft_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_UpdateDraft_Response) ProtoMessage() {}

func (x *CClanFAQS_UpdateDraft_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_UpdateDraft_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_UpdateDraft_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{27}
}

func (x *CClanFAQS_UpdateDraft_Response) GetLastUpdateTimestamp() uint32 {
	if x != nil && x.LastUpdateTimestamp != nil {
		return *x.LastUpdateTimestamp
	}
	return 0
}

type CClanFAQS_UpdateInternalName_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid      *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId        *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	InternalName *string `protobuf:"bytes,3,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
}

func (x *CClanFAQS_UpdateInternalName_Request) Reset() {
	*x = CClanFAQS_UpdateInternalName_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_UpdateInternalName_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_UpdateInternalName_Request) ProtoMessage() {}

func (x *CClanFAQS_UpdateInternalName_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_UpdateInternalName_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_UpdateInternalName_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{28}
}

func (x *CClanFAQS_UpdateInternalName_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_UpdateInternalName_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_UpdateInternalName_Request) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

type CClanFAQS_UpdateInternalName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClanFAQS_UpdateInternalName_Response) Reset() {
	*x = CClanFAQS_UpdateInternalName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_UpdateInternalName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_UpdateInternalName_Response) ProtoMessage() {}

func (x *CClanFAQS_UpdateInternalName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_UpdateInternalName_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_UpdateInternalName_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{29}
}

type CClanFAQS_UpdateJsonData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	FaqId    *uint64 `protobuf:"varint,2,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	JsonData *string `protobuf:"bytes,3,opt,name=json_data,json=jsonData" json:"json_data,omitempty"`
}

func (x *CClanFAQS_UpdateJsonData_Request) Reset() {
	*x = CClanFAQS_UpdateJsonData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_UpdateJsonData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_UpdateJsonData_Request) ProtoMessage() {}

func (x *CClanFAQS_UpdateJsonData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_UpdateJsonData_Request.ProtoReflect.Descriptor instead.
func (*CClanFAQS_UpdateJsonData_Request) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{30}
}

func (x *CClanFAQS_UpdateJsonData_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanFAQS_UpdateJsonData_Request) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQS_UpdateJsonData_Request) GetJsonData() string {
	if x != nil && x.JsonData != nil {
		return *x.JsonData
	}
	return ""
}

type CClanFAQS_UpdateJsonData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClanFAQS_UpdateJsonData_Response) Reset() {
	*x = CClanFAQS_UpdateJsonData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQS_UpdateJsonData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQS_UpdateJsonData_Response) ProtoMessage() {}

func (x *CClanFAQS_UpdateJsonData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQS_UpdateJsonData_Response.ProtoReflect.Descriptor instead.
func (*CClanFAQS_UpdateJsonData_Response) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{31}
}

type CClanFAQSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId                *uint64                          `protobuf:"varint,1,opt,name=faq_id,json=faqId" json:"faq_id,omitempty"`
	InternalName         *string                          `protobuf:"bytes,2,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	VisibleInGlobalRealm *bool                            `protobuf:"varint,3,opt,name=visible_in_global_realm,json=visibleInGlobalRealm" json:"visible_in_global_realm,omitempty"`
	VisibleInChinaRealm  *bool                            `protobuf:"varint,4,opt,name=visible_in_china_realm,json=visibleInChinaRealm" json:"visible_in_china_realm,omitempty"`
	JsonData             *string                          `protobuf:"bytes,5,opt,name=json_data,json=jsonData" json:"json_data,omitempty"`
	PerLanguageInfo      []*CClanFAQSummary_CLanguageInfo `protobuf:"bytes,6,rep,name=per_language_info,json=perLanguageInfo" json:"per_language_info,omitempty"`
	UrlCode              *string                          `protobuf:"bytes,7,opt,name=url_code,json=urlCode" json:"url_code,omitempty"`
}

func (x *CClanFAQSummary) Reset() {
	*x = CClanFAQSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQSummary) ProtoMessage() {}

func (x *CClanFAQSummary) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQSummary.ProtoReflect.Descriptor instead.
func (*CClanFAQSummary) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{32}
}

func (x *CClanFAQSummary) GetFaqId() uint64 {
	if x != nil && x.FaqId != nil {
		return *x.FaqId
	}
	return 0
}

func (x *CClanFAQSummary) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *CClanFAQSummary) GetVisibleInGlobalRealm() bool {
	if x != nil && x.VisibleInGlobalRealm != nil {
		return *x.VisibleInGlobalRealm
	}
	return false
}

func (x *CClanFAQSummary) GetVisibleInChinaRealm() bool {
	if x != nil && x.VisibleInChinaRealm != nil {
		return *x.VisibleInChinaRealm
	}
	return false
}

func (x *CClanFAQSummary) GetJsonData() string {
	if x != nil && x.JsonData != nil {
		return *x.JsonData
	}
	return ""
}

func (x *CClanFAQSummary) GetPerLanguageInfo() []*CClanFAQSummary_CLanguageInfo {
	if x != nil {
		return x.PerLanguageInfo
	}
	return nil
}

func (x *CClanFAQSummary) GetUrlCode() string {
	if x != nil && x.UrlCode != nil {
		return *x.UrlCode
	}
	return ""
}

type CClanFAQSummary_CLanguageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language             *uint32 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	LastUpdateTimestamp  *uint32 `protobuf:"fixed32,2,opt,name=last_update_timestamp,json=lastUpdateTimestamp" json:"last_update_timestamp,omitempty"`
	LastPublishTimestamp *uint32 `protobuf:"fixed32,3,opt,name=last_publish_timestamp,json=lastPublishTimestamp" json:"last_publish_timestamp,omitempty"`
}

func (x *CClanFAQSummary_CLanguageInfo) Reset() {
	*x = CClanFAQSummary_CLanguageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clanfaqs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanFAQSummary_CLanguageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanFAQSummary_CLanguageInfo) ProtoMessage() {}

func (x *CClanFAQSummary_CLanguageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_clanfaqs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanFAQSummary_CLanguageInfo.ProtoReflect.Descriptor instead.
func (*CClanFAQSummary_CLanguageInfo) Descriptor() ([]byte, []int) {
	return file_service_clanfaqs_proto_rawDescGZIP(), []int{33}
}

func (x *CClanFAQSummary_CLanguageInfo) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CClanFAQSummary_CLanguageInfo) GetLastUpdateTimestamp() uint32 {
	if x != nil && x.LastUpdateTimestamp != nil {
		return *x.LastUpdateTimestamp
	}
	return 0
}

func (x *CClanFAQSummary_CLanguageInfo) GetLastPublishTimestamp() uint32 {
	if x != nil && x.LastPublishTimestamp != nil {
		return *x.LastPublishTimestamp
	}
	return 0
}

var File_service_clanfaqs_proto protoreflect.FileDescriptor

var file_service_clanfaqs_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x66, 0x61,
	0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x43, 0x43, 0x6c,
	0x61, 0x6e, 0x46, 0x41, 0x51, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61,
	0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x41,
	0x0a, 0x25, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x41, 0x51, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x41, 0x51, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x18, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x19, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x18, 0x43, 0x43, 0x6c, 0x61, 0x6e,
	0x46, 0x41, 0x51, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66,
	0x61, 0x71, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51,
	0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x51, 0x0a, 0x1e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66,
	0x61, 0x71, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51,
	0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e,
	0x46, 0x41, 0x51, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x22, 0x3f, 0x0a, 0x23, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46,
	0x41, 0x51, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x24,
	0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x46, 0x41, 0x51, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x61, 0x71, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x03, 0x66, 0x61, 0x71, 0x22, 0x65, 0x0a, 0x32, 0x43, 0x43, 0x6c, 0x61,
	0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x22,
	0x5b, 0x0a, 0x33, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x61, 0x71, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x61, 0x71, 0x73, 0x22, 0x4d, 0x0a, 0x18,
	0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x61, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x66, 0x61, 0x71, 0x12, 0x24, 0x0a, 0x0a,
	0x66, 0x61, 0x71, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x66, 0x61, 0x71, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53,
	0x5f, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a,
	0x20, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41,
	0x51, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x61, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x03, 0x66, 0x61, 0x71, 0x22, 0x6d, 0x0a, 0x1e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41,
	0x51, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51,
	0x53, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x61, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x66, 0x61, 0x71, 0x22, 0x6d, 0x0a, 0x1e, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x1f, 0x43, 0x43,
	0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51,
	0x53, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41, 0x51, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c,
	0x61, 0x6e, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x41, 0x51, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04,
	0x66, 0x61, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x43, 0x43, 0x6c,
	0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41, 0x51,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x46, 0x41, 0x51, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x66, 0x61, 0x71,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xe7,
	0x01, 0x0a, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x41, 0x51, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x43, 0x46, 0x41, 0x51, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1f, 0x43, 0x43, 0x6c,
	0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x43,
	0x68, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x43, 0x6c,
	0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01,
	0x0a, 0x1d, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x54, 0x0a, 0x1e,
	0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x7c, 0x0a, 0x24, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x20, 0x43, 0x43, 0x6c,
	0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x21, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x43, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x43, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0xa7, 0x0a, 0x0a, 0x08, 0x43, 0x6c, 0x61,
	0x6e, 0x46, 0x41, 0x51, 0x53, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x41,
	0x51, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x41,
	0x51, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53,
	0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x41, 0x51, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46,
	0x41, 0x51, 0x53, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e,
	0x46, 0x41, 0x51, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x12,
	0x1f, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x41, 0x51, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46,
	0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x41, 0x51, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x46, 0x41, 0x51, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x41, 0x51, 0x53, 0x12, 0x33, 0x2e, 0x43, 0x43, 0x6c, 0x61,
	0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x12, 0x19,
	0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41,
	0x51, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x43, 0x43, 0x6c, 0x61,
	0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41,
	0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e,
	0x46, 0x41, 0x51, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1f, 0x2e, 0x43, 0x43,
	0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1f,
	0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41, 0x51, 0x73, 0x12,
	0x1d, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x41, 0x51, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x41, 0x51, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x53, 0x65,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x12, 0x1e, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x43, 0x43, 0x6c,
	0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x43, 0x43,
	0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x73,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x41, 0x51, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65,
}

var (
	file_service_clanfaqs_proto_rawDescOnce sync.Once
	file_service_clanfaqs_proto_rawDescData = file_service_clanfaqs_proto_rawDesc
)

func file_service_clanfaqs_proto_rawDescGZIP() []byte {
	file_service_clanfaqs_proto_rawDescOnce.Do(func() {
		file_service_clanfaqs_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_clanfaqs_proto_rawDescData)
	})
	return file_service_clanfaqs_proto_rawDescData
}

var file_service_clanfaqs_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_service_clanfaqs_proto_goTypes = []any{
	(*CClanFAQContent)(nil),                                     // 0: CClanFAQContent
	(*CClanFAQS_CheckFAQPermissions_Request)(nil),               // 1: CClanFAQS_CheckFAQPermissions_Request
	(*CClanFAQS_CheckFAQPermissions_Response)(nil),              // 2: CClanFAQS_CheckFAQPermissions_Response
	(*CClanFAQS_Create_Request)(nil),                            // 3: CClanFAQS_Create_Request
	(*CClanFAQS_Create_Response)(nil),                           // 4: CClanFAQS_Create_Response
	(*CClanFAQS_Delete_Request)(nil),                            // 5: CClanFAQS_Delete_Request
	(*CClanFAQS_Delete_Response)(nil),                           // 6: CClanFAQS_Delete_Response
	(*CClanFAQS_GetAllDrafts_Request)(nil),                      // 7: CClanFAQS_GetAllDrafts_Request
	(*CClanFAQS_GetAllDrafts_Response)(nil),                     // 8: CClanFAQS_GetAllDrafts_Response
	(*CClanFAQS_GetAllFAQsForClan_Request)(nil),                 // 9: CClanFAQS_GetAllFAQsForClan_Request
	(*CClanFAQS_GetAllFAQsForClan_Response)(nil),                // 10: CClanFAQS_GetAllFAQsForClan_Response
	(*CClanFAQS_GetAllLatestVersionPublishedFAQS_Request)(nil),  // 11: CClanFAQS_GetAllLatestVersionPublishedFAQS_Request
	(*CClanFAQS_GetAllLatestVersionPublishedFAQS_Response)(nil), // 12: CClanFAQS_GetAllLatestVersionPublishedFAQS_Response
	(*CClanFAQS_GetFAQ_Request)(nil),                            // 13: CClanFAQS_GetFAQ_Request
	(*CClanFAQS_GetFAQ_Response)(nil),                           // 14: CClanFAQS_GetFAQ_Response
	(*CClanFAQS_GetFAQVersion_Request)(nil),                     // 15: CClanFAQS_GetFAQVersion_Request
	(*CClanFAQS_GetFAQVersion_Response)(nil),                    // 16: CClanFAQS_GetFAQVersion_Response
	(*CClanFAQS_PreviewDraft_Request)(nil),                      // 17: CClanFAQS_PreviewDraft_Request
	(*CClanFAQS_PreviewDraft_Response)(nil),                     // 18: CClanFAQS_PreviewDraft_Response
	(*CClanFAQS_PublishDraft_Request)(nil),                      // 19: CClanFAQS_PublishDraft_Request
	(*CClanFAQS_PublishDraft_Response)(nil),                     // 20: CClanFAQS_PublishDraft_Response
	(*CClanFAQS_SearchFAQs_Request)(nil),                        // 21: CClanFAQS_SearchFAQs_Request
	(*CClanFAQS_SearchFAQs_Response)(nil),                       // 22: CClanFAQS_SearchFAQs_Response
	(*CClanFAQS_SearchFAQs_Response_CFAQSearchResult)(nil),      // 23: CClanFAQS_SearchFAQs_Response_CFAQSearchResult
	(*CClanFAQS_SetVisibility_Request)(nil),                     // 24: CClanFAQS_SetVisibility_Request
	(*CClanFAQS_SetVisibility_Response)(nil),                    // 25: CClanFAQS_SetVisibility_Response
	(*CClanFAQS_UpdateDraft_Request)(nil),                       // 26: CClanFAQS_UpdateDraft_Request
	(*CClanFAQS_UpdateDraft_Response)(nil),                      // 27: CClanFAQS_UpdateDraft_Response
	(*CClanFAQS_UpdateInternalName_Request)(nil),                // 28: CClanFAQS_UpdateInternalName_Request
	(*CClanFAQS_UpdateInternalName_Response)(nil),               // 29: CClanFAQS_UpdateInternalName_Response
	(*CClanFAQS_UpdateJsonData_Request)(nil),                    // 30: CClanFAQS_UpdateJsonData_Request
	(*CClanFAQS_UpdateJsonData_Response)(nil),                   // 31: CClanFAQS_UpdateJsonData_Response
	(*CClanFAQSummary)(nil),                                     // 32: CClanFAQSummary
	(*CClanFAQSummary_CLanguageInfo)(nil),                       // 33: CClanFAQSummary_CLanguageInfo
}
var file_service_clanfaqs_proto_depIdxs = []int32{
	32, // 0: CClanFAQS_GetAllDrafts_Response.summary:type_name -> CClanFAQSummary
	0,  // 1: CClanFAQS_GetAllDrafts_Response.draft:type_name -> CClanFAQContent
	32, // 2: CClanFAQS_GetAllFAQsForClan_Response.faq:type_name -> CClanFAQSummary
	0,  // 3: CClanFAQS_GetAllLatestVersionPublishedFAQS_Response.faqs:type_name -> CClanFAQContent
	0,  // 4: CClanFAQS_GetFAQ_Response.faq:type_name -> CClanFAQContent
	0,  // 5: CClanFAQS_GetFAQVersion_Response.faq:type_name -> CClanFAQContent
	0,  // 6: CClanFAQS_PreviewDraft_Response.faq:type_name -> CClanFAQContent
	23, // 7: CClanFAQS_SearchFAQs_Response.faqs:type_name -> CClanFAQS_SearchFAQs_Response_CFAQSearchResult
	33, // 8: CClanFAQSummary.per_language_info:type_name -> CClanFAQSummary_CLanguageInfo
	1,  // 9: ClanFAQS.CheckFAQPermissions:input_type -> CClanFAQS_CheckFAQPermissions_Request
	3,  // 10: ClanFAQS.Create:input_type -> CClanFAQS_Create_Request
	5,  // 11: ClanFAQS.Delete:input_type -> CClanFAQS_Delete_Request
	7,  // 12: ClanFAQS.GetAllDrafts:input_type -> CClanFAQS_GetAllDrafts_Request
	9,  // 13: ClanFAQS.GetAllFAQsForClan:input_type -> CClanFAQS_GetAllFAQsForClan_Request
	11, // 14: ClanFAQS.GetAllLatestVersionPublishedFAQS:input_type -> CClanFAQS_GetAllLatestVersionPublishedFAQS_Request
	13, // 15: ClanFAQS.GetFAQ:input_type -> CClanFAQS_GetFAQ_Request
	15, // 16: ClanFAQS.GetFAQVersion:input_type -> CClanFAQS_GetFAQVersion_Request
	17, // 17: ClanFAQS.PreviewDraft:input_type -> CClanFAQS_PreviewDraft_Request
	19, // 18: ClanFAQS.PublishDraft:input_type -> CClanFAQS_PublishDraft_Request
	21, // 19: ClanFAQS.SearchFAQs:input_type -> CClanFAQS_SearchFAQs_Request
	24, // 20: ClanFAQS.SetVisibility:input_type -> CClanFAQS_SetVisibility_Request
	26, // 21: ClanFAQS.UpdateDraft:input_type -> CClanFAQS_UpdateDraft_Request
	28, // 22: ClanFAQS.UpdateInternalName:input_type -> CClanFAQS_UpdateInternalName_Request
	30, // 23: ClanFAQS.UpdateJsonData:input_type -> CClanFAQS_UpdateJsonData_Request
	2,  // 24: ClanFAQS.CheckFAQPermissions:output_type -> CClanFAQS_CheckFAQPermissions_Response
	4,  // 25: ClanFAQS.Create:output_type -> CClanFAQS_Create_Response
	6,  // 26: ClanFAQS.Delete:output_type -> CClanFAQS_Delete_Response
	8,  // 27: ClanFAQS.GetAllDrafts:output_type -> CClanFAQS_GetAllDrafts_Response
	10, // 28: ClanFAQS.GetAllFAQsForClan:output_type -> CClanFAQS_GetAllFAQsForClan_Response
	12, // 29: ClanFAQS.GetAllLatestVersionPublishedFAQS:output_type -> CClanFAQS_GetAllLatestVersionPublishedFAQS_Response
	14, // 30: ClanFAQS.GetFAQ:output_type -> CClanFAQS_GetFAQ_Response
	16, // 31: ClanFAQS.GetFAQVersion:output_type -> CClanFAQS_GetFAQVersion_Response
	18, // 32: ClanFAQS.PreviewDraft:output_type -> CClanFAQS_PreviewDraft_Response
	20, // 33: ClanFAQS.PublishDraft:output_type -> CClanFAQS_PublishDraft_Response
	22, // 34: ClanFAQS.SearchFAQs:output_type -> CClanFAQS_SearchFAQs_Response
	25, // 35: ClanFAQS.SetVisibility:output_type -> CClanFAQS_SetVisibility_Response
	27, // 36: ClanFAQS.UpdateDraft:output_type -> CClanFAQS_UpdateDraft_Response
	29, // 37: ClanFAQS.UpdateInternalName:output_type -> CClanFAQS_UpdateInternalName_Response
	31, // 38: ClanFAQS.UpdateJsonData:output_type -> CClanFAQS_UpdateJsonData_Response
	24, // [24:39] is the sub-list for method output_type
	9,  // [9:24] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_service_clanfaqs_proto_init() }
func file_service_clanfaqs_proto_init() {
	if File_service_clanfaqs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_clanfaqs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_CheckFAQPermissions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_CheckFAQPermissions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_Create_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_Create_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_Delete_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_Delete_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetAllDrafts_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetAllDrafts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetAllFAQsForClan_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetAllFAQsForClan_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetAllLatestVersionPublishedFAQS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetAllLatestVersionPublishedFAQS_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetFAQ_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetFAQ_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetFAQVersion_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_GetFAQVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_PreviewDraft_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_PreviewDraft_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_PublishDraft_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_PublishDraft_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_SearchFAQs_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_SearchFAQs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_SearchFAQs_Response_CFAQSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_SetVisibility_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_SetVisibility_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_UpdateDraft_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_UpdateDraft_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_UpdateInternalName_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_UpdateInternalName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_UpdateJsonData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQS_UpdateJsonData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clanfaqs_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CClanFAQSummary_CLanguageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_clanfaqs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_clanfaqs_proto_goTypes,
		DependencyIndexes: file_service_clanfaqs_proto_depIdxs,
		MessageInfos:      file_service_clanfaqs_proto_msgTypes,
	}.Build()
	File_service_clanfaqs_proto = out.File
	file_service_clanfaqs_proto_rawDesc = nil
	file_service_clanfaqs_proto_goTypes = nil
	file_service_clanfaqs_proto_depIdxs = nil
}
