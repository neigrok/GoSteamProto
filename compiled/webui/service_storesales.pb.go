// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_storesales.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CStore_GetUserVotes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaleAppid *uint32 `protobuf:"varint,1,opt,name=sale_appid,json=saleAppid" json:"sale_appid,omitempty"`
}

func (x *CStore_GetUserVotes_Request) Reset() {
	*x = CStore_GetUserVotes_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetUserVotes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetUserVotes_Request) ProtoMessage() {}

func (x *CStore_GetUserVotes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetUserVotes_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetUserVotes_Request) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{0}
}

func (x *CStore_GetUserVotes_Request) GetSaleAppid() uint32 {
	if x != nil && x.SaleAppid != nil {
		return *x.SaleAppid
	}
	return 0
}

type CStore_GetUserVotes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVotes []*SteamAwardsUserVote `protobuf:"bytes,1,rep,name=user_votes,json=userVotes" json:"user_votes,omitempty"`
}

func (x *CStore_GetUserVotes_Response) Reset() {
	*x = CStore_GetUserVotes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetUserVotes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetUserVotes_Response) ProtoMessage() {}

func (x *CStore_GetUserVotes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetUserVotes_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetUserVotes_Response) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{1}
}

func (x *CStore_GetUserVotes_Response) GetUserVotes() []*SteamAwardsUserVote {
	if x != nil {
		return x.UserVotes
	}
	return nil
}

type CStore_GetVoteDefinitions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language  *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	SaleAppid *uint32 `protobuf:"varint,2,opt,name=sale_appid,json=saleAppid" json:"sale_appid,omitempty"`
}

func (x *CStore_GetVoteDefinitions_Request) Reset() {
	*x = CStore_GetVoteDefinitions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetVoteDefinitions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetVoteDefinitions_Request) ProtoMessage() {}

func (x *CStore_GetVoteDefinitions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetVoteDefinitions_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetVoteDefinitions_Request) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{2}
}

func (x *CStore_GetVoteDefinitions_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CStore_GetVoteDefinitions_Request) GetSaleAppid() uint32 {
	if x != nil && x.SaleAppid != nil {
		return *x.SaleAppid
	}
	return 0
}

type CStore_GetVoteDefinitions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes              []*CStore_VoteDefinition `protobuf:"bytes,1,rep,name=votes" json:"votes,omitempty"`
	LaborOfLoveWinners []uint32                 `protobuf:"varint,2,rep,name=labor_of_love_winners,json=laborOfLoveWinners" json:"labor_of_love_winners,omitempty"`
}

func (x *CStore_GetVoteDefinitions_Response) Reset() {
	*x = CStore_GetVoteDefinitions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetVoteDefinitions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetVoteDefinitions_Response) ProtoMessage() {}

func (x *CStore_GetVoteDefinitions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetVoteDefinitions_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetVoteDefinitions_Response) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{3}
}

func (x *CStore_GetVoteDefinitions_Response) GetVotes() []*CStore_VoteDefinition {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *CStore_GetVoteDefinitions_Response) GetLaborOfLoveWinners() []uint32 {
	if x != nil {
		return x.LaborOfLoveWinners
	}
	return nil
}

type CStore_GetVoteDefinitionsForEvents_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definitions []*CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion `protobuf:"bytes,1,rep,name=definitions" json:"definitions,omitempty"`
}

func (x *CStore_GetVoteDefinitionsForEvents_Response) Reset() {
	*x = CStore_GetVoteDefinitionsForEvents_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetVoteDefinitionsForEvents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetVoteDefinitionsForEvents_Response) ProtoMessage() {}

func (x *CStore_GetVoteDefinitionsForEvents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetVoteDefinitionsForEvents_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetVoteDefinitionsForEvents_Response) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{4}
}

func (x *CStore_GetVoteDefinitionsForEvents_Response) GetDefinitions() []*CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion {
	if x != nil {
		return x.Definitions
	}
	return nil
}

type CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voteid *int32  `protobuf:"varint,1,opt,name=voteid" json:"voteid,omitempty"`
	Appid  *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) Reset() {
	*x = CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) ProtoMessage() {}

func (x *CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion.ProtoReflect.Descriptor instead.
func (*CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{5}
}

func (x *CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) GetVoteid() int32 {
	if x != nil && x.Voteid != nil {
		return *x.Voteid
	}
	return 0
}

func (x *CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CStore_SetVote_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voteid    *int32  `protobuf:"varint,1,opt,name=voteid" json:"voteid,omitempty"`
	Appid     *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	SaleAppid *uint32 `protobuf:"varint,3,opt,name=sale_appid,json=saleAppid" json:"sale_appid,omitempty"`
}

func (x *CStore_SetVote_Request) Reset() {
	*x = CStore_SetVote_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_SetVote_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_SetVote_Request) ProtoMessage() {}

func (x *CStore_SetVote_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_SetVote_Request.ProtoReflect.Descriptor instead.
func (*CStore_SetVote_Request) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{6}
}

func (x *CStore_SetVote_Request) GetVoteid() int32 {
	if x != nil && x.Voteid != nil {
		return *x.Voteid
	}
	return 0
}

func (x *CStore_SetVote_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStore_SetVote_Request) GetSaleAppid() uint32 {
	if x != nil && x.SaleAppid != nil {
		return *x.SaleAppid
	}
	return 0
}

type CStore_SetVote_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVotes []*SteamAwardsUserVote `protobuf:"bytes,1,rep,name=user_votes,json=userVotes" json:"user_votes,omitempty"`
}

func (x *CStore_SetVote_Response) Reset() {
	*x = CStore_SetVote_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_SetVote_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_SetVote_Response) ProtoMessage() {}

func (x *CStore_SetVote_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_SetVote_Response.ProtoReflect.Descriptor instead.
func (*CStore_SetVote_Response) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{7}
}

func (x *CStore_SetVote_Response) GetUserVotes() []*SteamAwardsUserVote {
	if x != nil {
		return x.UserVotes
	}
	return nil
}

type CStore_VoteDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voteid             *int32                                   `protobuf:"varint,1,opt,name=voteid" json:"voteid,omitempty"`
	Active             *bool                                    `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	StartTime          *uint32                                  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime            *uint32                                  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	AppDiscounts       []*CStore_VoteDefinition_AppDefinition   `protobuf:"bytes,5,rep,name=app_discounts,json=appDiscounts" json:"app_discounts,omitempty"`
	GroupedVoteOptions *uint32                                  `protobuf:"varint,6,opt,name=grouped_vote_options,json=groupedVoteOptions" json:"grouped_vote_options,omitempty"`
	Groups             []*CStore_VoteDefinition_GroupDefinition `protobuf:"bytes,7,rep,name=groups" json:"groups,omitempty"`
	InternalName       *string                                  `protobuf:"bytes,8,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	Localization       *CStore_VoteDefinition_Localization      `protobuf:"bytes,9,opt,name=localization" json:"localization,omitempty"`
	RevealTime         *uint32                                  `protobuf:"varint,10,opt,name=reveal_time,json=revealTime" json:"reveal_time,omitempty"`
	ReleaseDateMin     *uint32                                  `protobuf:"varint,11,opt,name=release_date_min,json=releaseDateMin" json:"release_date_min,omitempty"`
	WinnerAppid        *uint32                                  `protobuf:"varint,12,opt,name=winner_appid,json=winnerAppid" json:"winner_appid,omitempty"`
	Flag               *int32                                   `protobuf:"varint,13,opt,name=flag" json:"flag,omitempty"`
	ReleaseDateMax     *uint32                                  `protobuf:"varint,14,opt,name=release_date_max,json=releaseDateMax" json:"release_date_max,omitempty"`
	ItemType           *uint32                                  `protobuf:"varint,15,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
}

func (x *CStore_VoteDefinition) Reset() {
	*x = CStore_VoteDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_VoteDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_VoteDefinition) ProtoMessage() {}

func (x *CStore_VoteDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_VoteDefinition.ProtoReflect.Descriptor instead.
func (*CStore_VoteDefinition) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{8}
}

func (x *CStore_VoteDefinition) GetVoteid() int32 {
	if x != nil && x.Voteid != nil {
		return *x.Voteid
	}
	return 0
}

func (x *CStore_VoteDefinition) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *CStore_VoteDefinition) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CStore_VoteDefinition) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CStore_VoteDefinition) GetAppDiscounts() []*CStore_VoteDefinition_AppDefinition {
	if x != nil {
		return x.AppDiscounts
	}
	return nil
}

func (x *CStore_VoteDefinition) GetGroupedVoteOptions() uint32 {
	if x != nil && x.GroupedVoteOptions != nil {
		return *x.GroupedVoteOptions
	}
	return 0
}

func (x *CStore_VoteDefinition) GetGroups() []*CStore_VoteDefinition_GroupDefinition {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *CStore_VoteDefinition) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *CStore_VoteDefinition) GetLocalization() *CStore_VoteDefinition_Localization {
	if x != nil {
		return x.Localization
	}
	return nil
}

func (x *CStore_VoteDefinition) GetRevealTime() uint32 {
	if x != nil && x.RevealTime != nil {
		return *x.RevealTime
	}
	return 0
}

func (x *CStore_VoteDefinition) GetReleaseDateMin() uint32 {
	if x != nil && x.ReleaseDateMin != nil {
		return *x.ReleaseDateMin
	}
	return 0
}

func (x *CStore_VoteDefinition) GetWinnerAppid() uint32 {
	if x != nil && x.WinnerAppid != nil {
		return *x.WinnerAppid
	}
	return 0
}

func (x *CStore_VoteDefinition) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *CStore_VoteDefinition) GetReleaseDateMax() uint32 {
	if x != nil && x.ReleaseDateMax != nil {
		return *x.ReleaseDateMax
	}
	return 0
}

func (x *CStore_VoteDefinition) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

type CStore_VoteDefinition_AppDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Discount *uint32 `protobuf:"varint,2,opt,name=discount" json:"discount,omitempty"`
}

func (x *CStore_VoteDefinition_AppDefinition) Reset() {
	*x = CStore_VoteDefinition_AppDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_VoteDefinition_AppDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_VoteDefinition_AppDefinition) ProtoMessage() {}

func (x *CStore_VoteDefinition_AppDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_VoteDefinition_AppDefinition.ProtoReflect.Descriptor instead.
func (*CStore_VoteDefinition_AppDefinition) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{9}
}

func (x *CStore_VoteDefinition_AppDefinition) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStore_VoteDefinition_AppDefinition) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

type CStore_VoteDefinition_GroupDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid      *uint32                                `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	GroupName    *string                                `protobuf:"bytes,2,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	AppDiscounts []*CStore_VoteDefinition_AppDefinition `protobuf:"bytes,3,rep,name=app_discounts,json=appDiscounts" json:"app_discounts,omitempty"`
}

func (x *CStore_VoteDefinition_GroupDefinition) Reset() {
	*x = CStore_VoteDefinition_GroupDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_VoteDefinition_GroupDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_VoteDefinition_GroupDefinition) ProtoMessage() {}

func (x *CStore_VoteDefinition_GroupDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_VoteDefinition_GroupDefinition.ProtoReflect.Descriptor instead.
func (*CStore_VoteDefinition_GroupDefinition) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{10}
}

func (x *CStore_VoteDefinition_GroupDefinition) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CStore_VoteDefinition_GroupDefinition) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *CStore_VoteDefinition_GroupDefinition) GetAppDiscounts() []*CStore_VoteDefinition_AppDefinition {
	if x != nil {
		return x.AppDiscounts
	}
	return nil
}

type CStore_VoteDefinition_Localization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TitleLinebreak   *string `protobuf:"bytes,2,opt,name=title_linebreak,json=titleLinebreak" json:"title_linebreak,omitempty"`
	TitleAward       *string `protobuf:"bytes,3,opt,name=title_award,json=titleAward" json:"title_award,omitempty"`
	AwardDescription *string `protobuf:"bytes,4,opt,name=award_description,json=awardDescription" json:"award_description,omitempty"`
}

func (x *CStore_VoteDefinition_Localization) Reset() {
	*x = CStore_VoteDefinition_Localization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_VoteDefinition_Localization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_VoteDefinition_Localization) ProtoMessage() {}

func (x *CStore_VoteDefinition_Localization) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_VoteDefinition_Localization.ProtoReflect.Descriptor instead.
func (*CStore_VoteDefinition_Localization) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{11}
}

func (x *CStore_VoteDefinition_Localization) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CStore_VoteDefinition_Localization) GetTitleLinebreak() string {
	if x != nil && x.TitleLinebreak != nil {
		return *x.TitleLinebreak
	}
	return ""
}

func (x *CStore_VoteDefinition_Localization) GetTitleAward() string {
	if x != nil && x.TitleAward != nil {
		return *x.TitleAward
	}
	return ""
}

func (x *CStore_VoteDefinition_Localization) GetAwardDescription() string {
	if x != nil && x.AwardDescription != nil {
		return *x.AwardDescription
	}
	return ""
}

type SteamAwardsUserVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voteid          *uint32 `protobuf:"varint,1,opt,name=voteid" json:"voteid,omitempty"`
	Appid           *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Communityitemid *uint64 `protobuf:"varint,3,opt,name=communityitemid" json:"communityitemid,omitempty"`
}

func (x *SteamAwardsUserVote) Reset() {
	*x = SteamAwardsUserVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storesales_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamAwardsUserVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamAwardsUserVote) ProtoMessage() {}

func (x *SteamAwardsUserVote) ProtoReflect() protoreflect.Message {
	mi := &file_service_storesales_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamAwardsUserVote.ProtoReflect.Descriptor instead.
func (*SteamAwardsUserVote) Descriptor() ([]byte, []int) {
	return file_service_storesales_proto_rawDescGZIP(), []int{12}
}

func (x *SteamAwardsUserVote) GetVoteid() uint32 {
	if x != nil && x.Voteid != nil {
		return *x.Voteid
	}
	return 0
}

func (x *SteamAwardsUserVote) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *SteamAwardsUserVote) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

var File_service_storesales_proto protoreflect.FileDescriptor

var file_service_storesales_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a,
	0x1b, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x1c, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x5e, 0x0a, 0x21, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x4f, 0x66, 0x4c, 0x6f, 0x76,
	0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x2b, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65,
	0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x3a, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x16, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6f, 0x74, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xff, 0x04, 0x0a, 0x15, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x56,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x23,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x56,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x13, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x6f, 0x74, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x32, 0xd4, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x1a, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x65, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_storesales_proto_rawDescOnce sync.Once
	file_service_storesales_proto_rawDescData = file_service_storesales_proto_rawDesc
)

func file_service_storesales_proto_rawDescGZIP() []byte {
	file_service_storesales_proto_rawDescOnce.Do(func() {
		file_service_storesales_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_storesales_proto_rawDescData)
	})
	return file_service_storesales_proto_rawDescData
}

var file_service_storesales_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_storesales_proto_goTypes = []any{
	(*CStore_GetUserVotes_Request)(nil),                                // 0: CStore_GetUserVotes_Request
	(*CStore_GetUserVotes_Response)(nil),                               // 1: CStore_GetUserVotes_Response
	(*CStore_GetVoteDefinitions_Request)(nil),                          // 2: CStore_GetVoteDefinitions_Request
	(*CStore_GetVoteDefinitions_Response)(nil),                         // 3: CStore_GetVoteDefinitions_Response
	(*CStore_GetVoteDefinitionsForEvents_Response)(nil),                // 4: CStore_GetVoteDefinitionsForEvents_Response
	(*CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion)(nil), // 5: CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion
	(*CStore_SetVote_Request)(nil),                                     // 6: CStore_SetVote_Request
	(*CStore_SetVote_Response)(nil),                                    // 7: CStore_SetVote_Response
	(*CStore_VoteDefinition)(nil),                                      // 8: CStore_VoteDefinition
	(*CStore_VoteDefinition_AppDefinition)(nil),                        // 9: CStore_VoteDefinition_AppDefinition
	(*CStore_VoteDefinition_GroupDefinition)(nil),                      // 10: CStore_VoteDefinition_GroupDefinition
	(*CStore_VoteDefinition_Localization)(nil),                         // 11: CStore_VoteDefinition_Localization
	(*SteamAwardsUserVote)(nil),                                        // 12: SteamAwardsUserVote
	(*NotImplemented)(nil),                                             // 13: NotImplemented
}
var file_service_storesales_proto_depIdxs = []int32{
	12, // 0: CStore_GetUserVotes_Response.user_votes:type_name -> SteamAwardsUserVote
	8,  // 1: CStore_GetVoteDefinitions_Response.votes:type_name -> CStore_VoteDefinition
	5,  // 2: CStore_GetVoteDefinitionsForEvents_Response.definitions:type_name -> CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion
	12, // 3: CStore_SetVote_Response.user_votes:type_name -> SteamAwardsUserVote
	9,  // 4: CStore_VoteDefinition.app_discounts:type_name -> CStore_VoteDefinition_AppDefinition
	10, // 5: CStore_VoteDefinition.groups:type_name -> CStore_VoteDefinition_GroupDefinition
	11, // 6: CStore_VoteDefinition.localization:type_name -> CStore_VoteDefinition_Localization
	9,  // 7: CStore_VoteDefinition_GroupDefinition.app_discounts:type_name -> CStore_VoteDefinition_AppDefinition
	0,  // 8: StoreSales.GetUserVotes:input_type -> CStore_GetUserVotes_Request
	2,  // 9: StoreSales.GetVoteDefinitions:input_type -> CStore_GetVoteDefinitions_Request
	13, // 10: StoreSales.GetVoteDefinitionsForEvents:input_type -> NotImplemented
	6,  // 11: StoreSales.SetVote:input_type -> CStore_SetVote_Request
	1,  // 12: StoreSales.GetUserVotes:output_type -> CStore_GetUserVotes_Response
	3,  // 13: StoreSales.GetVoteDefinitions:output_type -> CStore_GetVoteDefinitions_Response
	4,  // 14: StoreSales.GetVoteDefinitionsForEvents:output_type -> CStore_GetVoteDefinitionsForEvents_Response
	7,  // 15: StoreSales.SetVote:output_type -> CStore_SetVote_Response
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_service_storesales_proto_init() }
func file_service_storesales_proto_init() {
	if File_service_storesales_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_storesales_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_GetUserVotes_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_GetUserVotes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_GetVoteDefinitions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_GetVoteDefinitions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_GetVoteDefinitionsForEvents_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_GetVoteDefinitionsForEvents_Response_Vote_Defintion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_SetVote_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_SetVote_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_VoteDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_VoteDefinition_AppDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_VoteDefinition_GroupDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CStore_VoteDefinition_Localization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storesales_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SteamAwardsUserVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_storesales_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_storesales_proto_goTypes,
		DependencyIndexes: file_service_storesales_proto_depIdxs,
		MessageInfos:      file_service_storesales_proto_msgTypes,
	}.Build()
	File_service_storesales_proto = out.File
	file_service_storesales_proto_rawDesc = nil
	file_service_storesales_proto_goTypes = nil
	file_service_storesales_proto_depIdxs = nil
}
