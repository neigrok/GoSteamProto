// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_cloud.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCloud_AppCloudStateChange_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	AppChangeNumber *uint64 `protobuf:"varint,2,opt,name=app_change_number,json=appChangeNumber" json:"app_change_number,omitempty"`
}

func (x *CCloud_AppCloudStateChange_Notification) Reset() {
	*x = CCloud_AppCloudStateChange_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_AppCloudStateChange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_AppCloudStateChange_Notification) ProtoMessage() {}

func (x *CCloud_AppCloudStateChange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_AppCloudStateChange_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_AppCloudStateChange_Notification) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *CCloud_AppCloudStateChange_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_AppCloudStateChange_Notification) GetAppChangeNumber() uint64 {
	if x != nil && x.AppChangeNumber != nil {
		return *x.AppChangeNumber
	}
	return 0
}

type CCloud_AppFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName         *string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	ShaFile          []byte  `protobuf:"bytes,2,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64 `protobuf:"varint,3,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	RawFileSize      *uint32 `protobuf:"varint,4,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	PersistState     *int32  `protobuf:"varint,5,opt,name=persist_state,json=persistState" json:"persist_state,omitempty"`
	PlatformsToSync  *uint32 `protobuf:"varint,6,opt,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	PathPrefixIndex  *uint32 `protobuf:"varint,7,opt,name=path_prefix_index,json=pathPrefixIndex" json:"path_prefix_index,omitempty"`
	MachineNameIndex *uint32 `protobuf:"varint,8,opt,name=machine_name_index,json=machineNameIndex" json:"machine_name_index,omitempty"`
}

func (x *CCloud_AppFileInfo) Reset() {
	*x = CCloud_AppFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_AppFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_AppFileInfo) ProtoMessage() {}

func (x *CCloud_AppFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_AppFileInfo.ProtoReflect.Descriptor instead.
func (*CCloud_AppFileInfo) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *CCloud_AppFileInfo) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CCloud_AppFileInfo) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CCloud_AppFileInfo) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CCloud_AppFileInfo) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CCloud_AppFileInfo) GetPersistState() int32 {
	if x != nil && x.PersistState != nil {
		return *x.PersistState
	}
	return 0
}

func (x *CCloud_AppFileInfo) GetPlatformsToSync() uint32 {
	if x != nil && x.PlatformsToSync != nil {
		return *x.PlatformsToSync
	}
	return 0
}

func (x *CCloud_AppFileInfo) GetPathPrefixIndex() uint32 {
	if x != nil && x.PathPrefixIndex != nil {
		return *x.PathPrefixIndex
	}
	return 0
}

func (x *CCloud_AppFileInfo) GetMachineNameIndex() uint32 {
	if x != nil && x.MachineNameIndex != nil {
		return *x.MachineNameIndex
	}
	return 0
}

type CCloud_AppLaunchIntent_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingRemoteOperations []*CCloud_PendingRemoteOperation `protobuf:"bytes,1,rep,name=pending_remote_operations,json=pendingRemoteOperations" json:"pending_remote_operations,omitempty"`
}

func (x *CCloud_AppLaunchIntent_Response) Reset() {
	*x = CCloud_AppLaunchIntent_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_AppLaunchIntent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_AppLaunchIntent_Response) ProtoMessage() {}

func (x *CCloud_AppLaunchIntent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_AppLaunchIntent_Response.ProtoReflect.Descriptor instead.
func (*CCloud_AppLaunchIntent_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *CCloud_AppLaunchIntent_Response) GetPendingRemoteOperations() []*CCloud_PendingRemoteOperation {
	if x != nil {
		return x.PendingRemoteOperations
	}
	return nil
}

type CCloud_AppSessionResume_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_AppSessionResume_Response) Reset() {
	*x = CCloud_AppSessionResume_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_AppSessionResume_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_AppSessionResume_Response) ProtoMessage() {}

func (x *CCloud_AppSessionResume_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_AppSessionResume_Response.ProtoReflect.Descriptor instead.
func (*CCloud_AppSessionResume_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{3}
}

type CCloud_AppSessionSuspend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_AppSessionSuspend_Response) Reset() {
	*x = CCloud_AppSessionSuspend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_AppSessionSuspend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_AppSessionSuspend_Response) ProtoMessage() {}

func (x *CCloud_AppSessionSuspend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_AppSessionSuspend_Response.ProtoReflect.Descriptor instead.
func (*CCloud_AppSessionSuspend_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{4}
}

type CCloud_BeginAppUploadBatch_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId         *uint64 `protobuf:"varint,1,opt,name=batch_id,json=batchId" json:"batch_id,omitempty"`
	AppChangeNumber *uint64 `protobuf:"varint,4,opt,name=app_change_number,json=appChangeNumber" json:"app_change_number,omitempty"`
}

func (x *CCloud_BeginAppUploadBatch_Response) Reset() {
	*x = CCloud_BeginAppUploadBatch_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginAppUploadBatch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginAppUploadBatch_Response) ProtoMessage() {}

func (x *CCloud_BeginAppUploadBatch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginAppUploadBatch_Response.ProtoReflect.Descriptor instead.
func (*CCloud_BeginAppUploadBatch_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{5}
}

func (x *CCloud_BeginAppUploadBatch_Response) GetBatchId() uint64 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *CCloud_BeginAppUploadBatch_Response) GetAppChangeNumber() uint64 {
	if x != nil && x.AppChangeNumber != nil {
		return *x.AppChangeNumber
	}
	return 0
}

type CCloud_BeginHTTPUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ugcid          *uint64                                        `protobuf:"fixed64,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Timestamp      *uint32                                        `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	UrlHost        *string                                        `protobuf:"bytes,3,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath        *string                                        `protobuf:"bytes,4,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps       *bool                                          `protobuf:"varint,5,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders []*CCloud_BeginHTTPUpload_Response_HTTPHeaders `protobuf:"bytes,6,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
}

func (x *CCloud_BeginHTTPUpload_Response) Reset() {
	*x = CCloud_BeginHTTPUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginHTTPUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Response) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{6}
}

func (x *CCloud_BeginHTTPUpload_Response) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Response) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_BeginHTTPUpload_Response) GetRequestHeaders() []*CCloud_BeginHTTPUpload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) Reset() {
	*x = CCloud_BeginHTTPUpload_Response_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{7}
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_BeginUGCUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageSystem  *int32                                        `protobuf:"varint,1,opt,name=storage_system,json=storageSystem" json:"storage_system,omitempty"`
	Ugcid          *uint64                                       `protobuf:"fixed64,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Timestamp      *uint32                                       `protobuf:"fixed32,3,opt,name=timestamp" json:"timestamp,omitempty"`
	UrlHost        *string                                       `protobuf:"bytes,4,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath        *string                                       `protobuf:"bytes,5,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps       *bool                                         `protobuf:"varint,6,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders []*CCloud_BeginUGCUpload_Response_HTTPHeaders `protobuf:"bytes,7,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
}

func (x *CCloud_BeginUGCUpload_Response) Reset() {
	*x = CCloud_BeginUGCUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginUGCUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginUGCUpload_Response) ProtoMessage() {}

func (x *CCloud_BeginUGCUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginUGCUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_BeginUGCUpload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{8}
}

func (x *CCloud_BeginUGCUpload_Response) GetStorageSystem() int32 {
	if x != nil && x.StorageSystem != nil {
		return *x.StorageSystem
	}
	return 0
}

func (x *CCloud_BeginUGCUpload_Response) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_BeginUGCUpload_Response) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_BeginUGCUpload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_BeginUGCUpload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_BeginUGCUpload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_BeginUGCUpload_Response) GetRequestHeaders() []*CCloud_BeginUGCUpload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

type CCloud_BeginUGCUpload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCloud_BeginUGCUpload_Response_HTTPHeaders) Reset() {
	*x = CCloud_BeginUGCUpload_Response_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginUGCUpload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginUGCUpload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_BeginUGCUpload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginUGCUpload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_BeginUGCUpload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{9}
}

func (x *CCloud_BeginUGCUpload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_BeginUGCUpload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_ClientBeginFileUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptFile   *bool                                `protobuf:"varint,1,opt,name=encrypt_file,json=encryptFile" json:"encrypt_file,omitempty"`
	BlockRequests []*ClientCloudFileUploadBlockDetails `protobuf:"bytes,2,rep,name=block_requests,json=blockRequests" json:"block_requests,omitempty"`
}

func (x *CCloud_ClientBeginFileUpload_Response) Reset() {
	*x = CCloud_ClientBeginFileUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientBeginFileUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientBeginFileUpload_Response) ProtoMessage() {}

func (x *CCloud_ClientBeginFileUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientBeginFileUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientBeginFileUpload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{10}
}

func (x *CCloud_ClientBeginFileUpload_Response) GetEncryptFile() bool {
	if x != nil && x.EncryptFile != nil {
		return *x.EncryptFile
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Response) GetBlockRequests() []*ClientCloudFileUploadBlockDetails {
	if x != nil {
		return x.BlockRequests
	}
	return nil
}

type CCloud_ClientCommitFileUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCommitted *bool `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
}

func (x *CCloud_ClientCommitFileUpload_Response) Reset() {
	*x = CCloud_ClientCommitFileUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientCommitFileUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientCommitFileUpload_Response) ProtoMessage() {}

func (x *CCloud_ClientCommitFileUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientCommitFileUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientCommitFileUpload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{11}
}

func (x *CCloud_ClientCommitFileUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_ClientDeleteFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_ClientDeleteFile_Response) Reset() {
	*x = CCloud_ClientDeleteFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientDeleteFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientDeleteFile_Response) ProtoMessage() {}

func (x *CCloud_ClientDeleteFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientDeleteFile_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientDeleteFile_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{12}
}

type CCloud_ClientFileDownload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32                                           `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize         *uint32                                           `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize      *uint32                                           `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	ShaFile          []byte                                            `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64                                           `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	IsExplicitDelete *bool                                             `protobuf:"varint,6,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	UrlHost          *string                                           `protobuf:"bytes,7,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                           `protobuf:"bytes,8,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                             `protobuf:"varint,9,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders   []*CCloud_ClientFileDownload_Response_HTTPHeaders `protobuf:"bytes,10,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	Encrypted        *bool                                             `protobuf:"varint,11,opt,name=encrypted" json:"encrypted,omitempty"`
}

func (x *CCloud_ClientFileDownload_Response) Reset() {
	*x = CCloud_ClientFileDownload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientFileDownload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Response) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{13}
}

func (x *CCloud_ClientFileDownload_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CCloud_ClientFileDownload_Response) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

func (x *CCloud_ClientFileDownload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_ClientFileDownload_Response) GetRequestHeaders() []*CCloud_ClientFileDownload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *CCloud_ClientFileDownload_Response) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

type CCloud_ClientFileDownload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) Reset() {
	*x = CCloud_ClientFileDownload_Response_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{14}
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_ClientGetAppQuotaUsage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingFiles *uint32 `protobuf:"varint,1,opt,name=existing_files,json=existingFiles" json:"existing_files,omitempty"`
	ExistingBytes *uint64 `protobuf:"varint,2,opt,name=existing_bytes,json=existingBytes" json:"existing_bytes,omitempty"`
	MaxNumFiles   *uint32 `protobuf:"varint,3,opt,name=max_num_files,json=maxNumFiles" json:"max_num_files,omitempty"`
	MaxNumBytes   *uint64 `protobuf:"varint,4,opt,name=max_num_bytes,json=maxNumBytes" json:"max_num_bytes,omitempty"`
}

func (x *CCloud_ClientGetAppQuotaUsage_Response) Reset() {
	*x = CCloud_ClientGetAppQuotaUsage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientGetAppQuotaUsage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientGetAppQuotaUsage_Response) ProtoMessage() {}

func (x *CCloud_ClientGetAppQuotaUsage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientGetAppQuotaUsage_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientGetAppQuotaUsage_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{15}
}

func (x *CCloud_ClientGetAppQuotaUsage_Response) GetExistingFiles() uint32 {
	if x != nil && x.ExistingFiles != nil {
		return *x.ExistingFiles
	}
	return 0
}

func (x *CCloud_ClientGetAppQuotaUsage_Response) GetExistingBytes() uint64 {
	if x != nil && x.ExistingBytes != nil {
		return *x.ExistingBytes
	}
	return 0
}

func (x *CCloud_ClientGetAppQuotaUsage_Response) GetMaxNumFiles() uint32 {
	if x != nil && x.MaxNumFiles != nil {
		return *x.MaxNumFiles
	}
	return 0
}

func (x *CCloud_ClientGetAppQuotaUsage_Response) GetMaxNumBytes() uint64 {
	if x != nil && x.MaxNumBytes != nil {
		return *x.MaxNumBytes
	}
	return 0
}

type CCloud_ClientLogUploadRequest_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (x *CCloud_ClientLogUploadRequest_Notification) Reset() {
	*x = CCloud_ClientLogUploadRequest_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientLogUploadRequest_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientLogUploadRequest_Notification) ProtoMessage() {}

func (x *CCloud_ClientLogUploadRequest_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientLogUploadRequest_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_ClientLogUploadRequest_Notification) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{16}
}

func (x *CCloud_ClientLogUploadRequest_Notification) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CCloud_CommitHTTPUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCommitted *bool `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
}

func (x *CCloud_CommitHTTPUpload_Response) Reset() {
	*x = CCloud_CommitHTTPUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_CommitHTTPUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CommitHTTPUpload_Response) ProtoMessage() {}

func (x *CCloud_CommitHTTPUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CommitHTTPUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_CommitHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{17}
}

func (x *CCloud_CommitHTTPUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_CommitUGCUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCommitted *bool `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
}

func (x *CCloud_CommitUGCUpload_Response) Reset() {
	*x = CCloud_CommitUGCUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_CommitUGCUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CommitUGCUpload_Response) ProtoMessage() {}

func (x *CCloud_CommitUGCUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CommitUGCUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_CommitUGCUpload_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{18}
}

func (x *CCloud_CommitUGCUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_CompleteAppUploadBatch_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_CompleteAppUploadBatch_Response) Reset() {
	*x = CCloud_CompleteAppUploadBatch_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_CompleteAppUploadBatch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CompleteAppUploadBatch_Response) ProtoMessage() {}

func (x *CCloud_CompleteAppUploadBatch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CompleteAppUploadBatch_Response.ProtoReflect.Descriptor instead.
func (*CCloud_CompleteAppUploadBatch_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{19}
}

type CCloud_Delete_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_Delete_Response) Reset() {
	*x = CCloud_Delete_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_Delete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Response) ProtoMessage() {}

func (x *CCloud_Delete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Response.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{20}
}

type CCloud_EnumerateUserApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*CCloud_EnumerateUserApps_Response_Apps `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (x *CCloud_EnumerateUserApps_Response) Reset() {
	*x = CCloud_EnumerateUserApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{21}
}

func (x *CCloud_EnumerateUserApps_Response) GetApps() []*CCloud_EnumerateUserApps_Response_Apps {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCloud_EnumerateUserApps_Response_Apps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Totalcount *int32  `protobuf:"varint,2,opt,name=totalcount" json:"totalcount,omitempty"`
	Totalsize  *int64  `protobuf:"varint,3,opt,name=totalsize" json:"totalsize,omitempty"`
}

func (x *CCloud_EnumerateUserApps_Response_Apps) Reset() {
	*x = CCloud_EnumerateUserApps_Response_Apps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserApps_Response_Apps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Response_Apps) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Response_Apps) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Response_Apps.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Response_Apps) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{22}
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetTotalcount() int32 {
	if x != nil && x.Totalcount != nil {
		return *x.Totalcount
	}
	return 0
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetTotalsize() int64 {
	if x != nil && x.Totalsize != nil {
		return *x.Totalsize
	}
	return 0
}

type CCloud_EnumerateUserFiles_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*CCloud_UserFile `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	TotalFiles *uint32            `protobuf:"varint,2,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
}

func (x *CCloud_EnumerateUserFiles_Response) Reset() {
	*x = CCloud_EnumerateUserFiles_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{23}
}

func (x *CCloud_EnumerateUserFiles_Response) GetFiles() []*CCloud_UserFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CCloud_EnumerateUserFiles_Response) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

type CCloud_GetAppFileChangelist_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChangeNumber *uint64               `protobuf:"varint,1,opt,name=current_change_number,json=currentChangeNumber" json:"current_change_number,omitempty"`
	Files               []*CCloud_AppFileInfo `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
	IsOnlyDelta         *bool                 `protobuf:"varint,3,opt,name=is_only_delta,json=isOnlyDelta" json:"is_only_delta,omitempty"`
	PathPrefixes        []string              `protobuf:"bytes,4,rep,name=path_prefixes,json=pathPrefixes" json:"path_prefixes,omitempty"`
	MachineNames        []string              `protobuf:"bytes,5,rep,name=machine_names,json=machineNames" json:"machine_names,omitempty"`
	AppBuildidHwm       *uint64               `protobuf:"varint,6,opt,name=app_buildid_hwm,json=appBuildidHwm" json:"app_buildid_hwm,omitempty"`
}

func (x *CCloud_GetAppFileChangelist_Response) Reset() {
	*x = CCloud_GetAppFileChangelist_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetAppFileChangelist_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetAppFileChangelist_Response) ProtoMessage() {}

func (x *CCloud_GetAppFileChangelist_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetAppFileChangelist_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetAppFileChangelist_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{24}
}

func (x *CCloud_GetAppFileChangelist_Response) GetCurrentChangeNumber() uint64 {
	if x != nil && x.CurrentChangeNumber != nil {
		return *x.CurrentChangeNumber
	}
	return 0
}

func (x *CCloud_GetAppFileChangelist_Response) GetFiles() []*CCloud_AppFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CCloud_GetAppFileChangelist_Response) GetIsOnlyDelta() bool {
	if x != nil && x.IsOnlyDelta != nil {
		return *x.IsOnlyDelta
	}
	return false
}

func (x *CCloud_GetAppFileChangelist_Response) GetPathPrefixes() []string {
	if x != nil {
		return x.PathPrefixes
	}
	return nil
}

func (x *CCloud_GetAppFileChangelist_Response) GetMachineNames() []string {
	if x != nil {
		return x.MachineNames
	}
	return nil
}

func (x *CCloud_GetAppFileChangelist_Response) GetAppBuildidHwm() uint64 {
	if x != nil && x.AppBuildidHwm != nil {
		return *x.AppBuildidHwm
	}
	return 0
}

type CCloud_GetClientEncryptionKey_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Crc *int32 `protobuf:"varint,2,opt,name=crc" json:"crc,omitempty"`
}

func (x *CCloud_GetClientEncryptionKey_Response) Reset() {
	*x = CCloud_GetClientEncryptionKey_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetClientEncryptionKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetClientEncryptionKey_Response) ProtoMessage() {}

func (x *CCloud_GetClientEncryptionKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetClientEncryptionKey_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetClientEncryptionKey_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{25}
}

func (x *CCloud_GetClientEncryptionKey_Response) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CCloud_GetClientEncryptionKey_Response) GetCrc() int32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

type CCloud_GetFileDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *CCloud_UserFile `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
}

func (x *CCloud_GetFileDetails_Response) Reset() {
	*x = CCloud_GetFileDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetFileDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Response) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{26}
}

func (x *CCloud_GetFileDetails_Response) GetDetails() *CCloud_UserFile {
	if x != nil {
		return x.Details
	}
	return nil
}

type CCloud_GetUploadServerInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl *string `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
}

func (x *CCloud_GetUploadServerInfo_Response) Reset() {
	*x = CCloud_GetUploadServerInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetUploadServerInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Response) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Response) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{27}
}

func (x *CCloud_GetUploadServerInfo_Response) GetServerUrl() string {
	if x != nil && x.ServerUrl != nil {
		return *x.ServerUrl
	}
	return ""
}

type CCloud_UserFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Ugcid           *uint64  `protobuf:"varint,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Filename        *string  `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Timestamp       *uint64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	FileSize        *uint32  `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Url             *string  `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	SteamidCreator  *uint64  `protobuf:"fixed64,7,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	Flags           *uint32  `protobuf:"varint,8,opt,name=flags" json:"flags,omitempty"`
	PlatformsToSync []string `protobuf:"bytes,9,rep,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	FileSha         *string  `protobuf:"bytes,10,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
}

func (x *CCloud_UserFile) Reset() {
	*x = CCloud_UserFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_UserFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_UserFile) ProtoMessage() {}

func (x *CCloud_UserFile) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_UserFile.ProtoReflect.Descriptor instead.
func (*CCloud_UserFile) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{28}
}

func (x *CCloud_UserFile) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_UserFile) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_UserFile) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_UserFile) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_UserFile) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_UserFile) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CCloud_UserFile) GetSteamidCreator() uint64 {
	if x != nil && x.SteamidCreator != nil {
		return *x.SteamidCreator
	}
	return 0
}

func (x *CCloud_UserFile) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CCloud_UserFile) GetPlatformsToSync() []string {
	if x != nil {
		return x.PlatformsToSync
	}
	return nil
}

func (x *CCloud_UserFile) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

type ClientCloudFileUploadBlockDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlHost          *string                                          `protobuf:"bytes,1,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                          `protobuf:"bytes,2,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                            `protobuf:"varint,3,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	HttpMethod       *int32                                           `protobuf:"varint,4,opt,name=http_method,json=httpMethod" json:"http_method,omitempty"`
	RequestHeaders   []*ClientCloudFileUploadBlockDetails_HTTPHeaders `protobuf:"bytes,5,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	BlockOffset      *uint64                                          `protobuf:"varint,6,opt,name=block_offset,json=blockOffset" json:"block_offset,omitempty"`
	BlockLength      *uint32                                          `protobuf:"varint,7,opt,name=block_length,json=blockLength" json:"block_length,omitempty"`
	ExplicitBodyData []byte                                           `protobuf:"bytes,8,opt,name=explicit_body_data,json=explicitBodyData" json:"explicit_body_data,omitempty"`
	MayParallelize   *bool                                            `protobuf:"varint,9,opt,name=may_parallelize,json=mayParallelize" json:"may_parallelize,omitempty"`
}

func (x *ClientCloudFileUploadBlockDetails) Reset() {
	*x = ClientCloudFileUploadBlockDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCloudFileUploadBlockDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloudFileUploadBlockDetails) ProtoMessage() {}

func (x *ClientCloudFileUploadBlockDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloudFileUploadBlockDetails.ProtoReflect.Descriptor instead.
func (*ClientCloudFileUploadBlockDetails) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{29}
}

func (x *ClientCloudFileUploadBlockDetails) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *ClientCloudFileUploadBlockDetails) GetHttpMethod() int32 {
	if x != nil && x.HttpMethod != nil {
		return *x.HttpMethod
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetRequestHeaders() []*ClientCloudFileUploadBlockDetails_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ClientCloudFileUploadBlockDetails) GetBlockOffset() uint64 {
	if x != nil && x.BlockOffset != nil {
		return *x.BlockOffset
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetBlockLength() uint32 {
	if x != nil && x.BlockLength != nil {
		return *x.BlockLength
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetExplicitBodyData() []byte {
	if x != nil {
		return x.ExplicitBodyData
	}
	return nil
}

func (x *ClientCloudFileUploadBlockDetails) GetMayParallelize() bool {
	if x != nil && x.MayParallelize != nil {
		return *x.MayParallelize
	}
	return false
}

type ClientCloudFileUploadBlockDetails_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) Reset() {
	*x = ClientCloudFileUploadBlockDetails_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_cloud_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoMessage() {}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_service_cloud_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloudFileUploadBlockDetails_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_service_cloud_proto_rawDescGZIP(), []int{30}
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_service_cloud_proto protoreflect.FileDescriptor

var file_service_cloud_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x27, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41,
	0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5,
	0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x74,
	0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7d, 0x0a, 0x1f, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a,
	0x21, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6c, 0x0a, 0x23, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xff, 0x01, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x57, 0x0a, 0x2b, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x1e,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x55, 0x47, 0x43, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x75, 0x67, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x55, 0x47,
	0x43, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x2a,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x55, 0x47, 0x43, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x26,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x22, 0x0a,
	0x20, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xae, 0x03, 0x0a, 0x22, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x22, 0x5a, 0x0a, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe,
	0x01, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x4b, 0x0a, 0x2a, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x20,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x47, 0x43, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x21, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x70,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x70, 0x70,
	0x73, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0x7c, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x70, 0x70,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x6d, 0x0a, 0x22, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x24, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x5f, 0x68, 0x77, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x48,
	0x77, 0x6d, 0x22, 0x4c, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x72, 0x63,
	0x22, 0x4c, 0x0a, 0x1e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x44,
	0x0a, 0x23, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x22, 0xac, 0x02, 0x0a, 0x0f, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75,
	0x67, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x68, 0x61, 0x22, 0x8d, 0x03, 0x0a, 0x21, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x57, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61,
	0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x69, 0x7a, 0x65, 0x22, 0x59, 0x0a, 0x2d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xb7,
	0x0f, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x24, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48,
	0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x20, 0x2e, 0x43, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x55, 0x47, 0x43, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f,
	0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a,
	0x1f, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x55, 0x47,
	0x43, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x43, 0x44, 0x4e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x27, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x21, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x23, 0x2e, 0x43, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x27, 0x2e, 0x43, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0f, 0x2e, 0x4e, 0x6f,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x21, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x55, 0x47, 0x43, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x20,
	0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x47,
	0x43, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x27, 0x2e, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f,
	0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a,
	0x17, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x12, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x22,
	0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x23, 0x2e, 0x43, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x1d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x25, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x27, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x1a, 0x1f, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x24, 0x2e,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x21, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x45, 0x78, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x6f, 0x6e, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x20, 0x2e, 0x43,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x1a, 0x22, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb0, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x41, 0x70,
	0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_cloud_proto_rawDescOnce sync.Once
	file_service_cloud_proto_rawDescData = file_service_cloud_proto_rawDesc
)

func file_service_cloud_proto_rawDescGZIP() []byte {
	file_service_cloud_proto_rawDescOnce.Do(func() {
		file_service_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_cloud_proto_rawDescData)
	})
	return file_service_cloud_proto_rawDescData
}

var file_service_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_service_cloud_proto_goTypes = []any{
	(*CCloud_AppCloudStateChange_Notification)(nil),        // 0: CCloud_AppCloudStateChange_Notification
	(*CCloud_AppFileInfo)(nil),                             // 1: CCloud_AppFileInfo
	(*CCloud_AppLaunchIntent_Response)(nil),                // 2: CCloud_AppLaunchIntent_Response
	(*CCloud_AppSessionResume_Response)(nil),               // 3: CCloud_AppSessionResume_Response
	(*CCloud_AppSessionSuspend_Response)(nil),              // 4: CCloud_AppSessionSuspend_Response
	(*CCloud_BeginAppUploadBatch_Response)(nil),            // 5: CCloud_BeginAppUploadBatch_Response
	(*CCloud_BeginHTTPUpload_Response)(nil),                // 6: CCloud_BeginHTTPUpload_Response
	(*CCloud_BeginHTTPUpload_Response_HTTPHeaders)(nil),    // 7: CCloud_BeginHTTPUpload_Response_HTTPHeaders
	(*CCloud_BeginUGCUpload_Response)(nil),                 // 8: CCloud_BeginUGCUpload_Response
	(*CCloud_BeginUGCUpload_Response_HTTPHeaders)(nil),     // 9: CCloud_BeginUGCUpload_Response_HTTPHeaders
	(*CCloud_ClientBeginFileUpload_Response)(nil),          // 10: CCloud_ClientBeginFileUpload_Response
	(*CCloud_ClientCommitFileUpload_Response)(nil),         // 11: CCloud_ClientCommitFileUpload_Response
	(*CCloud_ClientDeleteFile_Response)(nil),               // 12: CCloud_ClientDeleteFile_Response
	(*CCloud_ClientFileDownload_Response)(nil),             // 13: CCloud_ClientFileDownload_Response
	(*CCloud_ClientFileDownload_Response_HTTPHeaders)(nil), // 14: CCloud_ClientFileDownload_Response_HTTPHeaders
	(*CCloud_ClientGetAppQuotaUsage_Response)(nil),         // 15: CCloud_ClientGetAppQuotaUsage_Response
	(*CCloud_ClientLogUploadRequest_Notification)(nil),     // 16: CCloud_ClientLogUploadRequest_Notification
	(*CCloud_CommitHTTPUpload_Response)(nil),               // 17: CCloud_CommitHTTPUpload_Response
	(*CCloud_CommitUGCUpload_Response)(nil),                // 18: CCloud_CommitUGCUpload_Response
	(*CCloud_CompleteAppUploadBatch_Response)(nil),         // 19: CCloud_CompleteAppUploadBatch_Response
	(*CCloud_Delete_Response)(nil),                         // 20: CCloud_Delete_Response
	(*CCloud_EnumerateUserApps_Response)(nil),              // 21: CCloud_EnumerateUserApps_Response
	(*CCloud_EnumerateUserApps_Response_Apps)(nil),         // 22: CCloud_EnumerateUserApps_Response_Apps
	(*CCloud_EnumerateUserFiles_Response)(nil),             // 23: CCloud_EnumerateUserFiles_Response
	(*CCloud_GetAppFileChangelist_Response)(nil),           // 24: CCloud_GetAppFileChangelist_Response
	(*CCloud_GetClientEncryptionKey_Response)(nil),         // 25: CCloud_GetClientEncryptionKey_Response
	(*CCloud_GetFileDetails_Response)(nil),                 // 26: CCloud_GetFileDetails_Response
	(*CCloud_GetUploadServerInfo_Response)(nil),            // 27: CCloud_GetUploadServerInfo_Response
	(*CCloud_UserFile)(nil),                                // 28: CCloud_UserFile
	(*ClientCloudFileUploadBlockDetails)(nil),              // 29: ClientCloudFileUploadBlockDetails
	(*ClientCloudFileUploadBlockDetails_HTTPHeaders)(nil),  // 30: ClientCloudFileUploadBlockDetails_HTTPHeaders
	(*CCloud_PendingRemoteOperation)(nil),                  // 31: CCloud_PendingRemoteOperation
	(*NotImplemented)(nil),                                 // 32: NotImplemented
	(*NoResponse)(nil),                                     // 33: NoResponse
}
var file_service_cloud_proto_depIdxs = []int32{
	31, // 0: CCloud_AppLaunchIntent_Response.pending_remote_operations:type_name -> CCloud_PendingRemoteOperation
	7,  // 1: CCloud_BeginHTTPUpload_Response.request_headers:type_name -> CCloud_BeginHTTPUpload_Response_HTTPHeaders
	9,  // 2: CCloud_BeginUGCUpload_Response.request_headers:type_name -> CCloud_BeginUGCUpload_Response_HTTPHeaders
	29, // 3: CCloud_ClientBeginFileUpload_Response.block_requests:type_name -> ClientCloudFileUploadBlockDetails
	14, // 4: CCloud_ClientFileDownload_Response.request_headers:type_name -> CCloud_ClientFileDownload_Response_HTTPHeaders
	22, // 5: CCloud_EnumerateUserApps_Response.apps:type_name -> CCloud_EnumerateUserApps_Response_Apps
	28, // 6: CCloud_EnumerateUserFiles_Response.files:type_name -> CCloud_UserFile
	1,  // 7: CCloud_GetAppFileChangelist_Response.files:type_name -> CCloud_AppFileInfo
	28, // 8: CCloud_GetFileDetails_Response.details:type_name -> CCloud_UserFile
	30, // 9: ClientCloudFileUploadBlockDetails.request_headers:type_name -> ClientCloudFileUploadBlockDetails_HTTPHeaders
	32, // 10: Cloud.BeginAppUploadBatch:input_type -> NotImplemented
	32, // 11: Cloud.BeginHTTPUpload:input_type -> NotImplemented
	32, // 12: Cloud.BeginUGCUpload:input_type -> NotImplemented
	32, // 13: Cloud.CDNReport:input_type -> NotImplemented
	32, // 14: Cloud.ClientBeginFileUpload:input_type -> NotImplemented
	32, // 15: Cloud.ClientCommitFileUpload:input_type -> NotImplemented
	32, // 16: Cloud.ClientConflictResolution:input_type -> NotImplemented
	32, // 17: Cloud.ClientDeleteFile:input_type -> NotImplemented
	32, // 18: Cloud.ClientFileDownload:input_type -> NotImplemented
	32, // 19: Cloud.ClientGetAppQuotaUsage:input_type -> NotImplemented
	32, // 20: Cloud.ClientLogUploadCheck:input_type -> NotImplemented
	32, // 21: Cloud.ClientLogUploadComplete:input_type -> NotImplemented
	32, // 22: Cloud.CommitHTTPUpload:input_type -> NotImplemented
	32, // 23: Cloud.CommitUGCUpload:input_type -> NotImplemented
	32, // 24: Cloud.CompleteAppUploadBatch:input_type -> NotImplemented
	32, // 25: Cloud.CompleteAppUploadBatchBlocking:input_type -> NotImplemented
	32, // 26: Cloud.Delete:input_type -> NotImplemented
	32, // 27: Cloud.EnumerateUserApps:input_type -> NotImplemented
	32, // 28: Cloud.EnumerateUserFiles:input_type -> NotImplemented
	32, // 29: Cloud.ExternalStorageTransferReport:input_type -> NotImplemented
	32, // 30: Cloud.GetAppFileChangelist:input_type -> NotImplemented
	32, // 31: Cloud.GetClientEncryptionKey:input_type -> NotImplemented
	32, // 32: Cloud.GetFileDetails:input_type -> NotImplemented
	32, // 33: Cloud.GetUploadServerInfo:input_type -> NotImplemented
	32, // 34: Cloud.ResumeAppSession:input_type -> NotImplemented
	32, // 35: Cloud.SignalAppExitSyncDone:input_type -> NotImplemented
	32, // 36: Cloud.SignalAppLaunchIntent:input_type -> NotImplemented
	32, // 37: Cloud.SuspendAppSession:input_type -> NotImplemented
	16, // 38: CloudClient.ClientLogUploadRequest:input_type -> CCloud_ClientLogUploadRequest_Notification
	0,  // 39: CloudClient.NotifyAppStateChange:input_type -> CCloud_AppCloudStateChange_Notification
	5,  // 40: Cloud.BeginAppUploadBatch:output_type -> CCloud_BeginAppUploadBatch_Response
	6,  // 41: Cloud.BeginHTTPUpload:output_type -> CCloud_BeginHTTPUpload_Response
	8,  // 42: Cloud.BeginUGCUpload:output_type -> CCloud_BeginUGCUpload_Response
	33, // 43: Cloud.CDNReport:output_type -> NoResponse
	10, // 44: Cloud.ClientBeginFileUpload:output_type -> CCloud_ClientBeginFileUpload_Response
	11, // 45: Cloud.ClientCommitFileUpload:output_type -> CCloud_ClientCommitFileUpload_Response
	33, // 46: Cloud.ClientConflictResolution:output_type -> NoResponse
	12, // 47: Cloud.ClientDeleteFile:output_type -> CCloud_ClientDeleteFile_Response
	13, // 48: Cloud.ClientFileDownload:output_type -> CCloud_ClientFileDownload_Response
	15, // 49: Cloud.ClientGetAppQuotaUsage:output_type -> CCloud_ClientGetAppQuotaUsage_Response
	33, // 50: Cloud.ClientLogUploadCheck:output_type -> NoResponse
	33, // 51: Cloud.ClientLogUploadComplete:output_type -> NoResponse
	17, // 52: Cloud.CommitHTTPUpload:output_type -> CCloud_CommitHTTPUpload_Response
	18, // 53: Cloud.CommitUGCUpload:output_type -> CCloud_CommitUGCUpload_Response
	33, // 54: Cloud.CompleteAppUploadBatch:output_type -> NoResponse
	19, // 55: Cloud.CompleteAppUploadBatchBlocking:output_type -> CCloud_CompleteAppUploadBatch_Response
	20, // 56: Cloud.Delete:output_type -> CCloud_Delete_Response
	21, // 57: Cloud.EnumerateUserApps:output_type -> CCloud_EnumerateUserApps_Response
	23, // 58: Cloud.EnumerateUserFiles:output_type -> CCloud_EnumerateUserFiles_Response
	33, // 59: Cloud.ExternalStorageTransferReport:output_type -> NoResponse
	24, // 60: Cloud.GetAppFileChangelist:output_type -> CCloud_GetAppFileChangelist_Response
	25, // 61: Cloud.GetClientEncryptionKey:output_type -> CCloud_GetClientEncryptionKey_Response
	26, // 62: Cloud.GetFileDetails:output_type -> CCloud_GetFileDetails_Response
	27, // 63: Cloud.GetUploadServerInfo:output_type -> CCloud_GetUploadServerInfo_Response
	3,  // 64: Cloud.ResumeAppSession:output_type -> CCloud_AppSessionResume_Response
	33, // 65: Cloud.SignalAppExitSyncDone:output_type -> NoResponse
	2,  // 66: Cloud.SignalAppLaunchIntent:output_type -> CCloud_AppLaunchIntent_Response
	4,  // 67: Cloud.SuspendAppSession:output_type -> CCloud_AppSessionSuspend_Response
	33, // 68: CloudClient.ClientLogUploadRequest:output_type -> NoResponse
	33, // 69: CloudClient.NotifyAppStateChange:output_type -> NoResponse
	40, // [40:70] is the sub-list for method output_type
	10, // [10:40] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_service_cloud_proto_init() }
func file_service_cloud_proto_init() {
	if File_service_cloud_proto != nil {
		return
	}
	file_common_base_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_cloud_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_AppCloudStateChange_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_AppFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_AppLaunchIntent_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_AppSessionResume_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_AppSessionSuspend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_BeginAppUploadBatch_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_BeginHTTPUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_BeginHTTPUpload_Response_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_BeginUGCUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_BeginUGCUpload_Response_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientBeginFileUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientCommitFileUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientDeleteFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientFileDownload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientFileDownload_Response_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientGetAppQuotaUsage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_ClientLogUploadRequest_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_CommitHTTPUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_CommitUGCUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_CompleteAppUploadBatch_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_Delete_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_EnumerateUserApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_EnumerateUserApps_Response_Apps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_EnumerateUserFiles_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_GetAppFileChangelist_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_GetClientEncryptionKey_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_GetFileDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_GetUploadServerInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CCloud_UserFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCloudFileUploadBlockDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_cloud_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCloudFileUploadBlockDetails_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_cloud_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_cloud_proto_goTypes,
		DependencyIndexes: file_service_cloud_proto_depIdxs,
		MessageInfos:      file_service_cloud_proto_msgTypes,
	}.Build()
	File_service_cloud_proto = out.File
	file_service_cloud_proto_rawDesc = nil
	file_service_cloud_proto_goTypes = nil
	file_service_cloud_proto_depIdxs = nil
}
