// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_steaminputmanager.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControllerGyroEulerAngles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pitch *float32 `protobuf:"fixed32,1,opt,name=pitch" json:"pitch,omitempty"`
	Yaw   *float32 `protobuf:"fixed32,2,opt,name=yaw" json:"yaw,omitempty"`
	Roll  *float32 `protobuf:"fixed32,3,opt,name=roll" json:"roll,omitempty"`
}

func (x *ControllerGyroEulerAngles) Reset() {
	*x = ControllerGyroEulerAngles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerGyroEulerAngles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerGyroEulerAngles) ProtoMessage() {}

func (x *ControllerGyroEulerAngles) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerGyroEulerAngles.ProtoReflect.Descriptor instead.
func (*ControllerGyroEulerAngles) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{0}
}

func (x *ControllerGyroEulerAngles) GetPitch() float32 {
	if x != nil && x.Pitch != nil {
		return *x.Pitch
	}
	return 0
}

func (x *ControllerGyroEulerAngles) GetYaw() float32 {
	if x != nil && x.Yaw != nil {
		return *x.Yaw
	}
	return 0
}

func (x *ControllerGyroEulerAngles) GetRoll() float32 {
	if x != nil && x.Roll != nil {
		return *x.Roll
	}
	return 0
}

type ControllerQuaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	W *float32 `protobuf:"fixed32,1,opt,name=w" json:"w,omitempty"`
	X *float32 `protobuf:"fixed32,2,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,3,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,4,opt,name=z" json:"z,omitempty"`
}

func (x *ControllerQuaternion) Reset() {
	*x = ControllerQuaternion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerQuaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerQuaternion) ProtoMessage() {}

func (x *ControllerQuaternion) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerQuaternion.ProtoReflect.Descriptor instead.
func (*ControllerQuaternion) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{1}
}

func (x *ControllerQuaternion) GetW() float32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *ControllerQuaternion) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ControllerQuaternion) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *ControllerQuaternion) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type ControllerVector2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (x *ControllerVector2) Reset() {
	*x = ControllerVector2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerVector2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerVector2) ProtoMessage() {}

func (x *ControllerVector2) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerVector2.ProtoReflect.Descriptor instead.
func (*ControllerVector2) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{2}
}

func (x *ControllerVector2) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ControllerVector2) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type ControllerVector3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *ControllerVector3) Reset() {
	*x = ControllerVector3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerVector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerVector3) ProtoMessage() {}

func (x *ControllerVector3) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerVector3.ProtoReflect.Descriptor instead.
func (*ControllerVector3) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{3}
}

func (x *ControllerVector3) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ControllerVector3) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *ControllerVector3) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CSteamInputService_ControllerAxesStateChange_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex       *uint32            `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	JoystickLeft          *ControllerVector2 `protobuf:"bytes,2,opt,name=joystick_left,json=joystickLeft" json:"joystick_left,omitempty"`
	JoystickRight         *ControllerVector2 `protobuf:"bytes,3,opt,name=joystick_right,json=joystickRight" json:"joystick_right,omitempty"`
	TrackpadLeft          *ControllerVector2 `protobuf:"bytes,4,opt,name=trackpad_left,json=trackpadLeft" json:"trackpad_left,omitempty"`
	TrackpadRight         *ControllerVector2 `protobuf:"bytes,5,opt,name=trackpad_right,json=trackpadRight" json:"trackpad_right,omitempty"`
	TrackpadCenter        *ControllerVector2 `protobuf:"bytes,6,opt,name=trackpad_center,json=trackpadCenter" json:"trackpad_center,omitempty"`
	TrackpadPressureLeft  *float32           `protobuf:"fixed32,7,opt,name=trackpad_pressure_left,json=trackpadPressureLeft" json:"trackpad_pressure_left,omitempty"`
	TrackpadPressureRight *float32           `protobuf:"fixed32,8,opt,name=trackpad_pressure_right,json=trackpadPressureRight" json:"trackpad_pressure_right,omitempty"`
	TriggerLeft           *float32           `protobuf:"fixed32,9,opt,name=trigger_left,json=triggerLeft" json:"trigger_left,omitempty"`
	TriggerRight          *float32           `protobuf:"fixed32,10,opt,name=trigger_right,json=triggerRight" json:"trigger_right,omitempty"`
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) Reset() {
	*x = CSteamInputService_ControllerAxesStateChange_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerAxesStateChange_Notification) ProtoMessage() {}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerAxesStateChange_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerAxesStateChange_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetJoystickLeft() *ControllerVector2 {
	if x != nil {
		return x.JoystickLeft
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetJoystickRight() *ControllerVector2 {
	if x != nil {
		return x.JoystickRight
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadLeft() *ControllerVector2 {
	if x != nil {
		return x.TrackpadLeft
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadRight() *ControllerVector2 {
	if x != nil {
		return x.TrackpadRight
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadCenter() *ControllerVector2 {
	if x != nil {
		return x.TrackpadCenter
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadPressureLeft() float32 {
	if x != nil && x.TrackpadPressureLeft != nil {
		return *x.TrackpadPressureLeft
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadPressureRight() float32 {
	if x != nil && x.TrackpadPressureRight != nil {
		return *x.TrackpadPressureRight
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTriggerLeft() float32 {
	if x != nil && x.TriggerLeft != nil {
		return *x.TriggerLeft
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTriggerRight() float32 {
	if x != nil && x.TriggerRight != nil {
		return *x.TriggerRight
	}
	return 0
}

type CSteamInputService_ControllerButtonStateChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex     *uint32 `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	DpadUp              *bool   `protobuf:"varint,2,opt,name=dpad_up,json=dpadUp" json:"dpad_up,omitempty"`
	DpadDown            *bool   `protobuf:"varint,3,opt,name=dpad_down,json=dpadDown" json:"dpad_down,omitempty"`
	DpadLeft            *bool   `protobuf:"varint,4,opt,name=dpad_left,json=dpadLeft" json:"dpad_left,omitempty"`
	DpadRight           *bool   `protobuf:"varint,5,opt,name=dpad_right,json=dpadRight" json:"dpad_right,omitempty"`
	ButtonSouth         *bool   `protobuf:"varint,6,opt,name=button_south,json=buttonSouth" json:"button_south,omitempty"`
	ButtonEast          *bool   `protobuf:"varint,7,opt,name=button_east,json=buttonEast" json:"button_east,omitempty"`
	ButtonWest          *bool   `protobuf:"varint,8,opt,name=button_west,json=buttonWest" json:"button_west,omitempty"`
	ButtonNorth         *bool   `protobuf:"varint,9,opt,name=button_north,json=buttonNorth" json:"button_north,omitempty"`
	ButtonBackView      *bool   `protobuf:"varint,10,opt,name=button_back_view,json=buttonBackView" json:"button_back_view,omitempty"`
	ButtonStartOptions  *bool   `protobuf:"varint,11,opt,name=button_start_options,json=buttonStartOptions" json:"button_start_options,omitempty"`
	ButtonSteam         *bool   `protobuf:"varint,12,opt,name=button_steam,json=buttonSteam" json:"button_steam,omitempty"`
	ButtonQuickAccess   *bool   `protobuf:"varint,13,opt,name=button_quick_access,json=buttonQuickAccess" json:"button_quick_access,omitempty"`
	ButtonMuteCapture   *bool   `protobuf:"varint,14,opt,name=button_mute_capture,json=buttonMuteCapture" json:"button_mute_capture,omitempty"`
	LeftStickClick      *bool   `protobuf:"varint,15,opt,name=left_stick_click,json=leftStickClick" json:"left_stick_click,omitempty"`
	LeftStickTouch      *bool   `protobuf:"varint,16,opt,name=left_stick_touch,json=leftStickTouch" json:"left_stick_touch,omitempty"`
	LeftStickDeflect    *bool   `protobuf:"varint,17,opt,name=left_stick_deflect,json=leftStickDeflect" json:"left_stick_deflect,omitempty"`
	RightStickClick     *bool   `protobuf:"varint,18,opt,name=right_stick_click,json=rightStickClick" json:"right_stick_click,omitempty"`
	RightStickTouch     *bool   `protobuf:"varint,19,opt,name=right_stick_touch,json=rightStickTouch" json:"right_stick_touch,omitempty"`
	RightStickDeflect   *bool   `protobuf:"varint,20,opt,name=right_stick_deflect,json=rightStickDeflect" json:"right_stick_deflect,omitempty"`
	CenterTrackpadTouch *bool   `protobuf:"varint,21,opt,name=center_trackpad_touch,json=centerTrackpadTouch" json:"center_trackpad_touch,omitempty"`
	CenterTrackpadClick *bool   `protobuf:"varint,22,opt,name=center_trackpad_click,json=centerTrackpadClick" json:"center_trackpad_click,omitempty"`
	LeftTrackpadTouch   *bool   `protobuf:"varint,23,opt,name=left_trackpad_touch,json=leftTrackpadTouch" json:"left_trackpad_touch,omitempty"`
	LeftTrackpadClick   *bool   `protobuf:"varint,24,opt,name=left_trackpad_click,json=leftTrackpadClick" json:"left_trackpad_click,omitempty"`
	RightTrackpadTouch  *bool   `protobuf:"varint,25,opt,name=right_trackpad_touch,json=rightTrackpadTouch" json:"right_trackpad_touch,omitempty"`
	RightTrackpadClick  *bool   `protobuf:"varint,26,opt,name=right_trackpad_click,json=rightTrackpadClick" json:"right_trackpad_click,omitempty"`
	LeftBumper          *bool   `protobuf:"varint,27,opt,name=left_bumper,json=leftBumper" json:"left_bumper,omitempty"`
	LeftTrigger         *bool   `protobuf:"varint,28,opt,name=left_trigger,json=leftTrigger" json:"left_trigger,omitempty"`
	L4                  *bool   `protobuf:"varint,29,opt,name=l4" json:"l4,omitempty"`
	L5                  *bool   `protobuf:"varint,30,opt,name=l5" json:"l5,omitempty"`
	LeftAux             *bool   `protobuf:"varint,31,opt,name=left_aux,json=leftAux" json:"left_aux,omitempty"`
	RightBumper         *bool   `protobuf:"varint,32,opt,name=right_bumper,json=rightBumper" json:"right_bumper,omitempty"`
	RightTrigger        *bool   `protobuf:"varint,33,opt,name=right_trigger,json=rightTrigger" json:"right_trigger,omitempty"`
	R4                  *bool   `protobuf:"varint,34,opt,name=r4" json:"r4,omitempty"`
	R5                  *bool   `protobuf:"varint,35,opt,name=r5" json:"r5,omitempty"`
	RightAux            *bool   `protobuf:"varint,36,opt,name=right_aux,json=rightAux" json:"right_aux,omitempty"`
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) Reset() {
	*x = CSteamInputService_ControllerButtonStateChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerButtonStateChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerButtonStateChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerButtonStateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadUp() bool {
	if x != nil && x.DpadUp != nil {
		return *x.DpadUp
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadDown() bool {
	if x != nil && x.DpadDown != nil {
		return *x.DpadDown
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadLeft() bool {
	if x != nil && x.DpadLeft != nil {
		return *x.DpadLeft
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadRight() bool {
	if x != nil && x.DpadRight != nil {
		return *x.DpadRight
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonSouth() bool {
	if x != nil && x.ButtonSouth != nil {
		return *x.ButtonSouth
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonEast() bool {
	if x != nil && x.ButtonEast != nil {
		return *x.ButtonEast
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonWest() bool {
	if x != nil && x.ButtonWest != nil {
		return *x.ButtonWest
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonNorth() bool {
	if x != nil && x.ButtonNorth != nil {
		return *x.ButtonNorth
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonBackView() bool {
	if x != nil && x.ButtonBackView != nil {
		return *x.ButtonBackView
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonStartOptions() bool {
	if x != nil && x.ButtonStartOptions != nil {
		return *x.ButtonStartOptions
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonSteam() bool {
	if x != nil && x.ButtonSteam != nil {
		return *x.ButtonSteam
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonQuickAccess() bool {
	if x != nil && x.ButtonQuickAccess != nil {
		return *x.ButtonQuickAccess
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonMuteCapture() bool {
	if x != nil && x.ButtonMuteCapture != nil {
		return *x.ButtonMuteCapture
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftStickClick() bool {
	if x != nil && x.LeftStickClick != nil {
		return *x.LeftStickClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftStickTouch() bool {
	if x != nil && x.LeftStickTouch != nil {
		return *x.LeftStickTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftStickDeflect() bool {
	if x != nil && x.LeftStickDeflect != nil {
		return *x.LeftStickDeflect
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightStickClick() bool {
	if x != nil && x.RightStickClick != nil {
		return *x.RightStickClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightStickTouch() bool {
	if x != nil && x.RightStickTouch != nil {
		return *x.RightStickTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightStickDeflect() bool {
	if x != nil && x.RightStickDeflect != nil {
		return *x.RightStickDeflect
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetCenterTrackpadTouch() bool {
	if x != nil && x.CenterTrackpadTouch != nil {
		return *x.CenterTrackpadTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetCenterTrackpadClick() bool {
	if x != nil && x.CenterTrackpadClick != nil {
		return *x.CenterTrackpadClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftTrackpadTouch() bool {
	if x != nil && x.LeftTrackpadTouch != nil {
		return *x.LeftTrackpadTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftTrackpadClick() bool {
	if x != nil && x.LeftTrackpadClick != nil {
		return *x.LeftTrackpadClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightTrackpadTouch() bool {
	if x != nil && x.RightTrackpadTouch != nil {
		return *x.RightTrackpadTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightTrackpadClick() bool {
	if x != nil && x.RightTrackpadClick != nil {
		return *x.RightTrackpadClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftBumper() bool {
	if x != nil && x.LeftBumper != nil {
		return *x.LeftBumper
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftTrigger() bool {
	if x != nil && x.LeftTrigger != nil {
		return *x.LeftTrigger
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetL4() bool {
	if x != nil && x.L4 != nil {
		return *x.L4
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetL5() bool {
	if x != nil && x.L5 != nil {
		return *x.L5
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftAux() bool {
	if x != nil && x.LeftAux != nil {
		return *x.LeftAux
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightBumper() bool {
	if x != nil && x.RightBumper != nil {
		return *x.RightBumper
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightTrigger() bool {
	if x != nil && x.RightTrigger != nil {
		return *x.RightTrigger
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetR4() bool {
	if x != nil && x.R4 != nil {
		return *x.R4
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetR5() bool {
	if x != nil && x.R5 != nil {
		return *x.R5
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightAux() bool {
	if x != nil && x.RightAux != nil {
		return *x.RightAux
	}
	return false
}

type CSteamInputService_ControllerStateFlow_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex *uint32 `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	FlowMode        *uint32 `protobuf:"varint,2,opt,name=flow_mode,json=flowMode" json:"flow_mode,omitempty"`
}

func (x *CSteamInputService_ControllerStateFlow_Request) Reset() {
	*x = CSteamInputService_ControllerStateFlow_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_ControllerStateFlow_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerStateFlow_Request) ProtoMessage() {}

func (x *CSteamInputService_ControllerStateFlow_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerStateFlow_Request.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerStateFlow_Request) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamInputService_ControllerStateFlow_Request) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_ControllerStateFlow_Request) GetFlowMode() uint32 {
	if x != nil && x.FlowMode != nil {
		return *x.FlowMode
	}
	return 0
}

type CSteamInputService_ControllerStateFlow_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamInputService_ControllerStateFlow_Response) Reset() {
	*x = CSteamInputService_ControllerStateFlow_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_ControllerStateFlow_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerStateFlow_Response) ProtoMessage() {}

func (x *CSteamInputService_ControllerStateFlow_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerStateFlow_Response.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerStateFlow_Response) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{7}
}

type CSteamInputService_GyroAccelerometerChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex   *uint32            `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex          *uint32            `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	Acceleromter_1G   *ControllerVector3 `protobuf:"bytes,4,opt,name=acceleromter_1g,json=acceleromter1g" json:"acceleromter_1g,omitempty"`
	TrustedGravity_1G *ControllerVector3 `protobuf:"bytes,5,opt,name=trusted_gravity_1g,json=trustedGravity1g" json:"trusted_gravity_1g,omitempty"`
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) Reset() {
	*x = CSteamInputService_GyroAccelerometerChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroAccelerometerChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroAccelerometerChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroAccelerometerChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetAcceleromter_1G() *ControllerVector3 {
	if x != nil {
		return x.Acceleromter_1G
	}
	return nil
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetTrustedGravity_1G() *ControllerVector3 {
	if x != nil {
		return x.TrustedGravity_1G
	}
	return nil
}

type CSteamInputService_GyroCalibration_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex     *uint32  `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex            *uint32  `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	AcceleromterNoise   *float32 `protobuf:"fixed32,3,opt,name=acceleromter_noise,json=acceleromterNoise" json:"acceleromter_noise,omitempty"`
	GyroscopeNoise      *float32 `protobuf:"fixed32,4,opt,name=gyroscope_noise,json=gyroscopeNoise" json:"gyroscope_noise,omitempty"`
	CalibrationProgress *float32 `protobuf:"fixed32,5,opt,name=calibration_progress,json=calibrationProgress" json:"calibration_progress,omitempty"`
}

func (x *CSteamInputService_GyroCalibration_Notification) Reset() {
	*x = CSteamInputService_GyroCalibration_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_GyroCalibration_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroCalibration_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroCalibration_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroCalibration_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroCalibration_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamInputService_GyroCalibration_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetAcceleromterNoise() float32 {
	if x != nil && x.AcceleromterNoise != nil {
		return *x.AcceleromterNoise
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetGyroscopeNoise() float32 {
	if x != nil && x.GyroscopeNoise != nil {
		return *x.GyroscopeNoise
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetCalibrationProgress() float32 {
	if x != nil && x.CalibrationProgress != nil {
		return *x.CalibrationProgress
	}
	return 0
}

type CSteamInputService_GyroQuaternionChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex        *uint32               `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex               *uint32               `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	GyroRawQuaternion      *ControllerQuaternion `protobuf:"bytes,3,opt,name=gyro_raw_quaternion,json=gyroRawQuaternion" json:"gyro_raw_quaternion,omitempty"`
	GyroFilteredQuaternion *ControllerQuaternion `protobuf:"bytes,4,opt,name=gyro_filtered_quaternion,json=gyroFilteredQuaternion" json:"gyro_filtered_quaternion,omitempty"`
	ImuSensorDeltaTime     *uint32               `protobuf:"varint,5,opt,name=imu_sensor_delta_time,json=imuSensorDeltaTime" json:"imu_sensor_delta_time,omitempty"`
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) Reset() {
	*x = CSteamInputService_GyroQuaternionChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroQuaternionChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroQuaternionChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroQuaternionChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetGyroRawQuaternion() *ControllerQuaternion {
	if x != nil {
		return x.GyroRawQuaternion
	}
	return nil
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetGyroFilteredQuaternion() *ControllerQuaternion {
	if x != nil {
		return x.GyroFilteredQuaternion
	}
	return nil
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetImuSensorDeltaTime() uint32 {
	if x != nil && x.ImuSensorDeltaTime != nil {
		return *x.ImuSensorDeltaTime
	}
	return 0
}

type CSteamInputService_GyroSpeedChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex   *uint32                    `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex          *uint32                    `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	GyroRawSpeed      *ControllerGyroEulerAngles `protobuf:"bytes,3,opt,name=gyro_raw_speed,json=gyroRawSpeed" json:"gyro_raw_speed,omitempty"`
	GyroFilteredSpeed *ControllerGyroEulerAngles `protobuf:"bytes,4,opt,name=gyro_filtered_speed,json=gyroFilteredSpeed" json:"gyro_filtered_speed,omitempty"`
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) Reset() {
	*x = CSteamInputService_GyroSpeedChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steaminputmanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroSpeedChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroSpeedChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroSpeedChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroSpeedChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetGyroRawSpeed() *ControllerGyroEulerAngles {
	if x != nil {
		return x.GyroRawSpeed
	}
	return nil
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetGyroFilteredSpeed() *ControllerGyroEulerAngles {
	if x != nil {
		return x.GyroFilteredSpeed
	}
	return nil
}

var File_service_steaminputmanager_proto protoreflect.FileDescriptor

var file_service_steaminputmanager_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x47, 0x79, 0x72, 0x6f, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x22, 0x4e, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x51, 0x75, 0x61, 0x74, 0x65,
	0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x2f, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x3d,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0xc1, 0x04,
	0x0a, 0x39, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41,
	0x78, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x0d, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x52, 0x0c, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x4c, 0x65, 0x66, 0x74, 0x12,
	0x39, 0x0a, 0x0e, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0d, 0x6a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3b,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x70, 0x61, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x70, 0x61, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xfc, 0x0a, 0x0a, 0x3c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x70, 0x61, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x70, 0x61, 0x64, 0x55, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x70, 0x61, 0x64, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x70, 0x61, 0x64, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x70, 0x61, 0x64, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x70, 0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x70, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x65, 0x61, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x45,
	0x61, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x77, 0x65,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x57, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x72, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x44, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x64, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x64, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x70, 0x61, 0x64, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x34, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6c, 0x34,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x35, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6c, 0x35,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x75, 0x78, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x75, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x72, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x35, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x72, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x75, 0x78,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x78,
	0x22, 0x78, 0x0a, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x02,
	0x0a, 0x38, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x47, 0x79, 0x72, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6d, 0x75, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3b, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x74,
	0x65, 0x72, 0x5f, 0x31, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x74, 0x65, 0x72, 0x31, 0x67, 0x12,
	0x40, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x31, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52,
	0x10, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x31,
	0x67, 0x22, 0x84, 0x02, 0x0a, 0x2f, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47, 0x79, 0x72, 0x6f, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6d, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x6f, 0x6d, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x4e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x35, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x47, 0x79, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x6d, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x13, 0x67, 0x79,
	0x72, 0x6f, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x67, 0x79, 0x72, 0x6f, 0x52, 0x61, 0x77, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x18, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x67, 0x79, 0x72, 0x6f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6d, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x69, 0x6d, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47, 0x79, 0x72,
	0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6d, 0x75, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x40, 0x0a, 0x0e, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x79, 0x72, 0x6f, 0x45, 0x75, 0x6c, 0x65, 0x72,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x67, 0x79, 0x72, 0x6f, 0x52, 0x61, 0x77, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x79,
	0x72, 0x6f, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x67,
	0x79, 0x72, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x32, 0xf5, 0x06, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x16, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x2f, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x78, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x3a, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x78, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x3d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x23, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x79, 0x72, 0x6f, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x39, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47, 0x79, 0x72, 0x6f, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x21, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x79, 0x72, 0x6f, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x30, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47, 0x79, 0x72, 0x6f, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x79, 0x72, 0x6f, 0x51,
	0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47, 0x79, 0x72, 0x6f, 0x51,
	0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x1b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x47, 0x79, 0x72, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47,
	0x79, 0x72, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2f, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_steaminputmanager_proto_rawDescOnce sync.Once
	file_service_steaminputmanager_proto_rawDescData = file_service_steaminputmanager_proto_rawDesc
)

func file_service_steaminputmanager_proto_rawDescGZIP() []byte {
	file_service_steaminputmanager_proto_rawDescOnce.Do(func() {
		file_service_steaminputmanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_steaminputmanager_proto_rawDescData)
	})
	return file_service_steaminputmanager_proto_rawDescData
}

var file_service_steaminputmanager_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_service_steaminputmanager_proto_goTypes = []any{
	(*ControllerGyroEulerAngles)(nil),                                    // 0: ControllerGyroEulerAngles
	(*ControllerQuaternion)(nil),                                         // 1: ControllerQuaternion
	(*ControllerVector2)(nil),                                            // 2: ControllerVector2
	(*ControllerVector3)(nil),                                            // 3: ControllerVector3
	(*CSteamInputService_ControllerAxesStateChange_Notification)(nil),    // 4: CSteamInputService_ControllerAxesStateChange_Notification
	(*CSteamInputService_ControllerButtonStateChanged_Notification)(nil), // 5: CSteamInputService_ControllerButtonStateChanged_Notification
	(*CSteamInputService_ControllerStateFlow_Request)(nil),               // 6: CSteamInputService_ControllerStateFlow_Request
	(*CSteamInputService_ControllerStateFlow_Response)(nil),              // 7: CSteamInputService_ControllerStateFlow_Response
	(*CSteamInputService_GyroAccelerometerChanged_Notification)(nil),     // 8: CSteamInputService_GyroAccelerometerChanged_Notification
	(*CSteamInputService_GyroCalibration_Notification)(nil),              // 9: CSteamInputService_GyroCalibration_Notification
	(*CSteamInputService_GyroQuaternionChanged_Notification)(nil),        // 10: CSteamInputService_GyroQuaternionChanged_Notification
	(*CSteamInputService_GyroSpeedChanged_Notification)(nil),             // 11: CSteamInputService_GyroSpeedChanged_Notification
	(*NoResponse)(nil), // 12: NoResponse
}
var file_service_steaminputmanager_proto_depIdxs = []int32{
	2,  // 0: CSteamInputService_ControllerAxesStateChange_Notification.joystick_left:type_name -> ControllerVector2
	2,  // 1: CSteamInputService_ControllerAxesStateChange_Notification.joystick_right:type_name -> ControllerVector2
	2,  // 2: CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left:type_name -> ControllerVector2
	2,  // 3: CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right:type_name -> ControllerVector2
	2,  // 4: CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center:type_name -> ControllerVector2
	3,  // 5: CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g:type_name -> ControllerVector3
	3,  // 6: CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g:type_name -> ControllerVector3
	1,  // 7: CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion:type_name -> ControllerQuaternion
	1,  // 8: CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion:type_name -> ControllerQuaternion
	0,  // 9: CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed:type_name -> ControllerGyroEulerAngles
	0,  // 10: CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed:type_name -> ControllerGyroEulerAngles
	6,  // 11: SteamInputManager.EndControllerStateFlow:input_type -> CSteamInputService_ControllerStateFlow_Request
	4,  // 12: SteamInputManager.NotifyAxesStateChanged:input_type -> CSteamInputService_ControllerAxesStateChange_Notification
	5,  // 13: SteamInputManager.NotifyButtonStateChanged:input_type -> CSteamInputService_ControllerButtonStateChanged_Notification
	8,  // 14: SteamInputManager.NotifyGyroAccelerometerStateChanged:input_type -> CSteamInputService_GyroAccelerometerChanged_Notification
	9,  // 15: SteamInputManager.NotifyGyroCalibrationStateChanged:input_type -> CSteamInputService_GyroCalibration_Notification
	10, // 16: SteamInputManager.NotifyGyroQuaternionStateChanged:input_type -> CSteamInputService_GyroQuaternionChanged_Notification
	11, // 17: SteamInputManager.NotifyGyroSpeedStateChanged:input_type -> CSteamInputService_GyroSpeedChanged_Notification
	6,  // 18: SteamInputManager.StartControllerStateFlow:input_type -> CSteamInputService_ControllerStateFlow_Request
	7,  // 19: SteamInputManager.EndControllerStateFlow:output_type -> CSteamInputService_ControllerStateFlow_Response
	12, // 20: SteamInputManager.NotifyAxesStateChanged:output_type -> NoResponse
	12, // 21: SteamInputManager.NotifyButtonStateChanged:output_type -> NoResponse
	12, // 22: SteamInputManager.NotifyGyroAccelerometerStateChanged:output_type -> NoResponse
	12, // 23: SteamInputManager.NotifyGyroCalibrationStateChanged:output_type -> NoResponse
	12, // 24: SteamInputManager.NotifyGyroQuaternionStateChanged:output_type -> NoResponse
	12, // 25: SteamInputManager.NotifyGyroSpeedStateChanged:output_type -> NoResponse
	7,  // 26: SteamInputManager.StartControllerStateFlow:output_type -> CSteamInputService_ControllerStateFlow_Response
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_service_steaminputmanager_proto_init() }
func file_service_steaminputmanager_proto_init() {
	if File_service_steaminputmanager_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_steaminputmanager_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ControllerGyroEulerAngles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ControllerQuaternion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ControllerVector2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ControllerVector3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_ControllerAxesStateChange_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_ControllerButtonStateChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_ControllerStateFlow_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_ControllerStateFlow_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_GyroAccelerometerChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_GyroCalibration_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_GyroQuaternionChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steaminputmanager_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamInputService_GyroSpeedChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_steaminputmanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steaminputmanager_proto_goTypes,
		DependencyIndexes: file_service_steaminputmanager_proto_depIdxs,
		MessageInfos:      file_service_steaminputmanager_proto_msgTypes,
	}.Build()
	File_service_steaminputmanager_proto = out.File
	file_service_steaminputmanager_proto_rawDesc = nil
	file_service_steaminputmanager_proto_goTypes = nil
	file_service_steaminputmanager_proto_depIdxs = nil
}
