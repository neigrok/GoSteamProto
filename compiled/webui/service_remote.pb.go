// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_remote.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CRemoteClient_AllocateRelayServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellid      *uint32 `protobuf:"varint,1,opt,name=cellid" json:"cellid,omitempty"`
	Credentials *string `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
}

func (x *CRemoteClient_AllocateRelayServer_Request) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateRelayServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{0}
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

type CRemoteClient_AllocateRelayServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayServer *string `protobuf:"bytes,1,opt,name=relay_server,json=relayServer" json:"relay_server,omitempty"`
}

func (x *CRemoteClient_AllocateRelayServer_Response) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateRelayServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{1}
}

func (x *CRemoteClient_AllocateRelayServer_Response) GetRelayServer() string {
	if x != nil && x.RelayServer != nil {
		return *x.RelayServer
	}
	return ""
}

type CRemoteClient_AllocateSDR_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CRemoteClient_AllocateSDR_Request) Reset() {
	*x = CRemoteClient_AllocateSDR_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateSDR_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{2}
}

func (x *CRemoteClient_AllocateSDR_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CRemoteClient_AllocateSDR_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_AllocateSDR_Response) Reset() {
	*x = CRemoteClient_AllocateSDR_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateSDR_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{3}
}

type CRemoteClient_ClientDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteClientId *uint64                      `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	DeviceDetails  *CRemoteClient_DeviceDetails `protobuf:"bytes,2,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
	LastSeen       *uint64                      `protobuf:"varint,4,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	City           *string                      `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	State          *string                      `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Country        *string                      `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	IsOnline       *bool                        `protobuf:"varint,8,opt,name=is_online,json=isOnline" json:"is_online,omitempty"`
}

func (x *CRemoteClient_ClientDetails) Reset() {
	*x = CRemoteClient_ClientDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_ClientDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ClientDetails) ProtoMessage() {}

func (x *CRemoteClient_ClientDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ClientDetails.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ClientDetails) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{4}
}

func (x *CRemoteClient_ClientDetails) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_ClientDetails) GetDeviceDetails() *CRemoteClient_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

func (x *CRemoteClient_ClientDetails) GetLastSeen() uint64 {
	if x != nil && x.LastSeen != nil {
		return *x.LastSeen
	}
	return 0
}

func (x *CRemoteClient_ClientDetails) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *CRemoteClient_ClientDetails) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CRemoteClient_ClientDetails) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CRemoteClient_ClientDetails) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

type CRemoteClient_CreateRemotePlayTogetherInvitation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LaunchParameters *string `protobuf:"bytes,2,opt,name=launch_parameters,json=launchParameters" json:"launch_parameters,omitempty"`
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_CreateRemotePlayTogetherInvitation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{5}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) GetLaunchParameters() string {
	if x != nil && x.LaunchParameters != nil {
		return *x.LaunchParameters
	}
	return ""
}

type CRemoteClient_CreateRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode *string `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_CreateRemotePlayTogetherInvitation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{6}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_DeleteRemotePlayTogetherInvitation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode *string `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_DeleteRemotePlayTogetherInvitation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{7}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_DeleteRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_DeleteRemotePlayTogetherInvitation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{8}
}

type CRemoteClient_DeviceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceFriendlyName *string `protobuf:"bytes,1,opt,name=device_friendly_name,json=deviceFriendlyName" json:"device_friendly_name,omitempty"`
	OsType             *int32  `protobuf:"varint,2,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	GamingDeviceType   *uint32 `protobuf:"varint,3,opt,name=gaming_device_type,json=gamingDeviceType" json:"gaming_device_type,omitempty"`
}

func (x *CRemoteClient_DeviceDetails) Reset() {
	*x = CRemoteClient_DeviceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_DeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeviceDetails) ProtoMessage() {}

func (x *CRemoteClient_DeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeviceDetails.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeviceDetails) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{9}
}

func (x *CRemoteClient_DeviceDetails) GetDeviceFriendlyName() string {
	if x != nil && x.DeviceFriendlyName != nil {
		return *x.DeviceFriendlyName
	}
	return ""
}

func (x *CRemoteClient_DeviceDetails) GetOsType() int32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CRemoteClient_DeviceDetails) GetGamingDeviceType() uint32 {
	if x != nil && x.GamingDeviceType != nil {
		return *x.GamingDeviceType
	}
	return 0
}

type CRemoteClient_GetPairingInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin *uint32 `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
}

func (x *CRemoteClient_GetPairingInfo_Request) Reset() {
	*x = CRemoteClient_GetPairingInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{10}
}

func (x *CRemoteClient_GetPairingInfo_Request) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_GetPairingInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request   []byte  `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
}

func (x *CRemoteClient_GetPairingInfo_Response) Reset() {
	*x = CRemoteClient_GetPairingInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{11}
}

func (x *CRemoteClient_GetPairingInfo_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_GetRecentClients_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_GetRecentClients_Request) Reset() {
	*x = CRemoteClient_GetRecentClients_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetRecentClients_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetRecentClients_Request) ProtoMessage() {}

func (x *CRemoteClient_GetRecentClients_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetRecentClients_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetRecentClients_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{12}
}

type CRemoteClient_GetRecentClients_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*CRemoteClient_ClientDetails `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (x *CRemoteClient_GetRecentClients_Response) Reset() {
	*x = CRemoteClient_GetRecentClients_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetRecentClients_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetRecentClients_Response) ProtoMessage() {}

func (x *CRemoteClient_GetRecentClients_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetRecentClients_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetRecentClients_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{13}
}

func (x *CRemoteClient_GetRecentClients_Response) GetClients() []*CRemoteClient_ClientDetails {
	if x != nil {
		return x.Clients
	}
	return nil
}

type CRemoteClient_MarkTaskComplete_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteClientId *uint64 `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	TaskId         *uint64 `protobuf:"fixed64,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	ContentId      *string `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
}

func (x *CRemoteClient_MarkTaskComplete_Request) Reset() {
	*x = CRemoteClient_MarkTaskComplete_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_MarkTaskComplete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_MarkTaskComplete_Request) ProtoMessage() {}

func (x *CRemoteClient_MarkTaskComplete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_MarkTaskComplete_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_MarkTaskComplete_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{14}
}

func (x *CRemoteClient_MarkTaskComplete_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_MarkTaskComplete_Request) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *CRemoteClient_MarkTaskComplete_Request) GetContentId() string {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return ""
}

type CRemoteClient_MarkTaskComplete_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_MarkTaskComplete_Response) Reset() {
	*x = CRemoteClient_MarkTaskComplete_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_MarkTaskComplete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_MarkTaskComplete_Response) ProtoMessage() {}

func (x *CRemoteClient_MarkTaskComplete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_MarkTaskComplete_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_MarkTaskComplete_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{15}
}

type CRemoteClient_Online_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid        *uint64                      `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	RemoteClientId *uint64                      `protobuf:"fixed64,2,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	DeviceDetails  *CRemoteClient_DeviceDetails `protobuf:"bytes,3,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
}

func (x *CRemoteClient_Online_Notification) Reset() {
	*x = CRemoteClient_Online_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_Online_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_Online_Notification) ProtoMessage() {}

func (x *CRemoteClient_Online_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_Online_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_Online_Notification) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{16}
}

func (x *CRemoteClient_Online_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_Online_Notification) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_Online_Notification) GetDeviceDetails() *CRemoteClient_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

type CRemoteClient_ReplyPacket_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Payload   []byte  `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_ReplyPacket_Notification) Reset() {
	*x = CRemoteClient_ReplyPacket_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_ReplyPacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ReplyPacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_ReplyPacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ReplyPacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ReplyPacket_Notification) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{17}
}

func (x *CRemoteClient_ReplyPacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_ReplyPacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemotePlay_SessionStarted_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAccountId      *uint32 `protobuf:"varint,1,opt,name=host_account_id,json=hostAccountId" json:"host_account_id,omitempty"`
	ClientAccountId    *uint32 `protobuf:"varint,2,opt,name=client_account_id,json=clientAccountId" json:"client_account_id,omitempty"`
	Appid              *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	DeviceFormFactor   *int32  `protobuf:"varint,4,opt,name=device_form_factor,json=deviceFormFactor" json:"device_form_factor,omitempty"`
	RemotePlayTogether *bool   `protobuf:"varint,5,opt,name=remote_play_together,json=remotePlayTogether" json:"remote_play_together,omitempty"`
	GuestSession       *bool   `protobuf:"varint,6,opt,name=guest_session,json=guestSession" json:"guest_session,omitempty"`
}

func (x *CRemotePlay_SessionStarted_Request) Reset() {
	*x = CRemotePlay_SessionStarted_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStarted_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Request) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Request.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Request) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{18}
}

func (x *CRemotePlay_SessionStarted_Request) GetHostAccountId() uint32 {
	if x != nil && x.HostAccountId != nil {
		return *x.HostAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetClientAccountId() uint32 {
	if x != nil && x.ClientAccountId != nil {
		return *x.ClientAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetDeviceFormFactor() int32 {
	if x != nil && x.DeviceFormFactor != nil {
		return *x.DeviceFormFactor
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetRemotePlayTogether() bool {
	if x != nil && x.RemotePlayTogether != nil {
		return *x.RemotePlayTogether
	}
	return false
}

func (x *CRemotePlay_SessionStarted_Request) GetGuestSession() bool {
	if x != nil && x.GuestSession != nil {
		return *x.GuestSession
	}
	return false
}

type CRemotePlay_SessionStarted_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId *uint64 `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
}

func (x *CRemotePlay_SessionStarted_Response) Reset() {
	*x = CRemotePlay_SessionStarted_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_remote_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStarted_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Response) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_remote_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Response.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Response) Descriptor() ([]byte, []int) {
	return file_service_remote_proto_rawDescGZIP(), []int{19}
}

func (x *CRemotePlay_SessionStarted_Response) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

var File_service_remote_proto protoreflect.FileDescriptor

var file_service_remote_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x29, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x22, 0x4f, 0x0a, 0x2a, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0x39, 0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x1b, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x7d, 0x0a, 0x38, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x64,
	0x0a, 0x39, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x38, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x39, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x38, 0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x25, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x61, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x26, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01,
	0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x61, 0x0a, 0x26,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x93, 0x02, 0x0a, 0x22, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f,
	0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x32, 0xa6, 0x0a, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x13, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x2a, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x12, 0x22, 0x2e, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1c, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65,
}

var (
	file_service_remote_proto_rawDescOnce sync.Once
	file_service_remote_proto_rawDescData = file_service_remote_proto_rawDesc
)

func file_service_remote_proto_rawDescGZIP() []byte {
	file_service_remote_proto_rawDescOnce.Do(func() {
		file_service_remote_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_remote_proto_rawDescData)
	})
	return file_service_remote_proto_rawDescData
}

var file_service_remote_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_service_remote_proto_goTypes = []any{
	(*CRemoteClient_AllocateRelayServer_Request)(nil),                 // 0: CRemoteClient_AllocateRelayServer_Request
	(*CRemoteClient_AllocateRelayServer_Response)(nil),                // 1: CRemoteClient_AllocateRelayServer_Response
	(*CRemoteClient_AllocateSDR_Request)(nil),                         // 2: CRemoteClient_AllocateSDR_Request
	(*CRemoteClient_AllocateSDR_Response)(nil),                        // 3: CRemoteClient_AllocateSDR_Response
	(*CRemoteClient_ClientDetails)(nil),                               // 4: CRemoteClient_ClientDetails
	(*CRemoteClient_CreateRemotePlayTogetherInvitation_Request)(nil),  // 5: CRemoteClient_CreateRemotePlayTogetherInvitation_Request
	(*CRemoteClient_CreateRemotePlayTogetherInvitation_Response)(nil), // 6: CRemoteClient_CreateRemotePlayTogetherInvitation_Response
	(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)(nil),  // 7: CRemoteClient_DeleteRemotePlayTogetherInvitation_Request
	(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)(nil), // 8: CRemoteClient_DeleteRemotePlayTogetherInvitation_Response
	(*CRemoteClient_DeviceDetails)(nil),                               // 9: CRemoteClient_DeviceDetails
	(*CRemoteClient_GetPairingInfo_Request)(nil),                      // 10: CRemoteClient_GetPairingInfo_Request
	(*CRemoteClient_GetPairingInfo_Response)(nil),                     // 11: CRemoteClient_GetPairingInfo_Response
	(*CRemoteClient_GetRecentClients_Request)(nil),                    // 12: CRemoteClient_GetRecentClients_Request
	(*CRemoteClient_GetRecentClients_Response)(nil),                   // 13: CRemoteClient_GetRecentClients_Response
	(*CRemoteClient_MarkTaskComplete_Request)(nil),                    // 14: CRemoteClient_MarkTaskComplete_Request
	(*CRemoteClient_MarkTaskComplete_Response)(nil),                   // 15: CRemoteClient_MarkTaskComplete_Response
	(*CRemoteClient_Online_Notification)(nil),                         // 16: CRemoteClient_Online_Notification
	(*CRemoteClient_ReplyPacket_Notification)(nil),                    // 17: CRemoteClient_ReplyPacket_Notification
	(*CRemotePlay_SessionStarted_Request)(nil),                        // 18: CRemotePlay_SessionStarted_Request
	(*CRemotePlay_SessionStarted_Response)(nil),                       // 19: CRemotePlay_SessionStarted_Response
	(*NotImplemented)(nil),                                            // 20: NotImplemented
	(*NoResponse)(nil),                                                // 21: NoResponse
}
var file_service_remote_proto_depIdxs = []int32{
	9,  // 0: CRemoteClient_ClientDetails.device_details:type_name -> CRemoteClient_DeviceDetails
	4,  // 1: CRemoteClient_GetRecentClients_Response.clients:type_name -> CRemoteClient_ClientDetails
	9,  // 2: CRemoteClient_Online_Notification.device_details:type_name -> CRemoteClient_DeviceDetails
	0,  // 3: RemoteClient.AllocateRelayServer:input_type -> CRemoteClient_AllocateRelayServer_Request
	2,  // 4: RemoteClient.AllocateSDR:input_type -> CRemoteClient_AllocateSDR_Request
	5,  // 5: RemoteClient.CreateRemotePlayTogetherInvitation:input_type -> CRemoteClient_CreateRemotePlayTogetherInvitation_Request
	7,  // 6: RemoteClient.DeleteRemotePlayTogetherInvitation:input_type -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Request
	10, // 7: RemoteClient.GetPairingInfo:input_type -> CRemoteClient_GetPairingInfo_Request
	12, // 8: RemoteClient.GetRecentClients:input_type -> CRemoteClient_GetRecentClients_Request
	14, // 9: RemoteClient.MarkTaskComplete:input_type -> CRemoteClient_MarkTaskComplete_Request
	16, // 10: RemoteClient.NotifyOnline:input_type -> CRemoteClient_Online_Notification
	17, // 11: RemoteClient.NotifyReplyPacket:input_type -> CRemoteClient_ReplyPacket_Notification
	18, // 12: RemoteClient.SendRemotePlaySessionStarted:input_type -> CRemotePlay_SessionStarted_Request
	20, // 13: RemoteClient.SendRemotePlaySessionStopped:input_type -> NotImplemented
	20, // 14: RemoteClient.SendRemotePlayTogetherPacket:input_type -> NotImplemented
	20, // 15: RemoteClient.SendSteamBroadcastPacket:input_type -> NotImplemented
	20, // 16: RemoteClient.SendSteamToSteamPacket:input_type -> NotImplemented
	1,  // 17: RemoteClient.AllocateRelayServer:output_type -> CRemoteClient_AllocateRelayServer_Response
	3,  // 18: RemoteClient.AllocateSDR:output_type -> CRemoteClient_AllocateSDR_Response
	6,  // 19: RemoteClient.CreateRemotePlayTogetherInvitation:output_type -> CRemoteClient_CreateRemotePlayTogetherInvitation_Response
	8,  // 20: RemoteClient.DeleteRemotePlayTogetherInvitation:output_type -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Response
	11, // 21: RemoteClient.GetPairingInfo:output_type -> CRemoteClient_GetPairingInfo_Response
	13, // 22: RemoteClient.GetRecentClients:output_type -> CRemoteClient_GetRecentClients_Response
	15, // 23: RemoteClient.MarkTaskComplete:output_type -> CRemoteClient_MarkTaskComplete_Response
	21, // 24: RemoteClient.NotifyOnline:output_type -> NoResponse
	21, // 25: RemoteClient.NotifyReplyPacket:output_type -> NoResponse
	19, // 26: RemoteClient.SendRemotePlaySessionStarted:output_type -> CRemotePlay_SessionStarted_Response
	21, // 27: RemoteClient.SendRemotePlaySessionStopped:output_type -> NoResponse
	21, // 28: RemoteClient.SendRemotePlayTogetherPacket:output_type -> NoResponse
	21, // 29: RemoteClient.SendSteamBroadcastPacket:output_type -> NoResponse
	21, // 30: RemoteClient.SendSteamToSteamPacket:output_type -> NoResponse
	17, // [17:31] is the sub-list for method output_type
	3,  // [3:17] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_remote_proto_init() }
func file_service_remote_proto_init() {
	if File_service_remote_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_remote_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_AllocateRelayServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_AllocateRelayServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_AllocateSDR_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_AllocateSDR_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_ClientDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_CreateRemotePlayTogetherInvitation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_CreateRemotePlayTogetherInvitation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_DeviceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_GetPairingInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_GetPairingInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_GetRecentClients_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_GetRecentClients_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_MarkTaskComplete_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_MarkTaskComplete_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_Online_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CRemoteClient_ReplyPacket_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CRemotePlay_SessionStarted_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_remote_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CRemotePlay_SessionStarted_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_remote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_remote_proto_goTypes,
		DependencyIndexes: file_service_remote_proto_depIdxs,
		MessageInfos:      file_service_remote_proto_msgTypes,
	}.Build()
	File_service_remote_proto = out.File
	file_service_remote_proto_rawDesc = nil
	file_service_remote_proto_goTypes = nil
	file_service_remote_proto_depIdxs = nil
}
