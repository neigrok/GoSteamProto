// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_storeappsimilarity.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid          *uint64                     `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Sort             *int32                      `protobuf:"varint,2,opt,name=sort,def=1" json:"sort,omitempty"`
	ClustersToReturn *int32                      `protobuf:"varint,3,opt,name=clusters_to_return,json=clustersToReturn" json:"clusters_to_return,omitempty"`
	ClusterIndex     *int32                      `protobuf:"varint,4,opt,name=cluster_index,json=clusterIndex" json:"cluster_index,omitempty"`
	Context          *StoreBrowseContext         `protobuf:"bytes,10,opt,name=context" json:"context,omitempty"`
	DataRequest      *StoreBrowseItemDataRequest `protobuf:"bytes,11,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
}

// Default values for CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request fields.
const (
	Default_CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request_Sort = int32(1)
)

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) Reset() {
	*x = CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) ProtoMessage() {}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{0}
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return Default_CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request_Sort
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) GetClustersToReturn() int32 {
	if x != nil && x.ClustersToReturn != nil {
		return *x.ClustersToReturn
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) GetClusterIndex() int32 {
	if x != nil && x.ClusterIndex != nil {
		return *x.ClusterIndex
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response) Reset() {
	*x = CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response) ProtoMessage() {}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{1}
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response) GetClusters() []*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                  *int32       `protobuf:"varint,1,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	PlaytimeForever            *int32       `protobuf:"varint,2,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	Playtime_2Weeks            *int32       `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	LastPlayed                 *uint32      `protobuf:"varint,4,opt,name=last_played,json=lastPlayed" json:"last_played,omitempty"`
	PlayedAppids               []int32      `protobuf:"varint,5,rep,name=played_appids,json=playedAppids" json:"played_appids,omitempty"`
	SimilarItemsAppids         []int32      `protobuf:"varint,6,rep,name=similar_items_appids,json=similarItemsAppids" json:"similar_items_appids,omitempty"`
	SimilarItems               []*StoreItem `protobuf:"bytes,7,rep,name=similar_items,json=similarItems" json:"similar_items,omitempty"`
	SimilarItemPopularityScore *float64     `protobuf:"fixed64,8,opt,name=similar_item_popularity_score,json=similarItemPopularityScore" json:"similar_item_popularity_score,omitempty"`
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) Reset() {
	*x = CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) ProtoMessage() {}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{2}
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetClusterId() int32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetLastPlayed() uint32 {
	if x != nil && x.LastPlayed != nil {
		return *x.LastPlayed
	}
	return 0
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetPlayedAppids() []int32 {
	if x != nil {
		return x.PlayedAppids
	}
	return nil
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetSimilarItemsAppids() []int32 {
	if x != nil {
		return x.SimilarItemsAppids
	}
	return nil
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetSimilarItems() []*StoreItem {
	if x != nil {
		return x.SimilarItems
	}
	return nil
}

func (x *CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster) GetSimilarItemPopularityScore() float64 {
	if x != nil && x.SimilarItemPopularityScore != nil {
		return *x.SimilarItemPopularityScore
	}
	return 0
}

type CStoreAppSimilarity_PrioritizeAppsForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64                            `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CountryCode       *string                            `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Ids               []*StoreItemID                     `protobuf:"bytes,3,rep,name=ids" json:"ids,omitempty"`
	Options           *StoreAppSimilarityPriorityOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
	Debug             *bool                              `protobuf:"varint,5,opt,name=debug" json:"debug,omitempty"`
	IncludeOwnedGames *bool                              `protobuf:"varint,6,opt,name=include_owned_games,json=includeOwnedGames" json:"include_owned_games,omitempty"`
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) Reset() {
	*x = CStoreAppSimilarity_PrioritizeAppsForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_PrioritizeAppsForUser_Request) ProtoMessage() {}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_PrioritizeAppsForUser_Request.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_PrioritizeAppsForUser_Request) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{3}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) GetIds() []*StoreItemID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) GetOptions() *StoreAppSimilarityPriorityOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Request) GetIncludeOwnedGames() bool {
	if x != nil && x.IncludeOwnedGames != nil {
		return *x.IncludeOwnedGames
	}
	return false
}

type CStoreAppSimilarity_PrioritizeAppsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response) Reset() {
	*x = CStoreAppSimilarity_PrioritizeAppsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response) ProtoMessage() {}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_PrioritizeAppsForUser_Response.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{4}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response) GetItems() []*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *StoreItemID                                                                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AlreadyOwned       *bool                                                                              `protobuf:"varint,2,opt,name=already_owned,json=alreadyOwned" json:"already_owned,omitempty"`
	Weight             *float64                                                                           `protobuf:"fixed64,3,opt,name=weight" json:"weight,omitempty"`
	WeightBeforeDedupe *float64                                                                           `protobuf:"fixed64,4,opt,name=weight_before_dedupe,json=weightBeforeDedupe" json:"weight_before_dedupe,omitempty"`
	DebugMatches       []*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo    `protobuf:"bytes,50,rep,name=debug_matches,json=debugMatches" json:"debug_matches,omitempty"`
	DebugPopularity    *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo `protobuf:"bytes,51,opt,name=debug_popularity,json=debugPopularity" json:"debug_popularity,omitempty"`
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) Reset() {
	*x = CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) ProtoMessage() {}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{5}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) GetId() *StoreItemID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) GetAlreadyOwned() bool {
	if x != nil && x.AlreadyOwned != nil {
		return *x.AlreadyOwned
	}
	return false
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) GetWeightBeforeDedupe() float64 {
	if x != nil && x.WeightBeforeDedupe != nil {
		return *x.WeightBeforeDedupe
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) GetDebugMatches() []*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo {
	if x != nil {
		return x.DebugMatches
	}
	return nil
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem) GetDebugPopularity() *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo {
	if x != nil {
		return x.DebugPopularity
	}
	return nil
}

type CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceApp  *int32   `protobuf:"varint,1,opt,name=source_app,json=sourceApp" json:"source_app,omitempty"`
	Weight     *float64 `protobuf:"fixed64,2,opt,name=weight" json:"weight,omitempty"`
	Similarity *float64 `protobuf:"fixed64,3,opt,name=similarity" json:"similarity,omitempty"`
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) Reset() {
	*x = CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) ProtoMessage() {}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{6}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) GetSourceApp() int32 {
	if x != nil && x.SourceApp != nil {
		return *x.SourceApp
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo) GetSimilarity() float64 {
	if x != nil && x.Similarity != nil {
		return *x.Similarity
	}
	return 0
}

type CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                   *uint32  `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	PopularityFactor       *float64 `protobuf:"fixed64,2,opt,name=popularity_factor,json=popularityFactor" json:"popularity_factor,omitempty"`
	WeightBeforePopularity *float64 `protobuf:"fixed64,3,opt,name=weight_before_popularity,json=weightBeforePopularity" json:"weight_before_popularity,omitempty"`
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) Reset() {
	*x = CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) ProtoMessage() {
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo.ProtoReflect.Descriptor instead.
func (*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{7}
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) GetPopularityFactor() float64 {
	if x != nil && x.PopularityFactor != nil {
		return *x.PopularityFactor
	}
	return 0
}

func (x *CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo) GetWeightBeforePopularity() float64 {
	if x != nil && x.WeightBeforePopularity != nil {
		return *x.WeightBeforePopularity
	}
	return 0
}

type StoreAppSimilarityPriorityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagScoreFactor       *float64 `protobuf:"fixed64,1,opt,name=tag_score_factor,json=tagScoreFactor,def=1" json:"tag_score_factor,omitempty"`
	PlaytimeMaxSeconds   *int32   `protobuf:"varint,10,opt,name=playtime_max_seconds,json=playtimeMaxSeconds,def=360000" json:"playtime_max_seconds,omitempty"`
	PlaytimeMaxGames     *int32   `protobuf:"varint,11,opt,name=playtime_max_games,json=playtimeMaxGames,def=3" json:"playtime_max_games,omitempty"`
	PlaytimeScoreFactor  *float64 `protobuf:"fixed64,12,opt,name=playtime_score_factor,json=playtimeScoreFactor,def=0.9" json:"playtime_score_factor,omitempty"`
	PopularityFactor     *int32   `protobuf:"varint,20,opt,name=popularity_factor,json=popularityFactor,def=5" json:"popularity_factor,omitempty"`
	PopularityReciprocal *int32   `protobuf:"varint,21,opt,name=popularity_reciprocal,json=popularityReciprocal,def=10000" json:"popularity_reciprocal,omitempty"`
	PopularityBaseScore  *int64   `protobuf:"varint,22,opt,name=popularity_base_score,json=popularityBaseScore,def=5000000" json:"popularity_base_score,omitempty"`
}

// Default values for StoreAppSimilarityPriorityOptions fields.
const (
	Default_StoreAppSimilarityPriorityOptions_TagScoreFactor       = float64(1)
	Default_StoreAppSimilarityPriorityOptions_PlaytimeMaxSeconds   = int32(360000)
	Default_StoreAppSimilarityPriorityOptions_PlaytimeMaxGames     = int32(3)
	Default_StoreAppSimilarityPriorityOptions_PlaytimeScoreFactor  = float64(0.9)
	Default_StoreAppSimilarityPriorityOptions_PopularityFactor     = int32(5)
	Default_StoreAppSimilarityPriorityOptions_PopularityReciprocal = int32(10000)
	Default_StoreAppSimilarityPriorityOptions_PopularityBaseScore  = int64(5000000)
)

func (x *StoreAppSimilarityPriorityOptions) Reset() {
	*x = StoreAppSimilarityPriorityOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_storeappsimilarity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreAppSimilarityPriorityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreAppSimilarityPriorityOptions) ProtoMessage() {}

func (x *StoreAppSimilarityPriorityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_service_storeappsimilarity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreAppSimilarityPriorityOptions.ProtoReflect.Descriptor instead.
func (*StoreAppSimilarityPriorityOptions) Descriptor() ([]byte, []int) {
	return file_service_storeappsimilarity_proto_rawDescGZIP(), []int{8}
}

func (x *StoreAppSimilarityPriorityOptions) GetTagScoreFactor() float64 {
	if x != nil && x.TagScoreFactor != nil {
		return *x.TagScoreFactor
	}
	return Default_StoreAppSimilarityPriorityOptions_TagScoreFactor
}

func (x *StoreAppSimilarityPriorityOptions) GetPlaytimeMaxSeconds() int32 {
	if x != nil && x.PlaytimeMaxSeconds != nil {
		return *x.PlaytimeMaxSeconds
	}
	return Default_StoreAppSimilarityPriorityOptions_PlaytimeMaxSeconds
}

func (x *StoreAppSimilarityPriorityOptions) GetPlaytimeMaxGames() int32 {
	if x != nil && x.PlaytimeMaxGames != nil {
		return *x.PlaytimeMaxGames
	}
	return Default_StoreAppSimilarityPriorityOptions_PlaytimeMaxGames
}

func (x *StoreAppSimilarityPriorityOptions) GetPlaytimeScoreFactor() float64 {
	if x != nil && x.PlaytimeScoreFactor != nil {
		return *x.PlaytimeScoreFactor
	}
	return Default_StoreAppSimilarityPriorityOptions_PlaytimeScoreFactor
}

func (x *StoreAppSimilarityPriorityOptions) GetPopularityFactor() int32 {
	if x != nil && x.PopularityFactor != nil {
		return *x.PopularityFactor
	}
	return Default_StoreAppSimilarityPriorityOptions_PopularityFactor
}

func (x *StoreAppSimilarityPriorityOptions) GetPopularityReciprocal() int32 {
	if x != nil && x.PopularityReciprocal != nil {
		return *x.PopularityReciprocal
	}
	return Default_StoreAppSimilarityPriorityOptions_PopularityReciprocal
}

func (x *StoreAppSimilarityPriorityOptions) GetPopularityBaseScore() int64 {
	if x != nil && x.PopularityBaseScore != nil {
		return *x.PopularityBaseScore
	}
	return Default_StoreAppSimilarityPriorityOptions_PopularityBaseScore
}

var File_service_storeappsimilarity_proto protoreflect.FileDescriptor

var file_service_storeappsimilarity_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x61,
	0x70, 0x70, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x38, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x01,
	0x0a, 0x39, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x03, 0x0a, 0x41,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x32, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x77,
	0x65, 0x65, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x0d,
	0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0c, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x41, 0x0a,
	0x1d, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x94, 0x02, 0x0a, 0x31, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x32, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x3d, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x64,
	0x75, 0x70, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x5f, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa5, 0x01, 0x0a, 0x4c, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xce,
	0x01, 0x0a, 0x51, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x5f, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xa7, 0x03, 0x0a, 0x21, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x01, 0x31, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x06, 0x33, 0x36, 0x30, 0x30, 0x30, 0x30, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x33, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x15, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e,
	0x39, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x11, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x35, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x10,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x15, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x14, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x15,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x07, 0x35, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x52, 0x13, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0xaf, 0x02, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x95, 0x01, 0x0a, 0x1c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x53, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x70, 0x70, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_storeappsimilarity_proto_rawDescOnce sync.Once
	file_service_storeappsimilarity_proto_rawDescData = file_service_storeappsimilarity_proto_rawDesc
)

func file_service_storeappsimilarity_proto_rawDescGZIP() []byte {
	file_service_storeappsimilarity_proto_rawDescOnce.Do(func() {
		file_service_storeappsimilarity_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_storeappsimilarity_proto_rawDescData)
	})
	return file_service_storeappsimilarity_proto_rawDescData
}

var file_service_storeappsimilarity_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_storeappsimilarity_proto_goTypes = []any{
	(*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request)(nil),                          // 0: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request
	(*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response)(nil),                         // 1: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response
	(*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster)(nil),                 // 2: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster
	(*CStoreAppSimilarity_PrioritizeAppsForUser_Request)(nil),                                 // 3: CStoreAppSimilarity_PrioritizeAppsForUser_Request
	(*CStoreAppSimilarity_PrioritizeAppsForUser_Response)(nil),                                // 4: CStoreAppSimilarity_PrioritizeAppsForUser_Response
	(*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem)(nil),                     // 5: CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem
	(*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo)(nil),      // 6: CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo
	(*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo)(nil), // 7: CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo
	(*StoreAppSimilarityPriorityOptions)(nil),                                                 // 8: StoreAppSimilarityPriorityOptions
	(*StoreBrowseContext)(nil),         // 9: StoreBrowseContext
	(*StoreBrowseItemDataRequest)(nil), // 10: StoreBrowseItemDataRequest
	(*StoreItem)(nil),                  // 11: StoreItem
	(*StoreItemID)(nil),                // 12: StoreItemID
}
var file_service_storeappsimilarity_proto_depIdxs = []int32{
	9,  // 0: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request.context:type_name -> StoreBrowseContext
	10, // 1: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request.data_request:type_name -> StoreBrowseItemDataRequest
	2,  // 2: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response.clusters:type_name -> CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster
	11, // 3: CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster.similar_items:type_name -> StoreItem
	12, // 4: CStoreAppSimilarity_PrioritizeAppsForUser_Request.ids:type_name -> StoreItemID
	8,  // 5: CStoreAppSimilarity_PrioritizeAppsForUser_Request.options:type_name -> StoreAppSimilarityPriorityOptions
	5,  // 6: CStoreAppSimilarity_PrioritizeAppsForUser_Response.items:type_name -> CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem
	12, // 7: CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem.id:type_name -> StoreItemID
	6,  // 8: CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem.debug_matches:type_name -> CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo
	7,  // 9: CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem.debug_popularity:type_name -> CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo
	0,  // 10: StoreAppSimilarity.IdentifyClustersFromPlaytime:input_type -> CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request
	3,  // 11: StoreAppSimilarity.PrioritizeAppsForUser:input_type -> CStoreAppSimilarity_PrioritizeAppsForUser_Request
	1,  // 12: StoreAppSimilarity.IdentifyClustersFromPlaytime:output_type -> CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response
	4,  // 13: StoreAppSimilarity.PrioritizeAppsForUser:output_type -> CStoreAppSimilarity_PrioritizeAppsForUser_Response
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_service_storeappsimilarity_proto_init() }
func file_service_storeappsimilarity_proto_init() {
	if File_service_storeappsimilarity_proto != nil {
		return
	}
	file_common_base_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_storeappsimilarity_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_IdentifyClustersFromPlaytime_Response_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_PrioritizeAppsForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_PrioritizeAppsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_MatchDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CStoreAppSimilarity_PrioritizeAppsForUser_Response_ResultItem_PopularityDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_storeappsimilarity_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StoreAppSimilarityPriorityOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_storeappsimilarity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_storeappsimilarity_proto_goTypes,
		DependencyIndexes: file_service_storeappsimilarity_proto_depIdxs,
		MessageInfos:      file_service_storeappsimilarity_proto_msgTypes,
	}.Build()
	File_service_storeappsimilarity_proto = out.File
	file_service_storeappsimilarity_proto_rawDesc = nil
	file_service_storeappsimilarity_proto_goTypes = nil
	file_service_storeappsimilarity_proto_depIdxs = nil
}
