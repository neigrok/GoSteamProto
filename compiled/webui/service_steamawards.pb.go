// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_steamawards.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamAwards_GetNominationRecommendations_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId *uint32 `protobuf:"varint,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (x *CSteamAwards_GetNominationRecommendations_Request) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationRecommendations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Request) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{0}
}

func (x *CSteamAwards_GetNominationRecommendations_Request) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

type CSteamAwards_GetNominationRecommendations_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayedApp       []*CSteamAwards_GetNominationRecommendations_Response_PlayedApps     `protobuf:"bytes,1,rep,name=played_app,json=playedApp" json:"played_app,omitempty"`
	SuggestedEvents []*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent `protobuf:"bytes,2,rep,name=suggested_events,json=suggestedEvents" json:"suggested_events,omitempty"`
	SuggestedApps   []*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp   `protobuf:"bytes,3,rep,name=suggested_apps,json=suggestedApps" json:"suggested_apps,omitempty"`
	DebugQuery      *string                                                              `protobuf:"bytes,4,opt,name=debug_query,json=debugQuery" json:"debug_query,omitempty"`
}

func (x *CSteamAwards_GetNominationRecommendations_Response) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationRecommendations_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetPlayedApp() []*CSteamAwards_GetNominationRecommendations_Response_PlayedApps {
	if x != nil {
		return x.PlayedApp
	}
	return nil
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetSuggestedEvents() []*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent {
	if x != nil {
		return x.SuggestedEvents
	}
	return nil
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetSuggestedApps() []*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp {
	if x != nil {
		return x.SuggestedApps
	}
	return nil
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetDebugQuery() string {
	if x != nil && x.DebugQuery != nil {
		return *x.DebugQuery
	}
	return ""
}

type CSteamAwards_GetNominationRecommendations_Response_PlayedApps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Playtime *int32  `protobuf:"varint,2,opt,name=playtime" json:"playtime,omitempty"`
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response_PlayedApps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response_PlayedApps) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response_PlayedApps.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response_PlayedApps) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) GetPlaytime() int32 {
	if x != nil && x.Playtime != nil {
		return *x.Playtime
	}
	return 0
}

type CSteamAwards_GetNominationRecommendations_Response_SuggestedApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response_SuggestedApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response_SuggestedApp.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid   *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid *uint64 `protobuf:"varint,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	Appid    *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamAwards_GetNominationShareLink_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateNew *bool `protobuf:"varint,1,opt,name=generate_new,json=generateNew" json:"generate_new,omitempty"`
}

func (x *CSteamAwards_GetNominationShareLink_Request) Reset() {
	*x = CSteamAwards_GetNominationShareLink_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationShareLink_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationShareLink_Request) ProtoMessage() {}

func (x *CSteamAwards_GetNominationShareLink_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationShareLink_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationShareLink_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamAwards_GetNominationShareLink_Request) GetGenerateNew() bool {
	if x != nil && x.GenerateNew != nil {
		return *x.GenerateNew
	}
	return false
}

type CSteamAwards_GetNominationShareLink_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *uint64 `protobuf:"fixed64,1,opt,name=code" json:"code,omitempty"`
}

func (x *CSteamAwards_GetNominationShareLink_Response) Reset() {
	*x = CSteamAwards_GetNominationShareLink_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetNominationShareLink_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationShareLink_Response) ProtoMessage() {}

func (x *CSteamAwards_GetNominationShareLink_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationShareLink_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationShareLink_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamAwards_GetNominationShareLink_Response) GetCode() uint64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

type CSteamAwards_GetOtherUserNominations_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Code    *uint64 `protobuf:"fixed64,2,opt,name=code" json:"code,omitempty"`
}

func (x *CSteamAwards_GetOtherUserNominations_Request) Reset() {
	*x = CSteamAwards_GetOtherUserNominations_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetOtherUserNominations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetOtherUserNominations_Request) ProtoMessage() {}

func (x *CSteamAwards_GetOtherUserNominations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetOtherUserNominations_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetOtherUserNominations_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamAwards_GetOtherUserNominations_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamAwards_GetOtherUserNominations_Request) GetCode() uint64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

type CSteamAwards_GetUserNominations_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamAwards_GetUserNominations_Request) Reset() {
	*x = CSteamAwards_GetUserNominations_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetUserNominations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetUserNominations_Request) ProtoMessage() {}

func (x *CSteamAwards_GetUserNominations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetUserNominations_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetUserNominations_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{8}
}

type CSteamAwards_GetUserNominations_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nominations []*CSteamAwardsNomination `protobuf:"bytes,1,rep,name=nominations" json:"nominations,omitempty"`
}

func (x *CSteamAwards_GetUserNominations_Response) Reset() {
	*x = CSteamAwards_GetUserNominations_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_GetUserNominations_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetUserNominations_Response) ProtoMessage() {}

func (x *CSteamAwards_GetUserNominations_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetUserNominations_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetUserNominations_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamAwards_GetUserNominations_Response) GetNominations() []*CSteamAwardsNomination {
	if x != nil {
		return x.Nominations
	}
	return nil
}

type CSteamAwards_Nominate_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId  *uint32 `protobuf:"varint,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	NominatedId *uint32 `protobuf:"varint,2,opt,name=nominated_id,json=nominatedId" json:"nominated_id,omitempty"`
	Source      *int32  `protobuf:"varint,3,opt,name=source" json:"source,omitempty"`
}

func (x *CSteamAwards_Nominate_Request) Reset() {
	*x = CSteamAwards_Nominate_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_Nominate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_Nominate_Request) ProtoMessage() {}

func (x *CSteamAwards_Nominate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_Nominate_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_Nominate_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamAwards_Nominate_Request) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *CSteamAwards_Nominate_Request) GetNominatedId() uint32 {
	if x != nil && x.NominatedId != nil {
		return *x.NominatedId
	}
	return 0
}

func (x *CSteamAwards_Nominate_Request) GetSource() int32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

type CSteamAwards_Nominate_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nominations []*CSteamAwardsNomination `protobuf:"bytes,1,rep,name=nominations" json:"nominations,omitempty"`
}

func (x *CSteamAwards_Nominate_Response) Reset() {
	*x = CSteamAwards_Nominate_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwards_Nominate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_Nominate_Response) ProtoMessage() {}

func (x *CSteamAwards_Nominate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_Nominate_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_Nominate_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamAwards_Nominate_Response) GetNominations() []*CSteamAwardsNomination {
	if x != nil {
		return x.Nominations
	}
	return nil
}

type CSteamAwardsNomination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId   *uint32 `protobuf:"varint,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	CategoryName *string `protobuf:"bytes,2,opt,name=category_name,json=categoryName" json:"category_name,omitempty"`
	// optional uint32 appid = 2;
	Appid_Field_3 *uint32 `protobuf:"varint,3,opt,name=appid__field_3,json=appidField3" json:"appid__field_3,omitempty"`
	// optional uint32 last_updated = 3;
	WriteInName *string `protobuf:"bytes,4,opt,name=write_in_name,json=writeInName" json:"write_in_name,omitempty"`
	StoreAppid  *uint32 `protobuf:"varint,5,opt,name=store_appid,json=storeAppid" json:"store_appid,omitempty"`
	DeveloperId *uint32 `protobuf:"varint,6,opt,name=developer_id,json=developerId" json:"developer_id,omitempty"`
}

func (x *CSteamAwardsNomination) Reset() {
	*x = CSteamAwardsNomination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamawards_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamAwardsNomination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwardsNomination) ProtoMessage() {}

func (x *CSteamAwardsNomination) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwardsNomination.ProtoReflect.Descriptor instead.
func (*CSteamAwardsNomination) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{12}
}

func (x *CSteamAwardsNomination) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *CSteamAwardsNomination) GetCategoryName() string {
	if x != nil && x.CategoryName != nil {
		return *x.CategoryName
	}
	return ""
}

func (x *CSteamAwardsNomination) GetAppid_Field_3() uint32 {
	if x != nil && x.Appid_Field_3 != nil {
		return *x.Appid_Field_3
	}
	return 0
}

func (x *CSteamAwardsNomination) GetWriteInName() string {
	if x != nil && x.WriteInName != nil {
		return *x.WriteInName
	}
	return ""
}

func (x *CSteamAwardsNomination) GetStoreAppid() uint32 {
	if x != nil && x.StoreAppid != nil {
		return *x.StoreAppid
	}
	return 0
}

func (x *CSteamAwardsNomination) GetDeveloperId() uint32 {
	if x != nil && x.DeveloperId != nil {
		return *x.DeveloperId
	}
	return 0
}

var File_service_steamawards_proto protoreflect.FileDescriptor

var file_service_steamawards_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54,
	0x0a, 0x31, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x32, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x41, 0x70, 0x70, 0x73, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x41, 0x70, 0x70, 0x12, 0x6d, 0x0a, 0x10, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x0e, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x70, 0x70, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x3d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x41, 0x70, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x3f, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x41, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x22, 0x50, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x22, 0x42, 0x0a, 0x2c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x2c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x65, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5,
	0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5b,
	0x0a, 0x1e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x16,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x33, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x32, 0xbb, 0x04, 0x0a, 0x0b, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_steamawards_proto_rawDescOnce sync.Once
	file_service_steamawards_proto_rawDescData = file_service_steamawards_proto_rawDesc
)

func file_service_steamawards_proto_rawDescGZIP() []byte {
	file_service_steamawards_proto_rawDescOnce.Do(func() {
		file_service_steamawards_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_steamawards_proto_rawDescData)
	})
	return file_service_steamawards_proto_rawDescData
}

var file_service_steamawards_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_steamawards_proto_goTypes = []any{
	(*CSteamAwards_GetNominationRecommendations_Request)(nil),                 // 0: CSteamAwards_GetNominationRecommendations_Request
	(*CSteamAwards_GetNominationRecommendations_Response)(nil),                // 1: CSteamAwards_GetNominationRecommendations_Response
	(*CSteamAwards_GetNominationRecommendations_Response_PlayedApps)(nil),     // 2: CSteamAwards_GetNominationRecommendations_Response_PlayedApps
	(*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp)(nil),   // 3: CSteamAwards_GetNominationRecommendations_Response_SuggestedApp
	(*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent)(nil), // 4: CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent
	(*CSteamAwards_GetNominationShareLink_Request)(nil),                       // 5: CSteamAwards_GetNominationShareLink_Request
	(*CSteamAwards_GetNominationShareLink_Response)(nil),                      // 6: CSteamAwards_GetNominationShareLink_Response
	(*CSteamAwards_GetOtherUserNominations_Request)(nil),                      // 7: CSteamAwards_GetOtherUserNominations_Request
	(*CSteamAwards_GetUserNominations_Request)(nil),                           // 8: CSteamAwards_GetUserNominations_Request
	(*CSteamAwards_GetUserNominations_Response)(nil),                          // 9: CSteamAwards_GetUserNominations_Response
	(*CSteamAwards_Nominate_Request)(nil),                                     // 10: CSteamAwards_Nominate_Request
	(*CSteamAwards_Nominate_Response)(nil),                                    // 11: CSteamAwards_Nominate_Response
	(*CSteamAwardsNomination)(nil),                                            // 12: CSteamAwardsNomination
}
var file_service_steamawards_proto_depIdxs = []int32{
	2,  // 0: CSteamAwards_GetNominationRecommendations_Response.played_app:type_name -> CSteamAwards_GetNominationRecommendations_Response_PlayedApps
	4,  // 1: CSteamAwards_GetNominationRecommendations_Response.suggested_events:type_name -> CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent
	3,  // 2: CSteamAwards_GetNominationRecommendations_Response.suggested_apps:type_name -> CSteamAwards_GetNominationRecommendations_Response_SuggestedApp
	12, // 3: CSteamAwards_GetUserNominations_Response.nominations:type_name -> CSteamAwardsNomination
	12, // 4: CSteamAwards_Nominate_Response.nominations:type_name -> CSteamAwardsNomination
	0,  // 5: SteamAwards.GetNominationRecommendations:input_type -> CSteamAwards_GetNominationRecommendations_Request
	5,  // 6: SteamAwards.GetNominationShareLink:input_type -> CSteamAwards_GetNominationShareLink_Request
	7,  // 7: SteamAwards.GetOtherUserNominations:input_type -> CSteamAwards_GetOtherUserNominations_Request
	8,  // 8: SteamAwards.GetUserNominations:input_type -> CSteamAwards_GetUserNominations_Request
	10, // 9: SteamAwards.Nominate:input_type -> CSteamAwards_Nominate_Request
	1,  // 10: SteamAwards.GetNominationRecommendations:output_type -> CSteamAwards_GetNominationRecommendations_Response
	6,  // 11: SteamAwards.GetNominationShareLink:output_type -> CSteamAwards_GetNominationShareLink_Response
	9,  // 12: SteamAwards.GetOtherUserNominations:output_type -> CSteamAwards_GetUserNominations_Response
	9,  // 13: SteamAwards.GetUserNominations:output_type -> CSteamAwards_GetUserNominations_Response
	11, // 14: SteamAwards.Nominate:output_type -> CSteamAwards_Nominate_Response
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_service_steamawards_proto_init() }
func file_service_steamawards_proto_init() {
	if File_service_steamawards_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_steamawards_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationRecommendations_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationRecommendations_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationRecommendations_Response_PlayedApps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationShareLink_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetNominationShareLink_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetOtherUserNominations_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetUserNominations_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_GetUserNominations_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_Nominate_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwards_Nominate_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamawards_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamAwardsNomination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_steamawards_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamawards_proto_goTypes,
		DependencyIndexes: file_service_steamawards_proto_depIdxs,
		MessageInfos:      file_service_steamawards_proto_msgTypes,
	}.Build()
	File_service_steamawards_proto = out.File
	file_service_steamawards_proto_rawDesc = nil
	file_service_steamawards_proto_goTypes = nil
	file_service_steamawards_proto_depIdxs = nil
}
