// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_userreviews.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CUserReviews_GetFriendsRecommendedApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CUserReviews_GetFriendsRecommendedApp_Request) Reset() {
	*x = CUserReviews_GetFriendsRecommendedApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_GetFriendsRecommendedApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_GetFriendsRecommendedApp_Request) ProtoMessage() {}

func (x *CUserReviews_GetFriendsRecommendedApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_GetFriendsRecommendedApp_Request.ProtoReflect.Descriptor instead.
func (*CUserReviews_GetFriendsRecommendedApp_Request) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{0}
}

func (x *CUserReviews_GetFriendsRecommendedApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CUserReviews_GetFriendsRecommendedApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountidsRecommended    []uint32 `protobuf:"varint,1,rep,name=accountids_recommended,json=accountidsRecommended" json:"accountids_recommended,omitempty"`
	AccountidsNotRecommended []uint32 `protobuf:"varint,3,rep,name=accountids_not_recommended,json=accountidsNotRecommended" json:"accountids_not_recommended,omitempty"`
}

func (x *CUserReviews_GetFriendsRecommendedApp_Response) Reset() {
	*x = CUserReviews_GetFriendsRecommendedApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_GetFriendsRecommendedApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_GetFriendsRecommendedApp_Response) ProtoMessage() {}

func (x *CUserReviews_GetFriendsRecommendedApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_GetFriendsRecommendedApp_Response.ProtoReflect.Descriptor instead.
func (*CUserReviews_GetFriendsRecommendedApp_Response) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{1}
}

func (x *CUserReviews_GetFriendsRecommendedApp_Response) GetAccountidsRecommended() []uint32 {
	if x != nil {
		return x.AccountidsRecommended
	}
	return nil
}

func (x *CUserReviews_GetFriendsRecommendedApp_Response) GetAccountidsNotRecommended() []uint32 {
	if x != nil {
		return x.AccountidsNotRecommended
	}
	return nil
}

type CUserReviews_GetIndividualRecommendations_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (x *CUserReviews_GetIndividualRecommendations_Request) Reset() {
	*x = CUserReviews_GetIndividualRecommendations_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_GetIndividualRecommendations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_GetIndividualRecommendations_Request) ProtoMessage() {}

func (x *CUserReviews_GetIndividualRecommendations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_GetIndividualRecommendations_Request.ProtoReflect.Descriptor instead.
func (*CUserReviews_GetIndividualRecommendations_Request) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{2}
}

func (x *CUserReviews_GetIndividualRecommendations_Request) GetRequests() []*CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid   *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) Reset() {
	*x = CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) ProtoMessage() {}

func (x *CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest.ProtoReflect.Descriptor instead.
func (*CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{3}
}

func (x *CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CUserReviews_GetIndividualRecommendations_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recommendations []*RecommendationDetails `protobuf:"bytes,1,rep,name=recommendations" json:"recommendations,omitempty"`
}

func (x *CUserReviews_GetIndividualRecommendations_Response) Reset() {
	*x = CUserReviews_GetIndividualRecommendations_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_GetIndividualRecommendations_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_GetIndividualRecommendations_Response) ProtoMessage() {}

func (x *CUserReviews_GetIndividualRecommendations_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_GetIndividualRecommendations_Response.ProtoReflect.Descriptor instead.
func (*CUserReviews_GetIndividualRecommendations_Response) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{4}
}

func (x *CUserReviews_GetIndividualRecommendations_Response) GetRecommendations() []*RecommendationDetails {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

type CUserReviews_Recommendation_LoyaltyReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReactionType *uint32 `protobuf:"varint,1,opt,name=reaction_type,json=reactionType" json:"reaction_type,omitempty"`
	Count        *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CUserReviews_Recommendation_LoyaltyReaction) Reset() {
	*x = CUserReviews_Recommendation_LoyaltyReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_Recommendation_LoyaltyReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_Recommendation_LoyaltyReaction) ProtoMessage() {}

func (x *CUserReviews_Recommendation_LoyaltyReaction) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_Recommendation_LoyaltyReaction.ProtoReflect.Descriptor instead.
func (*CUserReviews_Recommendation_LoyaltyReaction) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{5}
}

func (x *CUserReviews_Recommendation_LoyaltyReaction) GetReactionType() uint32 {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return 0
}

func (x *CUserReviews_Recommendation_LoyaltyReaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CUserReviews_Update_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recommendationid     *uint64 `protobuf:"varint,1,opt,name=recommendationid" json:"recommendationid,omitempty"`
	ReviewText           *string `protobuf:"bytes,2,opt,name=review_text,json=reviewText" json:"review_text,omitempty"`
	VotedUp              *bool   `protobuf:"varint,3,opt,name=voted_up,json=votedUp" json:"voted_up,omitempty"`
	IsPublic             *bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	Language             *string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	IsInEarlyAccess      *bool   `protobuf:"varint,6,opt,name=is_in_early_access,json=isInEarlyAccess" json:"is_in_early_access,omitempty"`
	ReceivedCompensation *bool   `protobuf:"varint,7,opt,name=received_compensation,json=receivedCompensation" json:"received_compensation,omitempty"`
	CommentsDisabled     *bool   `protobuf:"varint,8,opt,name=comments_disabled,json=commentsDisabled" json:"comments_disabled,omitempty"`
	HideInSteamChina     *bool   `protobuf:"varint,9,opt,name=hide_in_steam_china,json=hideInSteamChina" json:"hide_in_steam_china,omitempty"`
}

func (x *CUserReviews_Update_Request) Reset() {
	*x = CUserReviews_Update_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_Update_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_Update_Request) ProtoMessage() {}

func (x *CUserReviews_Update_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_Update_Request.ProtoReflect.Descriptor instead.
func (*CUserReviews_Update_Request) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{6}
}

func (x *CUserReviews_Update_Request) GetRecommendationid() uint64 {
	if x != nil && x.Recommendationid != nil {
		return *x.Recommendationid
	}
	return 0
}

func (x *CUserReviews_Update_Request) GetReviewText() string {
	if x != nil && x.ReviewText != nil {
		return *x.ReviewText
	}
	return ""
}

func (x *CUserReviews_Update_Request) GetVotedUp() bool {
	if x != nil && x.VotedUp != nil {
		return *x.VotedUp
	}
	return false
}

func (x *CUserReviews_Update_Request) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *CUserReviews_Update_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CUserReviews_Update_Request) GetIsInEarlyAccess() bool {
	if x != nil && x.IsInEarlyAccess != nil {
		return *x.IsInEarlyAccess
	}
	return false
}

func (x *CUserReviews_Update_Request) GetReceivedCompensation() bool {
	if x != nil && x.ReceivedCompensation != nil {
		return *x.ReceivedCompensation
	}
	return false
}

func (x *CUserReviews_Update_Request) GetCommentsDisabled() bool {
	if x != nil && x.CommentsDisabled != nil {
		return *x.CommentsDisabled
	}
	return false
}

func (x *CUserReviews_Update_Request) GetHideInSteamChina() bool {
	if x != nil && x.HideInSteamChina != nil {
		return *x.HideInSteamChina
	}
	return false
}

type CUserReviews_Update_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserReviews_Update_Response) Reset() {
	*x = CUserReviews_Update_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserReviews_Update_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserReviews_Update_Response) ProtoMessage() {}

func (x *CUserReviews_Update_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserReviews_Update_Response.ProtoReflect.Descriptor instead.
func (*CUserReviews_Update_Response) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{7}
}

type RecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recommendationid         *uint64  `protobuf:"varint,1,opt,name=recommendationid" json:"recommendationid,omitempty"`
	Steamid                  *uint64  `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Appid                    *uint32  `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	Review                   *string  `protobuf:"bytes,4,opt,name=review" json:"review,omitempty"`
	TimeCreated              *uint32  `protobuf:"varint,5,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated              *uint32  `protobuf:"varint,6,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	VotesUp                  *uint32  `protobuf:"varint,7,opt,name=votes_up,json=votesUp" json:"votes_up,omitempty"`
	VotesDown                *uint32  `protobuf:"varint,8,opt,name=votes_down,json=votesDown" json:"votes_down,omitempty"`
	VoteScore                *float32 `protobuf:"fixed32,9,opt,name=vote_score,json=voteScore" json:"vote_score,omitempty"`
	Language                 *string  `protobuf:"bytes,10,opt,name=language" json:"language,omitempty"`
	CommentCount             *uint32  `protobuf:"varint,11,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
	VotedUp                  *bool    `protobuf:"varint,12,opt,name=voted_up,json=votedUp" json:"voted_up,omitempty"`
	IsPublic                 *bool    `protobuf:"varint,13,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	ModeratorHidden          *bool    `protobuf:"varint,14,opt,name=moderator_hidden,json=moderatorHidden" json:"moderator_hidden,omitempty"`
	FlaggedByDeveloper       *int32   `protobuf:"varint,15,opt,name=flagged_by_developer,json=flaggedByDeveloper" json:"flagged_by_developer,omitempty"`
	ReportScore              *uint32  `protobuf:"varint,16,opt,name=report_score,json=reportScore" json:"report_score,omitempty"`
	SteamidModerator         *uint64  `protobuf:"varint,17,opt,name=steamid_moderator,json=steamidModerator" json:"steamid_moderator,omitempty"`
	SteamidDeveloper         *uint64  `protobuf:"varint,18,opt,name=steamid_developer,json=steamidDeveloper" json:"steamid_developer,omitempty"`
	SteamidDevResponder      *uint64  `protobuf:"varint,19,opt,name=steamid_dev_responder,json=steamidDevResponder" json:"steamid_dev_responder,omitempty"`
	DeveloperResponse        *string  `protobuf:"bytes,20,opt,name=developer_response,json=developerResponse" json:"developer_response,omitempty"`
	TimeDeveloperResponded   *uint32  `protobuf:"varint,21,opt,name=time_developer_responded,json=timeDeveloperResponded" json:"time_developer_responded,omitempty"`
	DeveloperFlagCleared     *bool    `protobuf:"varint,22,opt,name=developer_flag_cleared,json=developerFlagCleared" json:"developer_flag_cleared,omitempty"`
	WrittenDuringEarlyAccess *bool    `protobuf:"varint,23,opt,name=written_during_early_access,json=writtenDuringEarlyAccess" json:"written_during_early_access,omitempty"`
	VotesFunny               *uint32  `protobuf:"varint,24,opt,name=votes_funny,json=votesFunny" json:"votes_funny,omitempty"`
	ReceivedCompensation     *bool    `protobuf:"varint,25,opt,name=received_compensation,json=receivedCompensation" json:"received_compensation,omitempty"`
	UnverifiedPurchase       *bool    `protobuf:"varint,26,opt,name=unverified_purchase,json=unverifiedPurchase" json:"unverified_purchase,omitempty"`
	ReviewQualities          []int32  `protobuf:"varint,27,rep,name=review_qualities,json=reviewQualities" json:"review_qualities,omitempty"`
	// optional int32 review_quality = 27 [(.description) = "enum"];
	WeightedVoteScore        *float32                                       `protobuf:"fixed32,28,opt,name=weighted_vote_score,json=weightedVoteScore" json:"weighted_vote_score,omitempty"`
	ModerationNote           *string                                        `protobuf:"bytes,29,opt,name=moderation_note,json=moderationNote" json:"moderation_note,omitempty"`
	PaymentMethod            *int32                                         `protobuf:"varint,30,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Playtime_2Weeks          *int32                                         `protobuf:"varint,31,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever          *int32                                         `protobuf:"varint,32,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	LastPlaytime             *int32                                         `protobuf:"varint,33,opt,name=last_playtime,json=lastPlaytime" json:"last_playtime,omitempty"`
	CommentsDisabled         *bool                                          `protobuf:"varint,34,opt,name=comments_disabled,json=commentsDisabled" json:"comments_disabled,omitempty"`
	PlaytimeAtReview         *int32                                         `protobuf:"varint,35,opt,name=playtime_at_review,json=playtimeAtReview" json:"playtime_at_review,omitempty"`
	ApprovedForChina         *bool                                          `protobuf:"varint,36,opt,name=approved_for_china,json=approvedForChina" json:"approved_for_china,omitempty"`
	BanCheckResult           *int32                                         `protobuf:"varint,37,opt,name=ban_check_result,json=banCheckResult" json:"ban_check_result,omitempty"`
	Refunded                 *bool                                          `protobuf:"varint,38,opt,name=refunded" json:"refunded,omitempty"`
	AccountScoreSpend        *int32                                         `protobuf:"varint,39,opt,name=account_score_spend,json=accountScoreSpend" json:"account_score_spend,omitempty"`
	Reactions                []*CUserReviews_Recommendation_LoyaltyReaction `protobuf:"bytes,40,rep,name=reactions" json:"reactions,omitempty"`
	Ipaddress                *string                                        `protobuf:"bytes,41,opt,name=ipaddress" json:"ipaddress,omitempty"`
	HiddenInSteamChina       *bool                                          `protobuf:"varint,42,opt,name=hidden_in_steam_china,json=hiddenInSteamChina" json:"hidden_in_steam_china,omitempty"`
	SteamChinaLocation       *string                                        `protobuf:"bytes,43,opt,name=steam_china_location,json=steamChinaLocation" json:"steam_china_location,omitempty"`
	CategoryAsciiPct         *uint32                                        `protobuf:"varint,44,opt,name=category_ascii_pct,json=categoryAsciiPct" json:"category_ascii_pct,omitempty"`
	CategoryMemePct          *uint32                                        `protobuf:"varint,45,opt,name=category_meme_pct,json=categoryMemePct" json:"category_meme_pct,omitempty"`
	CategoryOfftopicPct      *uint32                                        `protobuf:"varint,46,opt,name=category_offtopic_pct,json=categoryOfftopicPct" json:"category_offtopic_pct,omitempty"`
	CategoryUninformativePct *uint32                                        `protobuf:"varint,47,opt,name=category_uninformative_pct,json=categoryUninformativePct" json:"category_uninformative_pct,omitempty"`
	CategoryVotefarmingPct   *uint32                                        `protobuf:"varint,48,opt,name=category_votefarming_pct,json=categoryVotefarmingPct" json:"category_votefarming_pct,omitempty"`
	DeckPlaytimeAtReview     *int32                                         `protobuf:"varint,49,opt,name=deck_playtime_at_review,json=deckPlaytimeAtReview" json:"deck_playtime_at_review,omitempty"`
}

func (x *RecommendationDetails) Reset() {
	*x = RecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_userreviews_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendationDetails) ProtoMessage() {}

func (x *RecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_userreviews_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendationDetails.ProtoReflect.Descriptor instead.
func (*RecommendationDetails) Descriptor() ([]byte, []int) {
	return file_service_userreviews_proto_rawDescGZIP(), []int{8}
}

func (x *RecommendationDetails) GetRecommendationid() uint64 {
	if x != nil && x.Recommendationid != nil {
		return *x.Recommendationid
	}
	return 0
}

func (x *RecommendationDetails) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *RecommendationDetails) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *RecommendationDetails) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

func (x *RecommendationDetails) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *RecommendationDetails) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *RecommendationDetails) GetVotesUp() uint32 {
	if x != nil && x.VotesUp != nil {
		return *x.VotesUp
	}
	return 0
}

func (x *RecommendationDetails) GetVotesDown() uint32 {
	if x != nil && x.VotesDown != nil {
		return *x.VotesDown
	}
	return 0
}

func (x *RecommendationDetails) GetVoteScore() float32 {
	if x != nil && x.VoteScore != nil {
		return *x.VoteScore
	}
	return 0
}

func (x *RecommendationDetails) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *RecommendationDetails) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *RecommendationDetails) GetVotedUp() bool {
	if x != nil && x.VotedUp != nil {
		return *x.VotedUp
	}
	return false
}

func (x *RecommendationDetails) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *RecommendationDetails) GetModeratorHidden() bool {
	if x != nil && x.ModeratorHidden != nil {
		return *x.ModeratorHidden
	}
	return false
}

func (x *RecommendationDetails) GetFlaggedByDeveloper() int32 {
	if x != nil && x.FlaggedByDeveloper != nil {
		return *x.FlaggedByDeveloper
	}
	return 0
}

func (x *RecommendationDetails) GetReportScore() uint32 {
	if x != nil && x.ReportScore != nil {
		return *x.ReportScore
	}
	return 0
}

func (x *RecommendationDetails) GetSteamidModerator() uint64 {
	if x != nil && x.SteamidModerator != nil {
		return *x.SteamidModerator
	}
	return 0
}

func (x *RecommendationDetails) GetSteamidDeveloper() uint64 {
	if x != nil && x.SteamidDeveloper != nil {
		return *x.SteamidDeveloper
	}
	return 0
}

func (x *RecommendationDetails) GetSteamidDevResponder() uint64 {
	if x != nil && x.SteamidDevResponder != nil {
		return *x.SteamidDevResponder
	}
	return 0
}

func (x *RecommendationDetails) GetDeveloperResponse() string {
	if x != nil && x.DeveloperResponse != nil {
		return *x.DeveloperResponse
	}
	return ""
}

func (x *RecommendationDetails) GetTimeDeveloperResponded() uint32 {
	if x != nil && x.TimeDeveloperResponded != nil {
		return *x.TimeDeveloperResponded
	}
	return 0
}

func (x *RecommendationDetails) GetDeveloperFlagCleared() bool {
	if x != nil && x.DeveloperFlagCleared != nil {
		return *x.DeveloperFlagCleared
	}
	return false
}

func (x *RecommendationDetails) GetWrittenDuringEarlyAccess() bool {
	if x != nil && x.WrittenDuringEarlyAccess != nil {
		return *x.WrittenDuringEarlyAccess
	}
	return false
}

func (x *RecommendationDetails) GetVotesFunny() uint32 {
	if x != nil && x.VotesFunny != nil {
		return *x.VotesFunny
	}
	return 0
}

func (x *RecommendationDetails) GetReceivedCompensation() bool {
	if x != nil && x.ReceivedCompensation != nil {
		return *x.ReceivedCompensation
	}
	return false
}

func (x *RecommendationDetails) GetUnverifiedPurchase() bool {
	if x != nil && x.UnverifiedPurchase != nil {
		return *x.UnverifiedPurchase
	}
	return false
}

func (x *RecommendationDetails) GetReviewQualities() []int32 {
	if x != nil {
		return x.ReviewQualities
	}
	return nil
}

func (x *RecommendationDetails) GetWeightedVoteScore() float32 {
	if x != nil && x.WeightedVoteScore != nil {
		return *x.WeightedVoteScore
	}
	return 0
}

func (x *RecommendationDetails) GetModerationNote() string {
	if x != nil && x.ModerationNote != nil {
		return *x.ModerationNote
	}
	return ""
}

func (x *RecommendationDetails) GetPaymentMethod() int32 {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return 0
}

func (x *RecommendationDetails) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *RecommendationDetails) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *RecommendationDetails) GetLastPlaytime() int32 {
	if x != nil && x.LastPlaytime != nil {
		return *x.LastPlaytime
	}
	return 0
}

func (x *RecommendationDetails) GetCommentsDisabled() bool {
	if x != nil && x.CommentsDisabled != nil {
		return *x.CommentsDisabled
	}
	return false
}

func (x *RecommendationDetails) GetPlaytimeAtReview() int32 {
	if x != nil && x.PlaytimeAtReview != nil {
		return *x.PlaytimeAtReview
	}
	return 0
}

func (x *RecommendationDetails) GetApprovedForChina() bool {
	if x != nil && x.ApprovedForChina != nil {
		return *x.ApprovedForChina
	}
	return false
}

func (x *RecommendationDetails) GetBanCheckResult() int32 {
	if x != nil && x.BanCheckResult != nil {
		return *x.BanCheckResult
	}
	return 0
}

func (x *RecommendationDetails) GetRefunded() bool {
	if x != nil && x.Refunded != nil {
		return *x.Refunded
	}
	return false
}

func (x *RecommendationDetails) GetAccountScoreSpend() int32 {
	if x != nil && x.AccountScoreSpend != nil {
		return *x.AccountScoreSpend
	}
	return 0
}

func (x *RecommendationDetails) GetReactions() []*CUserReviews_Recommendation_LoyaltyReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *RecommendationDetails) GetIpaddress() string {
	if x != nil && x.Ipaddress != nil {
		return *x.Ipaddress
	}
	return ""
}

func (x *RecommendationDetails) GetHiddenInSteamChina() bool {
	if x != nil && x.HiddenInSteamChina != nil {
		return *x.HiddenInSteamChina
	}
	return false
}

func (x *RecommendationDetails) GetSteamChinaLocation() string {
	if x != nil && x.SteamChinaLocation != nil {
		return *x.SteamChinaLocation
	}
	return ""
}

func (x *RecommendationDetails) GetCategoryAsciiPct() uint32 {
	if x != nil && x.CategoryAsciiPct != nil {
		return *x.CategoryAsciiPct
	}
	return 0
}

func (x *RecommendationDetails) GetCategoryMemePct() uint32 {
	if x != nil && x.CategoryMemePct != nil {
		return *x.CategoryMemePct
	}
	return 0
}

func (x *RecommendationDetails) GetCategoryOfftopicPct() uint32 {
	if x != nil && x.CategoryOfftopicPct != nil {
		return *x.CategoryOfftopicPct
	}
	return 0
}

func (x *RecommendationDetails) GetCategoryUninformativePct() uint32 {
	if x != nil && x.CategoryUninformativePct != nil {
		return *x.CategoryUninformativePct
	}
	return 0
}

func (x *RecommendationDetails) GetCategoryVotefarmingPct() uint32 {
	if x != nil && x.CategoryVotefarmingPct != nil {
		return *x.CategoryVotefarmingPct
	}
	return 0
}

func (x *RecommendationDetails) GetDeckPlaytimeAtReview() int32 {
	if x != nil && x.DeckPlaytimeAtReview != nil {
		return *x.DeckPlaytimeAtReview
	}
	return 0
}

var File_service_userreviews_proto protoreflect.FileDescriptor

var file_service_userreviews_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45,
	0x0a, 0x2d, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x31, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x47, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x32, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x2b,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x1b, 0x43, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x55, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x69, 0x6e, 0x61, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x10, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x55, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x55, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x14, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x12,
	0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x6e, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x46, 0x75, 0x6e,
	0x6e, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x32, 0x77, 0x65, 0x65, 0x6b, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x32, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x12,
	0x32, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12,
	0x4a, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x69,
	0x6e, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x49, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69,
	0x5f, 0x70, 0x63, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x63, 0x69, 0x69, 0x50, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4d, 0x65, 0x6d, 0x65, 0x50, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4f, 0x66, 0x66, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x1a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x66, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x50, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x32, 0xdb, 0x02, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x7b, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x12, 0x2e, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_userreviews_proto_rawDescOnce sync.Once
	file_service_userreviews_proto_rawDescData = file_service_userreviews_proto_rawDesc
)

func file_service_userreviews_proto_rawDescGZIP() []byte {
	file_service_userreviews_proto_rawDescOnce.Do(func() {
		file_service_userreviews_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_userreviews_proto_rawDescData)
	})
	return file_service_userreviews_proto_rawDescData
}

var file_service_userreviews_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_userreviews_proto_goTypes = []any{
	(*CUserReviews_GetFriendsRecommendedApp_Request)(nil),                           // 0: CUserReviews_GetFriendsRecommendedApp_Request
	(*CUserReviews_GetFriendsRecommendedApp_Response)(nil),                          // 1: CUserReviews_GetFriendsRecommendedApp_Response
	(*CUserReviews_GetIndividualRecommendations_Request)(nil),                       // 2: CUserReviews_GetIndividualRecommendations_Request
	(*CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest)(nil), // 3: CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest
	(*CUserReviews_GetIndividualRecommendations_Response)(nil),                      // 4: CUserReviews_GetIndividualRecommendations_Response
	(*CUserReviews_Recommendation_LoyaltyReaction)(nil),                             // 5: CUserReviews_Recommendation_LoyaltyReaction
	(*CUserReviews_Update_Request)(nil),                                             // 6: CUserReviews_Update_Request
	(*CUserReviews_Update_Response)(nil),                                            // 7: CUserReviews_Update_Response
	(*RecommendationDetails)(nil),                                                   // 8: RecommendationDetails
}
var file_service_userreviews_proto_depIdxs = []int32{
	3, // 0: CUserReviews_GetIndividualRecommendations_Request.requests:type_name -> CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest
	8, // 1: CUserReviews_GetIndividualRecommendations_Response.recommendations:type_name -> RecommendationDetails
	5, // 2: RecommendationDetails.reactions:type_name -> CUserReviews_Recommendation_LoyaltyReaction
	0, // 3: UserReviews.GetFriendsRecommendedApp:input_type -> CUserReviews_GetFriendsRecommendedApp_Request
	2, // 4: UserReviews.GetIndividualRecommendations:input_type -> CUserReviews_GetIndividualRecommendations_Request
	6, // 5: UserReviews.Update:input_type -> CUserReviews_Update_Request
	1, // 6: UserReviews.GetFriendsRecommendedApp:output_type -> CUserReviews_GetFriendsRecommendedApp_Response
	4, // 7: UserReviews.GetIndividualRecommendations:output_type -> CUserReviews_GetIndividualRecommendations_Response
	7, // 8: UserReviews.Update:output_type -> CUserReviews_Update_Response
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_service_userreviews_proto_init() }
func file_service_userreviews_proto_init() {
	if File_service_userreviews_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_userreviews_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_GetFriendsRecommendedApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_GetFriendsRecommendedApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_GetIndividualRecommendations_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_GetIndividualRecommendations_Request_RecommendationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_GetIndividualRecommendations_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_Recommendation_LoyaltyReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_Update_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CUserReviews_Update_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_userreviews_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_userreviews_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_userreviews_proto_goTypes,
		DependencyIndexes: file_service_userreviews_proto_depIdxs,
		MessageInfos:      file_service_userreviews_proto_msgTypes,
	}.Build()
	File_service_userreviews_proto = out.File
	file_service_userreviews_proto_rawDesc = nil
	file_service_userreviews_proto_goTypes = nil
	file_service_userreviews_proto_depIdxs = nil
}
