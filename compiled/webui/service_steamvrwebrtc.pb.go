// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_steamvrwebrtc.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamVR_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Id   *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (x *CSteamVR_Header) Reset() {
	*x = CSteamVR_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_Header) ProtoMessage() {}

func (x *CSteamVR_Header) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_Header.ProtoReflect.Descriptor instead.
func (*CSteamVR_Header) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{0}
}

func (x *CSteamVR_Header) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CSteamVR_Header) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CSteamVR_WebRTC_Active_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamVR_WebRTC_Active_Notification) Reset() {
	*x = CSteamVR_WebRTC_Active_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_Active_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_Active_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_Active_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_Active_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_Active_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{1}
}

type CSteamVR_WebRTC_DataChannel_Close_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (x *CSteamVR_WebRTC_DataChannel_Close_Notification) Reset() {
	*x = CSteamVR_WebRTC_DataChannel_Close_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_DataChannel_Close_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_DataChannel_Close_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_DataChannel_Close_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_DataChannel_Close_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_DataChannel_Close_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamVR_WebRTC_DataChannel_Close_Notification) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

type CSteamVR_WebRTC_DataChannel_Error_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Reason    *string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (x *CSteamVR_WebRTC_DataChannel_Error_Notification) Reset() {
	*x = CSteamVR_WebRTC_DataChannel_Error_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_DataChannel_Error_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_DataChannel_Error_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_DataChannel_Error_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_DataChannel_Error_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_DataChannel_Error_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamVR_WebRTC_DataChannel_Error_Notification) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CSteamVR_WebRTC_DataChannel_Error_Notification) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type CSteamVR_WebRTC_DataChannel_Message_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Data      []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CSteamVR_WebRTC_DataChannel_Message_Notification) Reset() {
	*x = CSteamVR_WebRTC_DataChannel_Message_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_DataChannel_Message_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_DataChannel_Message_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_DataChannel_Message_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_DataChannel_Message_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_DataChannel_Message_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamVR_WebRTC_DataChannel_Message_Notification) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CSteamVR_WebRTC_DataChannel_Message_Notification) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CSteamVR_WebRTC_DataChannel_Open_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (x *CSteamVR_WebRTC_DataChannel_Open_Notification) Reset() {
	*x = CSteamVR_WebRTC_DataChannel_Open_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_DataChannel_Open_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_DataChannel_Open_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_DataChannel_Open_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_DataChannel_Open_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_DataChannel_Open_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamVR_WebRTC_DataChannel_Open_Notification) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

type CSteamVR_WebRTC_Inactive_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamVR_WebRTC_Inactive_Notification) Reset() {
	*x = CSteamVR_WebRTC_Inactive_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_Inactive_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_Inactive_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_Inactive_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_Inactive_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_Inactive_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{6}
}

type CSteamVR_WebRTC_OnDataChannel_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSteamid *uint64 `protobuf:"fixed64,1,opt,name=source_steamid,json=sourceSteamid" json:"source_steamid,omitempty"`
	ChannelId     *uint32 `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Label         *string `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (x *CSteamVR_WebRTC_OnDataChannel_Notification) Reset() {
	*x = CSteamVR_WebRTC_OnDataChannel_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamvrwebrtc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamVR_WebRTC_OnDataChannel_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamVR_WebRTC_OnDataChannel_Notification) ProtoMessage() {}

func (x *CSteamVR_WebRTC_OnDataChannel_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamvrwebrtc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamVR_WebRTC_OnDataChannel_Notification.ProtoReflect.Descriptor instead.
func (*CSteamVR_WebRTC_OnDataChannel_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamvrwebrtc_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamVR_WebRTC_OnDataChannel_Notification) GetSourceSteamid() uint64 {
	if x != nil && x.SourceSteamid != nil {
		return *x.SourceSteamid
	}
	return 0
}

func (x *CSteamVR_WebRTC_OnDataChannel_Notification) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CSteamVR_WebRTC_OnDataChannel_Notification) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

var File_service_steamvrwebrtc_proto protoreflect.FileDescriptor

var file_service_steamvrwebrtc_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x76,
	0x72, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57,
	0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x2d, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0xee, 0x04,
	0x0a, 0x0d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x12,
	0x3b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56,
	0x52, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x5f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x2f, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52,
	0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x2e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4f, 0x70,
	0x65, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x14,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x5f,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_steamvrwebrtc_proto_rawDescOnce sync.Once
	file_service_steamvrwebrtc_proto_rawDescData = file_service_steamvrwebrtc_proto_rawDesc
)

func file_service_steamvrwebrtc_proto_rawDescGZIP() []byte {
	file_service_steamvrwebrtc_proto_rawDescOnce.Do(func() {
		file_service_steamvrwebrtc_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_steamvrwebrtc_proto_rawDescData)
	})
	return file_service_steamvrwebrtc_proto_rawDescData
}

var file_service_steamvrwebrtc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_service_steamvrwebrtc_proto_goTypes = []any{
	(*CSteamVR_Header)(nil),                                  // 0: CSteamVR_Header
	(*CSteamVR_WebRTC_Active_Notification)(nil),              // 1: CSteamVR_WebRTC_Active_Notification
	(*CSteamVR_WebRTC_DataChannel_Close_Notification)(nil),   // 2: CSteamVR_WebRTC_DataChannel_Close_Notification
	(*CSteamVR_WebRTC_DataChannel_Error_Notification)(nil),   // 3: CSteamVR_WebRTC_DataChannel_Error_Notification
	(*CSteamVR_WebRTC_DataChannel_Message_Notification)(nil), // 4: CSteamVR_WebRTC_DataChannel_Message_Notification
	(*CSteamVR_WebRTC_DataChannel_Open_Notification)(nil),    // 5: CSteamVR_WebRTC_DataChannel_Open_Notification
	(*CSteamVR_WebRTC_Inactive_Notification)(nil),            // 6: CSteamVR_WebRTC_Inactive_Notification
	(*CSteamVR_WebRTC_OnDataChannel_Notification)(nil),       // 7: CSteamVR_WebRTC_OnDataChannel_Notification
	(*NoResponse)(nil), // 8: NoResponse
}
var file_service_steamvrwebrtc_proto_depIdxs = []int32{
	1, // 0: SteamVRWebRTC.Active:input_type -> CSteamVR_WebRTC_Active_Notification
	0, // 1: SteamVRWebRTC.Header:input_type -> CSteamVR_Header
	6, // 2: SteamVRWebRTC.Inactive:input_type -> CSteamVR_WebRTC_Inactive_Notification
	2, // 3: SteamVRWebRTC.Notify_DataChannelClose:input_type -> CSteamVR_WebRTC_DataChannel_Close_Notification
	3, // 4: SteamVRWebRTC.Notify_DataChannelError:input_type -> CSteamVR_WebRTC_DataChannel_Error_Notification
	4, // 5: SteamVRWebRTC.Notify_DataChannelMessage:input_type -> CSteamVR_WebRTC_DataChannel_Message_Notification
	5, // 6: SteamVRWebRTC.Notify_DataChannelOpen:input_type -> CSteamVR_WebRTC_DataChannel_Open_Notification
	7, // 7: SteamVRWebRTC.Notify_OnDataChannel:input_type -> CSteamVR_WebRTC_OnDataChannel_Notification
	8, // 8: SteamVRWebRTC.Active:output_type -> NoResponse
	8, // 9: SteamVRWebRTC.Header:output_type -> NoResponse
	8, // 10: SteamVRWebRTC.Inactive:output_type -> NoResponse
	8, // 11: SteamVRWebRTC.Notify_DataChannelClose:output_type -> NoResponse
	8, // 12: SteamVRWebRTC.Notify_DataChannelError:output_type -> NoResponse
	8, // 13: SteamVRWebRTC.Notify_DataChannelMessage:output_type -> NoResponse
	8, // 14: SteamVRWebRTC.Notify_DataChannelOpen:output_type -> NoResponse
	8, // 15: SteamVRWebRTC.Notify_OnDataChannel:output_type -> NoResponse
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_steamvrwebrtc_proto_init() }
func file_service_steamvrwebrtc_proto_init() {
	if File_service_steamvrwebrtc_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_steamvrwebrtc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_Active_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_DataChannel_Close_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_DataChannel_Error_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_DataChannel_Message_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_DataChannel_Open_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_Inactive_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamvrwebrtc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamVR_WebRTC_OnDataChannel_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_steamvrwebrtc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamvrwebrtc_proto_goTypes,
		DependencyIndexes: file_service_steamvrwebrtc_proto_depIdxs,
		MessageInfos:      file_service_steamvrwebrtc_proto_msgTypes,
	}.Build()
	File_service_steamvrwebrtc_proto = out.File
	file_service_steamvrwebrtc_proto_rawDesc = nil
	file_service_steamvrwebrtc_proto_goTypes = nil
	file_service_steamvrwebrtc_proto_depIdxs = nil
}
