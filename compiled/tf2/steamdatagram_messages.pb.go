// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steamdatagram_messages.proto

package tf2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamDatagramMsgID int32

const (
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Invalid                       ESteamDatagramMsgID = 0
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingRequest             ESteamDatagramMsgID = 1
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingReply               ESteamDatagramMsgID = 2
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingRequest         ESteamDatagramMsgID = 3
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingReply           ESteamDatagramMsgID = 4
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionRequest      ESteamDatagramMsgID = 5
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionEstablished  ESteamDatagramMsgID = 6
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoSession                     ESteamDatagramMsgID = 7
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Diagnostic                    ESteamDatagramMsgID = 8
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataClientToRouter            ESteamDatagramMsgID = 9
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToServer            ESteamDatagramMsgID = 10
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataServerToRouter            ESteamDatagramMsgID = 11
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToClient            ESteamDatagramMsgID = 12
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Stats                         ESteamDatagramMsgID = 13
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleRequest       ESteamDatagramMsgID = 14
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleReply         ESteamDatagramMsgID = 15
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary ESteamDatagramMsgID = 16
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayHealth                   ESteamDatagramMsgID = 17
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectRequest                ESteamDatagramMsgID = 18
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectOK                     ESteamDatagramMsgID = 19
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectionClosed              ESteamDatagramMsgID = 20
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoConnection                  ESteamDatagramMsgID = 21
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingRequest       ESteamDatagramMsgID = 22
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingReply         ESteamDatagramMsgID = 23
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionRequest             ESteamDatagramMsgID = 24
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionEstablished         ESteamDatagramMsgID = 25
)

// Enum value maps for ESteamDatagramMsgID.
var (
	ESteamDatagramMsgID_name = map[int32]string{
		0:  "k_ESteamDatagramMsg_Invalid",
		1:  "k_ESteamDatagramMsg_RouterPingRequest",
		2:  "k_ESteamDatagramMsg_RouterPingReply",
		3:  "k_ESteamDatagramMsg_GameserverPingRequest",
		4:  "k_ESteamDatagramMsg_GameserverPingReply",
		5:  "k_ESteamDatagramMsg_GameserverSessionRequest",
		6:  "k_ESteamDatagramMsg_GameserverSessionEstablished",
		7:  "k_ESteamDatagramMsg_NoSession",
		8:  "k_ESteamDatagramMsg_Diagnostic",
		9:  "k_ESteamDatagramMsg_DataClientToRouter",
		10: "k_ESteamDatagramMsg_DataRouterToServer",
		11: "k_ESteamDatagramMsg_DataServerToRouter",
		12: "k_ESteamDatagramMsg_DataRouterToClient",
		13: "k_ESteamDatagramMsg_Stats",
		14: "k_ESteamDatagramMsg_ClientPingSampleRequest",
		15: "k_ESteamDatagramMsg_ClientPingSampleReply",
		16: "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary",
		17: "k_ESteamDatagramMsg_RelayHealth",
		18: "k_ESteamDatagramMsg_ConnectRequest",
		19: "k_ESteamDatagramMsg_ConnectOK",
		20: "k_ESteamDatagramMsg_ConnectionClosed",
		21: "k_ESteamDatagramMsg_NoConnection",
		22: "k_ESteamDatagramMsg_RelayToRelayPingRequest",
		23: "k_ESteamDatagramMsg_RelayToRelayPingReply",
		24: "k_ESteamDatagramMsg_P2PSessionRequest",
		25: "k_ESteamDatagramMsg_P2PSessionEstablished",
	}
	ESteamDatagramMsgID_value = map[string]int32{
		"k_ESteamDatagramMsg_Invalid":                       0,
		"k_ESteamDatagramMsg_RouterPingRequest":             1,
		"k_ESteamDatagramMsg_RouterPingReply":               2,
		"k_ESteamDatagramMsg_GameserverPingRequest":         3,
		"k_ESteamDatagramMsg_GameserverPingReply":           4,
		"k_ESteamDatagramMsg_GameserverSessionRequest":      5,
		"k_ESteamDatagramMsg_GameserverSessionEstablished":  6,
		"k_ESteamDatagramMsg_NoSession":                     7,
		"k_ESteamDatagramMsg_Diagnostic":                    8,
		"k_ESteamDatagramMsg_DataClientToRouter":            9,
		"k_ESteamDatagramMsg_DataRouterToServer":            10,
		"k_ESteamDatagramMsg_DataServerToRouter":            11,
		"k_ESteamDatagramMsg_DataRouterToClient":            12,
		"k_ESteamDatagramMsg_Stats":                         13,
		"k_ESteamDatagramMsg_ClientPingSampleRequest":       14,
		"k_ESteamDatagramMsg_ClientPingSampleReply":         15,
		"k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary": 16,
		"k_ESteamDatagramMsg_RelayHealth":                   17,
		"k_ESteamDatagramMsg_ConnectRequest":                18,
		"k_ESteamDatagramMsg_ConnectOK":                     19,
		"k_ESteamDatagramMsg_ConnectionClosed":              20,
		"k_ESteamDatagramMsg_NoConnection":                  21,
		"k_ESteamDatagramMsg_RelayToRelayPingRequest":       22,
		"k_ESteamDatagramMsg_RelayToRelayPingReply":         23,
		"k_ESteamDatagramMsg_P2PSessionRequest":             24,
		"k_ESteamDatagramMsg_P2PSessionEstablished":         25,
	}
)

func (x ESteamDatagramMsgID) Enum() *ESteamDatagramMsgID {
	p := new(ESteamDatagramMsgID)
	*p = x
	return p
}

func (x ESteamDatagramMsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDatagramMsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[0].Descriptor()
}

func (ESteamDatagramMsgID) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[0]
}

func (x ESteamDatagramMsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDatagramMsgID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDatagramMsgID(num)
	return nil
}

// Deprecated: Use ESteamDatagramMsgID.Descriptor instead.
func (ESteamDatagramMsgID) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{0}
}

type ESteamNetworkingUDPMsgID int32

const (
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeRequest ESteamNetworkingUDPMsgID = 32
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeReply   ESteamNetworkingUDPMsgID = 33
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectRequest   ESteamNetworkingUDPMsgID = 34
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectOK        ESteamNetworkingUDPMsgID = 35
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectionClosed ESteamNetworkingUDPMsgID = 36
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_NoConnection     ESteamNetworkingUDPMsgID = 37
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_Stats            ESteamNetworkingUDPMsgID = 38
)

// Enum value maps for ESteamNetworkingUDPMsgID.
var (
	ESteamNetworkingUDPMsgID_name = map[int32]string{
		32: "k_ESteamNetworkingUDPMsg_ChallengeRequest",
		33: "k_ESteamNetworkingUDPMsg_ChallengeReply",
		34: "k_ESteamNetworkingUDPMsg_ConnectRequest",
		35: "k_ESteamNetworkingUDPMsg_ConnectOK",
		36: "k_ESteamNetworkingUDPMsg_ConnectionClosed",
		37: "k_ESteamNetworkingUDPMsg_NoConnection",
		38: "k_ESteamNetworkingUDPMsg_Stats",
	}
	ESteamNetworkingUDPMsgID_value = map[string]int32{
		"k_ESteamNetworkingUDPMsg_ChallengeRequest": 32,
		"k_ESteamNetworkingUDPMsg_ChallengeReply":   33,
		"k_ESteamNetworkingUDPMsg_ConnectRequest":   34,
		"k_ESteamNetworkingUDPMsg_ConnectOK":        35,
		"k_ESteamNetworkingUDPMsg_ConnectionClosed": 36,
		"k_ESteamNetworkingUDPMsg_NoConnection":     37,
		"k_ESteamNetworkingUDPMsg_Stats":            38,
	}
)

func (x ESteamNetworkingUDPMsgID) Enum() *ESteamNetworkingUDPMsgID {
	p := new(ESteamNetworkingUDPMsgID)
	*p = x
	return p
}

func (x ESteamNetworkingUDPMsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamNetworkingUDPMsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[1].Descriptor()
}

func (ESteamNetworkingUDPMsgID) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[1]
}

func (x ESteamNetworkingUDPMsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamNetworkingUDPMsgID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamNetworkingUDPMsgID(num)
	return nil
}

// Deprecated: Use ESteamNetworkingUDPMsgID.Descriptor instead.
func (ESteamNetworkingUDPMsgID) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{1}
}

type CMsgSteamDatagramSessionCryptInfo_EKeyType int32

const (
	CMsgSteamDatagramSessionCryptInfo_INVALID    CMsgSteamDatagramSessionCryptInfo_EKeyType = 0
	CMsgSteamDatagramSessionCryptInfo_CURVE25519 CMsgSteamDatagramSessionCryptInfo_EKeyType = 1
)

// Enum value maps for CMsgSteamDatagramSessionCryptInfo_EKeyType.
var (
	CMsgSteamDatagramSessionCryptInfo_EKeyType_name = map[int32]string{
		0: "INVALID",
		1: "CURVE25519",
	}
	CMsgSteamDatagramSessionCryptInfo_EKeyType_value = map[string]int32{
		"INVALID":    0,
		"CURVE25519": 1,
	}
)

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Enum() *CMsgSteamDatagramSessionCryptInfo_EKeyType {
	p := new(CMsgSteamDatagramSessionCryptInfo_EKeyType)
	*p = x
	return p
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[2].Descriptor()
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[2]
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramSessionCryptInfo_EKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramSessionCryptInfo_EKeyType(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfo_EKeyType.Descriptor instead.
func (CMsgSteamDatagramSessionCryptInfo_EKeyType) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{3, 0}
}

type CMsgSteamDatagramConnectionStatsClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsClientToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsClientToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsClientToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[3].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[3]
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsClientToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsClientToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsClientToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{14, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsRouterToClient_Flags.
var (
	CMsgSteamDatagramConnectionStatsRouterToClient_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsRouterToClient_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[4].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[4]
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsRouterToClient_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToClient_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToClient_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToServer_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsRouterToServer_Flags.
var (
	CMsgSteamDatagramConnectionStatsRouterToServer_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsRouterToServer_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[5].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[5]
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsRouterToServer_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToServer_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToServer_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{16, 0}
}

type CMsgSteamDatagramConnectionStatsServerToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsServerToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsServerToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsServerToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[6].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[6]
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsServerToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsServerToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsServerToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgSteamDatagramConnectionClosed_ERelayMode int32

const (
	CMsgSteamDatagramConnectionClosed_None         CMsgSteamDatagramConnectionClosed_ERelayMode = 0
	CMsgSteamDatagramConnectionClosed_EndToEnd     CMsgSteamDatagramConnectionClosed_ERelayMode = 1
	CMsgSteamDatagramConnectionClosed_ClosedByPeer CMsgSteamDatagramConnectionClosed_ERelayMode = 2
)

// Enum value maps for CMsgSteamDatagramConnectionClosed_ERelayMode.
var (
	CMsgSteamDatagramConnectionClosed_ERelayMode_name = map[int32]string{
		0: "None",
		1: "EndToEnd",
		2: "ClosedByPeer",
	}
	CMsgSteamDatagramConnectionClosed_ERelayMode_value = map[string]int32{
		"None":         0,
		"EndToEnd":     1,
		"ClosedByPeer": 2,
	}
)

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Enum() *CMsgSteamDatagramConnectionClosed_ERelayMode {
	p := new(CMsgSteamDatagramConnectionClosed_ERelayMode)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionClosed_ERelayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[7].Descriptor()
}

func (CMsgSteamDatagramConnectionClosed_ERelayMode) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[7]
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionClosed_ERelayMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionClosed_ERelayMode(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionClosed_ERelayMode.Descriptor instead.
func (CMsgSteamDatagramConnectionClosed_ERelayMode) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{24, 0}
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[8].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[8]
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{31, 0}
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[9].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[9]
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{32, 0}
}

type CMsgSteamSockets_UDP_Stats_Flags int32

const (
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_E2E       CMsgSteamSockets_UDP_Stats_Flags = 2
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_IMMEDIATE CMsgSteamSockets_UDP_Stats_Flags = 4
)

// Enum value maps for CMsgSteamSockets_UDP_Stats_Flags.
var (
	CMsgSteamSockets_UDP_Stats_Flags_name = map[int32]string{
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamSockets_UDP_Stats_Flags_value = map[string]int32{
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamSockets_UDP_Stats_Flags) Enum() *CMsgSteamSockets_UDP_Stats_Flags {
	p := new(CMsgSteamSockets_UDP_Stats_Flags)
	*p = x
	return p
}

func (x CMsgSteamSockets_UDP_Stats_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamSockets_UDP_Stats_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_proto_enumTypes[10].Descriptor()
}

func (CMsgSteamSockets_UDP_Stats_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_proto_enumTypes[10]
}

func (x CMsgSteamSockets_UDP_Stats_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamSockets_UDP_Stats_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamSockets_UDP_Stats_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamSockets_UDP_Stats_Flags.Descriptor instead.
func (CMsgSteamSockets_UDP_Stats_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{39, 0}
}

type CMsgSteamDatagramRouterPingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTimestamp            *uint32                                            `protobuf:"fixed32,1,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	LatencyDatacenterIds       []uint32                                           `protobuf:"fixed32,2,rep,packed,name=latency_datacenter_ids,json=latencyDatacenterIds" json:"latency_datacenter_ids,omitempty"`
	LatencyPingMs              []uint32                                           `protobuf:"varint,3,rep,packed,name=latency_ping_ms,json=latencyPingMs" json:"latency_ping_ms,omitempty"`
	YourPublicIp               *uint32                                            `protobuf:"fixed32,4,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime                 *uint32                                            `protobuf:"fixed32,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge                  *uint64                                            `protobuf:"fixed64,6,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown       *uint32                                            `protobuf:"varint,7,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	ClientCookie               *uint32                                            `protobuf:"fixed32,8,opt,name=client_cookie,json=clientCookie" json:"client_cookie,omitempty"`
	ScoringPenaltyRelayCluster *uint32                                            `protobuf:"varint,9,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	RouteExceptions            []*CMsgSteamDatagramRouterPingReply_RouteException `protobuf:"bytes,10,rep,name=route_exceptions,json=routeExceptions" json:"route_exceptions,omitempty"`
}

func (x *CMsgSteamDatagramRouterPingReply) Reset() {
	*x = CMsgSteamDatagramRouterPingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterPingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamDatagramRouterPingReply) GetClientTimestamp() uint32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyDatacenterIds() []uint32 {
	if x != nil {
		return x.LatencyDatacenterIds
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyPingMs() []uint32 {
	if x != nil {
		return x.LatencyPingMs
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetClientCookie() uint32 {
	if x != nil && x.ClientCookie != nil {
		return *x.ClientCookie
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetRouteExceptions() []*CMsgSteamDatagramRouterPingReply_RouteException {
	if x != nil {
		return x.RouteExceptions
	}
	return nil
}

type CMsgSteamDatagramGameserverPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyClientSession     *uint32 `protobuf:"varint,1,opt,name=legacy_client_session,json=legacyClientSession" json:"legacy_client_session,omitempty"`
	ClientSteamId           *uint64 `protobuf:"fixed64,2,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	ClientTimestamp         *uint32 `protobuf:"fixed32,3,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	RouterTimestamp         *uint32 `protobuf:"fixed32,4,opt,name=router_timestamp,json=routerTimestamp" json:"router_timestamp,omitempty"`
	RouterGameserverLatency *uint32 `protobuf:"varint,5,opt,name=router_gameserver_latency,json=routerGameserverLatency" json:"router_gameserver_latency,omitempty"`
	SeqNumberRouter         *uint32 `protobuf:"varint,6,opt,name=seq_number_router,json=seqNumberRouter" json:"seq_number_router,omitempty"`
	SeqNumberE2E            *uint32 `protobuf:"varint,7,opt,name=seq_number_e2e,json=seqNumberE2e" json:"seq_number_e2e,omitempty"`
	RelaySessionId          *uint32 `protobuf:"varint,8,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ConnectionId            *uint32 `protobuf:"fixed32,9,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (x *CMsgSteamDatagramGameserverPing) Reset() {
	*x = CMsgSteamDatagramGameserverPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPing) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPing) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPing.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPing) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamDatagramGameserverPing) GetLegacyClientSession() uint32 {
	if x != nil && x.LegacyClientSession != nil {
		return *x.LegacyClientSession
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetClientTimestamp() uint32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetRouterTimestamp() uint32 {
	if x != nil && x.RouterTimestamp != nil {
		return *x.RouterTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetRouterGameserverLatency() uint32 {
	if x != nil && x.RouterGameserverLatency != nil {
		return *x.RouterGameserverLatency
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetSeqNumberRouter() uint32 {
	if x != nil && x.SeqNumberRouter != nil {
		return *x.SeqNumberRouter
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetSeqNumberE2E() uint32 {
	if x != nil && x.SeqNumberE2E != nil {
		return *x.SeqNumberE2E
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPing) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

type CMsgSteamDatagramRelayToRelayPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestTimestamp *uint32 `protobuf:"fixed32,1,opt,name=request_timestamp,json=requestTimestamp" json:"request_timestamp,omitempty"`
	RequestDate      *uint32 `protobuf:"fixed32,2,opt,name=request_date,json=requestDate" json:"request_date,omitempty"`
	MyPopId          *uint32 `protobuf:"fixed32,3,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId        *uint32 `protobuf:"fixed32,4,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	Checksum         *uint32 `protobuf:"fixed32,5,opt,name=checksum" json:"checksum,omitempty"`
}

func (x *CMsgSteamDatagramRelayToRelayPing) Reset() {
	*x = CMsgSteamDatagramRelayToRelayPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRelayToRelayPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRelayToRelayPing) ProtoMessage() {}

func (x *CMsgSteamDatagramRelayToRelayPing) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRelayToRelayPing.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRelayToRelayPing) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetRequestTimestamp() uint32 {
	if x != nil && x.RequestTimestamp != nil {
		return *x.RequestTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetRequestDate() uint32 {
	if x != nil && x.RequestDate != nil {
		return *x.RequestDate
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetMyPopId() uint32 {
	if x != nil && x.MyPopId != nil {
		return *x.MyPopId
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetYourPopId() uint32 {
	if x != nil && x.YourPopId != nil {
		return *x.YourPopId
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetChecksum() uint32 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

type CMsgSteamDatagramSessionCryptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType *CMsgSteamDatagramSessionCryptInfo_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=CMsgSteamDatagramSessionCryptInfo_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData []byte                                      `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	Nonce   *uint64                                     `protobuf:"fixed64,3,opt,name=nonce" json:"nonce,omitempty"`
	IsSnp   *bool                                       `protobuf:"varint,4,opt,name=is_snp,json=isSnp" json:"is_snp,omitempty"`
}

// Default values for CMsgSteamDatagramSessionCryptInfo fields.
const (
	Default_CMsgSteamDatagramSessionCryptInfo_KeyType = CMsgSteamDatagramSessionCryptInfo_INVALID
)

func (x *CMsgSteamDatagramSessionCryptInfo) Reset() {
	*x = CMsgSteamDatagramSessionCryptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramSessionCryptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSessionCryptInfo) ProtoMessage() {}

func (x *CMsgSteamDatagramSessionCryptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSessionCryptInfo) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetKeyType() CMsgSteamDatagramSessionCryptInfo_EKeyType {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return Default_CMsgSteamDatagramSessionCryptInfo_KeyType
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetIsSnp() bool {
	if x != nil && x.IsSnp != nil {
		return *x.IsSnp
	}
	return false
}

type CMsgSteamDatagramSessionCryptInfoSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info      []byte `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) Reset() {
	*x = CMsgSteamDatagramSessionCryptInfoSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSessionCryptInfoSigned) ProtoMessage() {}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfoSigned.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSessionCryptInfoSigned) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramGameserverSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket               []byte  `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ChallengeTime        *uint32 `protobuf:"fixed32,3,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId   *uint32 `protobuf:"fixed32,5,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId   *uint32 `protobuf:"fixed32,8,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	NetworkConfigVersion *uint32 `protobuf:"varint,6,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	ProtocolVersion      *uint32 `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamDatagramGameserverSessionRequest) Reset() {
	*x = CMsgSteamDatagramGameserverSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverSessionRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverSessionRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverSessionRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetNetworkConfigVersion() uint32 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionEstablished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId         *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	GameserverSteamId    *uint64 `protobuf:"fixed64,3,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,4,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	LegacyRelaySessionId *uint32 `protobuf:"varint,5,opt,name=legacy_relay_session_id,json=legacyRelaySessionId" json:"legacy_relay_session_id,omitempty"`
	SeqNumR2C            *uint32 `protobuf:"varint,6,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) Reset() {
	*x = CMsgSteamDatagramGameserverSessionEstablished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverSessionEstablished) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverSessionEstablished) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverSessionEstablished.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverSessionEstablished) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetGameserverSteamId() uint64 {
	if x != nil && x.GameserverSteamId != nil {
		return *x.GameserverSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetLegacyRelaySessionId() uint32 {
	if x != nil && x.LegacyRelaySessionId != nil {
		return *x.LegacyRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramNoSessionRelayToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyRelaySessionId *uint32 `protobuf:"varint,1,opt,name=legacy_relay_session_id,json=legacyRelaySessionId" json:"legacy_relay_session_id,omitempty"`
	ConnectionId         *uint32 `protobuf:"fixed32,7,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	YourPublicIp         *uint32 `protobuf:"fixed32,2,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime           *uint32 `protobuf:"fixed32,3,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) Reset() {
	*x = CMsgSteamDatagramNoSessionRelayToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoSessionRelayToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramNoSessionRelayToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoSessionRelayToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoSessionRelayToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetLegacyRelaySessionId() uint32 {
	if x != nil && x.LegacyRelaySessionId != nil {
		return *x.LegacyRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

type CMsgSteamDatagramNoSessionRelayToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelaySessionId     *uint32 `protobuf:"varint,1,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32 `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32 `protobuf:"fixed32,8,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	KludgePad          *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
}

func (x *CMsgSteamDatagramNoSessionRelayToServer) Reset() {
	*x = CMsgSteamDatagramNoSessionRelayToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramNoSessionRelayToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoSessionRelayToServer) ProtoMessage() {}

func (x *CMsgSteamDatagramNoSessionRelayToServer) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoSessionRelayToServer.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoSessionRelayToServer) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgSteamDatagramNoSessionRelayToServer) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToServer) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToServer) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToServer) GetKludgePad() uint64 {
	if x != nil && x.KludgePad != nil {
		return *x.KludgePad
	}
	return 0
}

type CMsgSteamDatagramDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity *uint32 `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text     *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (x *CMsgSteamDatagramDiagnostic) Reset() {
	*x = CMsgSteamDatagramDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDiagnostic) ProtoMessage() {}

func (x *CMsgSteamDatagramDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDiagnostic.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDiagnostic) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *CMsgSteamDatagramDiagnostic) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgSteamDatagramDataCenterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenters []*CMsgSteamDatagramDataCenterState_DataCenter `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
}

func (x *CMsgSteamDatagramDataCenterState) Reset() {
	*x = CMsgSteamDatagramDataCenterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDataCenterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDataCenterState) ProtoMessage() {}

func (x *CMsgSteamDatagramDataCenterState) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDataCenterState.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDataCenterState) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgSteamDatagramDataCenterState) GetDataCenters() []*CMsgSteamDatagramDataCenterState_DataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type CMsgSteamDatagramLinkInstantaneousStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPacketsPerSecX10     *uint32 `protobuf:"varint,1,opt,name=out_packets_per_sec_x10,json=outPacketsPerSecX10" json:"out_packets_per_sec_x10,omitempty"`
	OutBytesPerSec          *uint32 `protobuf:"varint,2,opt,name=out_bytes_per_sec,json=outBytesPerSec" json:"out_bytes_per_sec,omitempty"`
	InPacketsPerSecX10      *uint32 `protobuf:"varint,3,opt,name=in_packets_per_sec_x10,json=inPacketsPerSecX10" json:"in_packets_per_sec_x10,omitempty"`
	InBytesPerSec           *uint32 `protobuf:"varint,4,opt,name=in_bytes_per_sec,json=inBytesPerSec" json:"in_bytes_per_sec,omitempty"`
	PingMs                  *uint32 `protobuf:"varint,5,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	PacketsDroppedPct       *uint32 `protobuf:"varint,6,opt,name=packets_dropped_pct,json=packetsDroppedPct" json:"packets_dropped_pct,omitempty"`
	PacketsWeirdSequencePct *uint32 `protobuf:"varint,7,opt,name=packets_weird_sequence_pct,json=packetsWeirdSequencePct" json:"packets_weird_sequence_pct,omitempty"`
	PeakJitterUsec          *uint32 `protobuf:"varint,8,opt,name=peak_jitter_usec,json=peakJitterUsec" json:"peak_jitter_usec,omitempty"`
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) Reset() {
	*x = CMsgSteamDatagramLinkInstantaneousStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLinkInstantaneousStats) ProtoMessage() {}

func (x *CMsgSteamDatagramLinkInstantaneousStats) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLinkInstantaneousStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLinkInstantaneousStats) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetOutPacketsPerSecX10() uint32 {
	if x != nil && x.OutPacketsPerSecX10 != nil {
		return *x.OutPacketsPerSecX10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetOutBytesPerSec() uint32 {
	if x != nil && x.OutBytesPerSec != nil {
		return *x.OutBytesPerSec
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetInPacketsPerSecX10() uint32 {
	if x != nil && x.InPacketsPerSecX10 != nil {
		return *x.InPacketsPerSecX10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetInBytesPerSec() uint32 {
	if x != nil && x.InBytesPerSec != nil {
		return *x.InBytesPerSec
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsDroppedPct() uint32 {
	if x != nil && x.PacketsDroppedPct != nil {
		return *x.PacketsDroppedPct
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsWeirdSequencePct() uint32 {
	if x != nil && x.PacketsWeirdSequencePct != nil {
		return *x.PacketsWeirdSequencePct
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPeakJitterUsec() uint32 {
	if x != nil && x.PeakJitterUsec != nil {
		return *x.PeakJitterUsec
	}
	return 0
}

type CMsgSteamDatagramLinkLifetimeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketsSent               *uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	KbSent                    *uint64 `protobuf:"varint,4,opt,name=kb_sent,json=kbSent" json:"kb_sent,omitempty"`
	PacketsRecv               *uint64 `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	KbRecv                    *uint64 `protobuf:"varint,6,opt,name=kb_recv,json=kbRecv" json:"kb_recv,omitempty"`
	PacketsRecvSequenced      *uint64 `protobuf:"varint,7,opt,name=packets_recv_sequenced,json=packetsRecvSequenced" json:"packets_recv_sequenced,omitempty"`
	PacketsRecvDropped        *uint64 `protobuf:"varint,8,opt,name=packets_recv_dropped,json=packetsRecvDropped" json:"packets_recv_dropped,omitempty"`
	PacketsRecvOutOfOrder     *uint64 `protobuf:"varint,9,opt,name=packets_recv_out_of_order,json=packetsRecvOutOfOrder" json:"packets_recv_out_of_order,omitempty"`
	PacketsRecvDuplicate      *uint64 `protobuf:"varint,10,opt,name=packets_recv_duplicate,json=packetsRecvDuplicate" json:"packets_recv_duplicate,omitempty"`
	PacketsRecvLurch          *uint64 `protobuf:"varint,11,opt,name=packets_recv_lurch,json=packetsRecvLurch" json:"packets_recv_lurch,omitempty"`
	QualityHistogram_100      *uint32 `protobuf:"varint,21,opt,name=quality_histogram_100,json=qualityHistogram100" json:"quality_histogram_100,omitempty"`
	QualityHistogram_99       *uint32 `protobuf:"varint,22,opt,name=quality_histogram_99,json=qualityHistogram99" json:"quality_histogram_99,omitempty"`
	QualityHistogram_97       *uint32 `protobuf:"varint,23,opt,name=quality_histogram_97,json=qualityHistogram97" json:"quality_histogram_97,omitempty"`
	QualityHistogram_95       *uint32 `protobuf:"varint,24,opt,name=quality_histogram_95,json=qualityHistogram95" json:"quality_histogram_95,omitempty"`
	QualityHistogram_90       *uint32 `protobuf:"varint,25,opt,name=quality_histogram_90,json=qualityHistogram90" json:"quality_histogram_90,omitempty"`
	QualityHistogram_75       *uint32 `protobuf:"varint,26,opt,name=quality_histogram_75,json=qualityHistogram75" json:"quality_histogram_75,omitempty"`
	QualityHistogram_50       *uint32 `protobuf:"varint,27,opt,name=quality_histogram_50,json=qualityHistogram50" json:"quality_histogram_50,omitempty"`
	QualityHistogram_1        *uint32 `protobuf:"varint,28,opt,name=quality_histogram_1,json=qualityHistogram1" json:"quality_histogram_1,omitempty"`
	QualityHistogramDead      *uint32 `protobuf:"varint,29,opt,name=quality_histogram_dead,json=qualityHistogramDead" json:"quality_histogram_dead,omitempty"`
	QualityNtile_2Nd          *uint32 `protobuf:"varint,30,opt,name=quality_ntile_2nd,json=qualityNtile2nd" json:"quality_ntile_2nd,omitempty"`
	QualityNtile_5Th          *uint32 `protobuf:"varint,31,opt,name=quality_ntile_5th,json=qualityNtile5th" json:"quality_ntile_5th,omitempty"`
	QualityNtile_25Th         *uint32 `protobuf:"varint,32,opt,name=quality_ntile_25th,json=qualityNtile25th" json:"quality_ntile_25th,omitempty"`
	QualityNtile_50Th         *uint32 `protobuf:"varint,33,opt,name=quality_ntile_50th,json=qualityNtile50th" json:"quality_ntile_50th,omitempty"`
	PingHistogram_25          *uint32 `protobuf:"varint,41,opt,name=ping_histogram_25,json=pingHistogram25" json:"ping_histogram_25,omitempty"`
	PingHistogram_50          *uint32 `protobuf:"varint,42,opt,name=ping_histogram_50,json=pingHistogram50" json:"ping_histogram_50,omitempty"`
	PingHistogram_75          *uint32 `protobuf:"varint,43,opt,name=ping_histogram_75,json=pingHistogram75" json:"ping_histogram_75,omitempty"`
	PingHistogram_100         *uint32 `protobuf:"varint,44,opt,name=ping_histogram_100,json=pingHistogram100" json:"ping_histogram_100,omitempty"`
	PingHistogram_125         *uint32 `protobuf:"varint,45,opt,name=ping_histogram_125,json=pingHistogram125" json:"ping_histogram_125,omitempty"`
	PingHistogram_150         *uint32 `protobuf:"varint,46,opt,name=ping_histogram_150,json=pingHistogram150" json:"ping_histogram_150,omitempty"`
	PingHistogram_200         *uint32 `protobuf:"varint,47,opt,name=ping_histogram_200,json=pingHistogram200" json:"ping_histogram_200,omitempty"`
	PingHistogram_300         *uint32 `protobuf:"varint,48,opt,name=ping_histogram_300,json=pingHistogram300" json:"ping_histogram_300,omitempty"`
	PingHistogramMax          *uint32 `protobuf:"varint,49,opt,name=ping_histogram_max,json=pingHistogramMax" json:"ping_histogram_max,omitempty"`
	PingNtile_5Th             *uint32 `protobuf:"varint,50,opt,name=ping_ntile_5th,json=pingNtile5th" json:"ping_ntile_5th,omitempty"`
	PingNtile_50Th            *uint32 `protobuf:"varint,51,opt,name=ping_ntile_50th,json=pingNtile50th" json:"ping_ntile_50th,omitempty"`
	PingNtile_75Th            *uint32 `protobuf:"varint,52,opt,name=ping_ntile_75th,json=pingNtile75th" json:"ping_ntile_75th,omitempty"`
	PingNtile_95Th            *uint32 `protobuf:"varint,53,opt,name=ping_ntile_95th,json=pingNtile95th" json:"ping_ntile_95th,omitempty"`
	PingNtile_98Th            *uint32 `protobuf:"varint,54,opt,name=ping_ntile_98th,json=pingNtile98th" json:"ping_ntile_98th,omitempty"`
	JitterHistogramNegligible *uint32 `protobuf:"varint,61,opt,name=jitter_histogram_negligible,json=jitterHistogramNegligible" json:"jitter_histogram_negligible,omitempty"`
	JitterHistogram_1         *uint32 `protobuf:"varint,62,opt,name=jitter_histogram_1,json=jitterHistogram1" json:"jitter_histogram_1,omitempty"`
	JitterHistogram_2         *uint32 `protobuf:"varint,63,opt,name=jitter_histogram_2,json=jitterHistogram2" json:"jitter_histogram_2,omitempty"`
	JitterHistogram_5         *uint32 `protobuf:"varint,64,opt,name=jitter_histogram_5,json=jitterHistogram5" json:"jitter_histogram_5,omitempty"`
	JitterHistogram_10        *uint32 `protobuf:"varint,65,opt,name=jitter_histogram_10,json=jitterHistogram10" json:"jitter_histogram_10,omitempty"`
	JitterHistogram_20        *uint32 `protobuf:"varint,66,opt,name=jitter_histogram_20,json=jitterHistogram20" json:"jitter_histogram_20,omitempty"`
	TxspeedMax                *uint32 `protobuf:"varint,67,opt,name=txspeed_max,json=txspeedMax" json:"txspeed_max,omitempty"`
	TxspeedHistogram_16       *uint32 `protobuf:"varint,68,opt,name=txspeed_histogram_16,json=txspeedHistogram16" json:"txspeed_histogram_16,omitempty"`
	TxspeedHistogram_32       *uint32 `protobuf:"varint,69,opt,name=txspeed_histogram_32,json=txspeedHistogram32" json:"txspeed_histogram_32,omitempty"`
	TxspeedHistogram_64       *uint32 `protobuf:"varint,70,opt,name=txspeed_histogram_64,json=txspeedHistogram64" json:"txspeed_histogram_64,omitempty"`
	TxspeedHistogram_128      *uint32 `protobuf:"varint,71,opt,name=txspeed_histogram_128,json=txspeedHistogram128" json:"txspeed_histogram_128,omitempty"`
	TxspeedHistogram_256      *uint32 `protobuf:"varint,72,opt,name=txspeed_histogram_256,json=txspeedHistogram256" json:"txspeed_histogram_256,omitempty"`
	TxspeedHistogram_512      *uint32 `protobuf:"varint,73,opt,name=txspeed_histogram_512,json=txspeedHistogram512" json:"txspeed_histogram_512,omitempty"`
	TxspeedHistogram_1024     *uint32 `protobuf:"varint,74,opt,name=txspeed_histogram_1024,json=txspeedHistogram1024" json:"txspeed_histogram_1024,omitempty"`
	TxspeedHistogramMax       *uint32 `protobuf:"varint,75,opt,name=txspeed_histogram_max,json=txspeedHistogramMax" json:"txspeed_histogram_max,omitempty"`
	TxspeedNtile_5Th          *uint32 `protobuf:"varint,76,opt,name=txspeed_ntile_5th,json=txspeedNtile5th" json:"txspeed_ntile_5th,omitempty"`
	TxspeedNtile_50Th         *uint32 `protobuf:"varint,77,opt,name=txspeed_ntile_50th,json=txspeedNtile50th" json:"txspeed_ntile_50th,omitempty"`
	TxspeedNtile_75Th         *uint32 `protobuf:"varint,78,opt,name=txspeed_ntile_75th,json=txspeedNtile75th" json:"txspeed_ntile_75th,omitempty"`
	TxspeedNtile_95Th         *uint32 `protobuf:"varint,79,opt,name=txspeed_ntile_95th,json=txspeedNtile95th" json:"txspeed_ntile_95th,omitempty"`
	TxspeedNtile_98Th         *uint32 `protobuf:"varint,80,opt,name=txspeed_ntile_98th,json=txspeedNtile98th" json:"txspeed_ntile_98th,omitempty"`
	RxspeedMax                *uint32 `protobuf:"varint,81,opt,name=rxspeed_max,json=rxspeedMax" json:"rxspeed_max,omitempty"`
	RxspeedHistogram_16       *uint32 `protobuf:"varint,82,opt,name=rxspeed_histogram_16,json=rxspeedHistogram16" json:"rxspeed_histogram_16,omitempty"`
	RxspeedHistogram_32       *uint32 `protobuf:"varint,83,opt,name=rxspeed_histogram_32,json=rxspeedHistogram32" json:"rxspeed_histogram_32,omitempty"`
	RxspeedHistogram_64       *uint32 `protobuf:"varint,84,opt,name=rxspeed_histogram_64,json=rxspeedHistogram64" json:"rxspeed_histogram_64,omitempty"`
	RxspeedHistogram_128      *uint32 `protobuf:"varint,85,opt,name=rxspeed_histogram_128,json=rxspeedHistogram128" json:"rxspeed_histogram_128,omitempty"`
	RxspeedHistogram_256      *uint32 `protobuf:"varint,86,opt,name=rxspeed_histogram_256,json=rxspeedHistogram256" json:"rxspeed_histogram_256,omitempty"`
	RxspeedHistogram_512      *uint32 `protobuf:"varint,87,opt,name=rxspeed_histogram_512,json=rxspeedHistogram512" json:"rxspeed_histogram_512,omitempty"`
	RxspeedHistogram_1024     *uint32 `protobuf:"varint,88,opt,name=rxspeed_histogram_1024,json=rxspeedHistogram1024" json:"rxspeed_histogram_1024,omitempty"`
	RxspeedHistogramMax       *uint32 `protobuf:"varint,89,opt,name=rxspeed_histogram_max,json=rxspeedHistogramMax" json:"rxspeed_histogram_max,omitempty"`
	RxspeedNtile_5Th          *uint32 `protobuf:"varint,90,opt,name=rxspeed_ntile_5th,json=rxspeedNtile5th" json:"rxspeed_ntile_5th,omitempty"`
	RxspeedNtile_50Th         *uint32 `protobuf:"varint,91,opt,name=rxspeed_ntile_50th,json=rxspeedNtile50th" json:"rxspeed_ntile_50th,omitempty"`
	RxspeedNtile_75Th         *uint32 `protobuf:"varint,92,opt,name=rxspeed_ntile_75th,json=rxspeedNtile75th" json:"rxspeed_ntile_75th,omitempty"`
	RxspeedNtile_95Th         *uint32 `protobuf:"varint,93,opt,name=rxspeed_ntile_95th,json=rxspeedNtile95th" json:"rxspeed_ntile_95th,omitempty"`
	RxspeedNtile_98Th         *uint32 `protobuf:"varint,94,opt,name=rxspeed_ntile_98th,json=rxspeedNtile98th" json:"rxspeed_ntile_98th,omitempty"`
}

func (x *CMsgSteamDatagramLinkLifetimeStats) Reset() {
	*x = CMsgSteamDatagramLinkLifetimeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramLinkLifetimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLinkLifetimeStats) ProtoMessage() {}

func (x *CMsgSteamDatagramLinkLifetimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLinkLifetimeStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLinkLifetimeStats) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsSent() uint64 {
	if x != nil && x.PacketsSent != nil {
		return *x.PacketsSent
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetKbSent() uint64 {
	if x != nil && x.KbSent != nil {
		return *x.KbSent
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecv() uint64 {
	if x != nil && x.PacketsRecv != nil {
		return *x.PacketsRecv
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetKbRecv() uint64 {
	if x != nil && x.KbRecv != nil {
		return *x.KbRecv
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvSequenced() uint64 {
	if x != nil && x.PacketsRecvSequenced != nil {
		return *x.PacketsRecvSequenced
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDropped() uint64 {
	if x != nil && x.PacketsRecvDropped != nil {
		return *x.PacketsRecvDropped
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrder() uint64 {
	if x != nil && x.PacketsRecvOutOfOrder != nil {
		return *x.PacketsRecvOutOfOrder
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDuplicate() uint64 {
	if x != nil && x.PacketsRecvDuplicate != nil {
		return *x.PacketsRecvDuplicate
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvLurch() uint64 {
	if x != nil && x.PacketsRecvLurch != nil {
		return *x.PacketsRecvLurch
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_100() uint32 {
	if x != nil && x.QualityHistogram_100 != nil {
		return *x.QualityHistogram_100
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_99() uint32 {
	if x != nil && x.QualityHistogram_99 != nil {
		return *x.QualityHistogram_99
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_97() uint32 {
	if x != nil && x.QualityHistogram_97 != nil {
		return *x.QualityHistogram_97
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_95() uint32 {
	if x != nil && x.QualityHistogram_95 != nil {
		return *x.QualityHistogram_95
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_90() uint32 {
	if x != nil && x.QualityHistogram_90 != nil {
		return *x.QualityHistogram_90
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_75() uint32 {
	if x != nil && x.QualityHistogram_75 != nil {
		return *x.QualityHistogram_75
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_50() uint32 {
	if x != nil && x.QualityHistogram_50 != nil {
		return *x.QualityHistogram_50
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_1() uint32 {
	if x != nil && x.QualityHistogram_1 != nil {
		return *x.QualityHistogram_1
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogramDead() uint32 {
	if x != nil && x.QualityHistogramDead != nil {
		return *x.QualityHistogramDead
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_2Nd() uint32 {
	if x != nil && x.QualityNtile_2Nd != nil {
		return *x.QualityNtile_2Nd
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_5Th() uint32 {
	if x != nil && x.QualityNtile_5Th != nil {
		return *x.QualityNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_25Th() uint32 {
	if x != nil && x.QualityNtile_25Th != nil {
		return *x.QualityNtile_25Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_50Th() uint32 {
	if x != nil && x.QualityNtile_50Th != nil {
		return *x.QualityNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_25() uint32 {
	if x != nil && x.PingHistogram_25 != nil {
		return *x.PingHistogram_25
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_50() uint32 {
	if x != nil && x.PingHistogram_50 != nil {
		return *x.PingHistogram_50
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_75() uint32 {
	if x != nil && x.PingHistogram_75 != nil {
		return *x.PingHistogram_75
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_100() uint32 {
	if x != nil && x.PingHistogram_100 != nil {
		return *x.PingHistogram_100
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_125() uint32 {
	if x != nil && x.PingHistogram_125 != nil {
		return *x.PingHistogram_125
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_150() uint32 {
	if x != nil && x.PingHistogram_150 != nil {
		return *x.PingHistogram_150
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_200() uint32 {
	if x != nil && x.PingHistogram_200 != nil {
		return *x.PingHistogram_200
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_300() uint32 {
	if x != nil && x.PingHistogram_300 != nil {
		return *x.PingHistogram_300
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogramMax() uint32 {
	if x != nil && x.PingHistogramMax != nil {
		return *x.PingHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_5Th() uint32 {
	if x != nil && x.PingNtile_5Th != nil {
		return *x.PingNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_50Th() uint32 {
	if x != nil && x.PingNtile_50Th != nil {
		return *x.PingNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_75Th() uint32 {
	if x != nil && x.PingNtile_75Th != nil {
		return *x.PingNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_95Th() uint32 {
	if x != nil && x.PingNtile_95Th != nil {
		return *x.PingNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_98Th() uint32 {
	if x != nil && x.PingNtile_98Th != nil {
		return *x.PingNtile_98Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogramNegligible() uint32 {
	if x != nil && x.JitterHistogramNegligible != nil {
		return *x.JitterHistogramNegligible
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_1() uint32 {
	if x != nil && x.JitterHistogram_1 != nil {
		return *x.JitterHistogram_1
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_2() uint32 {
	if x != nil && x.JitterHistogram_2 != nil {
		return *x.JitterHistogram_2
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_5() uint32 {
	if x != nil && x.JitterHistogram_5 != nil {
		return *x.JitterHistogram_5
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_10() uint32 {
	if x != nil && x.JitterHistogram_10 != nil {
		return *x.JitterHistogram_10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_20() uint32 {
	if x != nil && x.JitterHistogram_20 != nil {
		return *x.JitterHistogram_20
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedMax() uint32 {
	if x != nil && x.TxspeedMax != nil {
		return *x.TxspeedMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_16() uint32 {
	if x != nil && x.TxspeedHistogram_16 != nil {
		return *x.TxspeedHistogram_16
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_32() uint32 {
	if x != nil && x.TxspeedHistogram_32 != nil {
		return *x.TxspeedHistogram_32
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_64() uint32 {
	if x != nil && x.TxspeedHistogram_64 != nil {
		return *x.TxspeedHistogram_64
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_128() uint32 {
	if x != nil && x.TxspeedHistogram_128 != nil {
		return *x.TxspeedHistogram_128
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_256() uint32 {
	if x != nil && x.TxspeedHistogram_256 != nil {
		return *x.TxspeedHistogram_256
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_512() uint32 {
	if x != nil && x.TxspeedHistogram_512 != nil {
		return *x.TxspeedHistogram_512
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_1024() uint32 {
	if x != nil && x.TxspeedHistogram_1024 != nil {
		return *x.TxspeedHistogram_1024
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogramMax() uint32 {
	if x != nil && x.TxspeedHistogramMax != nil {
		return *x.TxspeedHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_5Th() uint32 {
	if x != nil && x.TxspeedNtile_5Th != nil {
		return *x.TxspeedNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_50Th() uint32 {
	if x != nil && x.TxspeedNtile_50Th != nil {
		return *x.TxspeedNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_75Th() uint32 {
	if x != nil && x.TxspeedNtile_75Th != nil {
		return *x.TxspeedNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_95Th() uint32 {
	if x != nil && x.TxspeedNtile_95Th != nil {
		return *x.TxspeedNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_98Th() uint32 {
	if x != nil && x.TxspeedNtile_98Th != nil {
		return *x.TxspeedNtile_98Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedMax() uint32 {
	if x != nil && x.RxspeedMax != nil {
		return *x.RxspeedMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_16() uint32 {
	if x != nil && x.RxspeedHistogram_16 != nil {
		return *x.RxspeedHistogram_16
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_32() uint32 {
	if x != nil && x.RxspeedHistogram_32 != nil {
		return *x.RxspeedHistogram_32
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_64() uint32 {
	if x != nil && x.RxspeedHistogram_64 != nil {
		return *x.RxspeedHistogram_64
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_128() uint32 {
	if x != nil && x.RxspeedHistogram_128 != nil {
		return *x.RxspeedHistogram_128
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_256() uint32 {
	if x != nil && x.RxspeedHistogram_256 != nil {
		return *x.RxspeedHistogram_256
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_512() uint32 {
	if x != nil && x.RxspeedHistogram_512 != nil {
		return *x.RxspeedHistogram_512
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_1024() uint32 {
	if x != nil && x.RxspeedHistogram_1024 != nil {
		return *x.RxspeedHistogram_1024
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogramMax() uint32 {
	if x != nil && x.RxspeedHistogramMax != nil {
		return *x.RxspeedHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_5Th() uint32 {
	if x != nil && x.RxspeedNtile_5Th != nil {
		return *x.RxspeedNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_50Th() uint32 {
	if x != nil && x.RxspeedNtile_50Th != nil {
		return *x.RxspeedNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_75Th() uint32 {
	if x != nil && x.RxspeedNtile_75Th != nil {
		return *x.RxspeedNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_95Th() uint32 {
	if x != nil && x.RxspeedNtile_95Th != nil {
		return *x.RxspeedNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_98Th() uint32 {
	if x != nil && x.RxspeedNtile_98Th != nil {
		return *x.RxspeedNtile_98Th
	}
	return 0
}

type CMsgSteamDatagramConnectionQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instantaneous *CMsgSteamDatagramLinkInstantaneousStats `protobuf:"bytes,1,opt,name=instantaneous" json:"instantaneous,omitempty"`
	Lifetime      *CMsgSteamDatagramLinkLifetimeStats      `protobuf:"bytes,2,opt,name=lifetime" json:"lifetime,omitempty"`
}

func (x *CMsgSteamDatagramConnectionQuality) Reset() {
	*x = CMsgSteamDatagramConnectionQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionQuality) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionQuality) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionQuality.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionQuality) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSteamDatagramConnectionQuality) GetInstantaneous() *CMsgSteamDatagramLinkInstantaneousStats {
	if x != nil {
		return x.Instantaneous
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionQuality) GetLifetime() *CMsgSteamDatagramLinkLifetimeStats {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

type CMsgSteamDatagramConnectionStatsClientToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2R                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=c2r" json:"c2r,omitempty"`
	C2S                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=c2s" json:"c2s,omitempty"`
	LegacyClientTimestamp *uint32                             `protobuf:"fixed32,3,opt,name=legacy_client_timestamp,json=legacyClientTimestamp" json:"legacy_client_timestamp,omitempty"`
	AckRelay              []uint32                            `protobuf:"fixed32,4,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                []uint32                            `protobuf:"fixed32,5,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                 *uint32                             `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId    *uint32                             `protobuf:"fixed32,8,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumC2R             *uint32                             `protobuf:"varint,9,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumC2S             *uint32                             `protobuf:"varint,10,opt,name=seq_num_c2s,json=seqNumC2s" json:"seq_num_c2s,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsClientToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsClientToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsClientToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsClientToRouter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetC2R() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.C2R
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetC2S() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.C2S
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetLegacyClientTimestamp() uint32 {
	if x != nil && x.LegacyClientTimestamp != nil {
		return *x.LegacyClientTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumC2R() uint32 {
	if x != nil && x.SeqNumC2R != nil {
		return *x.SeqNumC2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumC2S() uint32 {
	if x != nil && x.SeqNumC2S != nil {
		return *x.SeqNumC2S
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R2C                             *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=r2c" json:"r2c,omitempty"`
	S2C                             *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=s2c" json:"s2c,omitempty"`
	LegacyClientTimestampFromRouter *uint32                             `protobuf:"fixed32,3,opt,name=legacy_client_timestamp_from_router,json=legacyClientTimestampFromRouter" json:"legacy_client_timestamp_from_router,omitempty"`
	LegacyClientTimestampFromServer *uint32                             `protobuf:"fixed32,4,opt,name=legacy_client_timestamp_from_server,json=legacyClientTimestampFromServer" json:"legacy_client_timestamp_from_server,omitempty"`
	RouterGameserverLatency         *uint32                             `protobuf:"varint,5,opt,name=router_gameserver_latency,json=routerGameserverLatency" json:"router_gameserver_latency,omitempty"`
	SecondsUntilShutdown            *uint32                             `protobuf:"varint,6,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp                *uint32                             `protobuf:"fixed32,10,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort              *uint32                             `protobuf:"varint,11,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster      *uint32                             `protobuf:"varint,12,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                        []uint32                            `protobuf:"fixed32,13,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                          []uint32                            `protobuf:"fixed32,14,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                           *uint32                             `protobuf:"varint,15,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId              *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumR2C                       *uint32                             `protobuf:"varint,8,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumS2C                       *uint32                             `protobuf:"varint,9,opt,name=seq_num_s2c,json=seqNumS2c" json:"seq_num_s2c,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) Reset() {
	*x = CMsgSteamDatagramConnectionStatsRouterToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsRouterToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetR2C() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.R2C
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetS2C() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.S2C
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetLegacyClientTimestampFromRouter() uint32 {
	if x != nil && x.LegacyClientTimestampFromRouter != nil {
		return *x.LegacyClientTimestampFromRouter
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetLegacyClientTimestampFromServer() uint32 {
	if x != nil && x.LegacyClientTimestampFromServer != nil {
		return *x.LegacyClientTimestampFromServer
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetRouterGameserverLatency() uint32 {
	if x != nil && x.RouterGameserverLatency != nil {
		return *x.RouterGameserverLatency
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestIp() uint32 {
	if x != nil && x.MigrateRequestIp != nil {
		return *x.MigrateRequestIp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestPort() uint32 {
	if x != nil && x.MigrateRequestPort != nil {
		return *x.MigrateRequestPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumS2C() uint32 {
	if x != nil && x.SeqNumS2C != nil {
		return *x.SeqNumS2C
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R2S                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=r2s" json:"r2s,omitempty"`
	C2S                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=c2s" json:"c2s,omitempty"`
	LegacyClientTimestamp *uint32                             `protobuf:"fixed32,3,opt,name=legacy_client_timestamp,json=legacyClientTimestamp" json:"legacy_client_timestamp,omitempty"`
	LegacyRouterTimestamp *uint32                             `protobuf:"fixed32,4,opt,name=legacy_router_timestamp,json=legacyRouterTimestamp" json:"legacy_router_timestamp,omitempty"`
	AckRelay              []uint32                            `protobuf:"fixed32,10,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                []uint32                            `protobuf:"fixed32,11,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                 *uint32                             `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	SeqNumR2S             *uint32                             `protobuf:"varint,5,opt,name=seq_num_r2s,json=seqNumR2s" json:"seq_num_r2s,omitempty"`
	SeqNumC2S             *uint32                             `protobuf:"varint,6,opt,name=seq_num_c2s,json=seqNumC2s" json:"seq_num_c2s,omitempty"`
	ClientSteamId         *uint64                             `protobuf:"fixed64,7,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	RelaySessionId        *uint32                             `protobuf:"varint,8,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId    *uint32                             `protobuf:"fixed32,9,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId    *uint32                             `protobuf:"fixed32,13,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) Reset() {
	*x = CMsgSteamDatagramConnectionStatsRouterToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsRouterToServer) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToServer.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsRouterToServer) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetR2S() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.R2S
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetC2S() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.C2S
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetLegacyClientTimestamp() uint32 {
	if x != nil && x.LegacyClientTimestamp != nil {
		return *x.LegacyClientTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetLegacyRouterTimestamp() uint32 {
	if x != nil && x.LegacyRouterTimestamp != nil {
		return *x.LegacyRouterTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumR2S() uint32 {
	if x != nil && x.SeqNumR2S != nil {
		return *x.SeqNumR2S
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumC2S() uint32 {
	if x != nil && x.SeqNumC2S != nil {
		return *x.SeqNumC2S
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsServerToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S2R                *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=s2r" json:"s2r,omitempty"`
	S2C                *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=s2c" json:"s2c,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,8,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E             []uint32                            `protobuf:"fixed32,9,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
	SeqNumS2R          *uint32                             `protobuf:"varint,3,opt,name=seq_num_s2r,json=seqNumS2r" json:"seq_num_s2r,omitempty"`
	SeqNumS2C          *uint32                             `protobuf:"varint,4,opt,name=seq_num_s2c,json=seqNumS2c" json:"seq_num_s2c,omitempty"`
	ClientSteamId      *uint64                             `protobuf:"fixed64,5,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	RelaySessionId     *uint32                             `protobuf:"varint,6,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                             `protobuf:"fixed32,11,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsServerToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsServerToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsServerToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsServerToRouter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetS2R() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.S2R
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetS2C() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.S2C
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumS2R() uint32 {
	if x != nil && x.SeqNumS2R != nil {
		return *x.SeqNumS2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumS2C() uint32 {
	if x != nil && x.SeqNumS2C != nil {
		return *x.SeqNumS2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleRequest) Reset() {
	*x = CMsgSteamDatagramClientPingSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSteamDatagramClientPingSampleRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId    *uint32                                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	RoutingClusters []*CMsgSteamDatagramClientPingSampleReply_RoutingCluster `protobuf:"bytes,2,rep,name=routing_clusters,json=routingClusters" json:"routing_clusters,omitempty"`
	DataCenters     []*CMsgSteamDatagramClientPingSampleReply_DataCenter     `protobuf:"bytes,3,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleReply) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetRoutingClusters() []*CMsgSteamDatagramClientPingSampleReply_RoutingCluster {
	if x != nil {
		return x.RoutingClusters
	}
	return nil
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetDataCenters() []*CMsgSteamDatagramClientPingSampleReply_DataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type CMsgSteamDatagramClientSwitchedPrimary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId          *uint32                                               `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FromIp                *uint32                                               `protobuf:"fixed32,2,opt,name=from_ip,json=fromIp" json:"from_ip,omitempty"`
	FromPort              *uint32                                               `protobuf:"varint,3,opt,name=from_port,json=fromPort" json:"from_port,omitempty"`
	FromRouterCluster     *uint32                                               `protobuf:"fixed32,4,opt,name=from_router_cluster,json=fromRouterCluster" json:"from_router_cluster,omitempty"`
	FromActiveTime        *uint32                                               `protobuf:"varint,5,opt,name=from_active_time,json=fromActiveTime" json:"from_active_time,omitempty"`
	FromActivePacketsRecv *uint32                                               `protobuf:"varint,6,opt,name=from_active_packets_recv,json=fromActivePacketsRecv" json:"from_active_packets_recv,omitempty"`
	FromDroppedReason     *string                                               `protobuf:"bytes,7,opt,name=from_dropped_reason,json=fromDroppedReason" json:"from_dropped_reason,omitempty"`
	GapMs                 *uint32                                               `protobuf:"varint,8,opt,name=gap_ms,json=gapMs" json:"gap_ms,omitempty"`
	FromQualityNow        *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,9,opt,name=from_quality_now,json=fromQualityNow" json:"from_quality_now,omitempty"`
	ToQualityNow          *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,10,opt,name=to_quality_now,json=toQualityNow" json:"to_quality_now,omitempty"`
	FromQualityThen       *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,11,opt,name=from_quality_then,json=fromQualityThen" json:"from_quality_then,omitempty"`
	ToQualityThen         *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,12,opt,name=to_quality_then,json=toQualityThen" json:"to_quality_then,omitempty"`
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) Reset() {
	*x = CMsgSteamDatagramClientSwitchedPrimary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientSwitchedPrimary) ProtoMessage() {}

func (x *CMsgSteamDatagramClientSwitchedPrimary) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientSwitchedPrimary.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientSwitchedPrimary) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromIp() uint32 {
	if x != nil && x.FromIp != nil {
		return *x.FromIp
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromPort() uint32 {
	if x != nil && x.FromPort != nil {
		return *x.FromPort
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromRouterCluster() uint32 {
	if x != nil && x.FromRouterCluster != nil {
		return *x.FromRouterCluster
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromActiveTime() uint32 {
	if x != nil && x.FromActiveTime != nil {
		return *x.FromActiveTime
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromActivePacketsRecv() uint32 {
	if x != nil && x.FromActivePacketsRecv != nil {
		return *x.FromActivePacketsRecv
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromDroppedReason() string {
	if x != nil && x.FromDroppedReason != nil {
		return *x.FromDroppedReason
	}
	return ""
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetGapMs() uint32 {
	if x != nil && x.GapMs != nil {
		return *x.GapMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.FromQualityNow
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.ToQualityNow
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.FromQualityThen
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.ToQualityThen
	}
	return nil
}

type CMsgSteamDatagramRouterHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuLoad              *float32                                    `protobuf:"fixed32,1,opt,name=cpu_load,json=cpuLoad" json:"cpu_load,omitempty"`
	ActiveSessions       *uint32                                     `protobuf:"varint,2,opt,name=active_sessions,json=activeSessions" json:"active_sessions,omitempty"`
	DataPktsSec          *uint32                                     `protobuf:"varint,3,opt,name=data_pkts_sec,json=dataPktsSec" json:"data_pkts_sec,omitempty"`
	OtherPktsSec         *uint32                                     `protobuf:"varint,4,opt,name=other_pkts_sec,json=otherPktsSec" json:"other_pkts_sec,omitempty"`
	SecondsUntilShutdown *uint32                                     `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	CpuCostPerUser       *float32                                    `protobuf:"fixed32,8,opt,name=cpu_cost_per_user,json=cpuCostPerUser" json:"cpu_cost_per_user,omitempty"`
	CpuCostPerPacket     *float32                                    `protobuf:"fixed32,9,opt,name=cpu_cost_per_packet,json=cpuCostPerPacket" json:"cpu_cost_per_packet,omitempty"`
	DataCenters          []*CMsgSteamDatagramRouterHealth_DataCenter `protobuf:"bytes,6,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
	Magic                *uint64                                     `protobuf:"fixed64,7,opt,name=magic" json:"magic,omitempty"`
}

func (x *CMsgSteamDatagramRouterHealth) Reset() {
	*x = CMsgSteamDatagramRouterHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterHealth) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterHealth) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterHealth.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterHealth) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSteamDatagramRouterHealth) GetCpuLoad() float32 {
	if x != nil && x.CpuLoad != nil {
		return *x.CpuLoad
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetActiveSessions() uint32 {
	if x != nil && x.ActiveSessions != nil {
		return *x.ActiveSessions
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetDataPktsSec() uint32 {
	if x != nil && x.DataPktsSec != nil {
		return *x.DataPktsSec
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetOtherPktsSec() uint32 {
	if x != nil && x.OtherPktsSec != nil {
		return *x.OtherPktsSec
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetCpuCostPerUser() float32 {
	if x != nil && x.CpuCostPerUser != nil {
		return *x.CpuCostPerUser
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetCpuCostPerPacket() float32 {
	if x != nil && x.CpuCostPerPacket != nil {
		return *x.CpuCostPerPacket
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetDataCenters() []*CMsgSteamDatagramRouterHealth_DataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

func (x *CMsgSteamDatagramRouterHealth) GetMagic() uint64 {
	if x != nil && x.Magic != nil {
		return *x.Magic
	}
	return 0
}

type CMsgSteamDatagramConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId             *uint32                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	ClientSteamId            *uint64                                  `protobuf:"fixed64,3,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	MyTimestamp              *uint64                                  `protobuf:"fixed64,4,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs                *uint32                                  `protobuf:"varint,5,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	VirtualPort              *uint32                                  `protobuf:"varint,9,opt,name=virtual_port,json=virtualPort" json:"virtual_port,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion          *uint32                                  `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamDatagramConnectRequest) Reset() {
	*x = CMsgSteamDatagramConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgSteamDatagramConnectRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetPingEstMs() uint32 {
	if x != nil && x.PingEstMs != nil {
		return *x.PingEstMs
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetVirtualPort() uint32 {
	if x != nil && x.VirtualPort != nil {
		return *x.VirtualPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamDatagramConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramConnectRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramConnectOK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConnectionId       *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId       *uint32                                  `protobuf:"fixed32,7,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	YourTimestamp            *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec            *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion          *uint32                                  `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamDatagramConnectOK) Reset() {
	*x = CMsgSteamDatagramConnectOK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectOK) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectOK) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgSteamDatagramConnectOK) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetDelayTimeUsec() uint32 {
	if x != nil && x.DelayTimeUsec != nil {
		return *x.DelayTimeUsec
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamDatagramConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramConnectOK) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramConnectionClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyClientConnectionId *uint32                                       `protobuf:"fixed32,1,opt,name=legacy_client_connection_id,json=legacyClientConnectionId" json:"legacy_client_connection_id,omitempty"`
	ToConnectionId           *uint32                                       `protobuf:"fixed32,7,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId         *uint32                                       `protobuf:"fixed32,8,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	PeerSteamId              *uint64                                       `protobuf:"fixed64,3,opt,name=peer_steam_id,json=peerSteamId" json:"peer_steam_id,omitempty"`
	GameserverRelaySessionId *uint32                                       `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	RelayMode                *CMsgSteamDatagramConnectionClosed_ERelayMode `protobuf:"varint,4,opt,name=relay_mode,json=relayMode,enum=CMsgSteamDatagramConnectionClosed_ERelayMode,def=0" json:"relay_mode,omitempty"`
	Debug                    *string                                       `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode               *uint32                                       `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

// Default values for CMsgSteamDatagramConnectionClosed fields.
const (
	Default_CMsgSteamDatagramConnectionClosed_RelayMode = CMsgSteamDatagramConnectionClosed_None
)

func (x *CMsgSteamDatagramConnectionClosed) Reset() {
	*x = CMsgSteamDatagramConnectionClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgSteamDatagramConnectionClosed) GetLegacyClientConnectionId() uint32 {
	if x != nil && x.LegacyClientConnectionId != nil {
		return *x.LegacyClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetPeerSteamId() uint64 {
	if x != nil && x.PeerSteamId != nil {
		return *x.PeerSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetRelayMode() CMsgSteamDatagramConnectionClosed_ERelayMode {
	if x != nil && x.RelayMode != nil {
		return *x.RelayMode
	}
	return Default_CMsgSteamDatagramConnectionClosed_RelayMode
}

func (x *CMsgSteamDatagramConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamDatagramConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

type CMsgSteamDatagramNoConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyClientConnectionId *uint32 `protobuf:"fixed32,1,opt,name=legacy_client_connection_id,json=legacyClientConnectionId" json:"legacy_client_connection_id,omitempty"`
	ToConnectionId           *uint32 `protobuf:"fixed32,5,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId         *uint32 `protobuf:"fixed32,6,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	GameserverRelaySessionId *uint32 `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	PeerSteamId              *uint64 `protobuf:"fixed64,3,opt,name=peer_steam_id,json=peerSteamId" json:"peer_steam_id,omitempty"`
	EndToEnd                 *bool   `protobuf:"varint,4,opt,name=end_to_end,json=endToEnd" json:"end_to_end,omitempty"`
	DummyPad                 *uint32 `protobuf:"fixed32,1023,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
}

func (x *CMsgSteamDatagramNoConnection) Reset() {
	*x = CMsgSteamDatagramNoConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramNoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoConnection) ProtoMessage() {}

func (x *CMsgSteamDatagramNoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoConnection.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoConnection) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgSteamDatagramNoConnection) GetLegacyClientConnectionId() uint32 {
	if x != nil && x.LegacyClientConnectionId != nil {
		return *x.LegacyClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetPeerSteamId() uint64 {
	if x != nil && x.PeerSteamId != nil {
		return *x.PeerSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetEndToEnd() bool {
	if x != nil && x.EndToEnd != nil {
		return *x.EndToEnd
	}
	return false
}

func (x *CMsgSteamDatagramNoConnection) GetDummyPad() uint32 {
	if x != nil && x.DummyPad != nil {
		return *x.DummyPad
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeTime        *uint32 `protobuf:"fixed32,1,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	MyConnectionId       *uint32 `protobuf:"fixed32,3,opt,name=my_connection_id,json=myConnectionId" json:"my_connection_id,omitempty"`
	PeerSteamId          *uint64 `protobuf:"fixed64,4,opt,name=peer_steam_id,json=peerSteamId" json:"peer_steam_id,omitempty"`
	PeerConnectionId     *uint32 `protobuf:"fixed32,5,opt,name=peer_connection_id,json=peerConnectionId" json:"peer_connection_id,omitempty"`
	ProtocolVersion      *uint32 `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	NetworkConfigVersion *uint32 `protobuf:"varint,9,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	PublicIp             *uint32 `protobuf:"fixed32,10,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequestBody) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequestBody.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequestBody) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetMyConnectionId() uint32 {
	if x != nil && x.MyConnectionId != nil {
		return *x.MyConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPeerSteamId() uint64 {
	if x != nil && x.PeerSteamId != nil {
		return *x.PeerSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPeerConnectionId() uint32 {
	if x != nil && x.PeerConnectionId != nil {
		return *x.PeerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetNetworkConfigVersion() uint32 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPublicIp() uint32 {
	if x != nil && x.PublicIp != nil {
		return *x.PublicIp
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert      *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Body      []byte                              `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Signature []byte                              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (x *CMsgSteamDatagramP2PSessionRequest) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramP2PSessionEstablished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId         *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	RelayRoutingId       *uint64 `protobuf:"fixed64,4,opt,name=relay_routing_id,json=relayRoutingId" json:"relay_routing_id,omitempty"`
	SeqNumR2C            *uint32 `protobuf:"varint,5,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
}

func (x *CMsgSteamDatagramP2PSessionEstablished) Reset() {
	*x = CMsgSteamDatagramP2PSessionEstablished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PSessionEstablished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionEstablished) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionEstablished) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionEstablished.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionEstablished) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetRelayRoutingId() uint64 {
	if x != nil && x.RelayRoutingId != nil {
		return *x.RelayRoutingId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayClusters []*CMsgSteamDatagramP2PRoutes_RelayCluster `protobuf:"bytes,1,rep,name=relay_clusters,json=relayClusters" json:"relay_clusters,omitempty"`
	Routes        []*CMsgSteamDatagramP2PRoutes_Route        `protobuf:"bytes,2,rep,name=routes" json:"routes,omitempty"`
	Revision      *uint32                                    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (x *CMsgSteamDatagramP2PRoutes) Reset() {
	*x = CMsgSteamDatagramP2PRoutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgSteamDatagramP2PRoutes) GetRelayClusters() []*CMsgSteamDatagramP2PRoutes_RelayCluster {
	if x != nil {
		return x.RelayClusters
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutes) GetRoutes() []*CMsgSteamDatagramP2PRoutes_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutes) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

type CMsgSteamDatagramP2PRendezvous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToConnectionId        *uint32                            `protobuf:"fixed32,1,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	Routes                *CMsgSteamDatagramP2PRoutes        `protobuf:"bytes,2,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision *uint32                            `protobuf:"varint,3,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectRequest        *CMsgSteamDatagramConnectRequest   `protobuf:"bytes,4,opt,name=connect_request,json=connectRequest" json:"connect_request,omitempty"`
	ConnectOk             *CMsgSteamDatagramConnectOK        `protobuf:"bytes,5,opt,name=connect_ok,json=connectOk" json:"connect_ok,omitempty"`
	ConnectionClosed      *CMsgSteamDatagramConnectionClosed `protobuf:"bytes,6,opt,name=connection_closed,json=connectionClosed" json:"connection_closed,omitempty"`
}

func (x *CMsgSteamDatagramP2PRendezvous) Reset() {
	*x = CMsgSteamDatagramP2PRendezvous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRendezvous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRendezvous) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRendezvous) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRendezvous.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRendezvous) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgSteamDatagramP2PRendezvous) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRendezvous) GetRoutes() *CMsgSteamDatagramP2PRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRendezvous) GetConnectRequest() *CMsgSteamDatagramConnectRequest {
	if x != nil {
		return x.ConnectRequest
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetConnectOk() *CMsgSteamDatagramConnectOK {
	if x != nil {
		return x.ConnectOk
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetConnectionClosed() *CMsgSteamDatagramConnectionClosed {
	if x != nil {
		return x.ConnectionClosed
	}
	return nil
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2R                         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=c2r" json:"c2r,omitempty"`
	C2S                         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=c2s" json:"c2s,omitempty"`
	AckRelay                    []uint32                            `protobuf:"fixed32,3,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                      []uint32                            `protobuf:"fixed32,4,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                       *uint32                             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ForwardTargetRelayRoutingId *uint64                             `protobuf:"fixed64,6,opt,name=forward_target_relay_routing_id,json=forwardTargetRelayRoutingId" json:"forward_target_relay_routing_id,omitempty"`
	ForwardTargetRevision       *uint32                             `protobuf:"varint,7,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	Routes                      *CMsgSteamDatagramP2PRoutes         `protobuf:"bytes,8,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision       *uint32                             `protobuf:"varint,9,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId                *uint32                             `protobuf:"fixed32,10,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumC2R                   *uint32                             `protobuf:"varint,11,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumC2S                   *uint32                             `protobuf:"varint,12,opt,name=seq_num_c2s,json=seqNumC2s" json:"seq_num_c2s,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PClientToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetC2R() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.C2R
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetC2S() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.C2S
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRelayRoutingId() uint64 {
	if x != nil && x.ForwardTargetRelayRoutingId != nil {
		return *x.ForwardTargetRelayRoutingId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRevision() uint32 {
	if x != nil && x.ForwardTargetRevision != nil {
		return *x.ForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetRoutes() *CMsgSteamDatagramP2PRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumC2R() uint32 {
	if x != nil && x.SeqNumC2R != nil {
		return *x.SeqNumC2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumC2S() uint32 {
	if x != nil && x.SeqNumC2S != nil {
		return *x.SeqNumC2S
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R2C                        *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=r2c" json:"r2c,omitempty"`
	P2C                        *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=p2c" json:"p2c,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,4,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,5,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,6,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,7,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                     []uint32                            `protobuf:"fixed32,8,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	AckForwardTargetRevision   *uint32                             `protobuf:"varint,10,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	Routes                     *CMsgSteamDatagramP2PRoutes         `protobuf:"bytes,11,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision      *uint32                             `protobuf:"varint,12,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId               *uint32                             `protobuf:"fixed32,13,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,14,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumP2C                  *uint32                             `protobuf:"varint,15,opt,name=seq_num_p2c,json=seqNumP2c" json:"seq_num_p2c,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetR2C() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.R2C
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetP2C() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.P2C
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestIp() uint32 {
	if x != nil && x.MigrateRequestIp != nil {
		return *x.MigrateRequestIp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestPort() uint32 {
	if x != nil && x.MigrateRequestPort != nil {
		return *x.MigrateRequestPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckForwardTargetRevision() uint32 {
	if x != nil && x.AckForwardTargetRevision != nil {
		return *x.AckForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetRoutes() *CMsgSteamDatagramP2PRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumP2C() uint32 {
	if x != nil && x.SeqNumP2C != nil {
		return *x.SeqNumP2C
	}
	return 0
}

type CMsgSteamSockets_UDP_ChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId    *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	MyTimestamp     *uint64 `protobuf:"fixed64,3,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	ProtocolVersion *uint32 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) Reset() {
	*x = CMsgSteamSockets_UDP_ChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ChallengeRequest) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ChallengeRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ChallengeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId    *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	Challenge       *uint64 `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	YourTimestamp   *uint64 `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	ProtocolVersion *uint32 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) Reset() {
	*x = CMsgSteamSockets_UDP_ChallengeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ChallengeReply) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ChallengeReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ChallengeReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ChallengeReply) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConnectionId *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	Challenge          *uint64                                  `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	ClientSteamId      *uint64                                  `protobuf:"fixed64,3,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	MyTimestamp        *uint64                                  `protobuf:"fixed64,5,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs          *uint32                                  `protobuf:"varint,6,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	Crypt              *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert               *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion    *uint32                                  `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectRequest) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetPingEstMs() uint32 {
	if x != nil && x.PingEstMs != nil {
		return *x.PingEstMs
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectOK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConnectionId *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                                  `protobuf:"fixed32,5,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	ServerSteamId      *uint64                                  `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	YourTimestamp      *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec      *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	Crypt              *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert               *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion    *uint32                                  `protobuf:"varint,9,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ConnectOK) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectOK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectOK) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectOK) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetDelayTimeUsec() uint32 {
	if x != nil && x.DelayTimeUsec != nil {
		return *x.DelayTimeUsec
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectionClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyClientConnectionId *uint32 `protobuf:"fixed32,1,opt,name=legacy_client_connection_id,json=legacyClientConnectionId" json:"legacy_client_connection_id,omitempty"`
	ToConnectionId           *uint32 `protobuf:"fixed32,4,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId         *uint32 `protobuf:"fixed32,5,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	Debug                    *string `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	ReasonCode               *uint32 `protobuf:"varint,3,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectionClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetLegacyClientConnectionId() uint32 {
	if x != nil && x.LegacyClientConnectionId != nil {
		return *x.LegacyClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

type CMsgSteamSockets_UDP_NoConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyClientConnectionId *uint32 `protobuf:"fixed32,1,opt,name=legacy_client_connection_id,json=legacyClientConnectionId" json:"legacy_client_connection_id,omitempty"`
	FromConnectionId         *uint32 `protobuf:"fixed32,2,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToConnectionId           *uint32 `protobuf:"fixed32,3,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
}

func (x *CMsgSteamSockets_UDP_NoConnection) Reset() {
	*x = CMsgSteamSockets_UDP_NoConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_NoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_NoConnection) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_NoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_NoConnection.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_NoConnection) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetLegacyClientConnectionId() uint32 {
	if x != nil && x.LegacyClientConnectionId != nil {
		return *x.LegacyClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

type CMsgSteamSockets_UDP_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats                    *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	AckE2E                   []uint32                            `protobuf:"fixed32,2,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                    *uint32                             `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	LegacyClientConnectionId *uint32                             `protobuf:"fixed32,8,opt,name=legacy_client_connection_id,json=legacyClientConnectionId" json:"legacy_client_connection_id,omitempty"`
	ToConnectionId           *uint32                             `protobuf:"fixed32,9,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId         *uint32                             `protobuf:"fixed32,10,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	SeqNum                   *uint32                             `protobuf:"varint,4,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
}

func (x *CMsgSteamSockets_UDP_Stats) Reset() {
	*x = CMsgSteamSockets_UDP_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_Stats) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_Stats.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_Stats) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgSteamSockets_UDP_Stats) GetStats() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_Stats) GetAckE2E() []uint32 {
	if x != nil {
		return x.AckE2E
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_Stats) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_Stats) GetLegacyClientConnectionId() uint32 {
	if x != nil && x.LegacyClientConnectionId != nil {
		return *x.LegacyClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_Stats) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_Stats) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_Stats) GetSeqNum() uint32 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

type CMsgSteamDatagramRouterPingReply_RouteException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Flags        *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Penalty      *uint32 `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) Reset() {
	*x = CMsgSteamDatagramRouterPingReply_RouteException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply_RouteException) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply_RouteException.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply_RouteException) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

type CMsgSteamDatagramDataCenterState_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PingMs  *uint32 `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
}

func (x *CMsgSteamDatagramDataCenterState_Server) Reset() {
	*x = CMsgSteamDatagramDataCenterState_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDataCenterState_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDataCenterState_Server) ProtoMessage() {}

func (x *CMsgSteamDatagramDataCenterState_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDataCenterState_Server.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDataCenterState_Server) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgSteamDatagramDataCenterState_Server) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CMsgSteamDatagramDataCenterState_Server) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

type CMsgSteamDatagramDataCenterState_DataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         *string                                    `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	ServerSample []*CMsgSteamDatagramDataCenterState_Server `protobuf:"bytes,2,rep,name=server_sample,json=serverSample" json:"server_sample,omitempty"`
	RelaySample  []*CMsgSteamDatagramDataCenterState_Server `protobuf:"bytes,3,rep,name=relay_sample,json=relaySample" json:"relay_sample,omitempty"`
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) Reset() {
	*x = CMsgSteamDatagramDataCenterState_DataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDataCenterState_DataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDataCenterState_DataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDataCenterState_DataCenter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) GetServerSample() []*CMsgSteamDatagramDataCenterState_Server {
	if x != nil {
		return x.ServerSample
	}
	return nil
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) GetRelaySample() []*CMsgSteamDatagramDataCenterState_Server {
	if x != nil {
		return x.RelaySample
	}
	return nil
}

type CMsgSteamDatagramClientPingSampleReply_RoutingCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"fixed32,1,opt,name=id" json:"id,omitempty"`
	FrontPingMs *uint32 `protobuf:"varint,2,opt,name=front_ping_ms,json=frontPingMs" json:"front_ping_ms,omitempty"`
	E2EPingMs   *uint32 `protobuf:"varint,3,opt,name=e2e_ping_ms,json=e2ePingMs" json:"e2e_ping_ms,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_RoutingCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_RoutingCluster) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_RoutingCluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_RoutingCluster) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetFrontPingMs() uint32 {
	if x != nil && x.FrontPingMs != nil {
		return *x.FrontPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetE2EPingMs() uint32 {
	if x != nil && x.E2EPingMs != nil {
		return *x.E2EPingMs
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply_DataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	ViaRelayId   *uint32 `protobuf:"fixed32,2,opt,name=via_relay_id,json=viaRelayId" json:"via_relay_id,omitempty"`
	E2EPingMs    *uint32 `protobuf:"varint,3,opt,name=e2e_ping_ms,json=e2ePingMs" json:"e2e_ping_ms,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_DataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_DataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_DataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_DataCenter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{19, 1}
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetViaRelayId() uint32 {
	if x != nil && x.ViaRelayId != nil {
		return *x.ViaRelayId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetE2EPingMs() uint32 {
	if x != nil && x.E2EPingMs != nil {
		return *x.E2EPingMs
	}
	return 0
}

type CMsgSteamDatagramClientSwitchedPrimary_RouterQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score            *uint32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	FrontPing        *uint32 `protobuf:"varint,2,opt,name=front_ping,json=frontPing" json:"front_ping,omitempty"`
	BackPing         *uint32 `protobuf:"varint,3,opt,name=back_ping,json=backPing" json:"back_ping,omitempty"`
	SecondsUntilDown *uint32 `protobuf:"varint,4,opt,name=seconds_until_down,json=secondsUntilDown" json:"seconds_until_down,omitempty"`
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Reset() {
	*x = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoMessage() {}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientSwitchedPrimary_RouterQuality.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetFrontPing() uint32 {
	if x != nil && x.FrontPing != nil {
		return *x.FrontPing
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetBackPing() uint32 {
	if x != nil && x.BackPing != nil {
		return *x.BackPing
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetSecondsUntilDown() uint32 {
	if x != nil && x.SecondsUntilDown != nil {
		return *x.SecondsUntilDown
	}
	return 0
}

type CMsgSteamDatagramRouterHealth_DataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatacenterId *uint32 `protobuf:"fixed32,1,opt,name=datacenter_id,json=datacenterId" json:"datacenter_id,omitempty"`
	State        *uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) Reset() {
	*x = CMsgSteamDatagramRouterHealth_DataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterHealth_DataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterHealth_DataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterHealth_DataCenter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) GetDatacenterId() uint32 {
	if x != nil && x.DatacenterId != nil {
		return *x.DatacenterId
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes_RelayCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopId                 *uint32 `protobuf:"fixed32,1,opt,name=pop_id,json=popId" json:"pop_id,omitempty"`
	PingMs                *uint32 `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	ScorePenalty          *uint32 `protobuf:"varint,3,opt,name=score_penalty,json=scorePenalty" json:"score_penalty,omitempty"`
	SessionRelayRoutingId *uint64 `protobuf:"fixed64,4,opt,name=session_relay_routing_id,json=sessionRelayRoutingId" json:"session_relay_routing_id,omitempty"`
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) Reset() {
	*x = CMsgSteamDatagramP2PRoutes_RelayCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes_RelayCluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes_RelayCluster) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPopId() uint32 {
	if x != nil && x.PopId != nil {
		return *x.PopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetScorePenalty() uint32 {
	if x != nil && x.ScorePenalty != nil {
		return *x.ScorePenalty
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetSessionRelayRoutingId() uint64 {
	if x != nil && x.SessionRelayRoutingId != nil {
		return *x.SessionRelayRoutingId
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyPopId   *uint32 `protobuf:"fixed32,1,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId *uint32 `protobuf:"fixed32,2,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	Score     *uint32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgSteamDatagramP2PRoutes_Route) Reset() {
	*x = CMsgSteamDatagramP2PRoutes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamdatagram_messages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRoutes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes_Route) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes_Route.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes_Route) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_proto_rawDescGZIP(), []int{29, 1}
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetMyPopId() uint32 {
	if x != nil && x.MyPopId != nil {
		return *x.MyPopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetYourPopId() uint32 {
	if x != nil && x.YourPopId != nil {
		return *x.YourPopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

var File_steamdatagram_messages_proto protoreflect.FileDescriptor

var file_steamdatagram_messages_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfb, 0x04, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x38, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0c, 0x79, 0x6f, 0x75, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x66, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x22,
	0xb0, 0x03, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65,
	0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x32, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x32, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x70,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x6d, 0x79, 0x50,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x79, 0x6f, 0x75, 0x72, 0x50,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x22, 0xe5, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x53, 0x6e, 0x70, 0x22,
	0x27, 0x0a, 0x08, 0x45, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x52, 0x56,
	0x45, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x22, 0x5b, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x63, 0x22, 0xa0, 0x02, 0x0a, 0x27, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x79, 0x6f, 0x75, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xd6, 0x01, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x6c, 0x75, 0x64, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x6b, 0x6c, 0x75, 0x64,
	0x67, 0x65, 0x50, 0x61, 0x64, 0x22, 0x4d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x1a, 0xbc, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x78, 0x31, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x58, 0x31, 0x30, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x78, 0x31, 0x30, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x58, 0x31, 0x30, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x57, 0x65, 0x69, 0x72, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x63,
	0x22, 0xe6, 0x19, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x62,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6b, 0x62, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x62, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6b, 0x62, 0x52, 0x65, 0x63, 0x76, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6c, 0x75, 0x72, 0x63, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76,
	0x4c, 0x75, 0x72, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x30, 0x30, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30, 0x30, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x39,
	0x39, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x39, 0x39, 0x12, 0x30, 0x0a, 0x14, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x39, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x39, 0x37, 0x12, 0x30, 0x0a,
	0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x39, 0x35, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x39, 0x35, 0x12,
	0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x39, 0x30, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x39,
	0x30, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x37, 0x35, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x37, 0x35, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x35, 0x30, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x35, 0x30, 0x12, 0x2e, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x34, 0x0a, 0x16, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x32, 0x6e, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e,
	0x74, 0x69, 0x6c, 0x65, 0x32, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x74, 0x69, 0x6c, 0x65,
	0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x32, 0x35, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x32, 0x35, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x5f, 0x35, 0x30, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x30, 0x74, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x32, 0x35, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x35, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x35, 0x30,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x30, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x37, 0x35, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x37, 0x35, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x30, 0x30, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30,
	0x30, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x31, 0x32, 0x35, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x32, 0x35, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x31, 0x35, 0x30, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x35, 0x30, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x32, 0x30, 0x30, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x33, 0x30,
	0x30, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x33, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x30, 0x74, 0x68,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c,
	0x65, 0x35, 0x30, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x37, 0x35, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x35, 0x74, 0x68,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c,
	0x65, 0x39, 0x35, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x39, 0x38, 0x74, 0x68, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x38, 0x74, 0x68, 0x12, 0x3e, 0x0a,
	0x1b, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x6e, 0x65, 0x67, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x65, 0x67, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x31, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x2c, 0x0a, 0x12, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x32, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x2c, 0x0a, 0x12, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x35, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x12, 0x2e, 0x0a, 0x13, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x30, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30, 0x12, 0x2e, 0x0a, 0x13, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x30, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x30, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x78, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x36,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x36, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x33, 0x32, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x36, 0x34, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x36, 0x34, 0x12, 0x32,
	0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31,
	0x32, 0x38, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x35, 0x36, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x32, 0x35, 0x36, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x35, 0x31, 0x32, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x31, 0x32, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x31, 0x30, 0x32, 0x34, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30, 0x32, 0x34,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x5f, 0x35, 0x30, 0x74, 0x68, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x30, 0x74, 0x68, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x37, 0x35, 0x74, 0x68, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x35,
	0x74, 0x68, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x38, 0x74, 0x68,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e,
	0x74, 0x69, 0x6c, 0x65, 0x39, 0x38, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31,
	0x36, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x36, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x33, 0x32, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x33, 0x32, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x36, 0x34, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x36, 0x34, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x31, 0x32, 0x38, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x35, 0x36, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x32, 0x35, 0x36, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x35, 0x31, 0x32,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x31, 0x32, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x31, 0x30, 0x32, 0x34, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30, 0x32,
	0x34, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x5f, 0x35, 0x30, 0x74, 0x68, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x30, 0x74, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x5f, 0x37, 0x35, 0x74, 0x68, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39,
	0x35, 0x74, 0x68, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x78, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x38, 0x74,
	0x68, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x38, 0x74, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x22, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xe4, 0x03, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x32, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x63, 0x32, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x63,
	0x32, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x63,
	0x32, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x65,
	0x32, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x45, 0x32, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x32, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x32, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x32, 0x73, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xdd, 0x06, 0x0a, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x72,
	0x32, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x72,
	0x32, 0x63, 0x12, 0x35, 0x0a, 0x03, 0x73, 0x32, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x73, 0x32, 0x63, 0x12, 0x4c, 0x0a, 0x23, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x1f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x1f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x65,
	0x32, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x45, 0x32, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x32, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x53, 0x32, 0x63, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xa0, 0x05, 0x0a, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x72,
	0x32, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x72,
	0x32, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x32, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x63, 0x32, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32,
	0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x45, 0x32, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x32, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x52, 0x32, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x32, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x43, 0x32, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xb0, 0x04, 0x0a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x03, 0x73, 0x32, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x03, 0x73, 0x32, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x73, 0x32, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x73, 0x32, 0x63, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x6b,
	0x5f, 0x65, 0x32, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x45,
	0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x32, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x53, 0x32, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x32, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x53, 0x32, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32,
	0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0x4f,
	0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xe3, 0x03, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x61, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x64, 0x0a, 0x0e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x65, 0x32, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x32, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x1a,
	0x74, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x76, 0x69, 0x61, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x32, 0x65, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x32, 0x65, 0x50,
	0x69, 0x6e, 0x67, 0x4d, 0x73, 0x22, 0xef, 0x06, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x67, 0x61, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x67, 0x61, 0x70, 0x4d, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x77, 0x12, 0x5b, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x74, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x77, 0x12, 0x61, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x68, 0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x68, 0x65, 0x6e, 0x1a, 0x8f, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xea, 0x03, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75,
	0x4c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6b, 0x74, 0x73, 0x53, 0x65,
	0x63, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x50, 0x6b, 0x74, 0x73, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a,
	0x11, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x1a, 0x47, 0x0a, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6d, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb2,
	0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x79, 0x6f, 0x75, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63,
	0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x18,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10,
	0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x36,
	0x0a, 0x0a, 0x45, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x54, 0x6f, 0x45,
	0x6e, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x50, 0x65, 0x65, 0x72, 0x10, 0x02, 0x22, 0xd5, 0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x18, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x70, 0x61, 0x64, 0x18, 0xff, 0x07,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x61, 0x64, 0x22, 0xe7,
	0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6d, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32,
	0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x26, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x63, 0x22, 0xbe, 0x03, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32,
	0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x9c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x70, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x67,
	0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x1a, 0x59, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x79, 0x5f,
	0x70, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x6d, 0x79,
	0x50, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x79, 0x6f, 0x75, 0x72,
	0x50, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x50, 0x32, 0x50, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4f, 0x4b, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x6b, 0x12, 0x4f, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x8e,
	0x05, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x50, 0x32, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x32, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x63, 0x32, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x63,
	0x32, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x63,
	0x32, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x07,
	0x52, 0x06, 0x61, 0x63, 0x6b, 0x45, 0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x32, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x32, 0x72, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x32, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x32, 0x73, 0x22,
	0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22,
	0xa8, 0x06, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x32, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x72, 0x32, 0x63, 0x12, 0x35, 0x0a, 0x03,
	0x70, 0x32, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03,
	0x70, 0x32, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x6b,
	0x5f, 0x65, 0x32, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x45,
	0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x6b, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61,
	0x63, 0x6b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x32, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x50, 0x32, 0x63, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0x9a, 0x01, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x55, 0x44, 0x50, 0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x6d, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50,
	0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x79, 0x6f, 0x75, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x03, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6d, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x79, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x79, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01,
	0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x18, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x4e,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06, 0x61,
	0x63, 0x6b, 0x45, 0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0x37, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x45, 0x10, 0x04, 0x2a, 0xf5, 0x08, 0x0a, 0x13, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x03,
	0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x04, 0x12, 0x30, 0x0a,
	0x2c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12,
	0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x4e, 0x6f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x0b,
	0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x12, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b,
	0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x15, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x16, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x10, 0x17, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x18, 0x12, 0x2d, 0x0a,
	0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x19, 0x2a, 0xc9, 0x02, 0x0a,
	0x18, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x20, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44,
	0x50, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x10, 0x21, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x22, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x10, 0x23, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x55, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x24, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67,
	0x5f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x26, 0x42, 0x03, 0x80, 0x01, 0x00,
}

var (
	file_steamdatagram_messages_proto_rawDescOnce sync.Once
	file_steamdatagram_messages_proto_rawDescData = file_steamdatagram_messages_proto_rawDesc
)

func file_steamdatagram_messages_proto_rawDescGZIP() []byte {
	file_steamdatagram_messages_proto_rawDescOnce.Do(func() {
		file_steamdatagram_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_steamdatagram_messages_proto_rawDescData)
	})
	return file_steamdatagram_messages_proto_rawDescData
}

var file_steamdatagram_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_steamdatagram_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_steamdatagram_messages_proto_goTypes = []any{
	(ESteamDatagramMsgID)(0),                                      // 0: ESteamDatagramMsgID
	(ESteamNetworkingUDPMsgID)(0),                                 // 1: ESteamNetworkingUDPMsgID
	(CMsgSteamDatagramSessionCryptInfo_EKeyType)(0),               // 2: CMsgSteamDatagramSessionCryptInfo.EKeyType
	(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)(0),     // 3: CMsgSteamDatagramConnectionStatsClientToRouter.Flags
	(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)(0),     // 4: CMsgSteamDatagramConnectionStatsRouterToClient.Flags
	(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)(0),     // 5: CMsgSteamDatagramConnectionStatsRouterToServer.Flags
	(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)(0),     // 6: CMsgSteamDatagramConnectionStatsServerToRouter.Flags
	(CMsgSteamDatagramConnectionClosed_ERelayMode)(0),             // 7: CMsgSteamDatagramConnectionClosed.ERelayMode
	(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)(0),  // 8: CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags
	(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)(0),  // 9: CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags
	(CMsgSteamSockets_UDP_Stats_Flags)(0),                         // 10: CMsgSteamSockets_UDP_Stats.Flags
	(*CMsgSteamDatagramRouterPingReply)(nil),                      // 11: CMsgSteamDatagramRouterPingReply
	(*CMsgSteamDatagramGameserverPing)(nil),                       // 12: CMsgSteamDatagramGameserverPing
	(*CMsgSteamDatagramRelayToRelayPing)(nil),                     // 13: CMsgSteamDatagramRelayToRelayPing
	(*CMsgSteamDatagramSessionCryptInfo)(nil),                     // 14: CMsgSteamDatagramSessionCryptInfo
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil),               // 15: CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamDatagramGameserverSessionRequest)(nil),             // 16: CMsgSteamDatagramGameserverSessionRequest
	(*CMsgSteamDatagramGameserverSessionEstablished)(nil),         // 17: CMsgSteamDatagramGameserverSessionEstablished
	(*CMsgSteamDatagramNoSessionRelayToClient)(nil),               // 18: CMsgSteamDatagramNoSessionRelayToClient
	(*CMsgSteamDatagramNoSessionRelayToServer)(nil),               // 19: CMsgSteamDatagramNoSessionRelayToServer
	(*CMsgSteamDatagramDiagnostic)(nil),                           // 20: CMsgSteamDatagramDiagnostic
	(*CMsgSteamDatagramDataCenterState)(nil),                      // 21: CMsgSteamDatagramDataCenterState
	(*CMsgSteamDatagramLinkInstantaneousStats)(nil),               // 22: CMsgSteamDatagramLinkInstantaneousStats
	(*CMsgSteamDatagramLinkLifetimeStats)(nil),                    // 23: CMsgSteamDatagramLinkLifetimeStats
	(*CMsgSteamDatagramConnectionQuality)(nil),                    // 24: CMsgSteamDatagramConnectionQuality
	(*CMsgSteamDatagramConnectionStatsClientToRouter)(nil),        // 25: CMsgSteamDatagramConnectionStatsClientToRouter
	(*CMsgSteamDatagramConnectionStatsRouterToClient)(nil),        // 26: CMsgSteamDatagramConnectionStatsRouterToClient
	(*CMsgSteamDatagramConnectionStatsRouterToServer)(nil),        // 27: CMsgSteamDatagramConnectionStatsRouterToServer
	(*CMsgSteamDatagramConnectionStatsServerToRouter)(nil),        // 28: CMsgSteamDatagramConnectionStatsServerToRouter
	(*CMsgSteamDatagramClientPingSampleRequest)(nil),              // 29: CMsgSteamDatagramClientPingSampleRequest
	(*CMsgSteamDatagramClientPingSampleReply)(nil),                // 30: CMsgSteamDatagramClientPingSampleReply
	(*CMsgSteamDatagramClientSwitchedPrimary)(nil),                // 31: CMsgSteamDatagramClientSwitchedPrimary
	(*CMsgSteamDatagramRouterHealth)(nil),                         // 32: CMsgSteamDatagramRouterHealth
	(*CMsgSteamDatagramConnectRequest)(nil),                       // 33: CMsgSteamDatagramConnectRequest
	(*CMsgSteamDatagramConnectOK)(nil),                            // 34: CMsgSteamDatagramConnectOK
	(*CMsgSteamDatagramConnectionClosed)(nil),                     // 35: CMsgSteamDatagramConnectionClosed
	(*CMsgSteamDatagramNoConnection)(nil),                         // 36: CMsgSteamDatagramNoConnection
	(*CMsgSteamDatagramP2PSessionRequestBody)(nil),                // 37: CMsgSteamDatagramP2PSessionRequestBody
	(*CMsgSteamDatagramP2PSessionRequest)(nil),                    // 38: CMsgSteamDatagramP2PSessionRequest
	(*CMsgSteamDatagramP2PSessionEstablished)(nil),                // 39: CMsgSteamDatagramP2PSessionEstablished
	(*CMsgSteamDatagramP2PRoutes)(nil),                            // 40: CMsgSteamDatagramP2PRoutes
	(*CMsgSteamDatagramP2PRendezvous)(nil),                        // 41: CMsgSteamDatagramP2PRendezvous
	(*CMsgSteamDatagramConnectionStatsP2PClientToRouter)(nil),     // 42: CMsgSteamDatagramConnectionStatsP2PClientToRouter
	(*CMsgSteamDatagramConnectionStatsP2PRouterToClient)(nil),     // 43: CMsgSteamDatagramConnectionStatsP2PRouterToClient
	(*CMsgSteamSockets_UDP_ChallengeRequest)(nil),                 // 44: CMsgSteamSockets_UDP_ChallengeRequest
	(*CMsgSteamSockets_UDP_ChallengeReply)(nil),                   // 45: CMsgSteamSockets_UDP_ChallengeReply
	(*CMsgSteamSockets_UDP_ConnectRequest)(nil),                   // 46: CMsgSteamSockets_UDP_ConnectRequest
	(*CMsgSteamSockets_UDP_ConnectOK)(nil),                        // 47: CMsgSteamSockets_UDP_ConnectOK
	(*CMsgSteamSockets_UDP_ConnectionClosed)(nil),                 // 48: CMsgSteamSockets_UDP_ConnectionClosed
	(*CMsgSteamSockets_UDP_NoConnection)(nil),                     // 49: CMsgSteamSockets_UDP_NoConnection
	(*CMsgSteamSockets_UDP_Stats)(nil),                            // 50: CMsgSteamSockets_UDP_Stats
	(*CMsgSteamDatagramRouterPingReply_RouteException)(nil),       // 51: CMsgSteamDatagramRouterPingReply.RouteException
	(*CMsgSteamDatagramDataCenterState_Server)(nil),               // 52: CMsgSteamDatagramDataCenterState.Server
	(*CMsgSteamDatagramDataCenterState_DataCenter)(nil),           // 53: CMsgSteamDatagramDataCenterState.DataCenter
	(*CMsgSteamDatagramClientPingSampleReply_RoutingCluster)(nil), // 54: CMsgSteamDatagramClientPingSampleReply.RoutingCluster
	(*CMsgSteamDatagramClientPingSampleReply_DataCenter)(nil),     // 55: CMsgSteamDatagramClientPingSampleReply.DataCenter
	(*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)(nil),  // 56: CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	(*CMsgSteamDatagramRouterHealth_DataCenter)(nil),              // 57: CMsgSteamDatagramRouterHealth.DataCenter
	(*CMsgSteamDatagramP2PRoutes_RelayCluster)(nil),               // 58: CMsgSteamDatagramP2PRoutes.RelayCluster
	(*CMsgSteamDatagramP2PRoutes_Route)(nil),                      // 59: CMsgSteamDatagramP2PRoutes.Route
	(*CMsgSteamDatagramCertificateSigned)(nil),                    // 60: CMsgSteamDatagramCertificateSigned
}
var file_steamdatagram_messages_proto_depIdxs = []int32{
	51, // 0: CMsgSteamDatagramRouterPingReply.route_exceptions:type_name -> CMsgSteamDatagramRouterPingReply.RouteException
	2,  // 1: CMsgSteamDatagramSessionCryptInfo.key_type:type_name -> CMsgSteamDatagramSessionCryptInfo.EKeyType
	53, // 2: CMsgSteamDatagramDataCenterState.data_centers:type_name -> CMsgSteamDatagramDataCenterState.DataCenter
	22, // 3: CMsgSteamDatagramConnectionQuality.instantaneous:type_name -> CMsgSteamDatagramLinkInstantaneousStats
	23, // 4: CMsgSteamDatagramConnectionQuality.lifetime:type_name -> CMsgSteamDatagramLinkLifetimeStats
	24, // 5: CMsgSteamDatagramConnectionStatsClientToRouter.c2r:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 6: CMsgSteamDatagramConnectionStatsClientToRouter.c2s:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 7: CMsgSteamDatagramConnectionStatsRouterToClient.r2c:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 8: CMsgSteamDatagramConnectionStatsRouterToClient.s2c:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 9: CMsgSteamDatagramConnectionStatsRouterToServer.r2s:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 10: CMsgSteamDatagramConnectionStatsRouterToServer.c2s:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 11: CMsgSteamDatagramConnectionStatsServerToRouter.s2r:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 12: CMsgSteamDatagramConnectionStatsServerToRouter.s2c:type_name -> CMsgSteamDatagramConnectionQuality
	54, // 13: CMsgSteamDatagramClientPingSampleReply.routing_clusters:type_name -> CMsgSteamDatagramClientPingSampleReply.RoutingCluster
	55, // 14: CMsgSteamDatagramClientPingSampleReply.data_centers:type_name -> CMsgSteamDatagramClientPingSampleReply.DataCenter
	56, // 15: CMsgSteamDatagramClientSwitchedPrimary.from_quality_now:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	56, // 16: CMsgSteamDatagramClientSwitchedPrimary.to_quality_now:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	56, // 17: CMsgSteamDatagramClientSwitchedPrimary.from_quality_then:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	56, // 18: CMsgSteamDatagramClientSwitchedPrimary.to_quality_then:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	57, // 19: CMsgSteamDatagramRouterHealth.data_centers:type_name -> CMsgSteamDatagramRouterHealth.DataCenter
	15, // 20: CMsgSteamDatagramConnectRequest.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	60, // 21: CMsgSteamDatagramConnectRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	15, // 22: CMsgSteamDatagramConnectOK.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	60, // 23: CMsgSteamDatagramConnectOK.cert:type_name -> CMsgSteamDatagramCertificateSigned
	7,  // 24: CMsgSteamDatagramConnectionClosed.relay_mode:type_name -> CMsgSteamDatagramConnectionClosed.ERelayMode
	60, // 25: CMsgSteamDatagramP2PSessionRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	58, // 26: CMsgSteamDatagramP2PRoutes.relay_clusters:type_name -> CMsgSteamDatagramP2PRoutes.RelayCluster
	59, // 27: CMsgSteamDatagramP2PRoutes.routes:type_name -> CMsgSteamDatagramP2PRoutes.Route
	40, // 28: CMsgSteamDatagramP2PRendezvous.routes:type_name -> CMsgSteamDatagramP2PRoutes
	33, // 29: CMsgSteamDatagramP2PRendezvous.connect_request:type_name -> CMsgSteamDatagramConnectRequest
	34, // 30: CMsgSteamDatagramP2PRendezvous.connect_ok:type_name -> CMsgSteamDatagramConnectOK
	35, // 31: CMsgSteamDatagramP2PRendezvous.connection_closed:type_name -> CMsgSteamDatagramConnectionClosed
	24, // 32: CMsgSteamDatagramConnectionStatsP2PClientToRouter.c2r:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 33: CMsgSteamDatagramConnectionStatsP2PClientToRouter.c2s:type_name -> CMsgSteamDatagramConnectionQuality
	40, // 34: CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes:type_name -> CMsgSteamDatagramP2PRoutes
	24, // 35: CMsgSteamDatagramConnectionStatsP2PRouterToClient.r2c:type_name -> CMsgSteamDatagramConnectionQuality
	24, // 36: CMsgSteamDatagramConnectionStatsP2PRouterToClient.p2c:type_name -> CMsgSteamDatagramConnectionQuality
	40, // 37: CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes:type_name -> CMsgSteamDatagramP2PRoutes
	15, // 38: CMsgSteamSockets_UDP_ConnectRequest.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	60, // 39: CMsgSteamSockets_UDP_ConnectRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	15, // 40: CMsgSteamSockets_UDP_ConnectOK.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	60, // 41: CMsgSteamSockets_UDP_ConnectOK.cert:type_name -> CMsgSteamDatagramCertificateSigned
	24, // 42: CMsgSteamSockets_UDP_Stats.stats:type_name -> CMsgSteamDatagramConnectionQuality
	52, // 43: CMsgSteamDatagramDataCenterState.DataCenter.server_sample:type_name -> CMsgSteamDatagramDataCenterState.Server
	52, // 44: CMsgSteamDatagramDataCenterState.DataCenter.relay_sample:type_name -> CMsgSteamDatagramDataCenterState.Server
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_steamdatagram_messages_proto_init() }
func file_steamdatagram_messages_proto_init() {
	if File_steamdatagram_messages_proto != nil {
		return
	}
	file_steamdatagram_auth_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steamdatagram_messages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramRouterPingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramGameserverPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramRelayToRelayPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramSessionCryptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramSessionCryptInfoSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramGameserverSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramGameserverSessionEstablished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramNoSessionRelayToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramNoSessionRelayToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramDataCenterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramLinkInstantaneousStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramLinkLifetimeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionStatsClientToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionStatsRouterToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionStatsRouterToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionStatsServerToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramClientPingSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramClientPingSampleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramClientSwitchedPrimary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramRouterHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectOK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramNoConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PSessionRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PSessionEstablished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PRoutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PRendezvous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionStatsP2PClientToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramConnectionStatsP2PRouterToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_ChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_ChallengeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_ConnectOK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_ConnectionClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_NoConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamSockets_UDP_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramRouterPingReply_RouteException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramDataCenterState_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramDataCenterState_DataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramClientPingSampleReply_RoutingCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramClientPingSampleReply_DataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramRouterHealth_DataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PRoutes_RelayCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamdatagram_messages_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamDatagramP2PRoutes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steamdatagram_messages_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamdatagram_messages_proto_goTypes,
		DependencyIndexes: file_steamdatagram_messages_proto_depIdxs,
		EnumInfos:         file_steamdatagram_messages_proto_enumTypes,
		MessageInfos:      file_steamdatagram_messages_proto_msgTypes,
	}.Build()
	File_steamdatagram_messages_proto = out.File
	file_steamdatagram_messages_proto_rawDesc = nil
	file_steamdatagram_messages_proto_goTypes = nil
	file_steamdatagram_messages_proto_depIdxs = nil
}
