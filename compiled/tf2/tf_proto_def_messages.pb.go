// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: tf_proto_def_messages.proto

package tf2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogicalOperation int32

const (
	LogicalOperation_AND LogicalOperation = 0
	LogicalOperation_OR  LogicalOperation = 1
	LogicalOperation_NOT LogicalOperation = 2
)

// Enum value maps for LogicalOperation.
var (
	LogicalOperation_name = map[int32]string{
		0: "AND",
		1: "OR",
		2: "NOT",
	}
	LogicalOperation_value = map[string]int32{
		"AND": 0,
		"OR":  1,
		"NOT": 2,
	}
)

func (x LogicalOperation) Enum() *LogicalOperation {
	p := new(LogicalOperation)
	*p = x
	return p
}

func (x LogicalOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[0].Descriptor()
}

func (LogicalOperation) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[0]
}

func (x LogicalOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LogicalOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LogicalOperation(num)
	return nil
}

// Deprecated: Use LogicalOperation.Descriptor instead.
func (LogicalOperation) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{0}
}

type EValueDefinitionSource int32

const (
	EValueDefinitionSource_REFERENCE_DEFINES EValueDefinitionSource = 0
	EValueDefinitionSource_PARENT_DEFINES    EValueDefinitionSource = 1
	EValueDefinitionSource_THIS_DEFINES      EValueDefinitionSource = 2
	EValueDefinitionSource_VARIABLE_DEFINES  EValueDefinitionSource = 3
	EValueDefinitionSource_NOT_DEFINED       EValueDefinitionSource = 4
)

// Enum value maps for EValueDefinitionSource.
var (
	EValueDefinitionSource_name = map[int32]string{
		0: "REFERENCE_DEFINES",
		1: "PARENT_DEFINES",
		2: "THIS_DEFINES",
		3: "VARIABLE_DEFINES",
		4: "NOT_DEFINED",
	}
	EValueDefinitionSource_value = map[string]int32{
		"REFERENCE_DEFINES": 0,
		"PARENT_DEFINES":    1,
		"THIS_DEFINES":      2,
		"VARIABLE_DEFINES":  3,
		"NOT_DEFINED":       4,
	}
)

func (x EValueDefinitionSource) Enum() *EValueDefinitionSource {
	p := new(EValueDefinitionSource)
	*p = x
	return p
}

func (x EValueDefinitionSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EValueDefinitionSource) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[1].Descriptor()
}

func (EValueDefinitionSource) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[1]
}

func (x EValueDefinitionSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EValueDefinitionSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EValueDefinitionSource(num)
	return nil
}

// Deprecated: Use EValueDefinitionSource.Descriptor instead.
func (EValueDefinitionSource) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{1}
}

type ProtoDefTypes int32

const (
	ProtoDefTypes_DEF_TYPE_QUEST_MAP_NODE           ProtoDefTypes = 0
	ProtoDefTypes_DEF_TYPE_QUEST_THEME              ProtoDefTypes = 2
	ProtoDefTypes_DEF_TYPE_QUEST_MAP_REGION         ProtoDefTypes = 3
	ProtoDefTypes_DEF_TYPE_QUEST                    ProtoDefTypes = 4
	ProtoDefTypes_DEF_TYPE_QUEST_OBJECTIVE          ProtoDefTypes = 5
	ProtoDefTypes_DEF_TYPE_PAINTKIT_VARIABLES       ProtoDefTypes = 6
	ProtoDefTypes_DEF_TYPE_PAINTKIT_OPERATION       ProtoDefTypes = 7
	ProtoDefTypes_DEF_TYPE_PAINTKIT_ITEM_DEFINITION ProtoDefTypes = 8
	ProtoDefTypes_DEF_TYPE_PAINTKIT_DEFINITION      ProtoDefTypes = 9
	ProtoDefTypes_DEF_TYPE_HEADER_ONLY              ProtoDefTypes = 10
	ProtoDefTypes_DEF_TYPE_QUEST_MAP_STORE_ITEM     ProtoDefTypes = 11
	ProtoDefTypes_DEF_TYPE_QUEST_MAP_STAR_TYPE      ProtoDefTypes = 12
)

// Enum value maps for ProtoDefTypes.
var (
	ProtoDefTypes_name = map[int32]string{
		0:  "DEF_TYPE_QUEST_MAP_NODE",
		2:  "DEF_TYPE_QUEST_THEME",
		3:  "DEF_TYPE_QUEST_MAP_REGION",
		4:  "DEF_TYPE_QUEST",
		5:  "DEF_TYPE_QUEST_OBJECTIVE",
		6:  "DEF_TYPE_PAINTKIT_VARIABLES",
		7:  "DEF_TYPE_PAINTKIT_OPERATION",
		8:  "DEF_TYPE_PAINTKIT_ITEM_DEFINITION",
		9:  "DEF_TYPE_PAINTKIT_DEFINITION",
		10: "DEF_TYPE_HEADER_ONLY",
		11: "DEF_TYPE_QUEST_MAP_STORE_ITEM",
		12: "DEF_TYPE_QUEST_MAP_STAR_TYPE",
	}
	ProtoDefTypes_value = map[string]int32{
		"DEF_TYPE_QUEST_MAP_NODE":           0,
		"DEF_TYPE_QUEST_THEME":              2,
		"DEF_TYPE_QUEST_MAP_REGION":         3,
		"DEF_TYPE_QUEST":                    4,
		"DEF_TYPE_QUEST_OBJECTIVE":          5,
		"DEF_TYPE_PAINTKIT_VARIABLES":       6,
		"DEF_TYPE_PAINTKIT_OPERATION":       7,
		"DEF_TYPE_PAINTKIT_ITEM_DEFINITION": 8,
		"DEF_TYPE_PAINTKIT_DEFINITION":      9,
		"DEF_TYPE_HEADER_ONLY":              10,
		"DEF_TYPE_QUEST_MAP_STORE_ITEM":     11,
		"DEF_TYPE_QUEST_MAP_STAR_TYPE":      12,
	}
)

func (x ProtoDefTypes) Enum() *ProtoDefTypes {
	p := new(ProtoDefTypes)
	*p = x
	return p
}

func (x ProtoDefTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoDefTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[2].Descriptor()
}

func (ProtoDefTypes) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[2]
}

func (x ProtoDefTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoDefTypes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoDefTypes(num)
	return nil
}

// Deprecated: Use ProtoDefTypes.Descriptor instead.
func (ProtoDefTypes) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{2}
}

type EQuestPoints int32

const (
	EQuestPoints_QUEST_POINTS_NOVICE   EQuestPoints = 0
	EQuestPoints_QUEST_POINTS_ADVANCED EQuestPoints = 1
	EQuestPoints_QUEST_POINTS_EXPERT   EQuestPoints = 2
)

// Enum value maps for EQuestPoints.
var (
	EQuestPoints_name = map[int32]string{
		0: "QUEST_POINTS_NOVICE",
		1: "QUEST_POINTS_ADVANCED",
		2: "QUEST_POINTS_EXPERT",
	}
	EQuestPoints_value = map[string]int32{
		"QUEST_POINTS_NOVICE":   0,
		"QUEST_POINTS_ADVANCED": 1,
		"QUEST_POINTS_EXPERT":   2,
	}
)

func (x EQuestPoints) Enum() *EQuestPoints {
	p := new(EQuestPoints)
	*p = x
	return p
}

func (x EQuestPoints) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuestPoints) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[3].Descriptor()
}

func (EQuestPoints) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[3]
}

func (x EQuestPoints) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuestPoints) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuestPoints(num)
	return nil
}

// Deprecated: Use EQuestPoints.Descriptor instead.
func (EQuestPoints) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{3}
}

type EVarFieldType int32

const (
	EVarFieldType_VAR_TYPE_INVALID EVarFieldType = 1
	EVarFieldType_VAR_TYPE_FLOAT   EVarFieldType = 2
	EVarFieldType_VAR_TYPE_DOUBLE  EVarFieldType = 3
	EVarFieldType_VAR_TYPE_UINT32  EVarFieldType = 4
	EVarFieldType_VAR_TYPE_UINT64  EVarFieldType = 5
	EVarFieldType_VAR_TYPE_SINT32  EVarFieldType = 6
	EVarFieldType_VAR_TYPE_SINT64  EVarFieldType = 7
	EVarFieldType_VAR_TYPE_BOOL    EVarFieldType = 8
	EVarFieldType_VAR_TYPE_STRING  EVarFieldType = 9
)

// Enum value maps for EVarFieldType.
var (
	EVarFieldType_name = map[int32]string{
		1: "VAR_TYPE_INVALID",
		2: "VAR_TYPE_FLOAT",
		3: "VAR_TYPE_DOUBLE",
		4: "VAR_TYPE_UINT32",
		5: "VAR_TYPE_UINT64",
		6: "VAR_TYPE_SINT32",
		7: "VAR_TYPE_SINT64",
		8: "VAR_TYPE_BOOL",
		9: "VAR_TYPE_STRING",
	}
	EVarFieldType_value = map[string]int32{
		"VAR_TYPE_INVALID": 1,
		"VAR_TYPE_FLOAT":   2,
		"VAR_TYPE_DOUBLE":  3,
		"VAR_TYPE_UINT32":  4,
		"VAR_TYPE_UINT64":  5,
		"VAR_TYPE_SINT32":  6,
		"VAR_TYPE_SINT64":  7,
		"VAR_TYPE_BOOL":    8,
		"VAR_TYPE_STRING":  9,
	}
)

func (x EVarFieldType) Enum() *EVarFieldType {
	p := new(EVarFieldType)
	*p = x
	return p
}

func (x EVarFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVarFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[4].Descriptor()
}

func (EVarFieldType) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[4]
}

func (x EVarFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EVarFieldType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EVarFieldType(num)
	return nil
}

// Deprecated: Use EVarFieldType.Descriptor instead.
func (EVarFieldType) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{4}
}

type ENodeCashReward int32

const (
	ENodeCashReward_CASH_REWARD_NONE   ENodeCashReward = 1
	ENodeCashReward_CASH_REWARD_SMALL  ENodeCashReward = 2
	ENodeCashReward_CASH_REWARD_MEDIUM ENodeCashReward = 3
	ENodeCashReward_CASH_REWARD_LARGE  ENodeCashReward = 4
)

// Enum value maps for ENodeCashReward.
var (
	ENodeCashReward_name = map[int32]string{
		1: "CASH_REWARD_NONE",
		2: "CASH_REWARD_SMALL",
		3: "CASH_REWARD_MEDIUM",
		4: "CASH_REWARD_LARGE",
	}
	ENodeCashReward_value = map[string]int32{
		"CASH_REWARD_NONE":   1,
		"CASH_REWARD_SMALL":  2,
		"CASH_REWARD_MEDIUM": 3,
		"CASH_REWARD_LARGE":  4,
	}
)

func (x ENodeCashReward) Enum() *ENodeCashReward {
	p := new(ENodeCashReward)
	*p = x
	return p
}

func (x ENodeCashReward) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENodeCashReward) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[5].Descriptor()
}

func (ENodeCashReward) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[5]
}

func (x ENodeCashReward) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENodeCashReward) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENodeCashReward(num)
	return nil
}

// Deprecated: Use ENodeCashReward.Descriptor instead.
func (ENodeCashReward) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{5}
}

type CMsgQuestObjectiveDef_ETF2GameModes int32

const (
	CMsgQuestObjectiveDef_kGameCategory_Escort           CMsgQuestObjectiveDef_ETF2GameModes = 0
	CMsgQuestObjectiveDef_kGameCategory_CTF              CMsgQuestObjectiveDef_ETF2GameModes = 1
	CMsgQuestObjectiveDef_kGameCategory_AttackDefense    CMsgQuestObjectiveDef_ETF2GameModes = 2
	CMsgQuestObjectiveDef_kGameCategory_Koth             CMsgQuestObjectiveDef_ETF2GameModes = 3
	CMsgQuestObjectiveDef_kGameCategory_CP               CMsgQuestObjectiveDef_ETF2GameModes = 4
	CMsgQuestObjectiveDef_kGameCategory_EscortRace       CMsgQuestObjectiveDef_ETF2GameModes = 5
	CMsgQuestObjectiveDef_kGameCategory_EventMix         CMsgQuestObjectiveDef_ETF2GameModes = 6
	CMsgQuestObjectiveDef_kGameCategory_SD               CMsgQuestObjectiveDef_ETF2GameModes = 7
	CMsgQuestObjectiveDef_kGameCategory_Quickplay        CMsgQuestObjectiveDef_ETF2GameModes = 8
	CMsgQuestObjectiveDef_kGameCategory_Event247         CMsgQuestObjectiveDef_ETF2GameModes = 9
	CMsgQuestObjectiveDef_kGameCategory_Arena            CMsgQuestObjectiveDef_ETF2GameModes = 10
	CMsgQuestObjectiveDef_kGameCategory_RobotDestruction CMsgQuestObjectiveDef_ETF2GameModes = 11
	CMsgQuestObjectiveDef_kGameCategory_Powerup          CMsgQuestObjectiveDef_ETF2GameModes = 12
	CMsgQuestObjectiveDef_kGameCategory_Featured         CMsgQuestObjectiveDef_ETF2GameModes = 13
	CMsgQuestObjectiveDef_kGameCategory_Passtime         CMsgQuestObjectiveDef_ETF2GameModes = 14
	CMsgQuestObjectiveDef_kGameCategory_Community_Update CMsgQuestObjectiveDef_ETF2GameModes = 15
	CMsgQuestObjectiveDef_kGameCategory_Misc             CMsgQuestObjectiveDef_ETF2GameModes = 16
	CMsgQuestObjectiveDef_kGameCategory_Competitive_6v6  CMsgQuestObjectiveDef_ETF2GameModes = 17
	CMsgQuestObjectiveDef_kGameCategory_Other            CMsgQuestObjectiveDef_ETF2GameModes = 18
	CMsgQuestObjectiveDef_kGameCategory_Halloween        CMsgQuestObjectiveDef_ETF2GameModes = 19
)

// Enum value maps for CMsgQuestObjectiveDef_ETF2GameModes.
var (
	CMsgQuestObjectiveDef_ETF2GameModes_name = map[int32]string{
		0:  "kGameCategory_Escort",
		1:  "kGameCategory_CTF",
		2:  "kGameCategory_AttackDefense",
		3:  "kGameCategory_Koth",
		4:  "kGameCategory_CP",
		5:  "kGameCategory_EscortRace",
		6:  "kGameCategory_EventMix",
		7:  "kGameCategory_SD",
		8:  "kGameCategory_Quickplay",
		9:  "kGameCategory_Event247",
		10: "kGameCategory_Arena",
		11: "kGameCategory_RobotDestruction",
		12: "kGameCategory_Powerup",
		13: "kGameCategory_Featured",
		14: "kGameCategory_Passtime",
		15: "kGameCategory_Community_Update",
		16: "kGameCategory_Misc",
		17: "kGameCategory_Competitive_6v6",
		18: "kGameCategory_Other",
		19: "kGameCategory_Halloween",
	}
	CMsgQuestObjectiveDef_ETF2GameModes_value = map[string]int32{
		"kGameCategory_Escort":           0,
		"kGameCategory_CTF":              1,
		"kGameCategory_AttackDefense":    2,
		"kGameCategory_Koth":             3,
		"kGameCategory_CP":               4,
		"kGameCategory_EscortRace":       5,
		"kGameCategory_EventMix":         6,
		"kGameCategory_SD":               7,
		"kGameCategory_Quickplay":        8,
		"kGameCategory_Event247":         9,
		"kGameCategory_Arena":            10,
		"kGameCategory_RobotDestruction": 11,
		"kGameCategory_Powerup":          12,
		"kGameCategory_Featured":         13,
		"kGameCategory_Passtime":         14,
		"kGameCategory_Community_Update": 15,
		"kGameCategory_Misc":             16,
		"kGameCategory_Competitive_6v6":  17,
		"kGameCategory_Other":            18,
		"kGameCategory_Halloween":        19,
	}
)

func (x CMsgQuestObjectiveDef_ETF2GameModes) Enum() *CMsgQuestObjectiveDef_ETF2GameModes {
	p := new(CMsgQuestObjectiveDef_ETF2GameModes)
	*p = x
	return p
}

func (x CMsgQuestObjectiveDef_ETF2GameModes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgQuestObjectiveDef_ETF2GameModes) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[6].Descriptor()
}

func (CMsgQuestObjectiveDef_ETF2GameModes) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[6]
}

func (x CMsgQuestObjectiveDef_ETF2GameModes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgQuestObjectiveDef_ETF2GameModes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgQuestObjectiveDef_ETF2GameModes(num)
	return nil
}

// Deprecated: Use CMsgQuestObjectiveDef_ETF2GameModes.Descriptor instead.
func (CMsgQuestObjectiveDef_ETF2GameModes) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{6, 0}
}

type CMsgQuestObjectiveDef_ETF2Conditions int32

const (
	CMsgQuestObjectiveDef_TF_COND_AIMING                           CMsgQuestObjectiveDef_ETF2Conditions = 0
	CMsgQuestObjectiveDef_TF_COND_ZOOMED                           CMsgQuestObjectiveDef_ETF2Conditions = 1
	CMsgQuestObjectiveDef_TF_COND_DISGUISING                       CMsgQuestObjectiveDef_ETF2Conditions = 2
	CMsgQuestObjectiveDef_TF_COND_DISGUISED                        CMsgQuestObjectiveDef_ETF2Conditions = 3
	CMsgQuestObjectiveDef_TF_COND_STEALTHED                        CMsgQuestObjectiveDef_ETF2Conditions = 4
	CMsgQuestObjectiveDef_TF_COND_INVULNERABLE                     CMsgQuestObjectiveDef_ETF2Conditions = 5
	CMsgQuestObjectiveDef_TF_COND_TELEPORTED                       CMsgQuestObjectiveDef_ETF2Conditions = 6
	CMsgQuestObjectiveDef_TF_COND_TAUNTING                         CMsgQuestObjectiveDef_ETF2Conditions = 7
	CMsgQuestObjectiveDef_TF_COND_INVULNERABLE_WEARINGOFF          CMsgQuestObjectiveDef_ETF2Conditions = 8
	CMsgQuestObjectiveDef_TF_COND_STEALTHED_BLINK                  CMsgQuestObjectiveDef_ETF2Conditions = 9
	CMsgQuestObjectiveDef_TF_COND_SELECTED_TO_TELEPORT             CMsgQuestObjectiveDef_ETF2Conditions = 10
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED                      CMsgQuestObjectiveDef_ETF2Conditions = 11
	CMsgQuestObjectiveDef_TF_COND_TMPDAMAGEBONUS                   CMsgQuestObjectiveDef_ETF2Conditions = 12
	CMsgQuestObjectiveDef_TF_COND_FEIGN_DEATH                      CMsgQuestObjectiveDef_ETF2Conditions = 13
	CMsgQuestObjectiveDef_TF_COND_PHASE                            CMsgQuestObjectiveDef_ETF2Conditions = 14
	CMsgQuestObjectiveDef_TF_COND_STUNNED                          CMsgQuestObjectiveDef_ETF2Conditions = 15
	CMsgQuestObjectiveDef_TF_COND_OFFENSEBUFF                      CMsgQuestObjectiveDef_ETF2Conditions = 16
	CMsgQuestObjectiveDef_TF_COND_SHIELD_CHARGE                    CMsgQuestObjectiveDef_ETF2Conditions = 17
	CMsgQuestObjectiveDef_TF_COND_DEMO_BUFF                        CMsgQuestObjectiveDef_ETF2Conditions = 18
	CMsgQuestObjectiveDef_TF_COND_ENERGY_BUFF                      CMsgQuestObjectiveDef_ETF2Conditions = 19
	CMsgQuestObjectiveDef_TF_COND_RADIUSHEAL                       CMsgQuestObjectiveDef_ETF2Conditions = 20
	CMsgQuestObjectiveDef_TF_COND_HEALTH_BUFF                      CMsgQuestObjectiveDef_ETF2Conditions = 21
	CMsgQuestObjectiveDef_TF_COND_BURNING                          CMsgQuestObjectiveDef_ETF2Conditions = 22
	CMsgQuestObjectiveDef_TF_COND_HEALTH_OVERHEALED                CMsgQuestObjectiveDef_ETF2Conditions = 23
	CMsgQuestObjectiveDef_TF_COND_URINE                            CMsgQuestObjectiveDef_ETF2Conditions = 24
	CMsgQuestObjectiveDef_TF_COND_BLEEDING                         CMsgQuestObjectiveDef_ETF2Conditions = 25
	CMsgQuestObjectiveDef_TF_COND_DEFENSEBUFF                      CMsgQuestObjectiveDef_ETF2Conditions = 26
	CMsgQuestObjectiveDef_TF_COND_MAD_MILK                         CMsgQuestObjectiveDef_ETF2Conditions = 27
	CMsgQuestObjectiveDef_TF_COND_MEGAHEAL                         CMsgQuestObjectiveDef_ETF2Conditions = 28
	CMsgQuestObjectiveDef_TF_COND_REGENONDAMAGEBUFF                CMsgQuestObjectiveDef_ETF2Conditions = 29
	CMsgQuestObjectiveDef_TF_COND_MARKEDFORDEATH                   CMsgQuestObjectiveDef_ETF2Conditions = 30
	CMsgQuestObjectiveDef_TF_COND_NOHEALINGDAMAGEBUFF              CMsgQuestObjectiveDef_ETF2Conditions = 31
	CMsgQuestObjectiveDef_TF_COND_SPEED_BOOST                      CMsgQuestObjectiveDef_ETF2Conditions = 32
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_PUMPKIN              CMsgQuestObjectiveDef_ETF2Conditions = 33
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_USER_BUFF            CMsgQuestObjectiveDef_ETF2Conditions = 34
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_DEMO_CHARGE          CMsgQuestObjectiveDef_ETF2Conditions = 35
	CMsgQuestObjectiveDef_TF_COND_SODAPOPPER_HYPE                  CMsgQuestObjectiveDef_ETF2Conditions = 36
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_FIRST_BLOOD          CMsgQuestObjectiveDef_ETF2Conditions = 37
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_BONUS_TIME           CMsgQuestObjectiveDef_ETF2Conditions = 38
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_CTF_CAPTURE          CMsgQuestObjectiveDef_ETF2Conditions = 39
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_ON_KILL              CMsgQuestObjectiveDef_ETF2Conditions = 40
	CMsgQuestObjectiveDef_TF_COND_CANNOT_SWITCH_FROM_MELEE         CMsgQuestObjectiveDef_ETF2Conditions = 41
	CMsgQuestObjectiveDef_TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK        CMsgQuestObjectiveDef_ETF2Conditions = 42
	CMsgQuestObjectiveDef_TF_COND_REPROGRAMMED                     CMsgQuestObjectiveDef_ETF2Conditions = 43
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_RAGE_BUFF            CMsgQuestObjectiveDef_ETF2Conditions = 44
	CMsgQuestObjectiveDef_TF_COND_DEFENSEBUFF_HIGH                 CMsgQuestObjectiveDef_ETF2Conditions = 45
	CMsgQuestObjectiveDef_TF_COND_SNIPERCHARGE_RAGE_BUFF           CMsgQuestObjectiveDef_ETF2Conditions = 46
	CMsgQuestObjectiveDef_TF_COND_DISGUISE_WEARINGOFF              CMsgQuestObjectiveDef_ETF2Conditions = 47
	CMsgQuestObjectiveDef_TF_COND_MARKEDFORDEATH_SILENT            CMsgQuestObjectiveDef_ETF2Conditions = 48
	CMsgQuestObjectiveDef_TF_COND_DISGUISED_AS_DISPENSER           CMsgQuestObjectiveDef_ETF2Conditions = 49
	CMsgQuestObjectiveDef_TF_COND_SAPPED                           CMsgQuestObjectiveDef_ETF2Conditions = 50
	CMsgQuestObjectiveDef_TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED CMsgQuestObjectiveDef_ETF2Conditions = 51
	CMsgQuestObjectiveDef_TF_COND_INVULNERABLE_USER_BUFF           CMsgQuestObjectiveDef_ETF2Conditions = 52
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_BOMB_HEAD              CMsgQuestObjectiveDef_ETF2Conditions = 53
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_THRILLER               CMsgQuestObjectiveDef_ETF2Conditions = 54
	CMsgQuestObjectiveDef_TF_COND_RADIUSHEAL_ON_DAMAGE             CMsgQuestObjectiveDef_ETF2Conditions = 55
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_CARD_EFFECT          CMsgQuestObjectiveDef_ETF2Conditions = 56
	CMsgQuestObjectiveDef_TF_COND_INVULNERABLE_CARD_EFFECT         CMsgQuestObjectiveDef_ETF2Conditions = 57
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_UBER_BULLET_RESIST       CMsgQuestObjectiveDef_ETF2Conditions = 58
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_UBER_BLAST_RESIST        CMsgQuestObjectiveDef_ETF2Conditions = 59
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_UBER_FIRE_RESIST         CMsgQuestObjectiveDef_ETF2Conditions = 60
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_SMALL_BULLET_RESIST      CMsgQuestObjectiveDef_ETF2Conditions = 61
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_SMALL_BLAST_RESIST       CMsgQuestObjectiveDef_ETF2Conditions = 62
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_SMALL_FIRE_RESIST        CMsgQuestObjectiveDef_ETF2Conditions = 63
	CMsgQuestObjectiveDef_TF_COND_STEALTHED_USER_BUFF              CMsgQuestObjectiveDef_ETF2Conditions = 64
	CMsgQuestObjectiveDef_TF_COND_MEDIGUN_DEBUFF                   CMsgQuestObjectiveDef_ETF2Conditions = 65
	CMsgQuestObjectiveDef_TF_COND_STEALTHED_USER_BUFF_FADING       CMsgQuestObjectiveDef_ETF2Conditions = 66
	CMsgQuestObjectiveDef_TF_COND_BULLET_IMMUNE                    CMsgQuestObjectiveDef_ETF2Conditions = 67
	CMsgQuestObjectiveDef_TF_COND_BLAST_IMMUNE                     CMsgQuestObjectiveDef_ETF2Conditions = 68
	CMsgQuestObjectiveDef_TF_COND_FIRE_IMMUNE                      CMsgQuestObjectiveDef_ETF2Conditions = 69
	CMsgQuestObjectiveDef_TF_COND_PREVENT_DEATH                    CMsgQuestObjectiveDef_ETF2Conditions = 70
	CMsgQuestObjectiveDef_TF_COND_MVM_BOT_STUN_RADIOWAVE           CMsgQuestObjectiveDef_ETF2Conditions = 71
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_SPEED_BOOST            CMsgQuestObjectiveDef_ETF2Conditions = 72
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_QUICK_HEAL             CMsgQuestObjectiveDef_ETF2Conditions = 73
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_GIANT                  CMsgQuestObjectiveDef_ETF2Conditions = 74
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_TINY                   CMsgQuestObjectiveDef_ETF2Conditions = 75
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_IN_HELL                CMsgQuestObjectiveDef_ETF2Conditions = 76
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_GHOST_MODE             CMsgQuestObjectiveDef_ETF2Conditions = 77
	CMsgQuestObjectiveDef_TF_COND_MINICRITBOOSTED_ON_KILL          CMsgQuestObjectiveDef_ETF2Conditions = 78
	CMsgQuestObjectiveDef_TF_COND_OBSCURED_SMOKE                   CMsgQuestObjectiveDef_ETF2Conditions = 79
	CMsgQuestObjectiveDef_TF_COND_PARACHUTE_ACTIVE                 CMsgQuestObjectiveDef_ETF2Conditions = 80
	CMsgQuestObjectiveDef_TF_COND_BLASTJUMPING                     CMsgQuestObjectiveDef_ETF2Conditions = 81
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_KART                   CMsgQuestObjectiveDef_ETF2Conditions = 82
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_KART_DASH              CMsgQuestObjectiveDef_ETF2Conditions = 83
	CMsgQuestObjectiveDef_TF_COND_BALLOON_HEAD                     CMsgQuestObjectiveDef_ETF2Conditions = 84
	CMsgQuestObjectiveDef_TF_COND_MELEE_ONLY                       CMsgQuestObjectiveDef_ETF2Conditions = 85
	CMsgQuestObjectiveDef_TF_COND_SWIMMING_CURSE                   CMsgQuestObjectiveDef_ETF2Conditions = 86
	CMsgQuestObjectiveDef_TF_COND_FREEZE_INPUT                     CMsgQuestObjectiveDef_ETF2Conditions = 87
	CMsgQuestObjectiveDef_TF_COND_HALLOWEEN_KART_CAGE              CMsgQuestObjectiveDef_ETF2Conditions = 88
	CMsgQuestObjectiveDef_TF_COND_DONOTUSE_0                       CMsgQuestObjectiveDef_ETF2Conditions = 89
	CMsgQuestObjectiveDef_TF_COND_RUNE_STRENGTH                    CMsgQuestObjectiveDef_ETF2Conditions = 90
	CMsgQuestObjectiveDef_TF_COND_RUNE_HASTE                       CMsgQuestObjectiveDef_ETF2Conditions = 91
	CMsgQuestObjectiveDef_TF_COND_RUNE_REGEN                       CMsgQuestObjectiveDef_ETF2Conditions = 92
	CMsgQuestObjectiveDef_TF_COND_RUNE_RESIST                      CMsgQuestObjectiveDef_ETF2Conditions = 93
	CMsgQuestObjectiveDef_TF_COND_RUNE_VAMPIRE                     CMsgQuestObjectiveDef_ETF2Conditions = 94
	CMsgQuestObjectiveDef_TF_COND_RUNE_REFLECT                     CMsgQuestObjectiveDef_ETF2Conditions = 95
	CMsgQuestObjectiveDef_TF_COND_RUNE_PRECISION                   CMsgQuestObjectiveDef_ETF2Conditions = 96
	CMsgQuestObjectiveDef_TF_COND_RUNE_AGILITY                     CMsgQuestObjectiveDef_ETF2Conditions = 97
	CMsgQuestObjectiveDef_TF_COND_GRAPPLINGHOOK                    CMsgQuestObjectiveDef_ETF2Conditions = 98
	CMsgQuestObjectiveDef_TF_COND_GRAPPLINGHOOK_SAFEFALL           CMsgQuestObjectiveDef_ETF2Conditions = 99
	CMsgQuestObjectiveDef_TF_COND_GRAPPLINGHOOK_LATCHED            CMsgQuestObjectiveDef_ETF2Conditions = 100
	CMsgQuestObjectiveDef_TF_COND_GRAPPLINGHOOK_BLEEDING           CMsgQuestObjectiveDef_ETF2Conditions = 101
	CMsgQuestObjectiveDef_TF_COND_AFTERBURN_IMMUNE                 CMsgQuestObjectiveDef_ETF2Conditions = 102
	CMsgQuestObjectiveDef_TF_COND_RUNE_KNOCKOUT                    CMsgQuestObjectiveDef_ETF2Conditions = 103
	CMsgQuestObjectiveDef_TF_COND_RUNE_IMBALANCE                   CMsgQuestObjectiveDef_ETF2Conditions = 104
	CMsgQuestObjectiveDef_TF_COND_CRITBOOSTED_RUNE_TEMP            CMsgQuestObjectiveDef_ETF2Conditions = 105
	CMsgQuestObjectiveDef_TF_COND_PASSTIME_INTERCEPTION            CMsgQuestObjectiveDef_ETF2Conditions = 106
	CMsgQuestObjectiveDef_TF_COND_SWIMMING_NO_EFFECTS              CMsgQuestObjectiveDef_ETF2Conditions = 107
	CMsgQuestObjectiveDef_TF_COND_PURGATORY                        CMsgQuestObjectiveDef_ETF2Conditions = 108
	CMsgQuestObjectiveDef_TF_COND_RUNE_KING                        CMsgQuestObjectiveDef_ETF2Conditions = 109
	CMsgQuestObjectiveDef_TF_COND_RUNE_PLAGUE                      CMsgQuestObjectiveDef_ETF2Conditions = 110
	CMsgQuestObjectiveDef_TF_COND_RUNE_SUPERNOVA                   CMsgQuestObjectiveDef_ETF2Conditions = 111
	CMsgQuestObjectiveDef_TF_COND_PLAGUE                           CMsgQuestObjectiveDef_ETF2Conditions = 112
	CMsgQuestObjectiveDef_TF_COND_KING_BUFFED                      CMsgQuestObjectiveDef_ETF2Conditions = 113
	CMsgQuestObjectiveDef_TF_COND_TEAM_GLOWS                       CMsgQuestObjectiveDef_ETF2Conditions = 114
	CMsgQuestObjectiveDef_TF_COND_KNOCKED_INTO_AIR                 CMsgQuestObjectiveDef_ETF2Conditions = 115
	CMsgQuestObjectiveDef_TF_COND_COMPETITIVE_WINNER               CMsgQuestObjectiveDef_ETF2Conditions = 116
	CMsgQuestObjectiveDef_TF_COND_COMPETITIVE_LOSER                CMsgQuestObjectiveDef_ETF2Conditions = 117
	CMsgQuestObjectiveDef_TF_COND_HEALING_DEBUFF                   CMsgQuestObjectiveDef_ETF2Conditions = 118
	CMsgQuestObjectiveDef_TF_COND_PASSTIME_PENALTY_DEBUFF          CMsgQuestObjectiveDef_ETF2Conditions = 119
	CMsgQuestObjectiveDef_TF_COND_PARACHUTE_DEPLOYED               CMsgQuestObjectiveDef_ETF2Conditions = 120
	CMsgQuestObjectiveDef_TF_COND_NO_COMBAT_SPEED_BOOST            CMsgQuestObjectiveDef_ETF2Conditions = 121
	CMsgQuestObjectiveDef_TF_COND_TRANQ_SPY_BOOST                  CMsgQuestObjectiveDef_ETF2Conditions = 122
	CMsgQuestObjectiveDef_TF_COND_TRANQ_MARKED                     CMsgQuestObjectiveDef_ETF2Conditions = 123
	CMsgQuestObjectiveDef_TF_COND_ROCKETPACK                       CMsgQuestObjectiveDef_ETF2Conditions = 126
	CMsgQuestObjectiveDef_TF_COND_ROCKETPACK_PASSENGER             CMsgQuestObjectiveDef_ETF2Conditions = 127
	CMsgQuestObjectiveDef_TF_COND_STEALTHED_PHASE                  CMsgQuestObjectiveDef_ETF2Conditions = 128
	CMsgQuestObjectiveDef_TF_COND_CLIP_OVERLOAD                    CMsgQuestObjectiveDef_ETF2Conditions = 129
	CMsgQuestObjectiveDef_TF_COND_SPY_CLASS_STEAL                  CMsgQuestObjectiveDef_ETF2Conditions = 130
	CMsgQuestObjectiveDef_TF_COND_GAS                              CMsgQuestObjectiveDef_ETF2Conditions = 131
)

// Enum value maps for CMsgQuestObjectiveDef_ETF2Conditions.
var (
	CMsgQuestObjectiveDef_ETF2Conditions_name = map[int32]string{
		0:   "TF_COND_AIMING",
		1:   "TF_COND_ZOOMED",
		2:   "TF_COND_DISGUISING",
		3:   "TF_COND_DISGUISED",
		4:   "TF_COND_STEALTHED",
		5:   "TF_COND_INVULNERABLE",
		6:   "TF_COND_TELEPORTED",
		7:   "TF_COND_TAUNTING",
		8:   "TF_COND_INVULNERABLE_WEARINGOFF",
		9:   "TF_COND_STEALTHED_BLINK",
		10:  "TF_COND_SELECTED_TO_TELEPORT",
		11:  "TF_COND_CRITBOOSTED",
		12:  "TF_COND_TMPDAMAGEBONUS",
		13:  "TF_COND_FEIGN_DEATH",
		14:  "TF_COND_PHASE",
		15:  "TF_COND_STUNNED",
		16:  "TF_COND_OFFENSEBUFF",
		17:  "TF_COND_SHIELD_CHARGE",
		18:  "TF_COND_DEMO_BUFF",
		19:  "TF_COND_ENERGY_BUFF",
		20:  "TF_COND_RADIUSHEAL",
		21:  "TF_COND_HEALTH_BUFF",
		22:  "TF_COND_BURNING",
		23:  "TF_COND_HEALTH_OVERHEALED",
		24:  "TF_COND_URINE",
		25:  "TF_COND_BLEEDING",
		26:  "TF_COND_DEFENSEBUFF",
		27:  "TF_COND_MAD_MILK",
		28:  "TF_COND_MEGAHEAL",
		29:  "TF_COND_REGENONDAMAGEBUFF",
		30:  "TF_COND_MARKEDFORDEATH",
		31:  "TF_COND_NOHEALINGDAMAGEBUFF",
		32:  "TF_COND_SPEED_BOOST",
		33:  "TF_COND_CRITBOOSTED_PUMPKIN",
		34:  "TF_COND_CRITBOOSTED_USER_BUFF",
		35:  "TF_COND_CRITBOOSTED_DEMO_CHARGE",
		36:  "TF_COND_SODAPOPPER_HYPE",
		37:  "TF_COND_CRITBOOSTED_FIRST_BLOOD",
		38:  "TF_COND_CRITBOOSTED_BONUS_TIME",
		39:  "TF_COND_CRITBOOSTED_CTF_CAPTURE",
		40:  "TF_COND_CRITBOOSTED_ON_KILL",
		41:  "TF_COND_CANNOT_SWITCH_FROM_MELEE",
		42:  "TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK",
		43:  "TF_COND_REPROGRAMMED",
		44:  "TF_COND_CRITBOOSTED_RAGE_BUFF",
		45:  "TF_COND_DEFENSEBUFF_HIGH",
		46:  "TF_COND_SNIPERCHARGE_RAGE_BUFF",
		47:  "TF_COND_DISGUISE_WEARINGOFF",
		48:  "TF_COND_MARKEDFORDEATH_SILENT",
		49:  "TF_COND_DISGUISED_AS_DISPENSER",
		50:  "TF_COND_SAPPED",
		51:  "TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED",
		52:  "TF_COND_INVULNERABLE_USER_BUFF",
		53:  "TF_COND_HALLOWEEN_BOMB_HEAD",
		54:  "TF_COND_HALLOWEEN_THRILLER",
		55:  "TF_COND_RADIUSHEAL_ON_DAMAGE",
		56:  "TF_COND_CRITBOOSTED_CARD_EFFECT",
		57:  "TF_COND_INVULNERABLE_CARD_EFFECT",
		58:  "TF_COND_MEDIGUN_UBER_BULLET_RESIST",
		59:  "TF_COND_MEDIGUN_UBER_BLAST_RESIST",
		60:  "TF_COND_MEDIGUN_UBER_FIRE_RESIST",
		61:  "TF_COND_MEDIGUN_SMALL_BULLET_RESIST",
		62:  "TF_COND_MEDIGUN_SMALL_BLAST_RESIST",
		63:  "TF_COND_MEDIGUN_SMALL_FIRE_RESIST",
		64:  "TF_COND_STEALTHED_USER_BUFF",
		65:  "TF_COND_MEDIGUN_DEBUFF",
		66:  "TF_COND_STEALTHED_USER_BUFF_FADING",
		67:  "TF_COND_BULLET_IMMUNE",
		68:  "TF_COND_BLAST_IMMUNE",
		69:  "TF_COND_FIRE_IMMUNE",
		70:  "TF_COND_PREVENT_DEATH",
		71:  "TF_COND_MVM_BOT_STUN_RADIOWAVE",
		72:  "TF_COND_HALLOWEEN_SPEED_BOOST",
		73:  "TF_COND_HALLOWEEN_QUICK_HEAL",
		74:  "TF_COND_HALLOWEEN_GIANT",
		75:  "TF_COND_HALLOWEEN_TINY",
		76:  "TF_COND_HALLOWEEN_IN_HELL",
		77:  "TF_COND_HALLOWEEN_GHOST_MODE",
		78:  "TF_COND_MINICRITBOOSTED_ON_KILL",
		79:  "TF_COND_OBSCURED_SMOKE",
		80:  "TF_COND_PARACHUTE_ACTIVE",
		81:  "TF_COND_BLASTJUMPING",
		82:  "TF_COND_HALLOWEEN_KART",
		83:  "TF_COND_HALLOWEEN_KART_DASH",
		84:  "TF_COND_BALLOON_HEAD",
		85:  "TF_COND_MELEE_ONLY",
		86:  "TF_COND_SWIMMING_CURSE",
		87:  "TF_COND_FREEZE_INPUT",
		88:  "TF_COND_HALLOWEEN_KART_CAGE",
		89:  "TF_COND_DONOTUSE_0",
		90:  "TF_COND_RUNE_STRENGTH",
		91:  "TF_COND_RUNE_HASTE",
		92:  "TF_COND_RUNE_REGEN",
		93:  "TF_COND_RUNE_RESIST",
		94:  "TF_COND_RUNE_VAMPIRE",
		95:  "TF_COND_RUNE_REFLECT",
		96:  "TF_COND_RUNE_PRECISION",
		97:  "TF_COND_RUNE_AGILITY",
		98:  "TF_COND_GRAPPLINGHOOK",
		99:  "TF_COND_GRAPPLINGHOOK_SAFEFALL",
		100: "TF_COND_GRAPPLINGHOOK_LATCHED",
		101: "TF_COND_GRAPPLINGHOOK_BLEEDING",
		102: "TF_COND_AFTERBURN_IMMUNE",
		103: "TF_COND_RUNE_KNOCKOUT",
		104: "TF_COND_RUNE_IMBALANCE",
		105: "TF_COND_CRITBOOSTED_RUNE_TEMP",
		106: "TF_COND_PASSTIME_INTERCEPTION",
		107: "TF_COND_SWIMMING_NO_EFFECTS",
		108: "TF_COND_PURGATORY",
		109: "TF_COND_RUNE_KING",
		110: "TF_COND_RUNE_PLAGUE",
		111: "TF_COND_RUNE_SUPERNOVA",
		112: "TF_COND_PLAGUE",
		113: "TF_COND_KING_BUFFED",
		114: "TF_COND_TEAM_GLOWS",
		115: "TF_COND_KNOCKED_INTO_AIR",
		116: "TF_COND_COMPETITIVE_WINNER",
		117: "TF_COND_COMPETITIVE_LOSER",
		118: "TF_COND_HEALING_DEBUFF",
		119: "TF_COND_PASSTIME_PENALTY_DEBUFF",
		120: "TF_COND_PARACHUTE_DEPLOYED",
		121: "TF_COND_NO_COMBAT_SPEED_BOOST",
		122: "TF_COND_TRANQ_SPY_BOOST",
		123: "TF_COND_TRANQ_MARKED",
		126: "TF_COND_ROCKETPACK",
		127: "TF_COND_ROCKETPACK_PASSENGER",
		128: "TF_COND_STEALTHED_PHASE",
		129: "TF_COND_CLIP_OVERLOAD",
		130: "TF_COND_SPY_CLASS_STEAL",
		131: "TF_COND_GAS",
	}
	CMsgQuestObjectiveDef_ETF2Conditions_value = map[string]int32{
		"TF_COND_AIMING":                           0,
		"TF_COND_ZOOMED":                           1,
		"TF_COND_DISGUISING":                       2,
		"TF_COND_DISGUISED":                        3,
		"TF_COND_STEALTHED":                        4,
		"TF_COND_INVULNERABLE":                     5,
		"TF_COND_TELEPORTED":                       6,
		"TF_COND_TAUNTING":                         7,
		"TF_COND_INVULNERABLE_WEARINGOFF":          8,
		"TF_COND_STEALTHED_BLINK":                  9,
		"TF_COND_SELECTED_TO_TELEPORT":             10,
		"TF_COND_CRITBOOSTED":                      11,
		"TF_COND_TMPDAMAGEBONUS":                   12,
		"TF_COND_FEIGN_DEATH":                      13,
		"TF_COND_PHASE":                            14,
		"TF_COND_STUNNED":                          15,
		"TF_COND_OFFENSEBUFF":                      16,
		"TF_COND_SHIELD_CHARGE":                    17,
		"TF_COND_DEMO_BUFF":                        18,
		"TF_COND_ENERGY_BUFF":                      19,
		"TF_COND_RADIUSHEAL":                       20,
		"TF_COND_HEALTH_BUFF":                      21,
		"TF_COND_BURNING":                          22,
		"TF_COND_HEALTH_OVERHEALED":                23,
		"TF_COND_URINE":                            24,
		"TF_COND_BLEEDING":                         25,
		"TF_COND_DEFENSEBUFF":                      26,
		"TF_COND_MAD_MILK":                         27,
		"TF_COND_MEGAHEAL":                         28,
		"TF_COND_REGENONDAMAGEBUFF":                29,
		"TF_COND_MARKEDFORDEATH":                   30,
		"TF_COND_NOHEALINGDAMAGEBUFF":              31,
		"TF_COND_SPEED_BOOST":                      32,
		"TF_COND_CRITBOOSTED_PUMPKIN":              33,
		"TF_COND_CRITBOOSTED_USER_BUFF":            34,
		"TF_COND_CRITBOOSTED_DEMO_CHARGE":          35,
		"TF_COND_SODAPOPPER_HYPE":                  36,
		"TF_COND_CRITBOOSTED_FIRST_BLOOD":          37,
		"TF_COND_CRITBOOSTED_BONUS_TIME":           38,
		"TF_COND_CRITBOOSTED_CTF_CAPTURE":          39,
		"TF_COND_CRITBOOSTED_ON_KILL":              40,
		"TF_COND_CANNOT_SWITCH_FROM_MELEE":         41,
		"TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK":        42,
		"TF_COND_REPROGRAMMED":                     43,
		"TF_COND_CRITBOOSTED_RAGE_BUFF":            44,
		"TF_COND_DEFENSEBUFF_HIGH":                 45,
		"TF_COND_SNIPERCHARGE_RAGE_BUFF":           46,
		"TF_COND_DISGUISE_WEARINGOFF":              47,
		"TF_COND_MARKEDFORDEATH_SILENT":            48,
		"TF_COND_DISGUISED_AS_DISPENSER":           49,
		"TF_COND_SAPPED":                           50,
		"TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED": 51,
		"TF_COND_INVULNERABLE_USER_BUFF":           52,
		"TF_COND_HALLOWEEN_BOMB_HEAD":              53,
		"TF_COND_HALLOWEEN_THRILLER":               54,
		"TF_COND_RADIUSHEAL_ON_DAMAGE":             55,
		"TF_COND_CRITBOOSTED_CARD_EFFECT":          56,
		"TF_COND_INVULNERABLE_CARD_EFFECT":         57,
		"TF_COND_MEDIGUN_UBER_BULLET_RESIST":       58,
		"TF_COND_MEDIGUN_UBER_BLAST_RESIST":        59,
		"TF_COND_MEDIGUN_UBER_FIRE_RESIST":         60,
		"TF_COND_MEDIGUN_SMALL_BULLET_RESIST":      61,
		"TF_COND_MEDIGUN_SMALL_BLAST_RESIST":       62,
		"TF_COND_MEDIGUN_SMALL_FIRE_RESIST":        63,
		"TF_COND_STEALTHED_USER_BUFF":              64,
		"TF_COND_MEDIGUN_DEBUFF":                   65,
		"TF_COND_STEALTHED_USER_BUFF_FADING":       66,
		"TF_COND_BULLET_IMMUNE":                    67,
		"TF_COND_BLAST_IMMUNE":                     68,
		"TF_COND_FIRE_IMMUNE":                      69,
		"TF_COND_PREVENT_DEATH":                    70,
		"TF_COND_MVM_BOT_STUN_RADIOWAVE":           71,
		"TF_COND_HALLOWEEN_SPEED_BOOST":            72,
		"TF_COND_HALLOWEEN_QUICK_HEAL":             73,
		"TF_COND_HALLOWEEN_GIANT":                  74,
		"TF_COND_HALLOWEEN_TINY":                   75,
		"TF_COND_HALLOWEEN_IN_HELL":                76,
		"TF_COND_HALLOWEEN_GHOST_MODE":             77,
		"TF_COND_MINICRITBOOSTED_ON_KILL":          78,
		"TF_COND_OBSCURED_SMOKE":                   79,
		"TF_COND_PARACHUTE_ACTIVE":                 80,
		"TF_COND_BLASTJUMPING":                     81,
		"TF_COND_HALLOWEEN_KART":                   82,
		"TF_COND_HALLOWEEN_KART_DASH":              83,
		"TF_COND_BALLOON_HEAD":                     84,
		"TF_COND_MELEE_ONLY":                       85,
		"TF_COND_SWIMMING_CURSE":                   86,
		"TF_COND_FREEZE_INPUT":                     87,
		"TF_COND_HALLOWEEN_KART_CAGE":              88,
		"TF_COND_DONOTUSE_0":                       89,
		"TF_COND_RUNE_STRENGTH":                    90,
		"TF_COND_RUNE_HASTE":                       91,
		"TF_COND_RUNE_REGEN":                       92,
		"TF_COND_RUNE_RESIST":                      93,
		"TF_COND_RUNE_VAMPIRE":                     94,
		"TF_COND_RUNE_REFLECT":                     95,
		"TF_COND_RUNE_PRECISION":                   96,
		"TF_COND_RUNE_AGILITY":                     97,
		"TF_COND_GRAPPLINGHOOK":                    98,
		"TF_COND_GRAPPLINGHOOK_SAFEFALL":           99,
		"TF_COND_GRAPPLINGHOOK_LATCHED":            100,
		"TF_COND_GRAPPLINGHOOK_BLEEDING":           101,
		"TF_COND_AFTERBURN_IMMUNE":                 102,
		"TF_COND_RUNE_KNOCKOUT":                    103,
		"TF_COND_RUNE_IMBALANCE":                   104,
		"TF_COND_CRITBOOSTED_RUNE_TEMP":            105,
		"TF_COND_PASSTIME_INTERCEPTION":            106,
		"TF_COND_SWIMMING_NO_EFFECTS":              107,
		"TF_COND_PURGATORY":                        108,
		"TF_COND_RUNE_KING":                        109,
		"TF_COND_RUNE_PLAGUE":                      110,
		"TF_COND_RUNE_SUPERNOVA":                   111,
		"TF_COND_PLAGUE":                           112,
		"TF_COND_KING_BUFFED":                      113,
		"TF_COND_TEAM_GLOWS":                       114,
		"TF_COND_KNOCKED_INTO_AIR":                 115,
		"TF_COND_COMPETITIVE_WINNER":               116,
		"TF_COND_COMPETITIVE_LOSER":                117,
		"TF_COND_HEALING_DEBUFF":                   118,
		"TF_COND_PASSTIME_PENALTY_DEBUFF":          119,
		"TF_COND_PARACHUTE_DEPLOYED":               120,
		"TF_COND_NO_COMBAT_SPEED_BOOST":            121,
		"TF_COND_TRANQ_SPY_BOOST":                  122,
		"TF_COND_TRANQ_MARKED":                     123,
		"TF_COND_ROCKETPACK":                       126,
		"TF_COND_ROCKETPACK_PASSENGER":             127,
		"TF_COND_STEALTHED_PHASE":                  128,
		"TF_COND_CLIP_OVERLOAD":                    129,
		"TF_COND_SPY_CLASS_STEAL":                  130,
		"TF_COND_GAS":                              131,
	}
)

func (x CMsgQuestObjectiveDef_ETF2Conditions) Enum() *CMsgQuestObjectiveDef_ETF2Conditions {
	p := new(CMsgQuestObjectiveDef_ETF2Conditions)
	*p = x
	return p
}

func (x CMsgQuestObjectiveDef_ETF2Conditions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgQuestObjectiveDef_ETF2Conditions) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[7].Descriptor()
}

func (CMsgQuestObjectiveDef_ETF2Conditions) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[7]
}

func (x CMsgQuestObjectiveDef_ETF2Conditions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgQuestObjectiveDef_ETF2Conditions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgQuestObjectiveDef_ETF2Conditions(num)
	return nil
}

// Deprecated: Use CMsgQuestObjectiveDef_ETF2Conditions.Descriptor instead.
func (CMsgQuestObjectiveDef_ETF2Conditions) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{6, 1}
}

type CMsgQuestObjectiveDef_ETF2Team int32

const (
	CMsgQuestObjectiveDef_TF_TEAM_RED  CMsgQuestObjectiveDef_ETF2Team = 2
	CMsgQuestObjectiveDef_TF_TEAM_BLUE CMsgQuestObjectiveDef_ETF2Team = 3
)

// Enum value maps for CMsgQuestObjectiveDef_ETF2Team.
var (
	CMsgQuestObjectiveDef_ETF2Team_name = map[int32]string{
		2: "TF_TEAM_RED",
		3: "TF_TEAM_BLUE",
	}
	CMsgQuestObjectiveDef_ETF2Team_value = map[string]int32{
		"TF_TEAM_RED":  2,
		"TF_TEAM_BLUE": 3,
	}
)

func (x CMsgQuestObjectiveDef_ETF2Team) Enum() *CMsgQuestObjectiveDef_ETF2Team {
	p := new(CMsgQuestObjectiveDef_ETF2Team)
	*p = x
	return p
}

func (x CMsgQuestObjectiveDef_ETF2Team) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgQuestObjectiveDef_ETF2Team) Descriptor() protoreflect.EnumDescriptor {
	return file_tf_proto_def_messages_proto_enumTypes[8].Descriptor()
}

func (CMsgQuestObjectiveDef_ETF2Team) Type() protoreflect.EnumType {
	return &file_tf_proto_def_messages_proto_enumTypes[8]
}

func (x CMsgQuestObjectiveDef_ETF2Team) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgQuestObjectiveDef_ETF2Team) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgQuestObjectiveDef_ETF2Team(num)
	return nil
}

// Deprecated: Use CMsgQuestObjectiveDef_ETF2Team.Descriptor instead.
func (CMsgQuestObjectiveDef_ETF2Team) EnumDescriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{6, 2}
}

type CMsgFieldID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []*CMsgFieldID_CMsgField `protobuf:"bytes,1,rep,name=field" json:"field,omitempty"`
}

func (x *CMsgFieldID) Reset() {
	*x = CMsgFieldID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFieldID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFieldID) ProtoMessage() {}

func (x *CMsgFieldID) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFieldID.ProtoReflect.Descriptor instead.
func (*CMsgFieldID) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgFieldID) GetField() []*CMsgFieldID_CMsgField {
	if x != nil {
		return x.Field
	}
	return nil
}

type CMsgUniversalFieldID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType    *EValueDefinitionSource `protobuf:"varint,1,opt,name=source_type,json=sourceType,enum=EValueDefinitionSource,def=0" json:"source_type,omitempty"`
	DefiningObjId *CMsgProtoDefID         `protobuf:"bytes,2,opt,name=defining_obj_id,json=definingObjId" json:"defining_obj_id,omitempty"`
	FieldId       *CMsgFieldID            `protobuf:"bytes,3,opt,name=field_id,json=fieldId" json:"field_id,omitempty"`
}

// Default values for CMsgUniversalFieldID fields.
const (
	Default_CMsgUniversalFieldID_SourceType = EValueDefinitionSource_REFERENCE_DEFINES
)

func (x *CMsgUniversalFieldID) Reset() {
	*x = CMsgUniversalFieldID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUniversalFieldID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUniversalFieldID) ProtoMessage() {}

func (x *CMsgUniversalFieldID) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUniversalFieldID.ProtoReflect.Descriptor instead.
func (*CMsgUniversalFieldID) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgUniversalFieldID) GetSourceType() EValueDefinitionSource {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return Default_CMsgUniversalFieldID_SourceType
}

func (x *CMsgUniversalFieldID) GetDefiningObjId() *CMsgProtoDefID {
	if x != nil {
		return x.DefiningObjId
	}
	return nil
}

func (x *CMsgUniversalFieldID) GetFieldId() *CMsgFieldID {
	if x != nil {
		return x.FieldId
	}
	return nil
}

type CMsgVariableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Inherit *bool   `protobuf:"varint,2,opt,name=inherit,def=1" json:"inherit,omitempty"`
	Value   *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

// Default values for CMsgVariableDefinition fields.
const (
	Default_CMsgVariableDefinition_Inherit = bool(true)
)

func (x *CMsgVariableDefinition) Reset() {
	*x = CMsgVariableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVariableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVariableDefinition) ProtoMessage() {}

func (x *CMsgVariableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVariableDefinition.ProtoReflect.Descriptor instead.
func (*CMsgVariableDefinition) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgVariableDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgVariableDefinition) GetInherit() bool {
	if x != nil && x.Inherit != nil {
		return *x.Inherit
	}
	return Default_CMsgVariableDefinition_Inherit
}

func (x *CMsgVariableDefinition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgProtoDefHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defindex   *uint32                   `protobuf:"varint,1,req,name=defindex" json:"defindex,omitempty"`
	Name       *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Prefabs    []*CMsgProtoDefID         `protobuf:"bytes,3,rep,name=prefabs" json:"prefabs,omitempty"`
	Tags       []string                  `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	PrefabOnly *bool                     `protobuf:"varint,5,opt,name=prefab_only,json=prefabOnly,def=0" json:"prefab_only,omitempty"`
	Variables  []*CMsgVariableDefinition `protobuf:"bytes,6,rep,name=variables" json:"variables,omitempty"`
}

// Default values for CMsgProtoDefHeader fields.
const (
	Default_CMsgProtoDefHeader_PrefabOnly = bool(false)
)

func (x *CMsgProtoDefHeader) Reset() {
	*x = CMsgProtoDefHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtoDefHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtoDefHeader) ProtoMessage() {}

func (x *CMsgProtoDefHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtoDefHeader.ProtoReflect.Descriptor instead.
func (*CMsgProtoDefHeader) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgProtoDefHeader) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgProtoDefHeader) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgProtoDefHeader) GetPrefabs() []*CMsgProtoDefID {
	if x != nil {
		return x.Prefabs
	}
	return nil
}

func (x *CMsgProtoDefHeader) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CMsgProtoDefHeader) GetPrefabOnly() bool {
	if x != nil && x.PrefabOnly != nil {
		return *x.PrefabOnly
	}
	return Default_CMsgProtoDefHeader_PrefabOnly
}

func (x *CMsgProtoDefHeader) GetVariables() []*CMsgVariableDefinition {
	if x != nil {
		return x.Variables
	}
	return nil
}

type CMsgValidTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []ProtoDefTypes `protobuf:"varint,1,rep,name=types,enum=ProtoDefTypes" json:"types,omitempty"`
}

func (x *CMsgValidTypes) Reset() {
	*x = CMsgValidTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgValidTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgValidTypes) ProtoMessage() {}

func (x *CMsgValidTypes) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgValidTypes.ProtoReflect.Descriptor instead.
func (*CMsgValidTypes) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgValidTypes) GetTypes() []ProtoDefTypes {
	if x != nil {
		return x.Types
	}
	return nil
}

type CMsgProtoDefID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defindex *uint32        `protobuf:"varint,1,opt,name=defindex" json:"defindex,omitempty"`
	Type     *ProtoDefTypes `protobuf:"varint,2,opt,name=type,enum=ProtoDefTypes,def=0" json:"type,omitempty"`
	// Types that are assignable to Instance:
	//
	//	*CMsgProtoDefID_InstanceDefTypeQuestMapNode
	//	*CMsgProtoDefID_InstanceDefTypeQuestTheme
	//	*CMsgProtoDefID_InstanceDefTypeQuestMapRegion
	//	*CMsgProtoDefID_InstanceDefTypeQuest
	//	*CMsgProtoDefID_InstanceDefTypeQuestObjective
	//	*CMsgProtoDefID_InstanceDefTypePaintkitVariables
	//	*CMsgProtoDefID_InstanceDefTypePaintkitOperation
	//	*CMsgProtoDefID_InstanceDefTypePaintkitItemDefinition
	//	*CMsgProtoDefID_InstanceDefTypePaintkitDefinition
	//	*CMsgProtoDefID_InstanceDefTypeHeaderOnly
	Instance isCMsgProtoDefID_Instance `protobuf_oneof:"instance"`
}

// Default values for CMsgProtoDefID fields.
const (
	Default_CMsgProtoDefID_Type = ProtoDefTypes_DEF_TYPE_QUEST_MAP_NODE
)

func (x *CMsgProtoDefID) Reset() {
	*x = CMsgProtoDefID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtoDefID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtoDefID) ProtoMessage() {}

func (x *CMsgProtoDefID) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtoDefID.ProtoReflect.Descriptor instead.
func (*CMsgProtoDefID) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgProtoDefID) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgProtoDefID) GetType() ProtoDefTypes {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgProtoDefID_Type
}

func (m *CMsgProtoDefID) GetInstance() isCMsgProtoDefID_Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypeQuestMapNode() *CMsgQuestMapNodeDef {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypeQuestMapNode); ok {
		return x.InstanceDefTypeQuestMapNode
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypeQuestTheme() *CMsgQuestTheme {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypeQuestTheme); ok {
		return x.InstanceDefTypeQuestTheme
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypeQuestMapRegion() *CMsgQuestMapRegionDef {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypeQuestMapRegion); ok {
		return x.InstanceDefTypeQuestMapRegion
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypeQuest() *CMsgQuestDef {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypeQuest); ok {
		return x.InstanceDefTypeQuest
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypeQuestObjective() *CMsgQuestObjectiveDef {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypeQuestObjective); ok {
		return x.InstanceDefTypeQuestObjective
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypePaintkitVariables() *CMsgPaintKit_Variables {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypePaintkitVariables); ok {
		return x.InstanceDefTypePaintkitVariables
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypePaintkitOperation() *CMsgPaintKit_Operation {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypePaintkitOperation); ok {
		return x.InstanceDefTypePaintkitOperation
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypePaintkitItemDefinition() *CMsgPaintKit_ItemDefinition {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypePaintkitItemDefinition); ok {
		return x.InstanceDefTypePaintkitItemDefinition
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypePaintkitDefinition() *CMsgPaintKit_Definition {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypePaintkitDefinition); ok {
		return x.InstanceDefTypePaintkitDefinition
	}
	return nil
}

func (x *CMsgProtoDefID) GetInstanceDefTypeHeaderOnly() *CMsgHeaderOnly {
	if x, ok := x.GetInstance().(*CMsgProtoDefID_InstanceDefTypeHeaderOnly); ok {
		return x.InstanceDefTypeHeaderOnly
	}
	return nil
}

type isCMsgProtoDefID_Instance interface {
	isCMsgProtoDefID_Instance()
}

type CMsgProtoDefID_InstanceDefTypeQuestMapNode struct {
	InstanceDefTypeQuestMapNode *CMsgQuestMapNodeDef `protobuf:"bytes,3,opt,name=instance_def_type_quest_map_node,json=instanceDefTypeQuestMapNode,oneof"`
}

type CMsgProtoDefID_InstanceDefTypeQuestTheme struct {
	InstanceDefTypeQuestTheme *CMsgQuestTheme `protobuf:"bytes,5,opt,name=instance_def_type_quest_theme,json=instanceDefTypeQuestTheme,oneof"`
}

type CMsgProtoDefID_InstanceDefTypeQuestMapRegion struct {
	InstanceDefTypeQuestMapRegion *CMsgQuestMapRegionDef `protobuf:"bytes,6,opt,name=instance_def_type_quest_map_region,json=instanceDefTypeQuestMapRegion,oneof"`
}

type CMsgProtoDefID_InstanceDefTypeQuest struct {
	InstanceDefTypeQuest *CMsgQuestDef `protobuf:"bytes,7,opt,name=instance_def_type_quest,json=instanceDefTypeQuest,oneof"`
}

type CMsgProtoDefID_InstanceDefTypeQuestObjective struct {
	InstanceDefTypeQuestObjective *CMsgQuestObjectiveDef `protobuf:"bytes,8,opt,name=instance_def_type_quest_objective,json=instanceDefTypeQuestObjective,oneof"`
}

type CMsgProtoDefID_InstanceDefTypePaintkitVariables struct {
	InstanceDefTypePaintkitVariables *CMsgPaintKit_Variables `protobuf:"bytes,9,opt,name=instance_def_type_paintkit_variables,json=instanceDefTypePaintkitVariables,oneof"`
}

type CMsgProtoDefID_InstanceDefTypePaintkitOperation struct {
	InstanceDefTypePaintkitOperation *CMsgPaintKit_Operation `protobuf:"bytes,10,opt,name=instance_def_type_paintkit_operation,json=instanceDefTypePaintkitOperation,oneof"`
}

type CMsgProtoDefID_InstanceDefTypePaintkitItemDefinition struct {
	InstanceDefTypePaintkitItemDefinition *CMsgPaintKit_ItemDefinition `protobuf:"bytes,11,opt,name=instance_def_type_paintkit_item_definition,json=instanceDefTypePaintkitItemDefinition,oneof"`
}

type CMsgProtoDefID_InstanceDefTypePaintkitDefinition struct {
	InstanceDefTypePaintkitDefinition *CMsgPaintKit_Definition `protobuf:"bytes,12,opt,name=instance_def_type_paintkit_definition,json=instanceDefTypePaintkitDefinition,oneof"`
}

type CMsgProtoDefID_InstanceDefTypeHeaderOnly struct {
	InstanceDefTypeHeaderOnly *CMsgHeaderOnly `protobuf:"bytes,13,opt,name=instance_def_type_header_only,json=instanceDefTypeHeaderOnly,oneof"`
}

func (*CMsgProtoDefID_InstanceDefTypeQuestMapNode) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypeQuestTheme) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypeQuestMapRegion) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypeQuest) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypeQuestObjective) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypePaintkitVariables) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypePaintkitOperation) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypePaintkitItemDefinition) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypePaintkitDefinition) isCMsgProtoDefID_Instance() {}

func (*CMsgProtoDefID_InstanceDefTypeHeaderOnly) isCMsgProtoDefID_Instance() {}

type CMsgQuestObjectiveDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *CMsgProtoDefHeader                    `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	LocDesctoken       *string                                `protobuf:"bytes,2,opt,name=loc_desctoken,json=locDesctoken" json:"loc_desctoken,omitempty"`
	Points             *uint32                                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	ConditionsDefindex *uint32                                `protobuf:"varint,5,opt,name=conditions_defindex,json=conditionsDefindex" json:"conditions_defindex,omitempty"`
	Map                []string                               `protobuf:"bytes,8,rep,name=map" json:"map,omitempty"`
	GameMode           []CMsgQuestObjectiveDef_ETF2GameModes  `protobuf:"varint,9,rep,name=game_mode,json=gameMode,enum=CMsgQuestObjectiveDef_ETF2GameModes" json:"game_mode,omitempty"`
	Team               *CMsgQuestObjectiveDef_ETF2Team        `protobuf:"varint,10,opt,name=team,enum=CMsgQuestObjectiveDef_ETF2Team,def=2" json:"team,omitempty"`
	ConditionVars      []*CMsgVarField                        `protobuf:"bytes,11,rep,name=condition_vars,json=conditionVars" json:"condition_vars,omitempty"`
	ClassesVars        []*CMsgVarField                        `protobuf:"bytes,12,rep,name=classes_vars,json=classesVars" json:"classes_vars,omitempty"`
	Conditions         []CMsgQuestObjectiveDef_ETF2Conditions `protobuf:"varint,13,rep,name=conditions,enum=CMsgQuestObjectiveDef_ETF2Conditions" json:"conditions,omitempty"`
	ConditionLogic     *LogicalOperation                      `protobuf:"varint,14,opt,name=condition_logic,json=conditionLogic,enum=LogicalOperation,def=0" json:"condition_logic,omitempty"`
	ItemName           []string                               `protobuf:"bytes,15,rep,name=item_name,json=itemName" json:"item_name,omitempty"`
	ItemLogic          *LogicalOperation                      `protobuf:"varint,16,opt,name=item_logic,json=itemLogic,enum=LogicalOperation,def=0" json:"item_logic,omitempty"`
	JumpState          *uint32                                `protobuf:"varint,17,opt,name=jump_state,json=jumpState" json:"jump_state,omitempty"`
}

// Default values for CMsgQuestObjectiveDef fields.
const (
	Default_CMsgQuestObjectiveDef_Team           = CMsgQuestObjectiveDef_TF_TEAM_RED
	Default_CMsgQuestObjectiveDef_ConditionLogic = LogicalOperation_AND
	Default_CMsgQuestObjectiveDef_ItemLogic      = LogicalOperation_AND
)

func (x *CMsgQuestObjectiveDef) Reset() {
	*x = CMsgQuestObjectiveDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestObjectiveDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestObjectiveDef) ProtoMessage() {}

func (x *CMsgQuestObjectiveDef) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestObjectiveDef.ProtoReflect.Descriptor instead.
func (*CMsgQuestObjectiveDef) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgQuestObjectiveDef) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetLocDesctoken() string {
	if x != nil && x.LocDesctoken != nil {
		return *x.LocDesctoken
	}
	return ""
}

func (x *CMsgQuestObjectiveDef) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgQuestObjectiveDef) GetConditionsDefindex() uint32 {
	if x != nil && x.ConditionsDefindex != nil {
		return *x.ConditionsDefindex
	}
	return 0
}

func (x *CMsgQuestObjectiveDef) GetMap() []string {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetGameMode() []CMsgQuestObjectiveDef_ETF2GameModes {
	if x != nil {
		return x.GameMode
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetTeam() CMsgQuestObjectiveDef_ETF2Team {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CMsgQuestObjectiveDef_Team
}

func (x *CMsgQuestObjectiveDef) GetConditionVars() []*CMsgVarField {
	if x != nil {
		return x.ConditionVars
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetClassesVars() []*CMsgVarField {
	if x != nil {
		return x.ClassesVars
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetConditions() []CMsgQuestObjectiveDef_ETF2Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetConditionLogic() LogicalOperation {
	if x != nil && x.ConditionLogic != nil {
		return *x.ConditionLogic
	}
	return Default_CMsgQuestObjectiveDef_ConditionLogic
}

func (x *CMsgQuestObjectiveDef) GetItemName() []string {
	if x != nil {
		return x.ItemName
	}
	return nil
}

func (x *CMsgQuestObjectiveDef) GetItemLogic() LogicalOperation {
	if x != nil && x.ItemLogic != nil {
		return *x.ItemLogic
	}
	return Default_CMsgQuestObjectiveDef_ItemLogic
}

func (x *CMsgQuestObjectiveDef) GetJumpState() uint32 {
	if x != nil && x.JumpState != nil {
		return *x.JumpState
	}
	return 0
}

type CMsgQuestDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *CMsgProtoDefHeader               `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	MaxPoints_0  *uint32                           `protobuf:"varint,2,opt,name=max_points_0,json=maxPoints0" json:"max_points_0,omitempty"`
	MaxPoints_1  *uint32                           `protobuf:"varint,3,opt,name=max_points_1,json=maxPoints1" json:"max_points_1,omitempty"`
	MaxPoints_2  *uint32                           `protobuf:"varint,4,opt,name=max_points_2,json=maxPoints2" json:"max_points_2,omitempty"`
	NameLoctoken *string                           `protobuf:"bytes,5,opt,name=name_loctoken,json=nameLoctoken" json:"name_loctoken,omitempty"`
	Operation    *string                           `protobuf:"bytes,7,opt,name=operation" json:"operation,omitempty"`
	MmCriteria   *CMsgQuestDef_MMCriteria          `protobuf:"bytes,8,opt,name=mm_criteria,json=mmCriteria" json:"mm_criteria,omitempty"`
	NodeImage    *string                           `protobuf:"bytes,12,opt,name=node_image,json=nodeImage" json:"node_image,omitempty"`
	IconImage    *string                           `protobuf:"bytes,13,opt,name=icon_image,json=iconImage" json:"icon_image,omitempty"`
	Theme        *CMsgProtoDefID                   `protobuf:"bytes,14,opt,name=theme" json:"theme,omitempty"`
	LoanerNames  []string                          `protobuf:"bytes,15,rep,name=loaner_names,json=loanerNames" json:"loaner_names,omitempty"`
	Objectives   []*CMsgQuestDef_ObjectiveInstance `protobuf:"bytes,16,rep,name=objectives" json:"objectives,omitempty"`
	Map          []string                          `protobuf:"bytes,17,rep,name=map" json:"map,omitempty"`
}

func (x *CMsgQuestDef) Reset() {
	*x = CMsgQuestDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestDef) ProtoMessage() {}

func (x *CMsgQuestDef) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestDef.ProtoReflect.Descriptor instead.
func (*CMsgQuestDef) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgQuestDef) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestDef) GetMaxPoints_0() uint32 {
	if x != nil && x.MaxPoints_0 != nil {
		return *x.MaxPoints_0
	}
	return 0
}

func (x *CMsgQuestDef) GetMaxPoints_1() uint32 {
	if x != nil && x.MaxPoints_1 != nil {
		return *x.MaxPoints_1
	}
	return 0
}

func (x *CMsgQuestDef) GetMaxPoints_2() uint32 {
	if x != nil && x.MaxPoints_2 != nil {
		return *x.MaxPoints_2
	}
	return 0
}

func (x *CMsgQuestDef) GetNameLoctoken() string {
	if x != nil && x.NameLoctoken != nil {
		return *x.NameLoctoken
	}
	return ""
}

func (x *CMsgQuestDef) GetOperation() string {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ""
}

func (x *CMsgQuestDef) GetMmCriteria() *CMsgQuestDef_MMCriteria {
	if x != nil {
		return x.MmCriteria
	}
	return nil
}

func (x *CMsgQuestDef) GetNodeImage() string {
	if x != nil && x.NodeImage != nil {
		return *x.NodeImage
	}
	return ""
}

func (x *CMsgQuestDef) GetIconImage() string {
	if x != nil && x.IconImage != nil {
		return *x.IconImage
	}
	return ""
}

func (x *CMsgQuestDef) GetTheme() *CMsgProtoDefID {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *CMsgQuestDef) GetLoanerNames() []string {
	if x != nil {
		return x.LoanerNames
	}
	return nil
}

func (x *CMsgQuestDef) GetObjectives() []*CMsgQuestDef_ObjectiveInstance {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *CMsgQuestDef) GetMap() []string {
	if x != nil {
		return x.Map
	}
	return nil
}

type CMsgQuestMapStoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *CMsgProtoDefHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	ItemName           *string             `protobuf:"bytes,2,opt,name=item_name,json=itemName" json:"item_name,omitempty"`
	RewardLootlistName *string             `protobuf:"bytes,6,opt,name=reward_lootlist_name,json=rewardLootlistName" json:"reward_lootlist_name,omitempty"`
	Price              *CMsgVarField       `protobuf:"bytes,3,opt,name=price" json:"price,omitempty"`
	PurchaseLimit      *uint32             `protobuf:"varint,4,opt,name=purchase_limit,json=purchaseLimit" json:"purchase_limit,omitempty"`
	SortGroup          *uint32             `protobuf:"varint,5,opt,name=sort_group,json=sortGroup" json:"sort_group,omitempty"`
}

func (x *CMsgQuestMapStoreItem) Reset() {
	*x = CMsgQuestMapStoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapStoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapStoreItem) ProtoMessage() {}

func (x *CMsgQuestMapStoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapStoreItem.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapStoreItem) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgQuestMapStoreItem) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestMapStoreItem) GetItemName() string {
	if x != nil && x.ItemName != nil {
		return *x.ItemName
	}
	return ""
}

func (x *CMsgQuestMapStoreItem) GetRewardLootlistName() string {
	if x != nil && x.RewardLootlistName != nil {
		return *x.RewardLootlistName
	}
	return ""
}

func (x *CMsgQuestMapStoreItem) GetPrice() *CMsgVarField {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *CMsgQuestMapStoreItem) GetPurchaseLimit() uint32 {
	if x != nil && x.PurchaseLimit != nil {
		return *x.PurchaseLimit
	}
	return 0
}

func (x *CMsgQuestMapStoreItem) GetSortGroup() uint32 {
	if x != nil && x.SortGroup != nil {
		return *x.SortGroup
	}
	return 0
}

type CMsgQuestMapRegionDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *CMsgProtoDefHeader                 `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Name       *string                             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Resfile    *string                             `protobuf:"bytes,3,opt,name=resfile" json:"resfile,omitempty"`
	Links      []*CMsgQuestMapRegionDef_RegionLink `protobuf:"bytes,4,rep,name=links" json:"links,omitempty"`
	ReturnLink *CMsgProtoDefID                     `protobuf:"bytes,5,opt,name=return_link,json=returnLink" json:"return_link,omitempty"`
	RadioFreq  *float32                            `protobuf:"fixed32,6,opt,name=radio_freq,json=radioFreq" json:"radio_freq,omitempty"`
	ZoomScale  *float32                            `protobuf:"fixed32,7,opt,name=zoom_scale,json=zoomScale" json:"zoom_scale,omitempty"`
	StarType   *CMsgProtoDefID                     `protobuf:"bytes,8,opt,name=star_type,json=starType" json:"star_type,omitempty"`
}

func (x *CMsgQuestMapRegionDef) Reset() {
	*x = CMsgQuestMapRegionDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapRegionDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapRegionDef) ProtoMessage() {}

func (x *CMsgQuestMapRegionDef) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapRegionDef.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapRegionDef) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgQuestMapRegionDef) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestMapRegionDef) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgQuestMapRegionDef) GetResfile() string {
	if x != nil && x.Resfile != nil {
		return *x.Resfile
	}
	return ""
}

func (x *CMsgQuestMapRegionDef) GetLinks() []*CMsgQuestMapRegionDef_RegionLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *CMsgQuestMapRegionDef) GetReturnLink() *CMsgProtoDefID {
	if x != nil {
		return x.ReturnLink
	}
	return nil
}

func (x *CMsgQuestMapRegionDef) GetRadioFreq() float32 {
	if x != nil && x.RadioFreq != nil {
		return *x.RadioFreq
	}
	return 0
}

func (x *CMsgQuestMapRegionDef) GetZoomScale() float32 {
	if x != nil && x.ZoomScale != nil {
		return *x.ZoomScale
	}
	return 0
}

func (x *CMsgQuestMapRegionDef) GetStarType() *CMsgProtoDefID {
	if x != nil {
		return x.StarType
	}
	return nil
}

type CMsgVarField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable *string `protobuf:"bytes,1,opt,name=variable" json:"variable,omitempty"`
	// Types that are assignable to Value:
	//
	//	*CMsgVarField_Float
	//	*CMsgVarField_Double
	//	*CMsgVarField_Uint32
	//	*CMsgVarField_Uint64
	//	*CMsgVarField_Sint32
	//	*CMsgVarField_Sint64
	//	*CMsgVarField_Bool
	//	*CMsgVarField_String_
	Value isCMsgVarField_Value `protobuf_oneof:"value"`
}

func (x *CMsgVarField) Reset() {
	*x = CMsgVarField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVarField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVarField) ProtoMessage() {}

func (x *CMsgVarField) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVarField.ProtoReflect.Descriptor instead.
func (*CMsgVarField) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgVarField) GetVariable() string {
	if x != nil && x.Variable != nil {
		return *x.Variable
	}
	return ""
}

func (m *CMsgVarField) GetValue() isCMsgVarField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CMsgVarField) GetFloat() float32 {
	if x, ok := x.GetValue().(*CMsgVarField_Float); ok {
		return x.Float
	}
	return 0
}

func (x *CMsgVarField) GetDouble() float64 {
	if x, ok := x.GetValue().(*CMsgVarField_Double); ok {
		return x.Double
	}
	return 0
}

func (x *CMsgVarField) GetUint32() uint32 {
	if x, ok := x.GetValue().(*CMsgVarField_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *CMsgVarField) GetUint64() uint64 {
	if x, ok := x.GetValue().(*CMsgVarField_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *CMsgVarField) GetSint32() int32 {
	if x, ok := x.GetValue().(*CMsgVarField_Sint32); ok {
		return x.Sint32
	}
	return 0
}

func (x *CMsgVarField) GetSint64() int64 {
	if x, ok := x.GetValue().(*CMsgVarField_Sint64); ok {
		return x.Sint64
	}
	return 0
}

func (x *CMsgVarField) GetBool() bool {
	if x, ok := x.GetValue().(*CMsgVarField_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *CMsgVarField) GetString_() string {
	if x, ok := x.GetValue().(*CMsgVarField_String_); ok {
		return x.String_
	}
	return ""
}

type isCMsgVarField_Value interface {
	isCMsgVarField_Value()
}

type CMsgVarField_Float struct {
	Float float32 `protobuf:"fixed32,2,opt,name=float,oneof"`
}

type CMsgVarField_Double struct {
	Double float64 `protobuf:"fixed64,3,opt,name=double,oneof"`
}

type CMsgVarField_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,4,opt,name=uint32,oneof"`
}

type CMsgVarField_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,5,opt,name=uint64,oneof"`
}

type CMsgVarField_Sint32 struct {
	Sint32 int32 `protobuf:"zigzag32,6,opt,name=sint32,oneof"`
}

type CMsgVarField_Sint64 struct {
	Sint64 int64 `protobuf:"zigzag64,7,opt,name=sint64,oneof"`
}

type CMsgVarField_Bool struct {
	Bool bool `protobuf:"varint,8,opt,name=bool,oneof"`
}

type CMsgVarField_String_ struct {
	String_ string `protobuf:"bytes,9,opt,name=string,oneof"`
}

func (*CMsgVarField_Float) isCMsgVarField_Value() {}

func (*CMsgVarField_Double) isCMsgVarField_Value() {}

func (*CMsgVarField_Uint32) isCMsgVarField_Value() {}

func (*CMsgVarField_Uint64) isCMsgVarField_Value() {}

func (*CMsgVarField_Sint32) isCMsgVarField_Value() {}

func (*CMsgVarField_Sint64) isCMsgVarField_Value() {}

func (*CMsgVarField_Bool) isCMsgVarField_Value() {}

func (*CMsgVarField_String_) isCMsgVarField_Value() {}

type CMsgQuestMapStarType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *CMsgProtoDefHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Name   *string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgQuestMapStarType) Reset() {
	*x = CMsgQuestMapStarType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapStarType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapStarType) ProtoMessage() {}

func (x *CMsgQuestMapStarType) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapStarType.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapStarType) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgQuestMapStarType) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestMapStarType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgQuestMapNodeDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *CMsgProtoDefHeader        `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	NameLoctoken        *string                    `protobuf:"bytes,4,opt,name=name_loctoken,json=nameLoctoken" json:"name_loctoken,omitempty"`
	XPos                *float32                   `protobuf:"fixed32,6,opt,name=x_pos,json=xPos" json:"x_pos,omitempty"`
	YPos                *float32                   `protobuf:"fixed32,7,opt,name=y_pos,json=yPos" json:"y_pos,omitempty"`
	Condition           *CMsgQuestMapNodeCondition `protobuf:"bytes,9,opt,name=condition" json:"condition,omitempty"`
	OwningRegion        *CMsgProtoDefID            `protobuf:"bytes,10,opt,name=owning_region,json=owningRegion" json:"owning_region,omitempty"`
	QuestOptions        []*CMsgProtoDefID          `protobuf:"bytes,11,rep,name=quest_options,json=questOptions" json:"quest_options,omitempty"`
	AssociatedOperation *string                    `protobuf:"bytes,16,opt,name=associated_operation,json=associatedOperation" json:"associated_operation,omitempty"`
	RewardItemName      *string                    `protobuf:"bytes,18,opt,name=reward_item_name,json=rewardItemName" json:"reward_item_name,omitempty"`
	RewardLootlistName  *string                    `protobuf:"bytes,22,opt,name=reward_lootlist_name,json=rewardLootlistName" json:"reward_lootlist_name,omitempty"`
	CashReward          *ENodeCashReward           `protobuf:"varint,19,opt,name=cash_reward,json=cashReward,enum=ENodeCashReward,def=1" json:"cash_reward,omitempty"`
	StarType            *CMsgProtoDefID            `protobuf:"bytes,20,opt,name=star_type,json=starType" json:"star_type,omitempty"`
	StarsToUnlock       *uint32                    `protobuf:"varint,21,opt,name=stars_to_unlock,json=starsToUnlock,def=1" json:"stars_to_unlock,omitempty"`
}

// Default values for CMsgQuestMapNodeDef fields.
const (
	Default_CMsgQuestMapNodeDef_CashReward    = ENodeCashReward_CASH_REWARD_NONE
	Default_CMsgQuestMapNodeDef_StarsToUnlock = uint32(1)
)

func (x *CMsgQuestMapNodeDef) Reset() {
	*x = CMsgQuestMapNodeDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapNodeDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapNodeDef) ProtoMessage() {}

func (x *CMsgQuestMapNodeDef) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapNodeDef.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapNodeDef) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgQuestMapNodeDef) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestMapNodeDef) GetNameLoctoken() string {
	if x != nil && x.NameLoctoken != nil {
		return *x.NameLoctoken
	}
	return ""
}

func (x *CMsgQuestMapNodeDef) GetXPos() float32 {
	if x != nil && x.XPos != nil {
		return *x.XPos
	}
	return 0
}

func (x *CMsgQuestMapNodeDef) GetYPos() float32 {
	if x != nil && x.YPos != nil {
		return *x.YPos
	}
	return 0
}

func (x *CMsgQuestMapNodeDef) GetCondition() *CMsgQuestMapNodeCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CMsgQuestMapNodeDef) GetOwningRegion() *CMsgProtoDefID {
	if x != nil {
		return x.OwningRegion
	}
	return nil
}

func (x *CMsgQuestMapNodeDef) GetQuestOptions() []*CMsgProtoDefID {
	if x != nil {
		return x.QuestOptions
	}
	return nil
}

func (x *CMsgQuestMapNodeDef) GetAssociatedOperation() string {
	if x != nil && x.AssociatedOperation != nil {
		return *x.AssociatedOperation
	}
	return ""
}

func (x *CMsgQuestMapNodeDef) GetRewardItemName() string {
	if x != nil && x.RewardItemName != nil {
		return *x.RewardItemName
	}
	return ""
}

func (x *CMsgQuestMapNodeDef) GetRewardLootlistName() string {
	if x != nil && x.RewardLootlistName != nil {
		return *x.RewardLootlistName
	}
	return ""
}

func (x *CMsgQuestMapNodeDef) GetCashReward() ENodeCashReward {
	if x != nil && x.CashReward != nil {
		return *x.CashReward
	}
	return Default_CMsgQuestMapNodeDef_CashReward
}

func (x *CMsgQuestMapNodeDef) GetStarType() *CMsgProtoDefID {
	if x != nil {
		return x.StarType
	}
	return nil
}

func (x *CMsgQuestMapNodeDef) GetStarsToUnlock() uint32 {
	if x != nil && x.StarsToUnlock != nil {
		return *x.StarsToUnlock
	}
	return Default_CMsgQuestMapNodeDef_StarsToUnlock
}

type CMsgPaintKit_Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *CMsgProtoDefHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
}

func (x *CMsgPaintKit_Variables) Reset() {
	*x = CMsgPaintKit_Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Variables) ProtoMessage() {}

func (x *CMsgPaintKit_Variables) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Variables.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Variables) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgPaintKit_Variables) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type CMsgPaintKit_Operation_TextureStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Texture      *CMsgVarField `protobuf:"bytes,1,opt,name=texture" json:"texture,omitempty"`
	TextureRed   *CMsgVarField `protobuf:"bytes,2,opt,name=texture_red,json=textureRed" json:"texture_red,omitempty"`
	TextureBlue  *CMsgVarField `protobuf:"bytes,3,opt,name=texture_blue,json=textureBlue" json:"texture_blue,omitempty"`
	AdjustBlack  *CMsgVarField `protobuf:"bytes,4,opt,name=adjust_black,json=adjustBlack" json:"adjust_black,omitempty"`
	AdjustOffset *CMsgVarField `protobuf:"bytes,5,opt,name=adjust_offset,json=adjustOffset" json:"adjust_offset,omitempty"`
	AdjustGamma  *CMsgVarField `protobuf:"bytes,6,opt,name=adjust_gamma,json=adjustGamma" json:"adjust_gamma,omitempty"`
	Rotation     *CMsgVarField `protobuf:"bytes,7,opt,name=rotation" json:"rotation,omitempty"`
	TranslateU   *CMsgVarField `protobuf:"bytes,8,opt,name=translate_u,json=translateU" json:"translate_u,omitempty"`
	TranslateV   *CMsgVarField `protobuf:"bytes,9,opt,name=translate_v,json=translateV" json:"translate_v,omitempty"`
	ScaleUv      *CMsgVarField `protobuf:"bytes,10,opt,name=scale_uv,json=scaleUv" json:"scale_uv,omitempty"`
	FlipU        *CMsgVarField `protobuf:"bytes,11,opt,name=flip_u,json=flipU" json:"flip_u,omitempty"`
	FlipV        *CMsgVarField `protobuf:"bytes,12,opt,name=flip_v,json=flipV" json:"flip_v,omitempty"`
}

func (x *CMsgPaintKit_Operation_TextureStage) Reset() {
	*x = CMsgPaintKit_Operation_TextureStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Operation_TextureStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Operation_TextureStage) ProtoMessage() {}

func (x *CMsgPaintKit_Operation_TextureStage) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Operation_TextureStage.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Operation_TextureStage) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgPaintKit_Operation_TextureStage) GetTexture() *CMsgVarField {
	if x != nil {
		return x.Texture
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetTextureRed() *CMsgVarField {
	if x != nil {
		return x.TextureRed
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetTextureBlue() *CMsgVarField {
	if x != nil {
		return x.TextureBlue
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetAdjustBlack() *CMsgVarField {
	if x != nil {
		return x.AdjustBlack
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetAdjustOffset() *CMsgVarField {
	if x != nil {
		return x.AdjustOffset
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetAdjustGamma() *CMsgVarField {
	if x != nil {
		return x.AdjustGamma
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetRotation() *CMsgVarField {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetTranslateU() *CMsgVarField {
	if x != nil {
		return x.TranslateU
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetTranslateV() *CMsgVarField {
	if x != nil {
		return x.TranslateV
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetScaleUv() *CMsgVarField {
	if x != nil {
		return x.ScaleUv
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetFlipU() *CMsgVarField {
	if x != nil {
		return x.FlipU
	}
	return nil
}

func (x *CMsgPaintKit_Operation_TextureStage) GetFlipV() *CMsgVarField {
	if x != nil {
		return x.FlipV
	}
	return nil
}

type CMsgPaintKit_Operation_CombineStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjustBlack   *CMsgVarField                 `protobuf:"bytes,1,opt,name=adjust_black,json=adjustBlack" json:"adjust_black,omitempty"`
	AdjustOffset  *CMsgVarField                 `protobuf:"bytes,2,opt,name=adjust_offset,json=adjustOffset" json:"adjust_offset,omitempty"`
	AdjustGamma   *CMsgVarField                 `protobuf:"bytes,3,opt,name=adjust_gamma,json=adjustGamma" json:"adjust_gamma,omitempty"`
	Rotation      *CMsgVarField                 `protobuf:"bytes,4,opt,name=rotation" json:"rotation,omitempty"`
	TranslateU    *CMsgVarField                 `protobuf:"bytes,5,opt,name=translate_u,json=translateU" json:"translate_u,omitempty"`
	TranslateV    *CMsgVarField                 `protobuf:"bytes,6,opt,name=translate_v,json=translateV" json:"translate_v,omitempty"`
	ScaleUv       *CMsgVarField                 `protobuf:"bytes,7,opt,name=scale_uv,json=scaleUv" json:"scale_uv,omitempty"`
	FlipU         *CMsgVarField                 `protobuf:"bytes,8,opt,name=flip_u,json=flipU" json:"flip_u,omitempty"`
	FlipV         *CMsgVarField                 `protobuf:"bytes,9,opt,name=flip_v,json=flipV" json:"flip_v,omitempty"`
	OperationNode []*CMsgPaintKit_OperationNode `protobuf:"bytes,11,rep,name=operation_node,json=operationNode" json:"operation_node,omitempty"`
}

func (x *CMsgPaintKit_Operation_CombineStage) Reset() {
	*x = CMsgPaintKit_Operation_CombineStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Operation_CombineStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Operation_CombineStage) ProtoMessage() {}

func (x *CMsgPaintKit_Operation_CombineStage) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Operation_CombineStage.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Operation_CombineStage) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgPaintKit_Operation_CombineStage) GetAdjustBlack() *CMsgVarField {
	if x != nil {
		return x.AdjustBlack
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetAdjustOffset() *CMsgVarField {
	if x != nil {
		return x.AdjustOffset
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetAdjustGamma() *CMsgVarField {
	if x != nil {
		return x.AdjustGamma
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetRotation() *CMsgVarField {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetTranslateU() *CMsgVarField {
	if x != nil {
		return x.TranslateU
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetTranslateV() *CMsgVarField {
	if x != nil {
		return x.TranslateV
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetScaleUv() *CMsgVarField {
	if x != nil {
		return x.ScaleUv
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetFlipU() *CMsgVarField {
	if x != nil {
		return x.FlipU
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetFlipV() *CMsgVarField {
	if x != nil {
		return x.FlipV
	}
	return nil
}

func (x *CMsgPaintKit_Operation_CombineStage) GetOperationNode() []*CMsgPaintKit_OperationNode {
	if x != nil {
		return x.OperationNode
	}
	return nil
}

type CMsgPaintKit_Operation_SelectStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups *CMsgVarField   `protobuf:"bytes,1,opt,name=groups" json:"groups,omitempty"`
	Select []*CMsgVarField `protobuf:"bytes,2,rep,name=select" json:"select,omitempty"`
}

func (x *CMsgPaintKit_Operation_SelectStage) Reset() {
	*x = CMsgPaintKit_Operation_SelectStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Operation_SelectStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Operation_SelectStage) ProtoMessage() {}

func (x *CMsgPaintKit_Operation_SelectStage) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Operation_SelectStage.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Operation_SelectStage) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgPaintKit_Operation_SelectStage) GetGroups() *CMsgVarField {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *CMsgPaintKit_Operation_SelectStage) GetSelect() []*CMsgVarField {
	if x != nil {
		return x.Select
	}
	return nil
}

type CMsgPaintKit_Operation_Sticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *CMsgVarField `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Weight *CMsgVarField `protobuf:"bytes,2,opt,name=weight" json:"weight,omitempty"`
	Spec   *CMsgVarField `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (x *CMsgPaintKit_Operation_Sticker) Reset() {
	*x = CMsgPaintKit_Operation_Sticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Operation_Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Operation_Sticker) ProtoMessage() {}

func (x *CMsgPaintKit_Operation_Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Operation_Sticker.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Operation_Sticker) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgPaintKit_Operation_Sticker) GetBase() *CMsgVarField {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgPaintKit_Operation_Sticker) GetWeight() *CMsgVarField {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *CMsgPaintKit_Operation_Sticker) GetSpec() *CMsgVarField {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CMsgPaintKit_Operation_StickerStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sticker       []*CMsgPaintKit_Operation_Sticker `protobuf:"bytes,1,rep,name=sticker" json:"sticker,omitempty"`
	DestTl        *CMsgVarField                     `protobuf:"bytes,2,opt,name=dest_tl,json=destTl" json:"dest_tl,omitempty"`
	DestTr        *CMsgVarField                     `protobuf:"bytes,3,opt,name=dest_tr,json=destTr" json:"dest_tr,omitempty"`
	DestBl        *CMsgVarField                     `protobuf:"bytes,4,opt,name=dest_bl,json=destBl" json:"dest_bl,omitempty"`
	AdjustBlack   *CMsgVarField                     `protobuf:"bytes,5,opt,name=adjust_black,json=adjustBlack" json:"adjust_black,omitempty"`
	AdjustOffset  *CMsgVarField                     `protobuf:"bytes,6,opt,name=adjust_offset,json=adjustOffset" json:"adjust_offset,omitempty"`
	AdjustGamma   *CMsgVarField                     `protobuf:"bytes,7,opt,name=adjust_gamma,json=adjustGamma" json:"adjust_gamma,omitempty"`
	OperationNode []*CMsgPaintKit_OperationNode     `protobuf:"bytes,9,rep,name=operation_node,json=operationNode" json:"operation_node,omitempty"`
}

func (x *CMsgPaintKit_Operation_StickerStage) Reset() {
	*x = CMsgPaintKit_Operation_StickerStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Operation_StickerStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Operation_StickerStage) ProtoMessage() {}

func (x *CMsgPaintKit_Operation_StickerStage) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Operation_StickerStage.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Operation_StickerStage) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgPaintKit_Operation_StickerStage) GetSticker() []*CMsgPaintKit_Operation_Sticker {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetDestTl() *CMsgVarField {
	if x != nil {
		return x.DestTl
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetDestTr() *CMsgVarField {
	if x != nil {
		return x.DestTr
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetDestBl() *CMsgVarField {
	if x != nil {
		return x.DestBl
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetAdjustBlack() *CMsgVarField {
	if x != nil {
		return x.AdjustBlack
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetAdjustOffset() *CMsgVarField {
	if x != nil {
		return x.AdjustOffset
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetAdjustGamma() *CMsgVarField {
	if x != nil {
		return x.AdjustGamma
	}
	return nil
}

func (x *CMsgPaintKit_Operation_StickerStage) GetOperationNode() []*CMsgPaintKit_OperationNode {
	if x != nil {
		return x.OperationNode
	}
	return nil
}

type CMsgPaintKit_OperationStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stage:
	//
	//	*CMsgPaintKit_OperationStage_TextureLookup
	//	*CMsgPaintKit_OperationStage_CombineAdd
	//	*CMsgPaintKit_OperationStage_CombineLerp
	//	*CMsgPaintKit_OperationStage_CombineMultiply
	//	*CMsgPaintKit_OperationStage_Select
	//	*CMsgPaintKit_OperationStage_ApplySticker
	Stage isCMsgPaintKit_OperationStage_Stage `protobuf_oneof:"stage"`
}

func (x *CMsgPaintKit_OperationStage) Reset() {
	*x = CMsgPaintKit_OperationStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_OperationStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_OperationStage) ProtoMessage() {}

func (x *CMsgPaintKit_OperationStage) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_OperationStage.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_OperationStage) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{19}
}

func (m *CMsgPaintKit_OperationStage) GetStage() isCMsgPaintKit_OperationStage_Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (x *CMsgPaintKit_OperationStage) GetTextureLookup() *CMsgPaintKit_Operation_TextureStage {
	if x, ok := x.GetStage().(*CMsgPaintKit_OperationStage_TextureLookup); ok {
		return x.TextureLookup
	}
	return nil
}

func (x *CMsgPaintKit_OperationStage) GetCombineAdd() *CMsgPaintKit_Operation_CombineStage {
	if x, ok := x.GetStage().(*CMsgPaintKit_OperationStage_CombineAdd); ok {
		return x.CombineAdd
	}
	return nil
}

func (x *CMsgPaintKit_OperationStage) GetCombineLerp() *CMsgPaintKit_Operation_CombineStage {
	if x, ok := x.GetStage().(*CMsgPaintKit_OperationStage_CombineLerp); ok {
		return x.CombineLerp
	}
	return nil
}

func (x *CMsgPaintKit_OperationStage) GetCombineMultiply() *CMsgPaintKit_Operation_CombineStage {
	if x, ok := x.GetStage().(*CMsgPaintKit_OperationStage_CombineMultiply); ok {
		return x.CombineMultiply
	}
	return nil
}

func (x *CMsgPaintKit_OperationStage) GetSelect() *CMsgPaintKit_Operation_SelectStage {
	if x, ok := x.GetStage().(*CMsgPaintKit_OperationStage_Select); ok {
		return x.Select
	}
	return nil
}

func (x *CMsgPaintKit_OperationStage) GetApplySticker() *CMsgPaintKit_Operation_StickerStage {
	if x, ok := x.GetStage().(*CMsgPaintKit_OperationStage_ApplySticker); ok {
		return x.ApplySticker
	}
	return nil
}

type isCMsgPaintKit_OperationStage_Stage interface {
	isCMsgPaintKit_OperationStage_Stage()
}

type CMsgPaintKit_OperationStage_TextureLookup struct {
	TextureLookup *CMsgPaintKit_Operation_TextureStage `protobuf:"bytes,1,opt,name=texture_lookup,json=textureLookup,oneof"`
}

type CMsgPaintKit_OperationStage_CombineAdd struct {
	CombineAdd *CMsgPaintKit_Operation_CombineStage `protobuf:"bytes,2,opt,name=combine_add,json=combineAdd,oneof"`
}

type CMsgPaintKit_OperationStage_CombineLerp struct {
	CombineLerp *CMsgPaintKit_Operation_CombineStage `protobuf:"bytes,3,opt,name=combine_lerp,json=combineLerp,oneof"`
}

type CMsgPaintKit_OperationStage_CombineMultiply struct {
	CombineMultiply *CMsgPaintKit_Operation_CombineStage `protobuf:"bytes,4,opt,name=combine_multiply,json=combineMultiply,oneof"`
}

type CMsgPaintKit_OperationStage_Select struct {
	Select *CMsgPaintKit_Operation_SelectStage `protobuf:"bytes,5,opt,name=select,oneof"`
}

type CMsgPaintKit_OperationStage_ApplySticker struct {
	ApplySticker *CMsgPaintKit_Operation_StickerStage `protobuf:"bytes,6,opt,name=apply_sticker,json=applySticker,oneof"`
}

func (*CMsgPaintKit_OperationStage_TextureLookup) isCMsgPaintKit_OperationStage_Stage() {}

func (*CMsgPaintKit_OperationStage_CombineAdd) isCMsgPaintKit_OperationStage_Stage() {}

func (*CMsgPaintKit_OperationStage_CombineLerp) isCMsgPaintKit_OperationStage_Stage() {}

func (*CMsgPaintKit_OperationStage_CombineMultiply) isCMsgPaintKit_OperationStage_Stage() {}

func (*CMsgPaintKit_OperationStage_Select) isCMsgPaintKit_OperationStage_Stage() {}

func (*CMsgPaintKit_OperationStage_ApplySticker) isCMsgPaintKit_OperationStage_Stage() {}

type CMsgPaintKit_OperationNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//
	//	*CMsgPaintKit_OperationNode_Stage
	//	*CMsgPaintKit_OperationNode_OperationTemplate
	Node isCMsgPaintKit_OperationNode_Node `protobuf_oneof:"node"`
}

func (x *CMsgPaintKit_OperationNode) Reset() {
	*x = CMsgPaintKit_OperationNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_OperationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_OperationNode) ProtoMessage() {}

func (x *CMsgPaintKit_OperationNode) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_OperationNode.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_OperationNode) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{20}
}

func (m *CMsgPaintKit_OperationNode) GetNode() isCMsgPaintKit_OperationNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *CMsgPaintKit_OperationNode) GetStage() *CMsgPaintKit_OperationStage {
	if x, ok := x.GetNode().(*CMsgPaintKit_OperationNode_Stage); ok {
		return x.Stage
	}
	return nil
}

func (x *CMsgPaintKit_OperationNode) GetOperationTemplate() *CMsgProtoDefID {
	if x, ok := x.GetNode().(*CMsgPaintKit_OperationNode_OperationTemplate); ok {
		return x.OperationTemplate
	}
	return nil
}

type isCMsgPaintKit_OperationNode_Node interface {
	isCMsgPaintKit_OperationNode_Node()
}

type CMsgPaintKit_OperationNode_Stage struct {
	Stage *CMsgPaintKit_OperationStage `protobuf:"bytes,1,opt,name=stage,oneof"`
}

type CMsgPaintKit_OperationNode_OperationTemplate struct {
	OperationTemplate *CMsgProtoDefID `protobuf:"bytes,2,opt,name=operation_template,json=operationTemplate,oneof"`
}

func (*CMsgPaintKit_OperationNode_Stage) isCMsgPaintKit_OperationNode_Node() {}

func (*CMsgPaintKit_OperationNode_OperationTemplate) isCMsgPaintKit_OperationNode_Node() {}

type CMsgPaintKit_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *CMsgProtoDefHeader           `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	OperationNode []*CMsgPaintKit_OperationNode `protobuf:"bytes,2,rep,name=operation_node,json=operationNode" json:"operation_node,omitempty"`
}

func (x *CMsgPaintKit_Operation) Reset() {
	*x = CMsgPaintKit_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Operation) ProtoMessage() {}

func (x *CMsgPaintKit_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Operation.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Operation) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgPaintKit_Operation) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgPaintKit_Operation) GetOperationNode() []*CMsgPaintKit_OperationNode {
	if x != nil {
		return x.OperationNode
	}
	return nil
}

type CMsgPaintKit_ItemDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *CMsgProtoDefHeader                       `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	ItemDefinitionIndex *uint32                                   `protobuf:"varint,2,req,name=item_definition_index,json=itemDefinitionIndex" json:"item_definition_index,omitempty"`
	VariableTemplate    *CMsgProtoDefID                           `protobuf:"bytes,3,opt,name=variable_template,json=variableTemplate" json:"variable_template,omitempty"`
	Definition          []*CMsgPaintKit_ItemDefinition_Definition `protobuf:"bytes,4,rep,name=definition" json:"definition,omitempty"`
}

func (x *CMsgPaintKit_ItemDefinition) Reset() {
	*x = CMsgPaintKit_ItemDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_ItemDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_ItemDefinition) ProtoMessage() {}

func (x *CMsgPaintKit_ItemDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_ItemDefinition.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_ItemDefinition) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgPaintKit_ItemDefinition) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgPaintKit_ItemDefinition) GetItemDefinitionIndex() uint32 {
	if x != nil && x.ItemDefinitionIndex != nil {
		return *x.ItemDefinitionIndex
	}
	return 0
}

func (x *CMsgPaintKit_ItemDefinition) GetVariableTemplate() *CMsgProtoDefID {
	if x != nil {
		return x.VariableTemplate
	}
	return nil
}

func (x *CMsgPaintKit_ItemDefinition) GetDefinition() []*CMsgPaintKit_ItemDefinition_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

type CMsgPaintKit_Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *CMsgProtoDefHeader             `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	LocDesctoken       *string                         `protobuf:"bytes,2,opt,name=loc_desctoken,json=locDesctoken" json:"loc_desctoken,omitempty"`
	OperationTemplate  *CMsgProtoDefID                 `protobuf:"bytes,3,opt,name=operation_template,json=operationTemplate" json:"operation_template,omitempty"`
	HasTeamTextures    *bool                           `protobuf:"varint,4,opt,name=has_team_textures,json=hasTeamTextures" json:"has_team_textures,omitempty"`
	Item               []*CMsgPaintKit_Definition_Item `protobuf:"bytes,5,rep,name=item" json:"item,omitempty"`
	PaintkitTool       *CMsgPaintKit_Definition_Item   `protobuf:"bytes,6,opt,name=paintkit_tool,json=paintkitTool" json:"paintkit_tool,omitempty"`
	Flamethrower       *CMsgPaintKit_Definition_Item   `protobuf:"bytes,7,opt,name=flamethrower" json:"flamethrower,omitempty"`
	Grenadelauncher    *CMsgPaintKit_Definition_Item   `protobuf:"bytes,8,opt,name=grenadelauncher" json:"grenadelauncher,omitempty"`
	Knife              *CMsgPaintKit_Definition_Item   `protobuf:"bytes,9,opt,name=knife" json:"knife,omitempty"`
	Medigun            *CMsgPaintKit_Definition_Item   `protobuf:"bytes,10,opt,name=medigun" json:"medigun,omitempty"`
	Minigun            *CMsgPaintKit_Definition_Item   `protobuf:"bytes,11,opt,name=minigun" json:"minigun,omitempty"`
	Pistol             *CMsgPaintKit_Definition_Item   `protobuf:"bytes,12,opt,name=pistol" json:"pistol,omitempty"`
	Revolver           *CMsgPaintKit_Definition_Item   `protobuf:"bytes,13,opt,name=revolver" json:"revolver,omitempty"`
	Rocketlauncher     *CMsgPaintKit_Definition_Item   `protobuf:"bytes,14,opt,name=rocketlauncher" json:"rocketlauncher,omitempty"`
	Scattergun         *CMsgPaintKit_Definition_Item   `protobuf:"bytes,15,opt,name=scattergun" json:"scattergun,omitempty"`
	Shotgun            *CMsgPaintKit_Definition_Item   `protobuf:"bytes,16,opt,name=shotgun" json:"shotgun,omitempty"`
	Smg                *CMsgPaintKit_Definition_Item   `protobuf:"bytes,17,opt,name=smg" json:"smg,omitempty"`
	Sniperrifle        *CMsgPaintKit_Definition_Item   `protobuf:"bytes,18,opt,name=sniperrifle" json:"sniperrifle,omitempty"`
	StickybombLauncher *CMsgPaintKit_Definition_Item   `protobuf:"bytes,19,opt,name=stickybomb_launcher,json=stickybombLauncher" json:"stickybomb_launcher,omitempty"`
	Ubersaw            *CMsgPaintKit_Definition_Item   `protobuf:"bytes,20,opt,name=ubersaw" json:"ubersaw,omitempty"`
	Wrench             *CMsgPaintKit_Definition_Item   `protobuf:"bytes,21,opt,name=wrench" json:"wrench,omitempty"`
	Amputator          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,22,opt,name=amputator" json:"amputator,omitempty"`
	AtomLauncher       *CMsgPaintKit_Definition_Item   `protobuf:"bytes,23,opt,name=atom_launcher,json=atomLauncher" json:"atom_launcher,omitempty"`
	BackScratcher      *CMsgPaintKit_Definition_Item   `protobuf:"bytes,24,opt,name=back_scratcher,json=backScratcher" json:"back_scratcher,omitempty"`
	Battleaxe          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,25,opt,name=battleaxe" json:"battleaxe,omitempty"`
	BazaarSniper       *CMsgPaintKit_Definition_Item   `protobuf:"bytes,26,opt,name=bazaar_sniper,json=bazaarSniper" json:"bazaar_sniper,omitempty"`
	Blackbox           *CMsgPaintKit_Definition_Item   `protobuf:"bytes,27,opt,name=blackbox" json:"blackbox,omitempty"`
	Claidheamohmor     *CMsgPaintKit_Definition_Item   `protobuf:"bytes,28,opt,name=claidheamohmor" json:"claidheamohmor,omitempty"`
	CrusadersCrossbow  *CMsgPaintKit_Definition_Item   `protobuf:"bytes,29,opt,name=crusaders_crossbow,json=crusadersCrossbow" json:"crusaders_crossbow,omitempty"`
	Degreaser          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,30,opt,name=degreaser" json:"degreaser,omitempty"`
	DemoCannon         *CMsgPaintKit_Definition_Item   `protobuf:"bytes,31,opt,name=demo_cannon,json=demoCannon" json:"demo_cannon,omitempty"`
	DemoSultanSword    *CMsgPaintKit_Definition_Item   `protobuf:"bytes,32,opt,name=demo_sultan_sword,json=demoSultanSword" json:"demo_sultan_sword,omitempty"`
	Detonator          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,33,opt,name=detonator" json:"detonator,omitempty"`
	GatlingGun         *CMsgPaintKit_Definition_Item   `protobuf:"bytes,34,opt,name=gatling_gun,json=gatlingGun" json:"gatling_gun,omitempty"`
	Holymackerel       *CMsgPaintKit_Definition_Item   `protobuf:"bytes,35,opt,name=holymackerel" json:"holymackerel,omitempty"`
	Jag                *CMsgPaintKit_Definition_Item   `protobuf:"bytes,36,opt,name=jag" json:"jag,omitempty"`
	Lochnload          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,37,opt,name=lochnload" json:"lochnload,omitempty"`
	Powerjack          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,38,opt,name=powerjack" json:"powerjack,omitempty"`
	Quadball           *CMsgPaintKit_Definition_Item   `protobuf:"bytes,39,opt,name=quadball" json:"quadball,omitempty"`
	ReserveShooter     *CMsgPaintKit_Definition_Item   `protobuf:"bytes,40,opt,name=reserve_shooter,json=reserveShooter" json:"reserve_shooter,omitempty"`
	RidingCrop         *CMsgPaintKit_Definition_Item   `protobuf:"bytes,41,opt,name=riding_crop,json=ridingCrop" json:"riding_crop,omitempty"`
	RussianRiot        *CMsgPaintKit_Definition_Item   `protobuf:"bytes,42,opt,name=russian_riot,json=russianRiot" json:"russian_riot,omitempty"`
	Scimitar           *CMsgPaintKit_Definition_Item   `protobuf:"bytes,43,opt,name=scimitar" json:"scimitar,omitempty"`
	ScorchShot         *CMsgPaintKit_Definition_Item   `protobuf:"bytes,44,opt,name=scorch_shot,json=scorchShot" json:"scorch_shot,omitempty"`
	Shortstop          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,45,opt,name=shortstop" json:"shortstop,omitempty"`
	SodaPopper         *CMsgPaintKit_Definition_Item   `protobuf:"bytes,46,opt,name=soda_popper,json=sodaPopper" json:"soda_popper,omitempty"`
	TeleShotgun        *CMsgPaintKit_Definition_Item   `protobuf:"bytes,47,opt,name=tele_shotgun,json=teleShotgun" json:"tele_shotgun,omitempty"`
	Tomislav           *CMsgPaintKit_Definition_Item   `protobuf:"bytes,48,opt,name=tomislav" json:"tomislav,omitempty"`
	Trenchgun          *CMsgPaintKit_Definition_Item   `protobuf:"bytes,49,opt,name=trenchgun" json:"trenchgun,omitempty"`
	WingerPistol       *CMsgPaintKit_Definition_Item   `protobuf:"bytes,50,opt,name=winger_pistol,json=wingerPistol" json:"winger_pistol,omitempty"`
}

func (x *CMsgPaintKit_Definition) Reset() {
	*x = CMsgPaintKit_Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Definition) ProtoMessage() {}

func (x *CMsgPaintKit_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Definition.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Definition) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgPaintKit_Definition) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetLocDesctoken() string {
	if x != nil && x.LocDesctoken != nil {
		return *x.LocDesctoken
	}
	return ""
}

func (x *CMsgPaintKit_Definition) GetOperationTemplate() *CMsgProtoDefID {
	if x != nil {
		return x.OperationTemplate
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetHasTeamTextures() bool {
	if x != nil && x.HasTeamTextures != nil {
		return *x.HasTeamTextures
	}
	return false
}

func (x *CMsgPaintKit_Definition) GetItem() []*CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetPaintkitTool() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.PaintkitTool
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetFlamethrower() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Flamethrower
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetGrenadelauncher() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Grenadelauncher
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetKnife() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Knife
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetMedigun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Medigun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetMinigun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Minigun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetPistol() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Pistol
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetRevolver() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Revolver
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetRocketlauncher() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Rocketlauncher
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetScattergun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Scattergun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetShotgun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Shotgun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetSmg() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Smg
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetSniperrifle() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Sniperrifle
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetStickybombLauncher() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.StickybombLauncher
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetUbersaw() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Ubersaw
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetWrench() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Wrench
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetAmputator() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Amputator
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetAtomLauncher() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.AtomLauncher
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetBackScratcher() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.BackScratcher
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetBattleaxe() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Battleaxe
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetBazaarSniper() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.BazaarSniper
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetBlackbox() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Blackbox
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetClaidheamohmor() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Claidheamohmor
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetCrusadersCrossbow() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.CrusadersCrossbow
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetDegreaser() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Degreaser
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetDemoCannon() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.DemoCannon
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetDemoSultanSword() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.DemoSultanSword
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetDetonator() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Detonator
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetGatlingGun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.GatlingGun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetHolymackerel() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Holymackerel
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetJag() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Jag
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetLochnload() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Lochnload
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetPowerjack() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Powerjack
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetQuadball() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Quadball
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetReserveShooter() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.ReserveShooter
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetRidingCrop() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.RidingCrop
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetRussianRiot() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.RussianRiot
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetScimitar() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Scimitar
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetScorchShot() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.ScorchShot
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetShortstop() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Shortstop
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetSodaPopper() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.SodaPopper
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetTeleShotgun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.TeleShotgun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetTomislav() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Tomislav
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetTrenchgun() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.Trenchgun
	}
	return nil
}

func (x *CMsgPaintKit_Definition) GetWingerPistol() *CMsgPaintKit_Definition_Item {
	if x != nil {
		return x.WingerPistol
	}
	return nil
}

type CMsgQuestTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *CMsgProtoDefHeader                 `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	NotificationRes     *string                             `protobuf:"bytes,2,opt,name=notification_res,json=notificationRes" json:"notification_res,omitempty"`
	QuestItemRes        *string                             `protobuf:"bytes,3,opt,name=quest_item_res,json=questItemRes" json:"quest_item_res,omitempty"`
	InGameTrackerRes    *string                             `protobuf:"bytes,4,opt,name=in_game_tracker_res,json=inGameTrackerRes" json:"in_game_tracker_res,omitempty"`
	GiveSounds          []*CMsgQuestTheme_WeightedStringSet `protobuf:"bytes,5,rep,name=give_sounds,json=giveSounds" json:"give_sounds,omitempty"`
	CompleteSounds      []*CMsgQuestTheme_WeightedStringSet `protobuf:"bytes,6,rep,name=complete_sounds,json=completeSounds" json:"complete_sounds,omitempty"`
	FullyCompleteSounds []*CMsgQuestTheme_WeightedStringSet `protobuf:"bytes,7,rep,name=fully_complete_sounds,json=fullyCompleteSounds" json:"fully_complete_sounds,omitempty"`
	RewardSound         *string                             `protobuf:"bytes,8,opt,name=reward_sound,json=rewardSound" json:"reward_sound,omitempty"`
	DiscardSound        *string                             `protobuf:"bytes,9,opt,name=discard_sound,json=discardSound" json:"discard_sound,omitempty"`
	RevealSound         *string                             `protobuf:"bytes,10,opt,name=reveal_sound,json=revealSound" json:"reveal_sound,omitempty"`
}

func (x *CMsgQuestTheme) Reset() {
	*x = CMsgQuestTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestTheme) ProtoMessage() {}

func (x *CMsgQuestTheme) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestTheme.ProtoReflect.Descriptor instead.
func (*CMsgQuestTheme) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgQuestTheme) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CMsgQuestTheme) GetNotificationRes() string {
	if x != nil && x.NotificationRes != nil {
		return *x.NotificationRes
	}
	return ""
}

func (x *CMsgQuestTheme) GetQuestItemRes() string {
	if x != nil && x.QuestItemRes != nil {
		return *x.QuestItemRes
	}
	return ""
}

func (x *CMsgQuestTheme) GetInGameTrackerRes() string {
	if x != nil && x.InGameTrackerRes != nil {
		return *x.InGameTrackerRes
	}
	return ""
}

func (x *CMsgQuestTheme) GetGiveSounds() []*CMsgQuestTheme_WeightedStringSet {
	if x != nil {
		return x.GiveSounds
	}
	return nil
}

func (x *CMsgQuestTheme) GetCompleteSounds() []*CMsgQuestTheme_WeightedStringSet {
	if x != nil {
		return x.CompleteSounds
	}
	return nil
}

func (x *CMsgQuestTheme) GetFullyCompleteSounds() []*CMsgQuestTheme_WeightedStringSet {
	if x != nil {
		return x.FullyCompleteSounds
	}
	return nil
}

func (x *CMsgQuestTheme) GetRewardSound() string {
	if x != nil && x.RewardSound != nil {
		return *x.RewardSound
	}
	return ""
}

func (x *CMsgQuestTheme) GetDiscardSound() string {
	if x != nil && x.DiscardSound != nil {
		return *x.DiscardSound
	}
	return ""
}

func (x *CMsgQuestTheme) GetRevealSound() string {
	if x != nil && x.RevealSound != nil {
		return *x.RevealSound
	}
	return ""
}

type CMsgQuestMapNodeCondition_NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusObjectivesRequired *uint32         `protobuf:"varint,1,opt,name=bonus_objectives_required,json=bonusObjectivesRequired,def=0" json:"bonus_objectives_required,omitempty"`
	TargetNodeDefid         *CMsgProtoDefID `protobuf:"bytes,2,req,name=target_node_defid,json=targetNodeDefid" json:"target_node_defid,omitempty"`
}

// Default values for CMsgQuestMapNodeCondition_NodeState fields.
const (
	Default_CMsgQuestMapNodeCondition_NodeState_BonusObjectivesRequired = uint32(0)
)

func (x *CMsgQuestMapNodeCondition_NodeState) Reset() {
	*x = CMsgQuestMapNodeCondition_NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapNodeCondition_NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapNodeCondition_NodeState) ProtoMessage() {}

func (x *CMsgQuestMapNodeCondition_NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapNodeCondition_NodeState.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapNodeCondition_NodeState) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgQuestMapNodeCondition_NodeState) GetBonusObjectivesRequired() uint32 {
	if x != nil && x.BonusObjectivesRequired != nil {
		return *x.BonusObjectivesRequired
	}
	return Default_CMsgQuestMapNodeCondition_NodeState_BonusObjectivesRequired
}

func (x *CMsgQuestMapNodeCondition_NodeState) GetTargetNodeDefid() *CMsgProtoDefID {
	if x != nil {
		return x.TargetNodeDefid
	}
	return nil
}

type CMsgQuestMapNodeCondition_Logic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     *LogicalOperation            `protobuf:"varint,1,req,name=operation,enum=LogicalOperation,def=0" json:"operation,omitempty"`
	SubConditions []*CMsgQuestMapNodeCondition `protobuf:"bytes,2,rep,name=sub_conditions,json=subConditions" json:"sub_conditions,omitempty"`
}

// Default values for CMsgQuestMapNodeCondition_Logic fields.
const (
	Default_CMsgQuestMapNodeCondition_Logic_Operation = LogicalOperation_AND
)

func (x *CMsgQuestMapNodeCondition_Logic) Reset() {
	*x = CMsgQuestMapNodeCondition_Logic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapNodeCondition_Logic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapNodeCondition_Logic) ProtoMessage() {}

func (x *CMsgQuestMapNodeCondition_Logic) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapNodeCondition_Logic.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapNodeCondition_Logic) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgQuestMapNodeCondition_Logic) GetOperation() LogicalOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return Default_CMsgQuestMapNodeCondition_Logic_Operation
}

func (x *CMsgQuestMapNodeCondition_Logic) GetSubConditions() []*CMsgQuestMapNodeCondition {
	if x != nil {
		return x.SubConditions
	}
	return nil
}

type CMsgQuestMapNodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//
	//	*CMsgQuestMapNodeCondition_NodeState
	//	*CMsgQuestMapNodeCondition_Logical
	Operation isCMsgQuestMapNodeCondition_Operation `protobuf_oneof:"operation"`
}

func (x *CMsgQuestMapNodeCondition) Reset() {
	*x = CMsgQuestMapNodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapNodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapNodeCondition) ProtoMessage() {}

func (x *CMsgQuestMapNodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapNodeCondition.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapNodeCondition) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{27}
}

func (m *CMsgQuestMapNodeCondition) GetOperation() isCMsgQuestMapNodeCondition_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *CMsgQuestMapNodeCondition) GetNodeState() *CMsgQuestMapNodeCondition_NodeState {
	if x, ok := x.GetOperation().(*CMsgQuestMapNodeCondition_NodeState); ok {
		return x.NodeState
	}
	return nil
}

func (x *CMsgQuestMapNodeCondition) GetLogical() *CMsgQuestMapNodeCondition_Logic {
	if x, ok := x.GetOperation().(*CMsgQuestMapNodeCondition_Logical); ok {
		return x.Logical
	}
	return nil
}

type isCMsgQuestMapNodeCondition_Operation interface {
	isCMsgQuestMapNodeCondition_Operation()
}

type CMsgQuestMapNodeCondition_NodeState struct {
	NodeState *CMsgQuestMapNodeCondition_NodeState `protobuf:"bytes,1,opt,name=node_state,json=nodeState,oneof"`
}

type CMsgQuestMapNodeCondition_Logical struct {
	Logical *CMsgQuestMapNodeCondition_Logic `protobuf:"bytes,2,opt,name=logical,oneof"`
}

func (*CMsgQuestMapNodeCondition_NodeState) isCMsgQuestMapNodeCondition_Operation() {}

func (*CMsgQuestMapNodeCondition_Logical) isCMsgQuestMapNodeCondition_Operation() {}

type CMsgHeaderOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *CMsgProtoDefHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
}

func (x *CMsgHeaderOnly) Reset() {
	*x = CMsgHeaderOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHeaderOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeaderOnly) ProtoMessage() {}

func (x *CMsgHeaderOnly) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeaderOnly.ProtoReflect.Descriptor instead.
func (*CMsgHeaderOnly) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgHeaderOnly) GetHeader() *CMsgProtoDefHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type CMsgFieldID_CMsgField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNumber   *uint32 `protobuf:"varint,1,opt,name=field_number,json=fieldNumber" json:"field_number,omitempty"`
	RepeatedIndex *uint32 `protobuf:"varint,2,opt,name=repeated_index,json=repeatedIndex" json:"repeated_index,omitempty"`
}

func (x *CMsgFieldID_CMsgField) Reset() {
	*x = CMsgFieldID_CMsgField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFieldID_CMsgField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFieldID_CMsgField) ProtoMessage() {}

func (x *CMsgFieldID_CMsgField) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFieldID_CMsgField.ProtoReflect.Descriptor instead.
func (*CMsgFieldID_CMsgField) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgFieldID_CMsgField) GetFieldNumber() uint32 {
	if x != nil && x.FieldNumber != nil {
		return *x.FieldNumber
	}
	return 0
}

func (x *CMsgFieldID_CMsgField) GetRepeatedIndex() uint32 {
	if x != nil && x.RepeatedIndex != nil {
		return *x.RepeatedIndex
	}
	return 0
}

type CMsgQuestDef_MMCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName    *string `protobuf:"bytes,1,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	CategoryName *string `protobuf:"bytes,2,opt,name=category_name,json=categoryName" json:"category_name,omitempty"`
	MapName      *string `protobuf:"bytes,3,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
}

func (x *CMsgQuestDef_MMCriteria) Reset() {
	*x = CMsgQuestDef_MMCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestDef_MMCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestDef_MMCriteria) ProtoMessage() {}

func (x *CMsgQuestDef_MMCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestDef_MMCriteria.ProtoReflect.Descriptor instead.
func (*CMsgQuestDef_MMCriteria) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgQuestDef_MMCriteria) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *CMsgQuestDef_MMCriteria) GetCategoryName() string {
	if x != nil && x.CategoryName != nil {
		return *x.CategoryName
	}
	return ""
}

func (x *CMsgQuestDef_MMCriteria) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

type CMsgQuestDef_ObjectiveInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objective  *CMsgProtoDefID `protobuf:"bytes,1,opt,name=objective" json:"objective,omitempty"`
	PointType  *EQuestPoints   `protobuf:"varint,2,opt,name=point_type,json=pointType,enum=EQuestPoints,def=0" json:"point_type,omitempty"`
	PointValue *uint32         `protobuf:"varint,3,opt,name=point_value,json=pointValue" json:"point_value,omitempty"`
}

// Default values for CMsgQuestDef_ObjectiveInstance fields.
const (
	Default_CMsgQuestDef_ObjectiveInstance_PointType = EQuestPoints_QUEST_POINTS_NOVICE
)

func (x *CMsgQuestDef_ObjectiveInstance) Reset() {
	*x = CMsgQuestDef_ObjectiveInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestDef_ObjectiveInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestDef_ObjectiveInstance) ProtoMessage() {}

func (x *CMsgQuestDef_ObjectiveInstance) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestDef_ObjectiveInstance.ProtoReflect.Descriptor instead.
func (*CMsgQuestDef_ObjectiveInstance) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgQuestDef_ObjectiveInstance) GetObjective() *CMsgProtoDefID {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *CMsgQuestDef_ObjectiveInstance) GetPointType() EQuestPoints {
	if x != nil && x.PointType != nil {
		return *x.PointType
	}
	return Default_CMsgQuestDef_ObjectiveInstance_PointType
}

func (x *CMsgQuestDef_ObjectiveInstance) GetPointValue() uint32 {
	if x != nil && x.PointValue != nil {
		return *x.PointValue
	}
	return 0
}

type CMsgQuestMapRegionDef_RegionLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetRegionDefid *CMsgProtoDefID `protobuf:"bytes,1,req,name=target_region_defid,json=targetRegionDefid" json:"target_region_defid,omitempty"`
	Xpos              *uint32         `protobuf:"varint,2,opt,name=xpos" json:"xpos,omitempty"`
	Ypos              *uint32         `protobuf:"varint,3,opt,name=ypos" json:"ypos,omitempty"`
}

func (x *CMsgQuestMapRegionDef_RegionLink) Reset() {
	*x = CMsgQuestMapRegionDef_RegionLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestMapRegionDef_RegionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestMapRegionDef_RegionLink) ProtoMessage() {}

func (x *CMsgQuestMapRegionDef_RegionLink) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestMapRegionDef_RegionLink.ProtoReflect.Descriptor instead.
func (*CMsgQuestMapRegionDef_RegionLink) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CMsgQuestMapRegionDef_RegionLink) GetTargetRegionDefid() *CMsgProtoDefID {
	if x != nil {
		return x.TargetRegionDefid
	}
	return nil
}

func (x *CMsgQuestMapRegionDef_RegionLink) GetXpos() uint32 {
	if x != nil && x.Xpos != nil {
		return *x.Xpos
	}
	return 0
}

func (x *CMsgQuestMapRegionDef_RegionLink) GetYpos() uint32 {
	if x != nil && x.Ypos != nil {
		return *x.Ypos
	}
	return 0
}

type CMsgPaintKit_ItemDefinition_Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationTemplate *CMsgProtoDefID `protobuf:"bytes,1,opt,name=operation_template,json=operationTemplate" json:"operation_template,omitempty"`
	Variable          []*CMsgVarField `protobuf:"bytes,2,rep,name=variable" json:"variable,omitempty"`
}

func (x *CMsgPaintKit_ItemDefinition_Definition) Reset() {
	*x = CMsgPaintKit_ItemDefinition_Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_ItemDefinition_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_ItemDefinition_Definition) ProtoMessage() {}

func (x *CMsgPaintKit_ItemDefinition_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_ItemDefinition_Definition.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_ItemDefinition_Definition) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CMsgPaintKit_ItemDefinition_Definition) GetOperationTemplate() *CMsgProtoDefID {
	if x != nil {
		return x.OperationTemplate
	}
	return nil
}

func (x *CMsgPaintKit_ItemDefinition_Definition) GetVariable() []*CMsgVarField {
	if x != nil {
		return x.Variable
	}
	return nil
}

type CMsgPaintKit_Definition_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefinitionTemplate *CMsgProtoDefID                        `protobuf:"bytes,1,req,name=item_definition_template,json=itemDefinitionTemplate" json:"item_definition_template,omitempty"`
	Data                   *CMsgPaintKit_Definition_Item_ItemData `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgPaintKit_Definition_Item) Reset() {
	*x = CMsgPaintKit_Definition_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Definition_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Definition_Item) ProtoMessage() {}

func (x *CMsgPaintKit_Definition_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Definition_Item.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Definition_Item) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CMsgPaintKit_Definition_Item) GetItemDefinitionTemplate() *CMsgProtoDefID {
	if x != nil {
		return x.ItemDefinitionTemplate
	}
	return nil
}

func (x *CMsgPaintKit_Definition_Item) GetData() *CMsgPaintKit_Definition_Item_ItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgPaintKit_Definition_Item_ItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanApplyPaintkit *bool           `protobuf:"varint,2,opt,name=can_apply_paintkit,json=canApplyPaintkit,def=1" json:"can_apply_paintkit,omitempty"`
	MaterialOverride *string         `protobuf:"bytes,3,opt,name=material_override,json=materialOverride" json:"material_override,omitempty"`
	Variable         []*CMsgVarField `protobuf:"bytes,4,rep,name=variable" json:"variable,omitempty"`
}

// Default values for CMsgPaintKit_Definition_Item_ItemData fields.
const (
	Default_CMsgPaintKit_Definition_Item_ItemData_CanApplyPaintkit = bool(true)
)

func (x *CMsgPaintKit_Definition_Item_ItemData) Reset() {
	*x = CMsgPaintKit_Definition_Item_ItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPaintKit_Definition_Item_ItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPaintKit_Definition_Item_ItemData) ProtoMessage() {}

func (x *CMsgPaintKit_Definition_Item_ItemData) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPaintKit_Definition_Item_ItemData.ProtoReflect.Descriptor instead.
func (*CMsgPaintKit_Definition_Item_ItemData) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{23, 0, 0}
}

func (x *CMsgPaintKit_Definition_Item_ItemData) GetCanApplyPaintkit() bool {
	if x != nil && x.CanApplyPaintkit != nil {
		return *x.CanApplyPaintkit
	}
	return Default_CMsgPaintKit_Definition_Item_ItemData_CanApplyPaintkit
}

func (x *CMsgPaintKit_Definition_Item_ItemData) GetMaterialOverride() string {
	if x != nil && x.MaterialOverride != nil {
		return *x.MaterialOverride
	}
	return ""
}

func (x *CMsgPaintKit_Definition_Item_ItemData) GetVariable() []*CMsgVarField {
	if x != nil {
		return x.Variable
	}
	return nil
}

type CMsgQuestTheme_WeightedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
	Weight  *uint32 `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (x *CMsgQuestTheme_WeightedString) Reset() {
	*x = CMsgQuestTheme_WeightedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestTheme_WeightedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestTheme_WeightedString) ProtoMessage() {}

func (x *CMsgQuestTheme_WeightedString) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestTheme_WeightedString.ProtoReflect.Descriptor instead.
func (*CMsgQuestTheme_WeightedString) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgQuestTheme_WeightedString) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *CMsgQuestTheme_WeightedString) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type CMsgQuestTheme_WeightedStringSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightedStrings []*CMsgQuestTheme_WeightedString `protobuf:"bytes,1,rep,name=weighted_strings,json=weightedStrings" json:"weighted_strings,omitempty"`
}

func (x *CMsgQuestTheme_WeightedStringSet) Reset() {
	*x = CMsgQuestTheme_WeightedStringSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_def_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestTheme_WeightedStringSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestTheme_WeightedStringSet) ProtoMessage() {}

func (x *CMsgQuestTheme_WeightedStringSet) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_def_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestTheme_WeightedStringSet.ProtoReflect.Descriptor instead.
func (*CMsgQuestTheme_WeightedStringSet) Descriptor() ([]byte, []int) {
	return file_tf_proto_def_messages_proto_rawDescGZIP(), []int{24, 1}
}

func (x *CMsgQuestTheme_WeightedStringSet) GetWeightedStrings() []*CMsgQuestTheme_WeightedString {
	if x != nil {
		return x.WeightedStrings
	}
	return nil
}

var file_tf_proto_def_messages_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         80000,
		Name:          "start_expanded",
		Tag:           "varint,80000,opt,name=start_expanded,def=1",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ProtoDefTypes)(nil),
		Field:         70000,
		Name:          "valid_type",
		Tag:           "varint,70000,opt,name=valid_type,enum=ProtoDefTypes,def=0",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70001,
		Name:          "editable",
		Tag:           "varint,70001,opt,name=editable,def=1",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70002,
		Name:          "localized",
		Tag:           "varint,70002,opt,name=localized,def=0",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70003,
		Name:          "do_not_inherit",
		Tag:           "varint,70003,opt,name=do_not_inherit,def=0",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         70004,
		Name:          "display_name",
		Tag:           "bytes,70004,opt,name=display_name",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         70005,
		Name:          "comment",
		Tag:           "bytes,70005,opt,name=comment",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         70007,
		Name:          "max_count",
		Tag:           "varint,70007,opt,name=max_count",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70008,
		Name:          "allow_add",
		Tag:           "varint,70008,opt,name=allow_add,def=1",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70009,
		Name:          "allow_delete",
		Tag:           "varint,70009,opt,name=allow_delete,def=1",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         70010,
		Name:          "panel_class_override",
		Tag:           "bytes,70010,opt,name=panel_class_override",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         70011,
		Name:          "message_inherhitance_key_field_name",
		Tag:           "bytes,70011,opt,name=message_inherhitance_key_field_name",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70012,
		Name:          "inherit_reference_variables",
		Tag:           "varint,70012,opt,name=inherit_reference_variables,def=0",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70013,
		Name:          "self_inherit_only",
		Tag:           "varint,70013,opt,name=self_inherit_only,def=0",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*EVarFieldType)(nil),
		Field:         70014,
		Name:          "var_field_type",
		Tag:           "varint,70014,opt,name=var_field_type,enum=EVarFieldType,def=1",
		Filename:      "tf_proto_def_messages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         70015,
		Name:          "merging_key_field",
		Tag:           "varint,70015,opt,name=merging_key_field,def=0",
		Filename:      "tf_proto_def_messages.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional bool start_expanded = 80000;
	E_StartExpanded = &file_tf_proto_def_messages_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional ProtoDefTypes valid_type = 70000;
	E_ValidType = &file_tf_proto_def_messages_proto_extTypes[1]
	// optional bool editable = 70001;
	E_Editable = &file_tf_proto_def_messages_proto_extTypes[2]
	// optional bool localized = 70002;
	E_Localized = &file_tf_proto_def_messages_proto_extTypes[3]
	// optional bool do_not_inherit = 70003;
	E_DoNotInherit = &file_tf_proto_def_messages_proto_extTypes[4]
	// optional string display_name = 70004;
	E_DisplayName = &file_tf_proto_def_messages_proto_extTypes[5]
	// optional string comment = 70005;
	E_Comment = &file_tf_proto_def_messages_proto_extTypes[6]
	// optional uint32 max_count = 70007;
	E_MaxCount = &file_tf_proto_def_messages_proto_extTypes[7]
	// optional bool allow_add = 70008;
	E_AllowAdd = &file_tf_proto_def_messages_proto_extTypes[8]
	// optional bool allow_delete = 70009;
	E_AllowDelete = &file_tf_proto_def_messages_proto_extTypes[9]
	// optional string panel_class_override = 70010;
	E_PanelClassOverride = &file_tf_proto_def_messages_proto_extTypes[10]
	// optional string message_inherhitance_key_field_name = 70011;
	E_MessageInherhitanceKeyFieldName = &file_tf_proto_def_messages_proto_extTypes[11]
	// optional bool inherit_reference_variables = 70012;
	E_InheritReferenceVariables = &file_tf_proto_def_messages_proto_extTypes[12]
	// optional bool self_inherit_only = 70013;
	E_SelfInheritOnly = &file_tf_proto_def_messages_proto_extTypes[13]
	// optional EVarFieldType var_field_type = 70014;
	E_VarFieldType = &file_tf_proto_def_messages_proto_extTypes[14]
	// optional bool merging_key_field = 70015;
	E_MergingKeyField = &file_tf_proto_def_messages_proto_extTypes[15]
)

var File_tf_proto_def_messages_proto protoreflect.FileDescriptor

var file_tf_proto_def_messages_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x92, 0x01, 0x0a, 0x0b, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x55, 0x0a,
	0x09, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x4b, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x11, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x53, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x65, 0x66, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62,
	0x6a, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x44, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x97, 0x22, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x42,
	0x25, 0x88, 0x97, 0x22, 0x00, 0xa2, 0x97, 0x22, 0x08, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0xaa, 0x97, 0x22, 0x0d, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0xe8, 0x97, 0x22, 0x01, 0x52, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xa2, 0x97, 0x22, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x97, 0x22, 0x1a, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0xe8, 0x97, 0x22, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x9e, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65,
	0x66, 0x49, 0x44, 0x42, 0x73, 0xa2, 0x97, 0x22, 0x06, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0xaa,
	0x97, 0x22, 0x45, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x6f, 0x70, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0xd2, 0x97, 0x22, 0x18, 0x43, 0x50, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0xe8, 0x97, 0x22, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x73, 0x12, 0x79, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x65, 0xa2, 0x97, 0x22, 0x04, 0x54, 0x61, 0x67, 0x73, 0xaa, 0x97, 0x22, 0x59, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x20, 0x69, 0x65, 0x2e, 0x20, 0x27, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x27, 0x2c, 0x20, 0x27, 0x73, 0x68, 0x6f, 0x74, 0x67, 0x75, 0x6e, 0x27, 0x2c, 0x20,
	0x27, 0x65, 0x61, 0x73, 0x79, 0x27, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x59, 0xa2, 0x97, 0x22, 0x0b, 0x50,
	0x75, 0x72, 0x65, 0x20, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0xaa, 0x97, 0x22, 0x42, 0x49, 0x66,
	0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x64,
	0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0xe8, 0x97, 0x22, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x6a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x33, 0xa2, 0x97,
	0x22, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0xaa, 0x97, 0x22, 0x1a, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xda, 0x97, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xce, 0x08, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x3a, 0x17, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x5d, 0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66,
	0x48, 0x00, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x53, 0x0a, 0x1d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x17, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x21, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x69, 0x0a, 0x24, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x6b, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b,
	0x69, 0x74, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x20,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x69, 0x0a, 0x24, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x6b,
	0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x2a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x25, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x25, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x6e,
	0x74, 0x6b, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x21, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x1d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x19,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd2, 0x2d, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x12,
	0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x97, 0x22, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x6a, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x58, 0xa2,
	0x97, 0x22, 0x0d, 0x4d, 0x61, 0x70, 0x73, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0xaa, 0x97, 0x22, 0x43, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6f,
	0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x70, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0xa6, 0x01, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x45, 0x54, 0x46, 0x32, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x63, 0xa2, 0x97, 0x22, 0x12, 0x47, 0x61, 0x6d, 0x65,
	0x20, 0x4d, 0x6f, 0x64, 0x65, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0xaa, 0x97,
	0x22, 0x49, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x45, 0x54, 0x46,
	0x32, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x0b, 0x54, 0x46, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x44, 0x42, 0x54, 0xa2, 0x97, 0x22, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0xaa, 0x97, 0x22, 0x3f, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x4c,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x16, 0xa2, 0x97, 0x22, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x56, 0x61, 0x72, 0x73, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0c,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x16, 0xa2, 0x97, 0x22, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x56, 0x61, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x66, 0x2e, 0x45, 0x54, 0x46, 0x32, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x12, 0xa2, 0x97, 0x22, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x03,
	0x41, 0x4e, 0x44, 0x42, 0x59, 0xa2, 0x97, 0x22, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0xaa, 0x97, 0x22, 0x42, 0x57, 0x68, 0x61, 0x74,
	0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x6a,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x4d, 0xa2, 0x97, 0x22, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0xaa, 0x97, 0x22,
	0x2f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x62, 0x65, 0x20, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x6c, 0x6f, 0x74, 0x2e,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x03, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0xa2, 0x97, 0x22, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0xaa, 0x97, 0x22, 0x3d, 0x57, 0x68, 0x61, 0x74, 0x20,
	0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x20, 0x74, 0x6f,
	0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x27,
	0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x12, 0x61, 0x0a, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x42, 0xa2, 0x97, 0x22, 0x0a, 0x4a, 0x75, 0x6d,
	0x70, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0xaa, 0x97, 0x22, 0x30, 0x57, 0x68, 0x61, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6a, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x2e, 0x52, 0x09, 0x6a, 0x75, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x04, 0x0a, 0x0d, 0x45, 0x54, 0x46, 0x32, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x43, 0x54, 0x46, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4b, 0x6f, 0x74, 0x68,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x43, 0x50, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x63, 0x65, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x78,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x53, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x79, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x34, 0x37, 0x10,
	0x09, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x19,
	0x0a, 0x15, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x10,
	0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4d, 0x69, 0x73, 0x63, 0x10, 0x10, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x36, 0x76, 0x36, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x65, 0x6e, 0x10, 0x13, 0x22, 0x92, 0x1e, 0x0a, 0x0e, 0x45, 0x54, 0x46, 0x32, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x5a, 0x4f, 0x4f, 0x4d, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x53,
	0x47, 0x55, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x47, 0x55, 0x49, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x23, 0x0a, 0x1f, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x4f,
	0x46, 0x46, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x09, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x4d, 0x50, 0x44, 0x41, 0x4d, 0x41, 0x47,
	0x45, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10,
	0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x11, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x13, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x48,
	0x45, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x15, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x48, 0x45, 0x41, 0x4c, 0x45, 0x44,
	0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x55, 0x52,
	0x49, 0x4e, 0x45, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x4d, 0x41, 0x44, 0x5f, 0x4d, 0x49, 0x4c, 0x4b, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x46,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x47, 0x41, 0x48, 0x45, 0x41, 0x4c, 0x10, 0x1c,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x45,
	0x4e, 0x4f, 0x4e, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1d, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x44, 0x46, 0x4f, 0x52, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x48, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x42, 0x4f,
	0x4f, 0x53, 0x54, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x4d,
	0x50, 0x4b, 0x49, 0x4e, 0x10, 0x21, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x22, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44,
	0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x23, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x44, 0x41, 0x50, 0x4f,
	0x50, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x59, 0x50, 0x45, 0x10, 0x24, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x10, 0x25,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x26, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x54, 0x46, 0x5f,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x27, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x46,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x4c, 0x45, 0x45, 0x10, 0x29,
	0x12, 0x25, 0x0a, 0x21, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x45,
	0x4e, 0x53, 0x45, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x2a, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x45, 0x44, 0x10,
	0x2b, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x2c, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x2d, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x4e,
	0x49, 0x50, 0x45, 0x52, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x10, 0x2e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x44, 0x49, 0x53, 0x47, 0x55, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x49,
	0x4e, 0x47, 0x4f, 0x46, 0x46, 0x10, 0x2f, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x46, 0x4f, 0x52, 0x44, 0x45, 0x41, 0x54,
	0x48, 0x5f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x30, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x47, 0x55, 0x49, 0x53, 0x45, 0x44, 0x5f,
	0x41, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x52, 0x10, 0x31, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x41, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x32, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x49, 0x4e,
	0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x44, 0x10, 0x33,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x34, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x4f, 0x4d, 0x42, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x10, 0x35, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x49, 0x4c,
	0x4c, 0x45, 0x52, 0x10, 0x36, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x37, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x38, 0x12, 0x24, 0x0a, 0x20,
	0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x10, 0x39, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x47, 0x55, 0x4e, 0x5f, 0x55, 0x42, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x3a, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x46,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x47, 0x55, 0x4e, 0x5f, 0x55, 0x42,
	0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10,
	0x3b, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x47, 0x55, 0x4e, 0x5f, 0x55, 0x42, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x3c, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x47, 0x55, 0x4e, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x3d,
	0x12, 0x26, 0x0a, 0x22, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x47, 0x55, 0x4e, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x3e, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x46, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x47, 0x55, 0x4e, 0x5f, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x3f, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x40,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x47, 0x55, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x41, 0x12, 0x26, 0x0a, 0x22,
	0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x45,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x46, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x42, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x42, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x45, 0x10, 0x43, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x45, 0x10, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x45,
	0x10, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x46, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x56, 0x4d, 0x5f, 0x42, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x55, 0x4e, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x57, 0x41, 0x56, 0x45, 0x10,
	0x47, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x48, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x10, 0x49, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x47, 0x49, 0x41, 0x4e,
	0x54, 0x10, 0x4a, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x54, 0x49, 0x4e, 0x59, 0x10, 0x4b, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0x4c, 0x12, 0x20,
	0x0a, 0x1c, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x45, 0x4e, 0x5f, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x4d,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x49,
	0x43, 0x52, 0x49, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x5f, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x4e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x4f, 0x42, 0x53, 0x43, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x45, 0x10,
	0x4f, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x43, 0x48, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x50, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x53, 0x54,
	0x4a, 0x55, 0x4d, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x51, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x4b,
	0x41, 0x52, 0x54, 0x10, 0x52, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x4b, 0x41, 0x52, 0x54, 0x5f,
	0x44, 0x41, 0x53, 0x48, 0x10, 0x53, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x54,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x4c, 0x45,
	0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x55, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x52,
	0x53, 0x45, 0x10, 0x56, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x57, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x45, 0x4e, 0x5f, 0x4b, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x47, 0x45, 0x10, 0x58, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x4f, 0x54,
	0x55, 0x53, 0x45, 0x5f, 0x30, 0x10, 0x59, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x10, 0x5a, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55,
	0x4e, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x54, 0x45, 0x10, 0x5b, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x46,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e,
	0x10, 0x5c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55,
	0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x5d, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x56, 0x41, 0x4d, 0x50,
	0x49, 0x52, 0x45, 0x10, 0x5e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x5f, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x60, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x61, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x47, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x62,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x4e, 0x47, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x46, 0x41,
	0x4c, 0x4c, 0x10, 0x63, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x47, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x4c, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x48, 0x4f, 0x4f, 0x4b,
	0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x42, 0x55, 0x52, 0x4e,
	0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x45, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x4b, 0x4e, 0x4f, 0x43, 0x4b, 0x4f,
	0x55, 0x54, 0x10, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x52, 0x55, 0x4e, 0x45, 0x5f, 0x49, 0x4d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x68,
	0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x10, 0x69, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x53, 0x10, 0x6b, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x50, 0x55, 0x52, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x6c, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x47, 0x55, 0x45, 0x10, 0x6e, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x4e, 0x4f, 0x56, 0x41, 0x10, 0x6f, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x46,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x47, 0x55, 0x45, 0x10, 0x70, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x44, 0x10, 0x71, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x57, 0x53, 0x10, 0x72, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4b, 0x4e, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x73, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x74, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x52, 0x10, 0x75, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x76, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x46, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x41, 0x4c, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x77, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x43, 0x48, 0x55,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x78, 0x12, 0x21, 0x0a,
	0x1d, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x42,
	0x41, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x79,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x51, 0x5f, 0x53, 0x50, 0x59, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x7a, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x51, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x7b, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x7e, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10,
	0x7f, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x80, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x50, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x81, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54,
	0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x50, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x10, 0x82, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x47, 0x41, 0x53, 0x10, 0x83, 0x01, 0x22, 0x2d, 0x0a, 0x08, 0x45,
	0x54, 0x46, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x46, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x46, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x22, 0x9c, 0x09, 0x0a, 0x0c, 0x43,
	0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x12, 0x2b, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x30, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x31, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x12, 0x29,
	0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x97, 0x22, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x6f, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x6d, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x2e, 0x4d, 0x4d, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0a, 0x6d, 0x6d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x5f, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xa2, 0x97, 0x22, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0xaa, 0x97, 0x22, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x76, 0x69, 0x65, 0x77, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xa2, 0x97, 0x22, 0x09, 0x4e, 0x6f, 0x64,
	0x65, 0x20, 0x49, 0x63, 0x6f, 0x6e, 0xaa, 0x97, 0x22, 0x1d, 0x57, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x69, 0x63, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x70, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66,
	0x49, 0x44, 0x42, 0x04, 0x80, 0x97, 0x22, 0x02, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30, 0xa2, 0x97, 0x22, 0x07, 0x4c, 0x6f, 0x61, 0x6e, 0x65,
	0x72, 0x73, 0xaa, 0x97, 0x22, 0x21, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x69, 0x76, 0x65, 0x20, 0x61, 0x73, 0x20,
	0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x58, 0xa2, 0x97, 0x22, 0x0d, 0x4d, 0x61, 0x70, 0x73, 0x20, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0xaa, 0x97, 0x22, 0x43, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x70, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x1a, 0x6b, 0x0a, 0x0a, 0x4d, 0x4d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa8,
	0x02, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x04, 0x80, 0x97, 0x22, 0x05, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x13, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43,
	0x45, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x79, 0xa2, 0x97, 0x22, 0x0f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0xaa, 0x97, 0x22, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x20,
	0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x75, 0x73, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x27,
	0x73, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x15, 0x43, 0x4d,
	0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a,
	0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xa2, 0x97, 0x22,
	0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0xaa, 0x97, 0x22, 0x2c, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x06, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x68, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x41, 0xa2, 0x97, 0x22, 0x0e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0xaa, 0x97, 0x22, 0x2b, 0x48,
	0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0xa2,
	0x97, 0x22, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xaa, 0x97, 0x22,
	0x27, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6c, 0x68, 0x70, 0x61, 0x62,
	0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xbd, 0x06, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x97, 0x22, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x7f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x4d, 0x80,
	0x97, 0x22, 0x03, 0xa2, 0x97, 0x22, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4c, 0x69,
	0x6e, 0x6b, 0xaa, 0x97, 0x22, 0x36, 0x57, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x20, 0x77, 0x65, 0x20, 0x67, 0x6f, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x2d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x7a, 0x0a, 0x0a, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x5b, 0xa2, 0x97,
	0x22, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x20, 0x46, 0x72, 0x65, 0x71, 0x2e, 0xaa, 0x97, 0x22,
	0x48, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x20, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x20, 0x67, 0x6f, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x43, 0x59, 0x4f, 0x41, 0x20, 0x50, 0x44, 0x41, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x46, 0x72, 0x65, 0x71, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x79, 0xa2, 0x97, 0x22, 0x0a, 0x5a,
	0x6f, 0x6f, 0x6d, 0x20, 0x53, 0x63, 0x61, 0x6c, 0x65, 0xaa, 0x97, 0x22, 0x67, 0x48, 0x6f, 0x77,
	0x20, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x2e,
	0x20, 0x20, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x70, 0x20, 0x67,
	0x72, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x64, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x75, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65,
	0x66, 0x49, 0x44, 0x42, 0x47, 0x80, 0x97, 0x22, 0x0c, 0xa2, 0x97, 0x22, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x20, 0x54, 0x79, 0x70, 0x65, 0xaa, 0x97, 0x22, 0x32, 0x57, 0x68, 0x61, 0x74, 0x20, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x20, 0x28, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x29, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x7b, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66,
	0x49, 0x44, 0x42, 0x04, 0x80, 0x97, 0x22, 0x03, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x78,
	0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x78, 0x70, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79,
	0x70, 0x6f, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x97, 0x22, 0x01, 0x52, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x90, 0x97,
	0x22, 0x01, 0xa2, 0x97, 0x22, 0x09, 0x54, 0x79, 0x70, 0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x0a, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x90, 0x97, 0x22, 0x01, 0xa2, 0x97, 0x22, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x20,
	0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x97, 0x22, 0x15, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x78,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2c, 0xa2, 0x97, 0x22, 0x09,
	0x4d, 0x61, 0x70, 0x20, 0x58, 0x20, 0x50, 0x6f, 0x73, 0xaa, 0x97, 0x22, 0x1b, 0x58, 0x20, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x70, 0x52, 0x04, 0x78, 0x50, 0x6f, 0x73, 0x12, 0x41,
	0x0a, 0x05, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2c, 0xa2,
	0x97, 0x22, 0x09, 0x4d, 0x61, 0x70, 0x20, 0x59, 0x20, 0x50, 0x6f, 0x73, 0xaa, 0x97, 0x22, 0x1b,
	0x59, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x70, 0x52, 0x04, 0x79, 0x50, 0x6f,
	0x73, 0x12, 0x7f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x45, 0xa2, 0x97, 0x22, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0xaa, 0x97, 0x22, 0x33, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x43,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x3f, 0x80, 0x97, 0x22, 0x03,
	0xa2, 0x97, 0x22, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xaa, 0x97, 0x22, 0x2d, 0x57, 0x68,
	0x69, 0x63, 0x68, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x61, 0x70, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20,
	0x73, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x75, 0x70, 0x20, 0x69, 0x6e, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49,
	0x44, 0x42, 0x3c, 0x80, 0x97, 0x22, 0x04, 0xa2, 0x97, 0x22, 0x0e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0xaa, 0x97, 0x22, 0x1e, 0x57, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2e, 0xb8, 0x97, 0x22, 0x03, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a,
	0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xa2, 0x97, 0x22,
	0x14, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xaa, 0x97, 0x22, 0x26, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x52,
	0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0xa2, 0x97, 0x22, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x49, 0x74, 0x65, 0x6d, 0xaa,
	0x97, 0x22, 0x27, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x69, 0x76, 0x65, 0x20, 0x61,
	0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xa2, 0x97, 0x22, 0x0f, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0xaa, 0x97, 0x22,
	0x2c, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x6f, 0x6c,
	0x6c, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x45, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x3a, 0x10, 0x43, 0x41, 0x53, 0x48, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x42, 0x4e, 0xa2, 0x97, 0x22,
	0x0b, 0x43, 0x61, 0x73, 0x68, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0xaa, 0x97, 0x22, 0x3b,
	0x48, 0x6f, 0x77, 0x20, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x63, 0x61, 0x73, 0x68, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x64, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x36, 0x80, 0x97, 0x22,
	0x0c, 0xa2, 0x97, 0x22, 0x09, 0x53, 0x74, 0x61, 0x72, 0x20, 0x54, 0x79, 0x70, 0x65, 0xaa, 0x97,
	0x22, 0x21, 0x57, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x42, 0x3a, 0xa2, 0x97, 0x22, 0x0f, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0xaa, 0x97,
	0x22, 0x23, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x20, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x45, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x91, 0x05, 0x0a, 0x23,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0,
	0x97, 0x22, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x75, 0x65,
	0x12, 0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04,
	0xf0, 0x97, 0x22, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d,
	0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x55, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x75, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x07,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x76, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x70, 0x5f,
	0x75, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x05, 0x66, 0x6c,
	0x69, 0x70, 0x55, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x70, 0x5f, 0x76, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x69, 0x70, 0x56, 0x22,
	0xb8, 0x04, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74,
	0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97,
	0x22, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x38, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04,
	0xf0, 0x97, 0x22, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d,
	0x61, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97,
	0x22, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x76, 0x12, 0x2a,
	0x0a, 0x06, 0x66, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0,
	0x97, 0x22, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x69, 0x70, 0x55, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6c,
	0x69, 0x70, 0x5f, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52,
	0x05, 0x66, 0x6c, 0x69, 0x70, 0x56, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x08, 0xb8,
	0x97, 0x22, 0x10, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22,
	0xfa, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74,
	0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x5d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x3a, 0xaa, 0x97, 0x22, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x20, 0x28, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x29, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x34, 0xaa, 0x97, 0x22, 0x2c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x20, 0x6c, 0x69, 0x6b,
	0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x9b,
	0x01, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x78, 0xaa, 0x97,
	0x22, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20,
	0x69, 0x66, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x20, 0x77, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2b, 0x20, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x20, 0x2b, 0x20, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xd8, 0x03, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x74, 0x54, 0x6c, 0x12, 0x2c, 0x0a,
	0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0,
	0x97, 0x22, 0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x74, 0x54, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04,
	0xf0, 0x97, 0x22, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x04, 0xf0, 0x97, 0x22, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x47, 0x61,
	0x6d, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x12,
	0x49, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x72, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x72, 0x70, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b,
	0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x65, 0x66, 0x49, 0x44, 0x42, 0x08, 0x80, 0x97, 0x22, 0x07, 0xe0, 0x97, 0x22, 0x01, 0x48, 0x00,
	0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x65, 0x66, 0x49, 0x44, 0x42, 0x08, 0x80, 0x97, 0x22, 0x06, 0xe0, 0x97, 0x22, 0x01, 0x52, 0x10,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x4b, 0x69, 0x74, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xb8,
	0x97, 0x22, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x8b, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x04, 0x80, 0x97, 0x22,
	0x07, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0c, 0xc0, 0x97, 0x22, 0x00, 0xc8, 0x97, 0x22, 0x00, 0xf0,
	0x97, 0x22, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa3, 0x1c,
	0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90,
	0x97, 0x22, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x44, 0x65, 0x73, 0x63, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42,
	0x85, 0x01, 0x80, 0x97, 0x22, 0x07, 0xaa, 0x97, 0x22, 0x79, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x27, 0x73,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0xe0, 0x97, 0x22, 0x01, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x61, 0x69,
	0x6e, 0x74, 0x6b, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0c, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x41, 0x0a,
	0x0c, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b,
	0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x0f, 0x67, 0x72, 0x65, 0x6e, 0x61, 0x64, 0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x67, 0x72, 0x65, 0x6e, 0x61, 0x64,
	0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x6b, 0x6e, 0x69,
	0x66, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6b, 0x6e, 0x69, 0x66, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x67, 0x75, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x6d, 0x65, 0x64, 0x69, 0x67, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x67,
	0x75, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x75, 0x6e,
	0x12, 0x35, 0x0a, 0x06, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x72, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x67, 0x75, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x67, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x74,
	0x67, 0x75, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x67, 0x75,
	0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x73, 0x6d, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x73,
	0x6d, 0x67, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x72, 0x69, 0x66, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x72, 0x69,
	0x66, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x62, 0x6f, 0x6d,
	0x62, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x12, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x62, 0x6f, 0x6d, 0x62, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x62, 0x65, 0x72, 0x73, 0x61, 0x77, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x75, 0x62, 0x65, 0x72, 0x73, 0x61, 0x77, 0x12, 0x35, 0x0a, 0x06,
	0x77, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x77, 0x72, 0x65,
	0x6e, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69,
	0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x42, 0x0a, 0x0d, 0x61, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x61, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x53, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x61, 0x78, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x61, 0x78, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x62, 0x61, 0x7a, 0x61, 0x61,
	0x72, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x62,
	0x61, 0x7a, 0x61, 0x61, 0x72, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x64, 0x68,
	0x65, 0x61, 0x6d, 0x6f, 0x68, 0x6d, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x69, 0x64, 0x68, 0x65, 0x61, 0x6d, 0x6f, 0x68, 0x6d, 0x6f, 0x72, 0x12, 0x4c, 0x0a,
	0x12, 0x63, 0x72, 0x75, 0x73, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x62, 0x6f, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x63, 0x72, 0x75, 0x73, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x62, 0x6f, 0x77, 0x12, 0x3b, 0x0a, 0x09, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x61, 0x73, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x6d, 0x6f,
	0x5f, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x64, 0x65,
	0x6d, 0x6f, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x11, 0x64, 0x65, 0x6d, 0x6f,
	0x5f, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x6e, 0x5f, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b,
	0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x64, 0x65, 0x6d, 0x6f, 0x53, 0x75, 0x6c, 0x74, 0x61, 0x6e, 0x53, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69,
	0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x65, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x75, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x6e,
	0x12, 0x41, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x79, 0x6d, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x65, 0x6c,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69,
	0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x79, 0x6d, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x03, 0x6a, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x68, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x68, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6a, 0x61, 0x63, 0x6b, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6a, 0x61, 0x63, 0x6b, 0x12, 0x39,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69,
	0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x6f, 0x70,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69,
	0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x6f,
	0x70, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x69, 0x6f,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x72, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x52,
	0x69, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x63, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x72, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x73, 0x63, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x72, 0x12, 0x3e,
	0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b,
	0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x63, 0x68, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x3b,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74,
	0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x73,
	0x6f, 0x64, 0x61, 0x5f, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x73, 0x6f, 0x64, 0x61, 0x50, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x74,
	0x65, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x67, 0x75, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74,
	0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x67, 0x75, 0x6e, 0x12, 0x39, 0x0a,
	0x08, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x6c, 0x61, 0x76, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x74, 0x6f, 0x6d, 0x69, 0x73, 0x6c, 0x61, 0x76, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x6e,
	0x63, 0x68, 0x67, 0x75, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x65, 0x6e,
	0x63, 0x68, 0x67, 0x75, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x77, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x1a, 0xe7, 0x02, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x76, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x2b, 0x80, 0x97, 0x22, 0x08, 0xd2, 0x97, 0x22, 0x23, 0x43,
	0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa4, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50,
	0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0c, 0xc0, 0x97, 0x22, 0x00, 0xc8, 0x97, 0x22, 0x00, 0xf0,
	0x97, 0x22, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x04, 0x80,
	0x88, 0x27, 0x00, 0x22, 0xb1, 0x05, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x67, 0x69, 0x76,
	0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x40, 0x0a, 0x0e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x5e, 0x0a, 0x11, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x10,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x99, 0x01, 0x0a, 0x19, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x42, 0x5a, 0xa2, 0x97, 0x22, 0x0e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0xaa, 0x97, 0x22, 0x44, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x20, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x2c, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x49, 0x44, 0x42, 0x50, 0x80, 0x97, 0x22, 0x00, 0xa2, 0x97,
	0x22, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0xaa, 0x97, 0x22,
	0x39, 0x57, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x73, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x1f,
	0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12,
	0x54, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x03, 0x41, 0x4e, 0x44, 0x42, 0x1e, 0xa2, 0x97, 0x22, 0x05,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0xaa, 0x97, 0x22, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0xa2, 0x97, 0x22, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0xaa, 0x97, 0x22, 0x2b, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x5b,
	0xa2, 0x97, 0x22, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xaa, 0x97, 0x22, 0x3f, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x55, 0xa2, 0x97,
	0x22, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0xaa, 0x97, 0x22, 0x3c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20,
	0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x75, 0x62, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0e, 0x43,
	0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2a, 0x2c, 0x0a, 0x10, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x16, 0x45, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x81, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x49,
	0x4e, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10,
	0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x49, 0x4e, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x49, 0x4e, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x4e, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x2a, 0x5b, 0x0a, 0x0c, 0x45, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x53, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x45, 0x52, 0x54, 0x10, 0x02, 0x2a, 0xca, 0x01, 0x0a, 0x0d, 0x45, 0x56, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x08, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x09, 0x2a, 0x6d, 0x0a, 0x0f, 0x45, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x53, 0x48, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4d, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x52, 0x47,
	0x45, 0x10, 0x04, 0x3a, 0x4e, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x80, 0xf1, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x3a, 0x67, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x17, 0x44, 0x45, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x0a, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf1, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x44, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0xa2, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x4c, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf3, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x3a, 0x42, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xf4, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xf5, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x3a, 0x3c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf7,
	0xa2, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x42, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf8, 0xa2, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x64, 0x64, 0x3a, 0x48, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xf9, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x51,
	0x0a, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfa, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x3a, 0x6d, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x68, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfb, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x68, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x66, 0x0a, 0x1b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc,
	0xa2, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x52, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfd, 0xa2, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x3a, 0x67, 0x0a, 0x0e,
	0x76, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfe, 0xa2,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x56, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x56, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x52, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xff, 0xa2, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_tf_proto_def_messages_proto_rawDescOnce sync.Once
	file_tf_proto_def_messages_proto_rawDescData = file_tf_proto_def_messages_proto_rawDesc
)

func file_tf_proto_def_messages_proto_rawDescGZIP() []byte {
	file_tf_proto_def_messages_proto_rawDescOnce.Do(func() {
		file_tf_proto_def_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_tf_proto_def_messages_proto_rawDescData)
	})
	return file_tf_proto_def_messages_proto_rawDescData
}

var file_tf_proto_def_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_tf_proto_def_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_tf_proto_def_messages_proto_goTypes = []any{
	(LogicalOperation)(0),                          // 0: LogicalOperation
	(EValueDefinitionSource)(0),                    // 1: EValueDefinitionSource
	(ProtoDefTypes)(0),                             // 2: ProtoDefTypes
	(EQuestPoints)(0),                              // 3: EQuestPoints
	(EVarFieldType)(0),                             // 4: EVarFieldType
	(ENodeCashReward)(0),                           // 5: ENodeCashReward
	(CMsgQuestObjectiveDef_ETF2GameModes)(0),       // 6: CMsgQuestObjectiveDef.ETF2GameModes
	(CMsgQuestObjectiveDef_ETF2Conditions)(0),      // 7: CMsgQuestObjectiveDef.ETF2Conditions
	(CMsgQuestObjectiveDef_ETF2Team)(0),            // 8: CMsgQuestObjectiveDef.ETF2Team
	(*CMsgFieldID)(nil),                            // 9: CMsgFieldID
	(*CMsgUniversalFieldID)(nil),                   // 10: CMsgUniversalFieldID
	(*CMsgVariableDefinition)(nil),                 // 11: CMsgVariableDefinition
	(*CMsgProtoDefHeader)(nil),                     // 12: CMsgProtoDefHeader
	(*CMsgValidTypes)(nil),                         // 13: CMsgValidTypes
	(*CMsgProtoDefID)(nil),                         // 14: CMsgProtoDefID
	(*CMsgQuestObjectiveDef)(nil),                  // 15: CMsgQuestObjectiveDef
	(*CMsgQuestDef)(nil),                           // 16: CMsgQuestDef
	(*CMsgQuestMapStoreItem)(nil),                  // 17: CMsgQuestMapStoreItem
	(*CMsgQuestMapRegionDef)(nil),                  // 18: CMsgQuestMapRegionDef
	(*CMsgVarField)(nil),                           // 19: CMsgVarField
	(*CMsgQuestMapStarType)(nil),                   // 20: CMsgQuestMapStarType
	(*CMsgQuestMapNodeDef)(nil),                    // 21: CMsgQuestMapNodeDef
	(*CMsgPaintKit_Variables)(nil),                 // 22: CMsgPaintKit_Variables
	(*CMsgPaintKit_Operation_TextureStage)(nil),    // 23: CMsgPaintKit_Operation_TextureStage
	(*CMsgPaintKit_Operation_CombineStage)(nil),    // 24: CMsgPaintKit_Operation_CombineStage
	(*CMsgPaintKit_Operation_SelectStage)(nil),     // 25: CMsgPaintKit_Operation_SelectStage
	(*CMsgPaintKit_Operation_Sticker)(nil),         // 26: CMsgPaintKit_Operation_Sticker
	(*CMsgPaintKit_Operation_StickerStage)(nil),    // 27: CMsgPaintKit_Operation_StickerStage
	(*CMsgPaintKit_OperationStage)(nil),            // 28: CMsgPaintKit_OperationStage
	(*CMsgPaintKit_OperationNode)(nil),             // 29: CMsgPaintKit_OperationNode
	(*CMsgPaintKit_Operation)(nil),                 // 30: CMsgPaintKit_Operation
	(*CMsgPaintKit_ItemDefinition)(nil),            // 31: CMsgPaintKit_ItemDefinition
	(*CMsgPaintKit_Definition)(nil),                // 32: CMsgPaintKit_Definition
	(*CMsgQuestTheme)(nil),                         // 33: CMsgQuestTheme
	(*CMsgQuestMapNodeCondition_NodeState)(nil),    // 34: CMsgQuestMapNodeCondition_NodeState
	(*CMsgQuestMapNodeCondition_Logic)(nil),        // 35: CMsgQuestMapNodeCondition_Logic
	(*CMsgQuestMapNodeCondition)(nil),              // 36: CMsgQuestMapNodeCondition
	(*CMsgHeaderOnly)(nil),                         // 37: CMsgHeaderOnly
	(*CMsgFieldID_CMsgField)(nil),                  // 38: CMsgFieldID.CMsgField
	(*CMsgQuestDef_MMCriteria)(nil),                // 39: CMsgQuestDef.MMCriteria
	(*CMsgQuestDef_ObjectiveInstance)(nil),         // 40: CMsgQuestDef.ObjectiveInstance
	(*CMsgQuestMapRegionDef_RegionLink)(nil),       // 41: CMsgQuestMapRegionDef.RegionLink
	(*CMsgPaintKit_ItemDefinition_Definition)(nil), // 42: CMsgPaintKit_ItemDefinition.Definition
	(*CMsgPaintKit_Definition_Item)(nil),           // 43: CMsgPaintKit_Definition.Item
	(*CMsgPaintKit_Definition_Item_ItemData)(nil),  // 44: CMsgPaintKit_Definition.Item.ItemData
	(*CMsgQuestTheme_WeightedString)(nil),          // 45: CMsgQuestTheme.WeightedString
	(*CMsgQuestTheme_WeightedStringSet)(nil),       // 46: CMsgQuestTheme.WeightedStringSet
	(*descriptorpb.MessageOptions)(nil),            // 47: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),              // 48: google.protobuf.FieldOptions
}
var file_tf_proto_def_messages_proto_depIdxs = []int32{
	38,  // 0: CMsgFieldID.field:type_name -> CMsgFieldID.CMsgField
	1,   // 1: CMsgUniversalFieldID.source_type:type_name -> EValueDefinitionSource
	14,  // 2: CMsgUniversalFieldID.defining_obj_id:type_name -> CMsgProtoDefID
	9,   // 3: CMsgUniversalFieldID.field_id:type_name -> CMsgFieldID
	14,  // 4: CMsgProtoDefHeader.prefabs:type_name -> CMsgProtoDefID
	11,  // 5: CMsgProtoDefHeader.variables:type_name -> CMsgVariableDefinition
	2,   // 6: CMsgValidTypes.types:type_name -> ProtoDefTypes
	2,   // 7: CMsgProtoDefID.type:type_name -> ProtoDefTypes
	21,  // 8: CMsgProtoDefID.instance_def_type_quest_map_node:type_name -> CMsgQuestMapNodeDef
	33,  // 9: CMsgProtoDefID.instance_def_type_quest_theme:type_name -> CMsgQuestTheme
	18,  // 10: CMsgProtoDefID.instance_def_type_quest_map_region:type_name -> CMsgQuestMapRegionDef
	16,  // 11: CMsgProtoDefID.instance_def_type_quest:type_name -> CMsgQuestDef
	15,  // 12: CMsgProtoDefID.instance_def_type_quest_objective:type_name -> CMsgQuestObjectiveDef
	22,  // 13: CMsgProtoDefID.instance_def_type_paintkit_variables:type_name -> CMsgPaintKit_Variables
	30,  // 14: CMsgProtoDefID.instance_def_type_paintkit_operation:type_name -> CMsgPaintKit_Operation
	31,  // 15: CMsgProtoDefID.instance_def_type_paintkit_item_definition:type_name -> CMsgPaintKit_ItemDefinition
	32,  // 16: CMsgProtoDefID.instance_def_type_paintkit_definition:type_name -> CMsgPaintKit_Definition
	37,  // 17: CMsgProtoDefID.instance_def_type_header_only:type_name -> CMsgHeaderOnly
	12,  // 18: CMsgQuestObjectiveDef.header:type_name -> CMsgProtoDefHeader
	6,   // 19: CMsgQuestObjectiveDef.game_mode:type_name -> CMsgQuestObjectiveDef.ETF2GameModes
	8,   // 20: CMsgQuestObjectiveDef.team:type_name -> CMsgQuestObjectiveDef.ETF2Team
	19,  // 21: CMsgQuestObjectiveDef.condition_vars:type_name -> CMsgVarField
	19,  // 22: CMsgQuestObjectiveDef.classes_vars:type_name -> CMsgVarField
	7,   // 23: CMsgQuestObjectiveDef.conditions:type_name -> CMsgQuestObjectiveDef.ETF2Conditions
	0,   // 24: CMsgQuestObjectiveDef.condition_logic:type_name -> LogicalOperation
	0,   // 25: CMsgQuestObjectiveDef.item_logic:type_name -> LogicalOperation
	12,  // 26: CMsgQuestDef.header:type_name -> CMsgProtoDefHeader
	39,  // 27: CMsgQuestDef.mm_criteria:type_name -> CMsgQuestDef.MMCriteria
	14,  // 28: CMsgQuestDef.theme:type_name -> CMsgProtoDefID
	40,  // 29: CMsgQuestDef.objectives:type_name -> CMsgQuestDef.ObjectiveInstance
	12,  // 30: CMsgQuestMapStoreItem.header:type_name -> CMsgProtoDefHeader
	19,  // 31: CMsgQuestMapStoreItem.price:type_name -> CMsgVarField
	12,  // 32: CMsgQuestMapRegionDef.header:type_name -> CMsgProtoDefHeader
	41,  // 33: CMsgQuestMapRegionDef.links:type_name -> CMsgQuestMapRegionDef.RegionLink
	14,  // 34: CMsgQuestMapRegionDef.return_link:type_name -> CMsgProtoDefID
	14,  // 35: CMsgQuestMapRegionDef.star_type:type_name -> CMsgProtoDefID
	12,  // 36: CMsgQuestMapStarType.header:type_name -> CMsgProtoDefHeader
	12,  // 37: CMsgQuestMapNodeDef.header:type_name -> CMsgProtoDefHeader
	36,  // 38: CMsgQuestMapNodeDef.condition:type_name -> CMsgQuestMapNodeCondition
	14,  // 39: CMsgQuestMapNodeDef.owning_region:type_name -> CMsgProtoDefID
	14,  // 40: CMsgQuestMapNodeDef.quest_options:type_name -> CMsgProtoDefID
	5,   // 41: CMsgQuestMapNodeDef.cash_reward:type_name -> ENodeCashReward
	14,  // 42: CMsgQuestMapNodeDef.star_type:type_name -> CMsgProtoDefID
	12,  // 43: CMsgPaintKit_Variables.header:type_name -> CMsgProtoDefHeader
	19,  // 44: CMsgPaintKit_Operation_TextureStage.texture:type_name -> CMsgVarField
	19,  // 45: CMsgPaintKit_Operation_TextureStage.texture_red:type_name -> CMsgVarField
	19,  // 46: CMsgPaintKit_Operation_TextureStage.texture_blue:type_name -> CMsgVarField
	19,  // 47: CMsgPaintKit_Operation_TextureStage.adjust_black:type_name -> CMsgVarField
	19,  // 48: CMsgPaintKit_Operation_TextureStage.adjust_offset:type_name -> CMsgVarField
	19,  // 49: CMsgPaintKit_Operation_TextureStage.adjust_gamma:type_name -> CMsgVarField
	19,  // 50: CMsgPaintKit_Operation_TextureStage.rotation:type_name -> CMsgVarField
	19,  // 51: CMsgPaintKit_Operation_TextureStage.translate_u:type_name -> CMsgVarField
	19,  // 52: CMsgPaintKit_Operation_TextureStage.translate_v:type_name -> CMsgVarField
	19,  // 53: CMsgPaintKit_Operation_TextureStage.scale_uv:type_name -> CMsgVarField
	19,  // 54: CMsgPaintKit_Operation_TextureStage.flip_u:type_name -> CMsgVarField
	19,  // 55: CMsgPaintKit_Operation_TextureStage.flip_v:type_name -> CMsgVarField
	19,  // 56: CMsgPaintKit_Operation_CombineStage.adjust_black:type_name -> CMsgVarField
	19,  // 57: CMsgPaintKit_Operation_CombineStage.adjust_offset:type_name -> CMsgVarField
	19,  // 58: CMsgPaintKit_Operation_CombineStage.adjust_gamma:type_name -> CMsgVarField
	19,  // 59: CMsgPaintKit_Operation_CombineStage.rotation:type_name -> CMsgVarField
	19,  // 60: CMsgPaintKit_Operation_CombineStage.translate_u:type_name -> CMsgVarField
	19,  // 61: CMsgPaintKit_Operation_CombineStage.translate_v:type_name -> CMsgVarField
	19,  // 62: CMsgPaintKit_Operation_CombineStage.scale_uv:type_name -> CMsgVarField
	19,  // 63: CMsgPaintKit_Operation_CombineStage.flip_u:type_name -> CMsgVarField
	19,  // 64: CMsgPaintKit_Operation_CombineStage.flip_v:type_name -> CMsgVarField
	29,  // 65: CMsgPaintKit_Operation_CombineStage.operation_node:type_name -> CMsgPaintKit_OperationNode
	19,  // 66: CMsgPaintKit_Operation_SelectStage.groups:type_name -> CMsgVarField
	19,  // 67: CMsgPaintKit_Operation_SelectStage.select:type_name -> CMsgVarField
	19,  // 68: CMsgPaintKit_Operation_Sticker.base:type_name -> CMsgVarField
	19,  // 69: CMsgPaintKit_Operation_Sticker.weight:type_name -> CMsgVarField
	19,  // 70: CMsgPaintKit_Operation_Sticker.spec:type_name -> CMsgVarField
	26,  // 71: CMsgPaintKit_Operation_StickerStage.sticker:type_name -> CMsgPaintKit_Operation_Sticker
	19,  // 72: CMsgPaintKit_Operation_StickerStage.dest_tl:type_name -> CMsgVarField
	19,  // 73: CMsgPaintKit_Operation_StickerStage.dest_tr:type_name -> CMsgVarField
	19,  // 74: CMsgPaintKit_Operation_StickerStage.dest_bl:type_name -> CMsgVarField
	19,  // 75: CMsgPaintKit_Operation_StickerStage.adjust_black:type_name -> CMsgVarField
	19,  // 76: CMsgPaintKit_Operation_StickerStage.adjust_offset:type_name -> CMsgVarField
	19,  // 77: CMsgPaintKit_Operation_StickerStage.adjust_gamma:type_name -> CMsgVarField
	29,  // 78: CMsgPaintKit_Operation_StickerStage.operation_node:type_name -> CMsgPaintKit_OperationNode
	23,  // 79: CMsgPaintKit_OperationStage.texture_lookup:type_name -> CMsgPaintKit_Operation_TextureStage
	24,  // 80: CMsgPaintKit_OperationStage.combine_add:type_name -> CMsgPaintKit_Operation_CombineStage
	24,  // 81: CMsgPaintKit_OperationStage.combine_lerp:type_name -> CMsgPaintKit_Operation_CombineStage
	24,  // 82: CMsgPaintKit_OperationStage.combine_multiply:type_name -> CMsgPaintKit_Operation_CombineStage
	25,  // 83: CMsgPaintKit_OperationStage.select:type_name -> CMsgPaintKit_Operation_SelectStage
	27,  // 84: CMsgPaintKit_OperationStage.apply_sticker:type_name -> CMsgPaintKit_Operation_StickerStage
	28,  // 85: CMsgPaintKit_OperationNode.stage:type_name -> CMsgPaintKit_OperationStage
	14,  // 86: CMsgPaintKit_OperationNode.operation_template:type_name -> CMsgProtoDefID
	12,  // 87: CMsgPaintKit_Operation.header:type_name -> CMsgProtoDefHeader
	29,  // 88: CMsgPaintKit_Operation.operation_node:type_name -> CMsgPaintKit_OperationNode
	12,  // 89: CMsgPaintKit_ItemDefinition.header:type_name -> CMsgProtoDefHeader
	14,  // 90: CMsgPaintKit_ItemDefinition.variable_template:type_name -> CMsgProtoDefID
	42,  // 91: CMsgPaintKit_ItemDefinition.definition:type_name -> CMsgPaintKit_ItemDefinition.Definition
	12,  // 92: CMsgPaintKit_Definition.header:type_name -> CMsgProtoDefHeader
	14,  // 93: CMsgPaintKit_Definition.operation_template:type_name -> CMsgProtoDefID
	43,  // 94: CMsgPaintKit_Definition.item:type_name -> CMsgPaintKit_Definition.Item
	43,  // 95: CMsgPaintKit_Definition.paintkit_tool:type_name -> CMsgPaintKit_Definition.Item
	43,  // 96: CMsgPaintKit_Definition.flamethrower:type_name -> CMsgPaintKit_Definition.Item
	43,  // 97: CMsgPaintKit_Definition.grenadelauncher:type_name -> CMsgPaintKit_Definition.Item
	43,  // 98: CMsgPaintKit_Definition.knife:type_name -> CMsgPaintKit_Definition.Item
	43,  // 99: CMsgPaintKit_Definition.medigun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 100: CMsgPaintKit_Definition.minigun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 101: CMsgPaintKit_Definition.pistol:type_name -> CMsgPaintKit_Definition.Item
	43,  // 102: CMsgPaintKit_Definition.revolver:type_name -> CMsgPaintKit_Definition.Item
	43,  // 103: CMsgPaintKit_Definition.rocketlauncher:type_name -> CMsgPaintKit_Definition.Item
	43,  // 104: CMsgPaintKit_Definition.scattergun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 105: CMsgPaintKit_Definition.shotgun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 106: CMsgPaintKit_Definition.smg:type_name -> CMsgPaintKit_Definition.Item
	43,  // 107: CMsgPaintKit_Definition.sniperrifle:type_name -> CMsgPaintKit_Definition.Item
	43,  // 108: CMsgPaintKit_Definition.stickybomb_launcher:type_name -> CMsgPaintKit_Definition.Item
	43,  // 109: CMsgPaintKit_Definition.ubersaw:type_name -> CMsgPaintKit_Definition.Item
	43,  // 110: CMsgPaintKit_Definition.wrench:type_name -> CMsgPaintKit_Definition.Item
	43,  // 111: CMsgPaintKit_Definition.amputator:type_name -> CMsgPaintKit_Definition.Item
	43,  // 112: CMsgPaintKit_Definition.atom_launcher:type_name -> CMsgPaintKit_Definition.Item
	43,  // 113: CMsgPaintKit_Definition.back_scratcher:type_name -> CMsgPaintKit_Definition.Item
	43,  // 114: CMsgPaintKit_Definition.battleaxe:type_name -> CMsgPaintKit_Definition.Item
	43,  // 115: CMsgPaintKit_Definition.bazaar_sniper:type_name -> CMsgPaintKit_Definition.Item
	43,  // 116: CMsgPaintKit_Definition.blackbox:type_name -> CMsgPaintKit_Definition.Item
	43,  // 117: CMsgPaintKit_Definition.claidheamohmor:type_name -> CMsgPaintKit_Definition.Item
	43,  // 118: CMsgPaintKit_Definition.crusaders_crossbow:type_name -> CMsgPaintKit_Definition.Item
	43,  // 119: CMsgPaintKit_Definition.degreaser:type_name -> CMsgPaintKit_Definition.Item
	43,  // 120: CMsgPaintKit_Definition.demo_cannon:type_name -> CMsgPaintKit_Definition.Item
	43,  // 121: CMsgPaintKit_Definition.demo_sultan_sword:type_name -> CMsgPaintKit_Definition.Item
	43,  // 122: CMsgPaintKit_Definition.detonator:type_name -> CMsgPaintKit_Definition.Item
	43,  // 123: CMsgPaintKit_Definition.gatling_gun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 124: CMsgPaintKit_Definition.holymackerel:type_name -> CMsgPaintKit_Definition.Item
	43,  // 125: CMsgPaintKit_Definition.jag:type_name -> CMsgPaintKit_Definition.Item
	43,  // 126: CMsgPaintKit_Definition.lochnload:type_name -> CMsgPaintKit_Definition.Item
	43,  // 127: CMsgPaintKit_Definition.powerjack:type_name -> CMsgPaintKit_Definition.Item
	43,  // 128: CMsgPaintKit_Definition.quadball:type_name -> CMsgPaintKit_Definition.Item
	43,  // 129: CMsgPaintKit_Definition.reserve_shooter:type_name -> CMsgPaintKit_Definition.Item
	43,  // 130: CMsgPaintKit_Definition.riding_crop:type_name -> CMsgPaintKit_Definition.Item
	43,  // 131: CMsgPaintKit_Definition.russian_riot:type_name -> CMsgPaintKit_Definition.Item
	43,  // 132: CMsgPaintKit_Definition.scimitar:type_name -> CMsgPaintKit_Definition.Item
	43,  // 133: CMsgPaintKit_Definition.scorch_shot:type_name -> CMsgPaintKit_Definition.Item
	43,  // 134: CMsgPaintKit_Definition.shortstop:type_name -> CMsgPaintKit_Definition.Item
	43,  // 135: CMsgPaintKit_Definition.soda_popper:type_name -> CMsgPaintKit_Definition.Item
	43,  // 136: CMsgPaintKit_Definition.tele_shotgun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 137: CMsgPaintKit_Definition.tomislav:type_name -> CMsgPaintKit_Definition.Item
	43,  // 138: CMsgPaintKit_Definition.trenchgun:type_name -> CMsgPaintKit_Definition.Item
	43,  // 139: CMsgPaintKit_Definition.winger_pistol:type_name -> CMsgPaintKit_Definition.Item
	12,  // 140: CMsgQuestTheme.header:type_name -> CMsgProtoDefHeader
	46,  // 141: CMsgQuestTheme.give_sounds:type_name -> CMsgQuestTheme.WeightedStringSet
	46,  // 142: CMsgQuestTheme.complete_sounds:type_name -> CMsgQuestTheme.WeightedStringSet
	46,  // 143: CMsgQuestTheme.fully_complete_sounds:type_name -> CMsgQuestTheme.WeightedStringSet
	14,  // 144: CMsgQuestMapNodeCondition_NodeState.target_node_defid:type_name -> CMsgProtoDefID
	0,   // 145: CMsgQuestMapNodeCondition_Logic.operation:type_name -> LogicalOperation
	36,  // 146: CMsgQuestMapNodeCondition_Logic.sub_conditions:type_name -> CMsgQuestMapNodeCondition
	34,  // 147: CMsgQuestMapNodeCondition.node_state:type_name -> CMsgQuestMapNodeCondition_NodeState
	35,  // 148: CMsgQuestMapNodeCondition.logical:type_name -> CMsgQuestMapNodeCondition_Logic
	12,  // 149: CMsgHeaderOnly.header:type_name -> CMsgProtoDefHeader
	14,  // 150: CMsgQuestDef.ObjectiveInstance.objective:type_name -> CMsgProtoDefID
	3,   // 151: CMsgQuestDef.ObjectiveInstance.point_type:type_name -> EQuestPoints
	14,  // 152: CMsgQuestMapRegionDef.RegionLink.target_region_defid:type_name -> CMsgProtoDefID
	14,  // 153: CMsgPaintKit_ItemDefinition.Definition.operation_template:type_name -> CMsgProtoDefID
	19,  // 154: CMsgPaintKit_ItemDefinition.Definition.variable:type_name -> CMsgVarField
	14,  // 155: CMsgPaintKit_Definition.Item.item_definition_template:type_name -> CMsgProtoDefID
	44,  // 156: CMsgPaintKit_Definition.Item.data:type_name -> CMsgPaintKit_Definition.Item.ItemData
	19,  // 157: CMsgPaintKit_Definition.Item.ItemData.variable:type_name -> CMsgVarField
	45,  // 158: CMsgQuestTheme.WeightedStringSet.weighted_strings:type_name -> CMsgQuestTheme.WeightedString
	47,  // 159: start_expanded:extendee -> google.protobuf.MessageOptions
	48,  // 160: valid_type:extendee -> google.protobuf.FieldOptions
	48,  // 161: editable:extendee -> google.protobuf.FieldOptions
	48,  // 162: localized:extendee -> google.protobuf.FieldOptions
	48,  // 163: do_not_inherit:extendee -> google.protobuf.FieldOptions
	48,  // 164: display_name:extendee -> google.protobuf.FieldOptions
	48,  // 165: comment:extendee -> google.protobuf.FieldOptions
	48,  // 166: max_count:extendee -> google.protobuf.FieldOptions
	48,  // 167: allow_add:extendee -> google.protobuf.FieldOptions
	48,  // 168: allow_delete:extendee -> google.protobuf.FieldOptions
	48,  // 169: panel_class_override:extendee -> google.protobuf.FieldOptions
	48,  // 170: message_inherhitance_key_field_name:extendee -> google.protobuf.FieldOptions
	48,  // 171: inherit_reference_variables:extendee -> google.protobuf.FieldOptions
	48,  // 172: self_inherit_only:extendee -> google.protobuf.FieldOptions
	48,  // 173: var_field_type:extendee -> google.protobuf.FieldOptions
	48,  // 174: merging_key_field:extendee -> google.protobuf.FieldOptions
	2,   // 175: valid_type:type_name -> ProtoDefTypes
	4,   // 176: var_field_type:type_name -> EVarFieldType
	177, // [177:177] is the sub-list for method output_type
	177, // [177:177] is the sub-list for method input_type
	175, // [175:177] is the sub-list for extension type_name
	159, // [159:175] is the sub-list for extension extendee
	0,   // [0:159] is the sub-list for field type_name
}

func init() { file_tf_proto_def_messages_proto_init() }
func file_tf_proto_def_messages_proto_init() {
	if File_tf_proto_def_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tf_proto_def_messages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgFieldID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgUniversalFieldID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgVariableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgProtoDefHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgValidTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgProtoDefID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestObjectiveDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapStoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapRegionDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgVarField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapStarType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapNodeDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Operation_TextureStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Operation_CombineStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Operation_SelectStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Operation_Sticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Operation_StickerStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_OperationStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_OperationNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_ItemDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapNodeCondition_NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapNodeCondition_Logic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapNodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgHeaderOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgFieldID_CMsgField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestDef_MMCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestDef_ObjectiveInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestMapRegionDef_RegionLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_ItemDefinition_Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Definition_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPaintKit_Definition_Item_ItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestTheme_WeightedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_def_messages_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgQuestTheme_WeightedStringSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tf_proto_def_messages_proto_msgTypes[5].OneofWrappers = []any{
		(*CMsgProtoDefID_InstanceDefTypeQuestMapNode)(nil),
		(*CMsgProtoDefID_InstanceDefTypeQuestTheme)(nil),
		(*CMsgProtoDefID_InstanceDefTypeQuestMapRegion)(nil),
		(*CMsgProtoDefID_InstanceDefTypeQuest)(nil),
		(*CMsgProtoDefID_InstanceDefTypeQuestObjective)(nil),
		(*CMsgProtoDefID_InstanceDefTypePaintkitVariables)(nil),
		(*CMsgProtoDefID_InstanceDefTypePaintkitOperation)(nil),
		(*CMsgProtoDefID_InstanceDefTypePaintkitItemDefinition)(nil),
		(*CMsgProtoDefID_InstanceDefTypePaintkitDefinition)(nil),
		(*CMsgProtoDefID_InstanceDefTypeHeaderOnly)(nil),
	}
	file_tf_proto_def_messages_proto_msgTypes[10].OneofWrappers = []any{
		(*CMsgVarField_Float)(nil),
		(*CMsgVarField_Double)(nil),
		(*CMsgVarField_Uint32)(nil),
		(*CMsgVarField_Uint64)(nil),
		(*CMsgVarField_Sint32)(nil),
		(*CMsgVarField_Sint64)(nil),
		(*CMsgVarField_Bool)(nil),
		(*CMsgVarField_String_)(nil),
	}
	file_tf_proto_def_messages_proto_msgTypes[19].OneofWrappers = []any{
		(*CMsgPaintKit_OperationStage_TextureLookup)(nil),
		(*CMsgPaintKit_OperationStage_CombineAdd)(nil),
		(*CMsgPaintKit_OperationStage_CombineLerp)(nil),
		(*CMsgPaintKit_OperationStage_CombineMultiply)(nil),
		(*CMsgPaintKit_OperationStage_Select)(nil),
		(*CMsgPaintKit_OperationStage_ApplySticker)(nil),
	}
	file_tf_proto_def_messages_proto_msgTypes[20].OneofWrappers = []any{
		(*CMsgPaintKit_OperationNode_Stage)(nil),
		(*CMsgPaintKit_OperationNode_OperationTemplate)(nil),
	}
	file_tf_proto_def_messages_proto_msgTypes[27].OneofWrappers = []any{
		(*CMsgQuestMapNodeCondition_NodeState)(nil),
		(*CMsgQuestMapNodeCondition_Logical)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tf_proto_def_messages_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   38,
			NumExtensions: 16,
			NumServices:   0,
		},
		GoTypes:           file_tf_proto_def_messages_proto_goTypes,
		DependencyIndexes: file_tf_proto_def_messages_proto_depIdxs,
		EnumInfos:         file_tf_proto_def_messages_proto_enumTypes,
		MessageInfos:      file_tf_proto_def_messages_proto_msgTypes,
		ExtensionInfos:    file_tf_proto_def_messages_proto_extTypes,
	}.Build()
	File_tf_proto_def_messages_proto = out.File
	file_tf_proto_def_messages_proto_rawDesc = nil
	file_tf_proto_def_messages_proto_goTypes = nil
	file_tf_proto_def_messages_proto_depIdxs = nil
}
