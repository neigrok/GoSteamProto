// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: webuimessages_bluetooth.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CBluetoothManager_GetState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_GetState_Request) Reset() {
	*x = CBluetoothManager_GetState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_GetState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetState_Request) ProtoMessage() {}

func (x *CBluetoothManager_GetState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetState_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetState_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{0}
}

type CMsgBluetoothManagerAdapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *CMsgBluetoothManagerAdapterInfo) Reset() {
	*x = CMsgBluetoothManagerAdapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothManagerAdapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerAdapterInfo) ProtoMessage() {}

func (x *CMsgBluetoothManagerAdapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerAdapterInfo.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerAdapterInfo) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgBluetoothManagerAdapterInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgBluetoothManagerDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShouldHideHint *bool                 `protobuf:"varint,2,opt,name=should_hide_hint,json=shouldHideHint" json:"should_hide_hint,omitempty"`
	Etype          *EBluetoothDeviceType `protobuf:"varint,3,opt,name=etype,enum=EBluetoothDeviceType,def=0" json:"etype,omitempty"`
	IsConnected    *bool                 `protobuf:"varint,4,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	IsPaired       *bool                 `protobuf:"varint,5,opt,name=is_paired,json=isPaired" json:"is_paired,omitempty"`
	StrengthRaw    *int32                `protobuf:"varint,6,opt,name=strength_raw,json=strengthRaw" json:"strength_raw,omitempty"`
}

// Default values for CMsgBluetoothManagerDeviceInfo fields.
const (
	Default_CMsgBluetoothManagerDeviceInfo_Etype = EBluetoothDeviceType_k_BluetoothDeviceType_Invalid
)

func (x *CMsgBluetoothManagerDeviceInfo) Reset() {
	*x = CMsgBluetoothManagerDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothManagerDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerDeviceInfo) ProtoMessage() {}

func (x *CMsgBluetoothManagerDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerDeviceInfo.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerDeviceInfo) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgBluetoothManagerDeviceInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgBluetoothManagerDeviceInfo) GetShouldHideHint() bool {
	if x != nil && x.ShouldHideHint != nil {
		return *x.ShouldHideHint
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceInfo) GetEtype() EBluetoothDeviceType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_CMsgBluetoothManagerDeviceInfo_Etype
}

func (x *CMsgBluetoothManagerDeviceInfo) GetIsConnected() bool {
	if x != nil && x.IsConnected != nil {
		return *x.IsConnected
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceInfo) GetIsPaired() bool {
	if x != nil && x.IsPaired != nil {
		return *x.IsPaired
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceInfo) GetStrengthRaw() int32 {
	if x != nil && x.StrengthRaw != nil {
		return *x.StrengthRaw
	}
	return 0
}

type CBluetoothManager_GetState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsServiceAvailable *bool                              `protobuf:"varint,1,opt,name=is_service_available,json=isServiceAvailable" json:"is_service_available,omitempty"`
	IsEnabled          *bool                              `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsDiscovering      *bool                              `protobuf:"varint,3,opt,name=is_discovering,json=isDiscovering" json:"is_discovering,omitempty"`
	Adapters           []*CMsgBluetoothManagerAdapterInfo `protobuf:"bytes,4,rep,name=adapters" json:"adapters,omitempty"`
	Devices            []*CMsgBluetoothManagerDeviceInfo  `protobuf:"bytes,5,rep,name=devices" json:"devices,omitempty"`
}

func (x *CBluetoothManager_GetState_Response) Reset() {
	*x = CBluetoothManager_GetState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_GetState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetState_Response) ProtoMessage() {}

func (x *CBluetoothManager_GetState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetState_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetState_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{3}
}

func (x *CBluetoothManager_GetState_Response) GetIsServiceAvailable() bool {
	if x != nil && x.IsServiceAvailable != nil {
		return *x.IsServiceAvailable
	}
	return false
}

func (x *CBluetoothManager_GetState_Response) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CBluetoothManager_GetState_Response) GetIsDiscovering() bool {
	if x != nil && x.IsDiscovering != nil {
		return *x.IsDiscovering
	}
	return false
}

func (x *CBluetoothManager_GetState_Response) GetAdapters() []*CMsgBluetoothManagerAdapterInfo {
	if x != nil {
		return x.Adapters
	}
	return nil
}

func (x *CBluetoothManager_GetState_Response) GetDevices() []*CMsgBluetoothManagerDeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CBluetoothManager_GetAdapterDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *CBluetoothManager_GetAdapterDetails_Request) Reset() {
	*x = CBluetoothManager_GetAdapterDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_GetAdapterDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetAdapterDetails_Request) ProtoMessage() {}

func (x *CBluetoothManager_GetAdapterDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetAdapterDetails_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetAdapterDetails_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{4}
}

func (x *CBluetoothManager_GetAdapterDetails_Request) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgBluetoothManagerAdapterDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Mac           *string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Name          *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IsEnabled     *bool   `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsDiscovering *bool   `protobuf:"varint,5,opt,name=is_discovering,json=isDiscovering" json:"is_discovering,omitempty"`
}

// Default values for CMsgBluetoothManagerAdapterDetails fields.
const (
	Default_CMsgBluetoothManagerAdapterDetails_Id = uint32(0)
)

func (x *CMsgBluetoothManagerAdapterDetails) Reset() {
	*x = CMsgBluetoothManagerAdapterDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothManagerAdapterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerAdapterDetails) ProtoMessage() {}

func (x *CMsgBluetoothManagerAdapterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerAdapterDetails.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerAdapterDetails) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgBluetoothManagerAdapterDetails) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothManagerAdapterDetails_Id
}

func (x *CMsgBluetoothManagerAdapterDetails) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothManagerAdapterDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothManagerAdapterDetails) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CMsgBluetoothManagerAdapterDetails) GetIsDiscovering() bool {
	if x != nil && x.IsDiscovering != nil {
		return *x.IsDiscovering
	}
	return false
}

type CBluetoothManager_GetAdapterDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adapter *CMsgBluetoothManagerAdapterDetails `protobuf:"bytes,1,opt,name=adapter" json:"adapter,omitempty"`
}

func (x *CBluetoothManager_GetAdapterDetails_Response) Reset() {
	*x = CBluetoothManager_GetAdapterDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_GetAdapterDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetAdapterDetails_Response) ProtoMessage() {}

func (x *CBluetoothManager_GetAdapterDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetAdapterDetails_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetAdapterDetails_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{6}
}

func (x *CBluetoothManager_GetAdapterDetails_Response) GetAdapter() *CMsgBluetoothManagerAdapterDetails {
	if x != nil {
		return x.Adapter
	}
	return nil
}

type CBluetoothManager_GetDeviceDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *CBluetoothManager_GetDeviceDetails_Request) Reset() {
	*x = CBluetoothManager_GetDeviceDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_GetDeviceDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetDeviceDetails_Request) ProtoMessage() {}

func (x *CBluetoothManager_GetDeviceDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetDeviceDetails_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetDeviceDetails_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{7}
}

func (x *CBluetoothManager_GetDeviceDetails_Request) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgBluetoothManagerDeviceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint32               `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	AdapterId            *uint32               `protobuf:"varint,2,opt,name=adapter_id,json=adapterId,def=0" json:"adapter_id,omitempty"`
	Etype                *EBluetoothDeviceType `protobuf:"varint,3,opt,name=etype,enum=EBluetoothDeviceType,def=0" json:"etype,omitempty"`
	Mac                  *string               `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Name                 *string               `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	IsConnected          *bool                 `protobuf:"varint,6,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	IsPaired             *bool                 `protobuf:"varint,7,opt,name=is_paired,json=isPaired" json:"is_paired,omitempty"`
	IsPairing            *bool                 `protobuf:"varint,8,opt,name=is_pairing,json=isPairing" json:"is_pairing,omitempty"`
	WakeAllowed          *bool                 `protobuf:"varint,9,opt,name=wake_allowed,json=wakeAllowed" json:"wake_allowed,omitempty"`
	WakeAllowedSupported *bool                 `protobuf:"varint,10,opt,name=wake_allowed_supported,json=wakeAllowedSupported" json:"wake_allowed_supported,omitempty"`
	BatteryPercent       *int32                `protobuf:"varint,11,opt,name=battery_percent,json=batteryPercent" json:"battery_percent,omitempty"`
	OperationInProgress  *bool                 `protobuf:"varint,12,opt,name=operation_in_progress,json=operationInProgress" json:"operation_in_progress,omitempty"`
}

// Default values for CMsgBluetoothManagerDeviceDetails fields.
const (
	Default_CMsgBluetoothManagerDeviceDetails_Id        = uint32(0)
	Default_CMsgBluetoothManagerDeviceDetails_AdapterId = uint32(0)
	Default_CMsgBluetoothManagerDeviceDetails_Etype     = EBluetoothDeviceType_k_BluetoothDeviceType_Invalid
)

func (x *CMsgBluetoothManagerDeviceDetails) Reset() {
	*x = CMsgBluetoothManagerDeviceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothManagerDeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerDeviceDetails) ProtoMessage() {}

func (x *CMsgBluetoothManagerDeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerDeviceDetails.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerDeviceDetails) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgBluetoothManagerDeviceDetails) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothManagerDeviceDetails_Id
}

func (x *CMsgBluetoothManagerDeviceDetails) GetAdapterId() uint32 {
	if x != nil && x.AdapterId != nil {
		return *x.AdapterId
	}
	return Default_CMsgBluetoothManagerDeviceDetails_AdapterId
}

func (x *CMsgBluetoothManagerDeviceDetails) GetEtype() EBluetoothDeviceType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_CMsgBluetoothManagerDeviceDetails_Etype
}

func (x *CMsgBluetoothManagerDeviceDetails) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothManagerDeviceDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsConnected() bool {
	if x != nil && x.IsConnected != nil {
		return *x.IsConnected
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsPaired() bool {
	if x != nil && x.IsPaired != nil {
		return *x.IsPaired
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsPairing() bool {
	if x != nil && x.IsPairing != nil {
		return *x.IsPairing
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetWakeAllowed() bool {
	if x != nil && x.WakeAllowed != nil {
		return *x.WakeAllowed
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetWakeAllowedSupported() bool {
	if x != nil && x.WakeAllowedSupported != nil {
		return *x.WakeAllowedSupported
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetBatteryPercent() int32 {
	if x != nil && x.BatteryPercent != nil {
		return *x.BatteryPercent
	}
	return 0
}

func (x *CMsgBluetoothManagerDeviceDetails) GetOperationInProgress() bool {
	if x != nil && x.OperationInProgress != nil {
		return *x.OperationInProgress
	}
	return false
}

type CBluetoothManager_GetDeviceDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *CMsgBluetoothManagerDeviceDetails `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (x *CBluetoothManager_GetDeviceDetails_Response) Reset() {
	*x = CBluetoothManager_GetDeviceDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_GetDeviceDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetDeviceDetails_Response) ProtoMessage() {}

func (x *CBluetoothManager_GetDeviceDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetDeviceDetails_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetDeviceDetails_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{9}
}

func (x *CBluetoothManager_GetDeviceDetails_Response) GetDevice() *CMsgBluetoothManagerDeviceDetails {
	if x != nil {
		return x.Device
	}
	return nil
}

type CBluetoothManager_StateChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_StateChanged_Notification) Reset() {
	*x = CBluetoothManager_StateChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_StateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_StateChanged_Notification) ProtoMessage() {}

func (x *CBluetoothManager_StateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_StateChanged_Notification.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_StateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{10}
}

type CBluetoothManager_SetDiscovering_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *CBluetoothManager_SetDiscovering_Request) Reset() {
	*x = CBluetoothManager_SetDiscovering_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_SetDiscovering_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetDiscovering_Request) ProtoMessage() {}

func (x *CBluetoothManager_SetDiscovering_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetDiscovering_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetDiscovering_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{11}
}

func (x *CBluetoothManager_SetDiscovering_Request) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CBluetoothManager_SetDiscovering_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_SetDiscovering_Response) Reset() {
	*x = CBluetoothManager_SetDiscovering_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_SetDiscovering_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetDiscovering_Response) ProtoMessage() {}

func (x *CBluetoothManager_SetDiscovering_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetDiscovering_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetDiscovering_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{12}
}

type CBluetoothManager_Pair_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CBluetoothManager_Pair_Request) Reset() {
	*x = CBluetoothManager_Pair_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Pair_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Pair_Request) ProtoMessage() {}

func (x *CBluetoothManager_Pair_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Pair_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Pair_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{13}
}

func (x *CBluetoothManager_Pair_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Pair_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_Pair_Response) Reset() {
	*x = CBluetoothManager_Pair_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Pair_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Pair_Response) ProtoMessage() {}

func (x *CBluetoothManager_Pair_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Pair_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Pair_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{14}
}

type CBluetoothManager_CancelPair_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CBluetoothManager_CancelPair_Request) Reset() {
	*x = CBluetoothManager_CancelPair_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_CancelPair_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_CancelPair_Request) ProtoMessage() {}

func (x *CBluetoothManager_CancelPair_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_CancelPair_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_CancelPair_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{15}
}

func (x *CBluetoothManager_CancelPair_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_CancelPair_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_CancelPair_Response) Reset() {
	*x = CBluetoothManager_CancelPair_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_CancelPair_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_CancelPair_Response) ProtoMessage() {}

func (x *CBluetoothManager_CancelPair_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_CancelPair_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_CancelPair_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{16}
}

type CBluetoothManager_Forget_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CBluetoothManager_Forget_Request) Reset() {
	*x = CBluetoothManager_Forget_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Forget_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Forget_Request) ProtoMessage() {}

func (x *CBluetoothManager_Forget_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Forget_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Forget_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{17}
}

func (x *CBluetoothManager_Forget_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Forget_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_Forget_Response) Reset() {
	*x = CBluetoothManager_Forget_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Forget_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Forget_Response) ProtoMessage() {}

func (x *CBluetoothManager_Forget_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Forget_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Forget_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{18}
}

type CBluetoothManager_Connect_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CBluetoothManager_Connect_Request) Reset() {
	*x = CBluetoothManager_Connect_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Connect_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Connect_Request) ProtoMessage() {}

func (x *CBluetoothManager_Connect_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Connect_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Connect_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{19}
}

func (x *CBluetoothManager_Connect_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Connect_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_Connect_Response) Reset() {
	*x = CBluetoothManager_Connect_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Connect_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Connect_Response) ProtoMessage() {}

func (x *CBluetoothManager_Connect_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Connect_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Connect_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{20}
}

type CBluetoothManager_Disconnect_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CBluetoothManager_Disconnect_Request) Reset() {
	*x = CBluetoothManager_Disconnect_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Disconnect_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Disconnect_Request) ProtoMessage() {}

func (x *CBluetoothManager_Disconnect_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Disconnect_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Disconnect_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{21}
}

func (x *CBluetoothManager_Disconnect_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Disconnect_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_Disconnect_Response) Reset() {
	*x = CBluetoothManager_Disconnect_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_Disconnect_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Disconnect_Response) ProtoMessage() {}

func (x *CBluetoothManager_Disconnect_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Disconnect_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Disconnect_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{22}
}

type CBluetoothManager_SetWakeAllowed_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Allowed *bool   `protobuf:"varint,2,opt,name=allowed" json:"allowed,omitempty"`
}

func (x *CBluetoothManager_SetWakeAllowed_Request) Reset() {
	*x = CBluetoothManager_SetWakeAllowed_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_SetWakeAllowed_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetWakeAllowed_Request) ProtoMessage() {}

func (x *CBluetoothManager_SetWakeAllowed_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetWakeAllowed_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetWakeAllowed_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{23}
}

func (x *CBluetoothManager_SetWakeAllowed_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CBluetoothManager_SetWakeAllowed_Request) GetAllowed() bool {
	if x != nil && x.Allowed != nil {
		return *x.Allowed
	}
	return false
}

type CBluetoothManager_SetWakeAllowed_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CBluetoothManager_SetWakeAllowed_Response) Reset() {
	*x = CBluetoothManager_SetWakeAllowed_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_bluetooth_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBluetoothManager_SetWakeAllowed_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetWakeAllowed_Response) ProtoMessage() {}

func (x *CBluetoothManager_SetWakeAllowed_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_bluetooth_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetWakeAllowed_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetWakeAllowed_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_bluetooth_proto_rawDescGZIP(), []int{24}
}

var File_webuimessages_bluetooth_proto protoreflect.FileDescriptor

var file_webuimessages_bluetooth_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x24, 0x0a, 0x22, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x48, 0x69,
	0x64, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72,
	0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x61, 0x77, 0x22, 0x96, 0x02, 0x0a, 0x23, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x3d,
	0x0a, 0x2b, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x2c, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x22, 0x3c, 0x0a, 0x2a, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xdf, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x77, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x69, 0x0a, 0x2b, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2d, 0x0a,
	0x2b, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x28,
	0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x0a, 0x1e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x50, 0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x50,
	0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x24,
	0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x27, 0x0a, 0x25,
	0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x20, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x21, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x24, 0x43, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5c, 0x0a, 0x28, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x22, 0x2b, 0x0a, 0x29, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa2, 0x08,
	0x0a, 0x10, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x55, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c,
	0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2b, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x2c, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10,
	0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x29, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x1f, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x50, 0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x50, 0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x25, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x43, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e,
	0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x29, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x43, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0x80, 0x97,
	0x22, 0x01, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x01,
}

var (
	file_webuimessages_bluetooth_proto_rawDescOnce sync.Once
	file_webuimessages_bluetooth_proto_rawDescData = file_webuimessages_bluetooth_proto_rawDesc
)

func file_webuimessages_bluetooth_proto_rawDescGZIP() []byte {
	file_webuimessages_bluetooth_proto_rawDescOnce.Do(func() {
		file_webuimessages_bluetooth_proto_rawDescData = protoimpl.X.CompressGZIP(file_webuimessages_bluetooth_proto_rawDescData)
	})
	return file_webuimessages_bluetooth_proto_rawDescData
}

var file_webuimessages_bluetooth_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_webuimessages_bluetooth_proto_goTypes = []any{
	(*CBluetoothManager_GetState_Request)(nil),           // 0: CBluetoothManager_GetState_Request
	(*CMsgBluetoothManagerAdapterInfo)(nil),              // 1: CMsgBluetoothManagerAdapterInfo
	(*CMsgBluetoothManagerDeviceInfo)(nil),               // 2: CMsgBluetoothManagerDeviceInfo
	(*CBluetoothManager_GetState_Response)(nil),          // 3: CBluetoothManager_GetState_Response
	(*CBluetoothManager_GetAdapterDetails_Request)(nil),  // 4: CBluetoothManager_GetAdapterDetails_Request
	(*CMsgBluetoothManagerAdapterDetails)(nil),           // 5: CMsgBluetoothManagerAdapterDetails
	(*CBluetoothManager_GetAdapterDetails_Response)(nil), // 6: CBluetoothManager_GetAdapterDetails_Response
	(*CBluetoothManager_GetDeviceDetails_Request)(nil),   // 7: CBluetoothManager_GetDeviceDetails_Request
	(*CMsgBluetoothManagerDeviceDetails)(nil),            // 8: CMsgBluetoothManagerDeviceDetails
	(*CBluetoothManager_GetDeviceDetails_Response)(nil),  // 9: CBluetoothManager_GetDeviceDetails_Response
	(*CBluetoothManager_StateChanged_Notification)(nil),  // 10: CBluetoothManager_StateChanged_Notification
	(*CBluetoothManager_SetDiscovering_Request)(nil),     // 11: CBluetoothManager_SetDiscovering_Request
	(*CBluetoothManager_SetDiscovering_Response)(nil),    // 12: CBluetoothManager_SetDiscovering_Response
	(*CBluetoothManager_Pair_Request)(nil),               // 13: CBluetoothManager_Pair_Request
	(*CBluetoothManager_Pair_Response)(nil),              // 14: CBluetoothManager_Pair_Response
	(*CBluetoothManager_CancelPair_Request)(nil),         // 15: CBluetoothManager_CancelPair_Request
	(*CBluetoothManager_CancelPair_Response)(nil),        // 16: CBluetoothManager_CancelPair_Response
	(*CBluetoothManager_Forget_Request)(nil),             // 17: CBluetoothManager_Forget_Request
	(*CBluetoothManager_Forget_Response)(nil),            // 18: CBluetoothManager_Forget_Response
	(*CBluetoothManager_Connect_Request)(nil),            // 19: CBluetoothManager_Connect_Request
	(*CBluetoothManager_Connect_Response)(nil),           // 20: CBluetoothManager_Connect_Response
	(*CBluetoothManager_Disconnect_Request)(nil),         // 21: CBluetoothManager_Disconnect_Request
	(*CBluetoothManager_Disconnect_Response)(nil),        // 22: CBluetoothManager_Disconnect_Response
	(*CBluetoothManager_SetWakeAllowed_Request)(nil),     // 23: CBluetoothManager_SetWakeAllowed_Request
	(*CBluetoothManager_SetWakeAllowed_Response)(nil),    // 24: CBluetoothManager_SetWakeAllowed_Response
	(EBluetoothDeviceType)(0),                            // 25: EBluetoothDeviceType
	(*WebUINoResponse)(nil),                              // 26: WebUINoResponse
}
var file_webuimessages_bluetooth_proto_depIdxs = []int32{
	25, // 0: CMsgBluetoothManagerDeviceInfo.etype:type_name -> EBluetoothDeviceType
	1,  // 1: CBluetoothManager_GetState_Response.adapters:type_name -> CMsgBluetoothManagerAdapterInfo
	2,  // 2: CBluetoothManager_GetState_Response.devices:type_name -> CMsgBluetoothManagerDeviceInfo
	5,  // 3: CBluetoothManager_GetAdapterDetails_Response.adapter:type_name -> CMsgBluetoothManagerAdapterDetails
	25, // 4: CMsgBluetoothManagerDeviceDetails.etype:type_name -> EBluetoothDeviceType
	8,  // 5: CBluetoothManager_GetDeviceDetails_Response.device:type_name -> CMsgBluetoothManagerDeviceDetails
	0,  // 6: BluetoothManager.GetState:input_type -> CBluetoothManager_GetState_Request
	4,  // 7: BluetoothManager.GetAdapterDetails:input_type -> CBluetoothManager_GetAdapterDetails_Request
	7,  // 8: BluetoothManager.GetDeviceDetails:input_type -> CBluetoothManager_GetDeviceDetails_Request
	10, // 9: BluetoothManager.NotifyStateChanged:input_type -> CBluetoothManager_StateChanged_Notification
	11, // 10: BluetoothManager.SetDiscovering:input_type -> CBluetoothManager_SetDiscovering_Request
	13, // 11: BluetoothManager.Pair:input_type -> CBluetoothManager_Pair_Request
	15, // 12: BluetoothManager.CancelPair:input_type -> CBluetoothManager_CancelPair_Request
	17, // 13: BluetoothManager.Forget:input_type -> CBluetoothManager_Forget_Request
	19, // 14: BluetoothManager.Connect:input_type -> CBluetoothManager_Connect_Request
	21, // 15: BluetoothManager.Disconnect:input_type -> CBluetoothManager_Disconnect_Request
	23, // 16: BluetoothManager.SetWakeAllowed:input_type -> CBluetoothManager_SetWakeAllowed_Request
	3,  // 17: BluetoothManager.GetState:output_type -> CBluetoothManager_GetState_Response
	6,  // 18: BluetoothManager.GetAdapterDetails:output_type -> CBluetoothManager_GetAdapterDetails_Response
	9,  // 19: BluetoothManager.GetDeviceDetails:output_type -> CBluetoothManager_GetDeviceDetails_Response
	26, // 20: BluetoothManager.NotifyStateChanged:output_type -> WebUINoResponse
	12, // 21: BluetoothManager.SetDiscovering:output_type -> CBluetoothManager_SetDiscovering_Response
	14, // 22: BluetoothManager.Pair:output_type -> CBluetoothManager_Pair_Response
	16, // 23: BluetoothManager.CancelPair:output_type -> CBluetoothManager_CancelPair_Response
	18, // 24: BluetoothManager.Forget:output_type -> CBluetoothManager_Forget_Response
	20, // 25: BluetoothManager.Connect:output_type -> CBluetoothManager_Connect_Response
	22, // 26: BluetoothManager.Disconnect:output_type -> CBluetoothManager_Disconnect_Response
	24, // 27: BluetoothManager.SetWakeAllowed:output_type -> CBluetoothManager_SetWakeAllowed_Response
	17, // [17:28] is the sub-list for method output_type
	6,  // [6:17] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_webuimessages_bluetooth_proto_init() }
func file_webuimessages_bluetooth_proto_init() {
	if File_webuimessages_bluetooth_proto != nil {
		return
	}
	file_enums_proto_init()
	file_steammessages_base_proto_init()
	file_webuimessages_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_webuimessages_bluetooth_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_GetState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgBluetoothManagerAdapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgBluetoothManagerDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_GetState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_GetAdapterDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgBluetoothManagerAdapterDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_GetAdapterDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_GetDeviceDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgBluetoothManagerDeviceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_GetDeviceDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_StateChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_SetDiscovering_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_SetDiscovering_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Pair_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Pair_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_CancelPair_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_CancelPair_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Forget_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Forget_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Connect_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Connect_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Disconnect_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_Disconnect_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_SetWakeAllowed_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_bluetooth_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CBluetoothManager_SetWakeAllowed_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webuimessages_bluetooth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_webuimessages_bluetooth_proto_goTypes,
		DependencyIndexes: file_webuimessages_bluetooth_proto_depIdxs,
		MessageInfos:      file_webuimessages_bluetooth_proto_msgTypes,
	}.Build()
	File_webuimessages_bluetooth_proto = out.File
	file_webuimessages_bluetooth_proto_rawDesc = nil
	file_webuimessages_bluetooth_proto_goTypes = nil
	file_webuimessages_bluetooth_proto_depIdxs = nil
}
