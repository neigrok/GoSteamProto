// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_contentsystem.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EAppContentDetectionType int32

const (
	EAppContentDetectionType_k_EAppContentDetectionType_None       EAppContentDetectionType = 0
	EAppContentDetectionType_k_EAppContentDetectionType_AntiCheat  EAppContentDetectionType = 1
	EAppContentDetectionType_k_EAppContentDetectionType_GameEngine EAppContentDetectionType = 2
)

// Enum value maps for EAppContentDetectionType.
var (
	EAppContentDetectionType_name = map[int32]string{
		0: "k_EAppContentDetectionType_None",
		1: "k_EAppContentDetectionType_AntiCheat",
		2: "k_EAppContentDetectionType_GameEngine",
	}
	EAppContentDetectionType_value = map[string]int32{
		"k_EAppContentDetectionType_None":       0,
		"k_EAppContentDetectionType_AntiCheat":  1,
		"k_EAppContentDetectionType_GameEngine": 2,
	}
)

func (x EAppContentDetectionType) Enum() *EAppContentDetectionType {
	p := new(EAppContentDetectionType)
	*p = x
	return p
}

func (x EAppContentDetectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppContentDetectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_contentsystem_steamclient_proto_enumTypes[0].Descriptor()
}

func (EAppContentDetectionType) Type() protoreflect.EnumType {
	return &file_steammessages_contentsystem_steamclient_proto_enumTypes[0]
}

func (x EAppContentDetectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppContentDetectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppContentDetectionType(num)
	return nil
}

// Deprecated: Use EAppContentDetectionType.Descriptor instead.
func (EAppContentDetectionType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{0}
}

type CContentServerDirectory_ConnectedSteamPipeServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	SourceId *int32  `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Hostname *string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) Reset() {
	*x = CContentServerDirectory_ConnectedSteamPipeServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_ConnectedSteamPipeServerInfo) ProtoMessage() {}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_ConnectedSteamPipeServerInfo.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_ConnectedSteamPipeServerInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) GetSourceId() int32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type CContentServerDirectory_GetServersForSteamPipe_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId             *uint32                                                 `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	MaxServers         *uint32                                                 `protobuf:"varint,2,opt,name=max_servers,json=maxServers,def=20" json:"max_servers,omitempty"`
	IpOverride         *string                                                 `protobuf:"bytes,3,opt,name=ip_override,json=ipOverride" json:"ip_override,omitempty"`
	LauncherType       *int32                                                  `protobuf:"varint,4,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	Ipv6Public         *string                                                 `protobuf:"bytes,5,opt,name=ipv6_public,json=ipv6Public" json:"ipv6_public,omitempty"`
	CurrentConnections []*CContentServerDirectory_ConnectedSteamPipeServerInfo `protobuf:"bytes,6,rep,name=current_connections,json=currentConnections" json:"current_connections,omitempty"`
}

// Default values for CContentServerDirectory_GetServersForSteamPipe_Request fields.
const (
	Default_CContentServerDirectory_GetServersForSteamPipe_Request_MaxServers   = uint32(20)
	Default_CContentServerDirectory_GetServersForSteamPipe_Request_LauncherType = int32(0)
)

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) Reset() {
	*x = CContentServerDirectory_GetServersForSteamPipe_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetServersForSteamPipe_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetServersForSteamPipe_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetServersForSteamPipe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetMaxServers() uint32 {
	if x != nil && x.MaxServers != nil {
		return *x.MaxServers
	}
	return Default_CContentServerDirectory_GetServersForSteamPipe_Request_MaxServers
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetIpOverride() string {
	if x != nil && x.IpOverride != nil {
		return *x.IpOverride
	}
	return ""
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetLauncherType() int32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return Default_CContentServerDirectory_GetServersForSteamPipe_Request_LauncherType
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetIpv6Public() string {
	if x != nil && x.Ipv6Public != nil {
		return *x.Ipv6Public
	}
	return ""
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetCurrentConnections() []*CContentServerDirectory_ConnectedSteamPipeServerInfo {
	if x != nil {
		return x.CurrentConnections
	}
	return nil
}

type CContentServerDirectory_ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     *string  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	SourceId                 *int32   `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	CellId                   *int32   `protobuf:"varint,3,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Load                     *int32   `protobuf:"varint,4,opt,name=load" json:"load,omitempty"`
	WeightedLoad             *float32 `protobuf:"fixed32,5,opt,name=weighted_load,json=weightedLoad" json:"weighted_load,omitempty"`
	NumEntriesInClientList   *int32   `protobuf:"varint,6,opt,name=num_entries_in_client_list,json=numEntriesInClientList" json:"num_entries_in_client_list,omitempty"`
	SteamChinaOnly           *bool    `protobuf:"varint,7,opt,name=steam_china_only,json=steamChinaOnly" json:"steam_china_only,omitempty"`
	Host                     *string  `protobuf:"bytes,8,opt,name=host" json:"host,omitempty"`
	Vhost                    *string  `protobuf:"bytes,9,opt,name=vhost" json:"vhost,omitempty"`
	UseAsProxy               *bool    `protobuf:"varint,10,opt,name=use_as_proxy,json=useAsProxy" json:"use_as_proxy,omitempty"`
	ProxyRequestPathTemplate *string  `protobuf:"bytes,11,opt,name=proxy_request_path_template,json=proxyRequestPathTemplate" json:"proxy_request_path_template,omitempty"`
	HttpsSupport             *string  `protobuf:"bytes,12,opt,name=https_support,json=httpsSupport" json:"https_support,omitempty"`
	AllowedAppIds            []uint32 `protobuf:"varint,13,rep,name=allowed_app_ids,json=allowedAppIds" json:"allowed_app_ids,omitempty"`
	PriorityClass            *uint32  `protobuf:"varint,15,opt,name=priority_class,json=priorityClass" json:"priority_class,omitempty"`
	BypassProxiesOfType      []string `protobuf:"bytes,16,rep,name=bypass_proxies_of_type,json=bypassProxiesOfType" json:"bypass_proxies_of_type,omitempty"`
}

func (x *CContentServerDirectory_ServerInfo) Reset() {
	*x = CContentServerDirectory_ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_ServerInfo) ProtoMessage() {}

func (x *CContentServerDirectory_ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_ServerInfo.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_ServerInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CContentServerDirectory_ServerInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetSourceId() int32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetCellId() int32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetLoad() int32 {
	if x != nil && x.Load != nil {
		return *x.Load
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetWeightedLoad() float32 {
	if x != nil && x.WeightedLoad != nil {
		return *x.WeightedLoad
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetNumEntriesInClientList() int32 {
	if x != nil && x.NumEntriesInClientList != nil {
		return *x.NumEntriesInClientList
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetSteamChinaOnly() bool {
	if x != nil && x.SteamChinaOnly != nil {
		return *x.SteamChinaOnly
	}
	return false
}

func (x *CContentServerDirectory_ServerInfo) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetVhost() string {
	if x != nil && x.Vhost != nil {
		return *x.Vhost
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetUseAsProxy() bool {
	if x != nil && x.UseAsProxy != nil {
		return *x.UseAsProxy
	}
	return false
}

func (x *CContentServerDirectory_ServerInfo) GetProxyRequestPathTemplate() string {
	if x != nil && x.ProxyRequestPathTemplate != nil {
		return *x.ProxyRequestPathTemplate
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetHttpsSupport() string {
	if x != nil && x.HttpsSupport != nil {
		return *x.HttpsSupport
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetAllowedAppIds() []uint32 {
	if x != nil {
		return x.AllowedAppIds
	}
	return nil
}

func (x *CContentServerDirectory_ServerInfo) GetPriorityClass() uint32 {
	if x != nil && x.PriorityClass != nil {
		return *x.PriorityClass
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetBypassProxiesOfType() []string {
	if x != nil {
		return x.BypassProxiesOfType
	}
	return nil
}

type CContentServerDirectory_GetServersForSteamPipe_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers  []*CContentServerDirectory_ServerInfo `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	NoChange *bool                                 `protobuf:"varint,2,opt,name=no_change,json=noChange" json:"no_change,omitempty"`
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) Reset() {
	*x = CContentServerDirectory_GetServersForSteamPipe_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetServersForSteamPipe_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetServersForSteamPipe_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetServersForSteamPipe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) GetServers() []*CContentServerDirectory_ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) GetNoChange() bool {
	if x != nil && x.NoChange != nil {
		return *x.NoChange
	}
	return false
}

type CContentServerDirectory_GetDepotPatchInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid          *uint32 `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	SourceManifestid *uint64 `protobuf:"varint,3,opt,name=source_manifestid,json=sourceManifestid" json:"source_manifestid,omitempty"`
	TargetManifestid *uint64 `protobuf:"varint,4,opt,name=target_manifestid,json=targetManifestid" json:"target_manifestid,omitempty"`
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) Reset() {
	*x = CContentServerDirectory_GetDepotPatchInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetDepotPatchInfo_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetDepotPatchInfo_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetDepotPatchInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetDepotid() uint32 {
	if x != nil && x.Depotid != nil {
		return *x.Depotid
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetSourceManifestid() uint64 {
	if x != nil && x.SourceManifestid != nil {
		return *x.SourceManifestid
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetTargetManifestid() uint64 {
	if x != nil && x.TargetManifestid != nil {
		return *x.TargetManifestid
	}
	return 0
}

type CContentServerDirectory_GetDepotPatchInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAvailable       *bool   `protobuf:"varint,1,opt,name=is_available,json=isAvailable" json:"is_available,omitempty"`
	PatchSize         *uint64 `protobuf:"varint,2,opt,name=patch_size,json=patchSize" json:"patch_size,omitempty"`
	PatchedChunksSize *uint64 `protobuf:"varint,3,opt,name=patched_chunks_size,json=patchedChunksSize" json:"patched_chunks_size,omitempty"`
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) Reset() {
	*x = CContentServerDirectory_GetDepotPatchInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetDepotPatchInfo_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetDepotPatchInfo_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetDepotPatchInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) GetIsAvailable() bool {
	if x != nil && x.IsAvailable != nil {
		return *x.IsAvailable
	}
	return false
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) GetPatchSize() uint64 {
	if x != nil && x.PatchSize != nil {
		return *x.PatchSize
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) GetPatchedChunksSize() uint64 {
	if x != nil && x.PatchedChunksSize != nil {
		return *x.PatchedChunksSize
	}
	return 0
}

type CContentServerDirectory_GetClientUpdateHosts_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CachedSignature *string `protobuf:"bytes,1,opt,name=cached_signature,json=cachedSignature" json:"cached_signature,omitempty"`
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) Reset() {
	*x = CContentServerDirectory_GetClientUpdateHosts_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetClientUpdateHosts_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetClientUpdateHosts_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetClientUpdateHosts_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) GetCachedSignature() string {
	if x != nil && x.CachedSignature != nil {
		return *x.CachedSignature
	}
	return ""
}

type CContentServerDirectory_GetClientUpdateHosts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostsKv        *string `protobuf:"bytes,1,opt,name=hosts_kv,json=hostsKv" json:"hosts_kv,omitempty"`
	ValidUntilTime *uint64 `protobuf:"varint,2,opt,name=valid_until_time,json=validUntilTime" json:"valid_until_time,omitempty"`
	IpCountry      *string `protobuf:"bytes,3,opt,name=ip_country,json=ipCountry" json:"ip_country,omitempty"`
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) Reset() {
	*x = CContentServerDirectory_GetClientUpdateHosts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetClientUpdateHosts_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetClientUpdateHosts_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetClientUpdateHosts_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) GetHostsKv() string {
	if x != nil && x.HostsKv != nil {
		return *x.HostsKv
	}
	return ""
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) GetValidUntilTime() uint64 {
	if x != nil && x.ValidUntilTime != nil {
		return *x.ValidUntilTime
	}
	return 0
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) GetIpCountry() string {
	if x != nil && x.IpCountry != nil {
		return *x.IpCountry
	}
	return ""
}

type CContentServerDirectory_GetManifestRequestCode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId            *uint32 `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	ManifestId         *uint64 `protobuf:"varint,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	AppBranch          *string `protobuf:"bytes,4,opt,name=app_branch,json=appBranch" json:"app_branch,omitempty"`
	BranchPasswordHash *string `protobuf:"bytes,5,opt,name=branch_password_hash,json=branchPasswordHash" json:"branch_password_hash,omitempty"`
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) Reset() {
	*x = CContentServerDirectory_GetManifestRequestCode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetManifestRequestCode_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetManifestRequestCode_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetManifestRequestCode_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetAppBranch() string {
	if x != nil && x.AppBranch != nil {
		return *x.AppBranch
	}
	return ""
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetBranchPasswordHash() string {
	if x != nil && x.BranchPasswordHash != nil {
		return *x.BranchPasswordHash
	}
	return ""
}

type CContentServerDirectory_GetManifestRequestCode_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestRequestCode *uint64 `protobuf:"varint,1,opt,name=manifest_request_code,json=manifestRequestCode" json:"manifest_request_code,omitempty"`
}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) Reset() {
	*x = CContentServerDirectory_GetManifestRequestCode_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetManifestRequestCode_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetManifestRequestCode_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetManifestRequestCode_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) GetManifestRequestCode() uint64 {
	if x != nil && x.ManifestRequestCode != nil {
		return *x.ManifestRequestCode
	}
	return 0
}

type CContentServerDirectory_GetCDNAuthToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepotId  *uint32 `protobuf:"varint,1,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	HostName *string `protobuf:"bytes,2,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	AppId    *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) Reset() {
	*x = CContentServerDirectory_GetCDNAuthToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetCDNAuthToken_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetCDNAuthToken_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetCDNAuthToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CContentServerDirectory_GetCDNAuthToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ExpirationTime *uint32 `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) Reset() {
	*x = CContentServerDirectory_GetCDNAuthToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetCDNAuthToken_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetCDNAuthToken_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetCDNAuthToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

type CContentServerDirectory_RequestPeerContentServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteClientId       *uint64 `protobuf:"varint,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	Steamid              *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	ServerRemoteClientId *uint64 `protobuf:"varint,3,opt,name=server_remote_client_id,json=serverRemoteClientId" json:"server_remote_client_id,omitempty"`
	AppId                *uint32 `protobuf:"varint,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CurrentBuildId       *uint32 `protobuf:"varint,5,opt,name=current_build_id,json=currentBuildId" json:"current_build_id,omitempty"`
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) Reset() {
	*x = CContentServerDirectory_RequestPeerContentServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_RequestPeerContentServer_Request) ProtoMessage() {}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_RequestPeerContentServer_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_RequestPeerContentServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetServerRemoteClientId() uint64 {
	if x != nil && x.ServerRemoteClientId != nil {
		return *x.ServerRemoteClientId
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetCurrentBuildId() uint32 {
	if x != nil && x.CurrentBuildId != nil {
		return *x.CurrentBuildId
	}
	return 0
}

type CContentServerDirectory_RequestPeerContentServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerPort      *uint32  `protobuf:"varint,1,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	InstalledDepots []uint32 `protobuf:"varint,2,rep,name=installed_depots,json=installedDepots" json:"installed_depots,omitempty"`
	AccessToken     *uint64  `protobuf:"varint,3,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) Reset() {
	*x = CContentServerDirectory_RequestPeerContentServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_RequestPeerContentServer_Response) ProtoMessage() {}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_RequestPeerContentServer_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_RequestPeerContentServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) GetInstalledDepots() []uint32 {
	if x != nil {
		return x.InstalledDepots
	}
	return nil
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

type CContentServerDirectory_GetPeerContentInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteClientId       *uint64 `protobuf:"varint,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	Steamid              *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	ServerRemoteClientId *uint64 `protobuf:"varint,3,opt,name=server_remote_client_id,json=serverRemoteClientId" json:"server_remote_client_id,omitempty"`
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) Reset() {
	*x = CContentServerDirectory_GetPeerContentInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetPeerContentInfo_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetPeerContentInfo_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetPeerContentInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) GetServerRemoteClientId() uint64 {
	if x != nil && x.ServerRemoteClientId != nil {
		return *x.ServerRemoteClientId
	}
	return 0
}

type CContentServerDirectory_GetPeerContentInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids   []uint32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	IpPublic *string  `protobuf:"bytes,2,opt,name=ip_public,json=ipPublic" json:"ip_public,omitempty"`
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) Reset() {
	*x = CContentServerDirectory_GetPeerContentInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetPeerContentInfo_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetPeerContentInfo_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetPeerContentInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) GetIpPublic() string {
	if x != nil && x.IpPublic != nil {
		return *x.IpPublic
	}
	return ""
}

type CDepotContentDetection_GetAllDetectedAppContent_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectionType *EAppContentDetectionType `protobuf:"varint,1,opt,name=detection_type,json=detectionType,enum=EAppContentDetectionType,def=0" json:"detection_type,omitempty"`
}

// Default values for CDepotContentDetection_GetAllDetectedAppContent_Request fields.
const (
	Default_CDepotContentDetection_GetAllDetectedAppContent_Request_DetectionType = EAppContentDetectionType_k_EAppContentDetectionType_None
)

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) Reset() {
	*x = CDepotContentDetection_GetAllDetectedAppContent_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDepotContentDetection_GetAllDetectedAppContent_Request) ProtoMessage() {}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDepotContentDetection_GetAllDetectedAppContent_Request.ProtoReflect.Descriptor instead.
func (*CDepotContentDetection_GetAllDetectedAppContent_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) GetDetectionType() EAppContentDetectionType {
	if x != nil && x.DetectionType != nil {
		return *x.DetectionType
	}
	return Default_CDepotContentDetection_GetAllDetectedAppContent_Request_DetectionType
}

type DetectedAppContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId         *uint32 `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	DetectedContent *int32  `protobuf:"varint,3,opt,name=detected_content,json=detectedContent" json:"detected_content,omitempty"`
}

func (x *DetectedAppContent) Reset() {
	*x = DetectedAppContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedAppContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedAppContent) ProtoMessage() {}

func (x *DetectedAppContent) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedAppContent.ProtoReflect.Descriptor instead.
func (*DetectedAppContent) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *DetectedAppContent) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *DetectedAppContent) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *DetectedAppContent) GetDetectedContent() int32 {
	if x != nil && x.DetectedContent != nil {
		return *x.DetectedContent
	}
	return 0
}

type CDepotContentDetection_GetAllDetectedAppContent_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectedAppContent []*DetectedAppContent `protobuf:"bytes,1,rep,name=detected_app_content,json=detectedAppContent" json:"detected_app_content,omitempty"`
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) Reset() {
	*x = CDepotContentDetection_GetAllDetectedAppContent_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDepotContentDetection_GetAllDetectedAppContent_Response) ProtoMessage() {}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDepotContentDetection_GetAllDetectedAppContent_Response.ProtoReflect.Descriptor instead.
func (*CDepotContentDetection_GetAllDetectedAppContent_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) GetDetectedAppContent() []*DetectedAppContent {
	if x != nil {
		return x.DetectedAppContent
	}
	return nil
}

var File_steammessages_contentsystem_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_contentsystem_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x34, 0x43, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x02,
	0x0a, 0x36, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x30, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x66, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x04, 0x0a, 0x22, 0x43, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4c, 0x6f,
	0x61, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x69, 0x6e, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x41, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x70, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x79, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a,
	0x37, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x31, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x32, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x61, 0x0a,
	0x34, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x35, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x5f, 0x6b, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x4b, 0x76, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xdc,
	0x01, 0x0a, 0x36, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6d, 0x0a,
	0x37, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x2f, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0x71, 0x0a, 0x30, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x44,
	0x4e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x38, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x39,
	0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x32, 0x43, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x33, 0x43, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x9c, 0x01, 0x0a, 0x37, 0x43, 0x44, 0x65, 0x70, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x61, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x38, 0x43, 0x44, 0x65,
	0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x94, 0x01, 0x0a,
	0x18, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x6e, 0x74,
	0x69, 0x43, 0x68, 0x65, 0x61, 0x74, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x10, 0x02, 0x32, 0xc7, 0x07, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x8b,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x43, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50,
	0x69, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x43, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x2e,
	0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x76, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x43, 0x44, 0x4e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa9, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x43, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x43, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_contentsystem_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_contentsystem_steamclient_proto_rawDescData = file_steammessages_contentsystem_steamclient_proto_rawDesc
)

func file_steammessages_contentsystem_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_contentsystem_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_contentsystem_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_contentsystem_steamclient_proto_rawDescData)
	})
	return file_steammessages_contentsystem_steamclient_proto_rawDescData
}

var file_steammessages_contentsystem_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_contentsystem_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_steammessages_contentsystem_steamclient_proto_goTypes = []any{
	(EAppContentDetectionType)(0),                                     // 0: EAppContentDetectionType
	(*CContentServerDirectory_ConnectedSteamPipeServerInfo)(nil),      // 1: CContentServerDirectory_ConnectedSteamPipeServerInfo
	(*CContentServerDirectory_GetServersForSteamPipe_Request)(nil),    // 2: CContentServerDirectory_GetServersForSteamPipe_Request
	(*CContentServerDirectory_ServerInfo)(nil),                        // 3: CContentServerDirectory_ServerInfo
	(*CContentServerDirectory_GetServersForSteamPipe_Response)(nil),   // 4: CContentServerDirectory_GetServersForSteamPipe_Response
	(*CContentServerDirectory_GetDepotPatchInfo_Request)(nil),         // 5: CContentServerDirectory_GetDepotPatchInfo_Request
	(*CContentServerDirectory_GetDepotPatchInfo_Response)(nil),        // 6: CContentServerDirectory_GetDepotPatchInfo_Response
	(*CContentServerDirectory_GetClientUpdateHosts_Request)(nil),      // 7: CContentServerDirectory_GetClientUpdateHosts_Request
	(*CContentServerDirectory_GetClientUpdateHosts_Response)(nil),     // 8: CContentServerDirectory_GetClientUpdateHosts_Response
	(*CContentServerDirectory_GetManifestRequestCode_Request)(nil),    // 9: CContentServerDirectory_GetManifestRequestCode_Request
	(*CContentServerDirectory_GetManifestRequestCode_Response)(nil),   // 10: CContentServerDirectory_GetManifestRequestCode_Response
	(*CContentServerDirectory_GetCDNAuthToken_Request)(nil),           // 11: CContentServerDirectory_GetCDNAuthToken_Request
	(*CContentServerDirectory_GetCDNAuthToken_Response)(nil),          // 12: CContentServerDirectory_GetCDNAuthToken_Response
	(*CContentServerDirectory_RequestPeerContentServer_Request)(nil),  // 13: CContentServerDirectory_RequestPeerContentServer_Request
	(*CContentServerDirectory_RequestPeerContentServer_Response)(nil), // 14: CContentServerDirectory_RequestPeerContentServer_Response
	(*CContentServerDirectory_GetPeerContentInfo_Request)(nil),        // 15: CContentServerDirectory_GetPeerContentInfo_Request
	(*CContentServerDirectory_GetPeerContentInfo_Response)(nil),       // 16: CContentServerDirectory_GetPeerContentInfo_Response
	(*CDepotContentDetection_GetAllDetectedAppContent_Request)(nil),   // 17: CDepotContentDetection_GetAllDetectedAppContent_Request
	(*DetectedAppContent)(nil),                                        // 18: DetectedAppContent
	(*CDepotContentDetection_GetAllDetectedAppContent_Response)(nil),  // 19: CDepotContentDetection_GetAllDetectedAppContent_Response
}
var file_steammessages_contentsystem_steamclient_proto_depIdxs = []int32{
	1,  // 0: CContentServerDirectory_GetServersForSteamPipe_Request.current_connections:type_name -> CContentServerDirectory_ConnectedSteamPipeServerInfo
	3,  // 1: CContentServerDirectory_GetServersForSteamPipe_Response.servers:type_name -> CContentServerDirectory_ServerInfo
	0,  // 2: CDepotContentDetection_GetAllDetectedAppContent_Request.detection_type:type_name -> EAppContentDetectionType
	18, // 3: CDepotContentDetection_GetAllDetectedAppContent_Response.detected_app_content:type_name -> DetectedAppContent
	2,  // 4: ContentServerDirectory.GetServersForSteamPipe:input_type -> CContentServerDirectory_GetServersForSteamPipe_Request
	5,  // 5: ContentServerDirectory.GetDepotPatchInfo:input_type -> CContentServerDirectory_GetDepotPatchInfo_Request
	7,  // 6: ContentServerDirectory.GetClientUpdateHosts:input_type -> CContentServerDirectory_GetClientUpdateHosts_Request
	9,  // 7: ContentServerDirectory.GetManifestRequestCode:input_type -> CContentServerDirectory_GetManifestRequestCode_Request
	11, // 8: ContentServerDirectory.GetCDNAuthToken:input_type -> CContentServerDirectory_GetCDNAuthToken_Request
	13, // 9: ContentServerDirectory.RequestPeerContentServer:input_type -> CContentServerDirectory_RequestPeerContentServer_Request
	15, // 10: ContentServerDirectory.GetPeerContentInfo:input_type -> CContentServerDirectory_GetPeerContentInfo_Request
	17, // 11: DepotContentDetection.GetAllDetectedAppContent:input_type -> CDepotContentDetection_GetAllDetectedAppContent_Request
	4,  // 12: ContentServerDirectory.GetServersForSteamPipe:output_type -> CContentServerDirectory_GetServersForSteamPipe_Response
	6,  // 13: ContentServerDirectory.GetDepotPatchInfo:output_type -> CContentServerDirectory_GetDepotPatchInfo_Response
	8,  // 14: ContentServerDirectory.GetClientUpdateHosts:output_type -> CContentServerDirectory_GetClientUpdateHosts_Response
	10, // 15: ContentServerDirectory.GetManifestRequestCode:output_type -> CContentServerDirectory_GetManifestRequestCode_Response
	12, // 16: ContentServerDirectory.GetCDNAuthToken:output_type -> CContentServerDirectory_GetCDNAuthToken_Response
	14, // 17: ContentServerDirectory.RequestPeerContentServer:output_type -> CContentServerDirectory_RequestPeerContentServer_Response
	16, // 18: ContentServerDirectory.GetPeerContentInfo:output_type -> CContentServerDirectory_GetPeerContentInfo_Response
	19, // 19: DepotContentDetection.GetAllDetectedAppContent:output_type -> CDepotContentDetection_GetAllDetectedAppContent_Response
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_steammessages_contentsystem_steamclient_proto_init() }
func file_steammessages_contentsystem_steamclient_proto_init() {
	if File_steammessages_contentsystem_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_contentsystem_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_ConnectedSteamPipeServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetServersForSteamPipe_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetServersForSteamPipe_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetDepotPatchInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetDepotPatchInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetClientUpdateHosts_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetClientUpdateHosts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetManifestRequestCode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetManifestRequestCode_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetCDNAuthToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetCDNAuthToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_RequestPeerContentServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_RequestPeerContentServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetPeerContentInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CContentServerDirectory_GetPeerContentInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CDepotContentDetection_GetAllDetectedAppContent_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DetectedAppContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_contentsystem_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CDepotContentDetection_GetAllDetectedAppContent_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_contentsystem_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_contentsystem_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_contentsystem_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_contentsystem_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_contentsystem_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_contentsystem_steamclient_proto = out.File
	file_steammessages_contentsystem_steamclient_proto_rawDesc = nil
	file_steammessages_contentsystem_steamclient_proto_goTypes = nil
	file_steammessages_contentsystem_steamclient_proto_depIdxs = nil
}
