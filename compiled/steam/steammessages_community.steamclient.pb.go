// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_community.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPartnerEventDisplayLocation int32

const (
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_Invalid             EPartnerEventDisplayLocation = 0
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_AppDetailsSpotlight EPartnerEventDisplayLocation = 1
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_LibraryOverview     EPartnerEventDisplayLocation = 2
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_StoreAppPage        EPartnerEventDisplayLocation = 3
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_EventScroller       EPartnerEventDisplayLocation = 4
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_AppDetailsActivity  EPartnerEventDisplayLocation = 5
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_CommunityHub        EPartnerEventDisplayLocation = 6
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_StoreFrontPage      EPartnerEventDisplayLocation = 7
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_NewsHub             EPartnerEventDisplayLocation = 8
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_GamepadHome         EPartnerEventDisplayLocation = 9
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_StoreHub            EPartnerEventDisplayLocation = 10
)

// Enum value maps for EPartnerEventDisplayLocation.
var (
	EPartnerEventDisplayLocation_name = map[int32]string{
		0:  "k_EPartnerEventDisplayLocation_Invalid",
		1:  "k_EPartnerEventDisplayLocation_AppDetailsSpotlight",
		2:  "k_EPartnerEventDisplayLocation_LibraryOverview",
		3:  "k_EPartnerEventDisplayLocation_StoreAppPage",
		4:  "k_EPartnerEventDisplayLocation_EventScroller",
		5:  "k_EPartnerEventDisplayLocation_AppDetailsActivity",
		6:  "k_EPartnerEventDisplayLocation_CommunityHub",
		7:  "k_EPartnerEventDisplayLocation_StoreFrontPage",
		8:  "k_EPartnerEventDisplayLocation_NewsHub",
		9:  "k_EPartnerEventDisplayLocation_GamepadHome",
		10: "k_EPartnerEventDisplayLocation_StoreHub",
	}
	EPartnerEventDisplayLocation_value = map[string]int32{
		"k_EPartnerEventDisplayLocation_Invalid":             0,
		"k_EPartnerEventDisplayLocation_AppDetailsSpotlight": 1,
		"k_EPartnerEventDisplayLocation_LibraryOverview":     2,
		"k_EPartnerEventDisplayLocation_StoreAppPage":        3,
		"k_EPartnerEventDisplayLocation_EventScroller":       4,
		"k_EPartnerEventDisplayLocation_AppDetailsActivity":  5,
		"k_EPartnerEventDisplayLocation_CommunityHub":        6,
		"k_EPartnerEventDisplayLocation_StoreFrontPage":      7,
		"k_EPartnerEventDisplayLocation_NewsHub":             8,
		"k_EPartnerEventDisplayLocation_GamepadHome":         9,
		"k_EPartnerEventDisplayLocation_StoreHub":            10,
	}
)

func (x EPartnerEventDisplayLocation) Enum() *EPartnerEventDisplayLocation {
	p := new(EPartnerEventDisplayLocation)
	*p = x
	return p
}

func (x EPartnerEventDisplayLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPartnerEventDisplayLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_community_steamclient_proto_enumTypes[0].Descriptor()
}

func (EPartnerEventDisplayLocation) Type() protoreflect.EnumType {
	return &file_steammessages_community_steamclient_proto_enumTypes[0]
}

func (x EPartnerEventDisplayLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPartnerEventDisplayLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPartnerEventDisplayLocation(num)
	return nil
}

// Deprecated: Use EPartnerEventDisplayLocation.Descriptor instead.
func (EPartnerEventDisplayLocation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{0}
}

type CCommunity_GetApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids   []int32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	Language *uint32 `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_GetApps_Request) Reset() {
	*x = CCommunity_GetApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Request) ProtoMessage() {}

func (x *CCommunity_GetApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CCommunity_GetApps_Request) GetAppids() []int32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CCommunity_GetApps_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CCommunity_GetApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*CCDDBAppDetailCommon `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (x *CCommunity_GetApps_Response) Reset() {
	*x = CCommunity_GetApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Response) ProtoMessage() {}

func (x *CCommunity_GetApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CCommunity_GetApps_Response) GetApps() []*CCDDBAppDetailCommon {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Request) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *int32                                                          `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	TokenLists []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList `protobuf:"bytes,2,rep,name=token_lists,json=tokenLists" json:"token_lists,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetTokenLists() []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList {
	if x != nil {
		return x.TokenLists
	}
	return nil
}

type CCommunity_GetCommentThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64             `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *ECommentThreadType `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType,enum=ECommentThreadType,def=0" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64             `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64             `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Commentthreadid   *uint64             `protobuf:"fixed64,5,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start             *int32              `protobuf:"varint,6,opt,name=start" json:"start,omitempty"`
	Count             *int32              `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Upvoters          *int32              `protobuf:"varint,8,opt,name=upvoters" json:"upvoters,omitempty"`
	IncludeDeleted    *bool               `protobuf:"varint,9,opt,name=include_deleted,json=includeDeleted" json:"include_deleted,omitempty"`
	Gidcomment        *uint64             `protobuf:"fixed64,10,opt,name=gidcomment" json:"gidcomment,omitempty"`
	TimeOldest        *uint32             `protobuf:"varint,11,opt,name=time_oldest,json=timeOldest" json:"time_oldest,omitempty"`
	OldestFirst       *bool               `protobuf:"varint,12,opt,name=oldest_first,json=oldestFirst" json:"oldest_first,omitempty"`
}

// Default values for CCommunity_GetCommentThread_Request fields.
const (
	Default_CCommunity_GetCommentThread_Request_CommentThreadType = ECommentThreadType_k_ECommentThreadTypeInvalid
)

func (x *CCommunity_GetCommentThread_Request) Reset() {
	*x = CCommunity_GetCommentThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Request) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CCommunity_GetCommentThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCommentThreadType() ECommentThreadType {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return Default_CCommunity_GetCommentThread_Request_CommentThreadType
}

func (x *CCommunity_GetCommentThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetUpvoters() int32 {
	if x != nil && x.Upvoters != nil {
		return *x.Upvoters
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetIncludeDeleted() bool {
	if x != nil && x.IncludeDeleted != nil {
		return *x.IncludeDeleted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetTimeOldest() uint32 {
	if x != nil && x.TimeOldest != nil {
		return *x.TimeOldest
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetOldestFirst() bool {
	if x != nil && x.OldestFirst != nil {
		return *x.OldestFirst
	}
	return false
}

type CCommunity_Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment       *uint64                        `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Steamid          *uint64                        `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Timestamp        *uint32                        `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Text             *string                        `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Upvotes          *int32                         `protobuf:"varint,5,opt,name=upvotes" json:"upvotes,omitempty"`
	Hidden           *bool                          `protobuf:"varint,6,opt,name=hidden" json:"hidden,omitempty"`
	HiddenByUser     *bool                          `protobuf:"varint,7,opt,name=hidden_by_user,json=hiddenByUser" json:"hidden_by_user,omitempty"`
	Deleted          *bool                          `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
	Ipaddress        *CMsgIPAddress                 `protobuf:"bytes,9,opt,name=ipaddress" json:"ipaddress,omitempty"`
	TotalHidden      *int32                         `protobuf:"varint,10,opt,name=total_hidden,json=totalHidden" json:"total_hidden,omitempty"`
	UpvotedByUser    *bool                          `protobuf:"varint,11,opt,name=upvoted_by_user,json=upvotedByUser" json:"upvoted_by_user,omitempty"`
	Reactions        []*CCommunity_Comment_Reaction `protobuf:"bytes,12,rep,name=reactions" json:"reactions,omitempty"`
	Gidparentcomment *uint64                        `protobuf:"fixed64,13,opt,name=gidparentcomment" json:"gidparentcomment,omitempty"`
}

func (x *CCommunity_Comment) Reset() {
	*x = CCommunity_Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_Comment) ProtoMessage() {}

func (x *CCommunity_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_Comment.ProtoReflect.Descriptor instead.
func (*CCommunity_Comment) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CCommunity_Comment) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_Comment) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_Comment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCommunity_Comment) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_Comment) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_Comment) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CCommunity_Comment) GetHiddenByUser() bool {
	if x != nil && x.HiddenByUser != nil {
		return *x.HiddenByUser
	}
	return false
}

func (x *CCommunity_Comment) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CCommunity_Comment) GetIpaddress() *CMsgIPAddress {
	if x != nil {
		return x.Ipaddress
	}
	return nil
}

func (x *CCommunity_Comment) GetTotalHidden() int32 {
	if x != nil && x.TotalHidden != nil {
		return *x.TotalHidden
	}
	return 0
}

func (x *CCommunity_Comment) GetUpvotedByUser() bool {
	if x != nil && x.UpvotedByUser != nil {
		return *x.UpvotedByUser
	}
	return false
}

func (x *CCommunity_Comment) GetReactions() []*CCommunity_Comment_Reaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *CCommunity_Comment) GetGidparentcomment() uint64 {
	if x != nil && x.Gidparentcomment != nil {
		return *x.Gidparentcomment
	}
	return 0
}

type CCommunity_GetCommentThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments          []*CCommunity_Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	DeletedComments   []*CCommunity_Comment `protobuf:"bytes,2,rep,name=deleted_comments,json=deletedComments" json:"deleted_comments,omitempty"`
	Steamid           *uint64               `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Commentthreadid   *uint64               `protobuf:"fixed64,4,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start             *int32                `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	Count             *int32                `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	TotalCount        *int32                `protobuf:"varint,7,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Upvotes           *int32                `protobuf:"varint,8,opt,name=upvotes" json:"upvotes,omitempty"`
	Upvoters          []uint32              `protobuf:"varint,9,rep,name=upvoters" json:"upvoters,omitempty"`
	UserSubscribed    *bool                 `protobuf:"varint,10,opt,name=user_subscribed,json=userSubscribed" json:"user_subscribed,omitempty"`
	UserUpvoted       *bool                 `protobuf:"varint,11,opt,name=user_upvoted,json=userUpvoted" json:"user_upvoted,omitempty"`
	AnswerCommentid   *uint64               `protobuf:"fixed64,12,opt,name=answer_commentid,json=answerCommentid" json:"answer_commentid,omitempty"`
	AnswerActor       *uint32               `protobuf:"varint,13,opt,name=answer_actor,json=answerActor" json:"answer_actor,omitempty"`
	AnswerActorRank   *int32                `protobuf:"varint,14,opt,name=answer_actor_rank,json=answerActorRank" json:"answer_actor_rank,omitempty"`
	CanPost           *bool                 `protobuf:"varint,15,opt,name=can_post,json=canPost" json:"can_post,omitempty"`
	CommentThreadType *uint32               `protobuf:"varint,16,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64               `protobuf:"fixed64,17,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64               `protobuf:"fixed64,18,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
}

func (x *CCommunity_GetCommentThread_Response) Reset() {
	*x = CCommunity_GetCommentThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CCommunity_GetCommentThread_Response) GetComments() []*CCommunity_Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetDeletedComments() []*CCommunity_Comment {
	if x != nil {
		return x.DeletedComments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvoters() []uint32 {
	if x != nil {
		return x.Upvoters
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetUserSubscribed() bool {
	if x != nil && x.UserSubscribed != nil {
		return *x.UserSubscribed
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetUserUpvoted() bool {
	if x != nil && x.UserUpvoted != nil {
		return *x.UserUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerCommentid() uint64 {
	if x != nil && x.AnswerCommentid != nil {
		return *x.AnswerCommentid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActor() uint32 {
	if x != nil && x.AnswerActor != nil {
		return *x.AnswerActor
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActorRank() int32 {
	if x != nil && x.AnswerActorRank != nil {
		return *x.AnswerActorRank
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCanPost() bool {
	if x != nil && x.CanPost != nil {
		return *x.CanPost
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetCommentThreadType() uint32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

type CCommunity_PostCommentToThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid               *uint64             `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType     *ECommentThreadType `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType,enum=ECommentThreadType,def=0" json:"comment_thread_type,omitempty"`
	Gidfeature            *uint64             `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2           *uint64             `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Text                  *string             `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Gidparentcomment      *uint64             `protobuf:"fixed64,7,opt,name=gidparentcomment" json:"gidparentcomment,omitempty"`
	SuppressNotifications *bool               `protobuf:"varint,8,opt,name=suppress_notifications,json=suppressNotifications" json:"suppress_notifications,omitempty"`
	IsReport              *bool               `protobuf:"varint,9,opt,name=is_report,json=isReport" json:"is_report,omitempty"`
	StartHidden           *bool               `protobuf:"varint,10,opt,name=start_hidden,json=startHidden" json:"start_hidden,omitempty"`
}

// Default values for CCommunity_PostCommentToThread_Request fields.
const (
	Default_CCommunity_PostCommentToThread_Request_CommentThreadType = ECommentThreadType_k_ECommentThreadTypeInvalid
)

func (x *CCommunity_PostCommentToThread_Request) Reset() {
	*x = CCommunity_PostCommentToThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PostCommentToThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Request) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CCommunity_PostCommentToThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetCommentThreadType() ECommentThreadType {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return Default_CCommunity_PostCommentToThread_Request_CommentThreadType
}

func (x *CCommunity_PostCommentToThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_PostCommentToThread_Request) GetGidparentcomment() uint64 {
	if x != nil && x.Gidparentcomment != nil {
		return *x.Gidparentcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetSuppressNotifications() bool {
	if x != nil && x.SuppressNotifications != nil {
		return *x.SuppressNotifications
	}
	return false
}

func (x *CCommunity_PostCommentToThread_Request) GetIsReport() bool {
	if x != nil && x.IsReport != nil {
		return *x.IsReport
	}
	return false
}

func (x *CCommunity_PostCommentToThread_Request) GetStartHidden() bool {
	if x != nil && x.StartHidden != nil {
		return *x.StartHidden
	}
	return false
}

type CCommunity_PostCommentToThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment      *uint64 `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64 `protobuf:"fixed64,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *int32  `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
}

func (x *CCommunity_PostCommentToThread_Response) Reset() {
	*x = CCommunity_PostCommentToThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PostCommentToThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Response) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CCommunity_PostCommentToThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

type CCommunity_DeleteCommentFromThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64             `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *ECommentThreadType `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType,enum=ECommentThreadType,def=0" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64             `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64             `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64             `protobuf:"fixed64,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Undelete          *bool               `protobuf:"varint,6,opt,name=undelete" json:"undelete,omitempty"`
}

// Default values for CCommunity_DeleteCommentFromThread_Request fields.
const (
	Default_CCommunity_DeleteCommentFromThread_Request_CommentThreadType = ECommentThreadType_k_ECommentThreadTypeInvalid
)

func (x *CCommunity_DeleteCommentFromThread_Request) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_DeleteCommentFromThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Request) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetCommentThreadType() ECommentThreadType {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return Default_CCommunity_DeleteCommentFromThread_Request_CommentThreadType
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetUndelete() bool {
	if x != nil && x.Undelete != nil {
		return *x.Undelete
	}
	return false
}

type CCommunity_DeleteCommentFromThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_DeleteCommentFromThread_Response) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_DeleteCommentFromThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Response) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{10}
}

type CCommunity_RateCommentThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadtype     *string `protobuf:"bytes,1,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Steamid               *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Gidfeature            *uint64 `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2           *uint64 `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment            *uint64 `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	RateUp                *bool   `protobuf:"varint,6,opt,name=rate_up,json=rateUp" json:"rate_up,omitempty"`
	SuppressNotifications *bool   `protobuf:"varint,7,opt,name=suppress_notifications,json=suppressNotifications" json:"suppress_notifications,omitempty"`
}

func (x *CCommunity_RateCommentThread_Request) Reset() {
	*x = CCommunity_RateCommentThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateCommentThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Request) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CCommunity_RateCommentThread_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_RateCommentThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetRateUp() bool {
	if x != nil && x.RateUp != nil {
		return *x.RateUp
	}
	return false
}

func (x *CCommunity_RateCommentThread_Request) GetSuppressNotifications() bool {
	if x != nil && x.SuppressNotifications != nil {
		return *x.SuppressNotifications
	}
	return false
}

type CCommunity_RateCommentThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment      *uint64 `protobuf:"varint,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64 `protobuf:"varint,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *uint32 `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted      *bool   `protobuf:"varint,5,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
}

func (x *CCommunity_RateCommentThread_Response) Reset() {
	*x = CCommunity_RateCommentThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CCommunity_RateCommentThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

type CCommunity_GetCommentThreadRatings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadtype *string `protobuf:"bytes,1,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Steamid           *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Gidfeature        *uint64 `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64 `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64 `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	MaxResults        *uint32 `protobuf:"varint,6,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
}

func (x *CCommunity_GetCommentThreadRatings_Request) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThreadRatings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Request) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

type CCommunity_GetCommentThreadRatings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadid   *uint64  `protobuf:"varint,1,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Gidcomment        *uint64  `protobuf:"varint,2,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Upvotes           *uint32  `protobuf:"varint,3,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted        *bool    `protobuf:"varint,4,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
	UpvoterAccountids []uint32 `protobuf:"varint,5,rep,name=upvoter_accountids,json=upvoterAccountids" json:"upvoter_accountids,omitempty"`
}

func (x *CCommunity_GetCommentThreadRatings_Response) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThreadRatings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvoterAccountids() []uint32 {
	if x != nil {
		return x.UpvoterAccountids
	}
	return nil
}

type CCommunity_RateClanAnnouncement_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Announcementid *uint64 `protobuf:"varint,1,opt,name=announcementid" json:"announcementid,omitempty"`
	VoteUp         *bool   `protobuf:"varint,2,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
	ClanAccountid  *uint32 `protobuf:"varint,3,opt,name=clan_accountid,json=clanAccountid" json:"clan_accountid,omitempty"`
}

func (x *CCommunity_RateClanAnnouncement_Request) Reset() {
	*x = CCommunity_RateClanAnnouncement_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateClanAnnouncement_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Request) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CCommunity_RateClanAnnouncement_Request) GetAnnouncementid() uint64 {
	if x != nil && x.Announcementid != nil {
		return *x.Announcementid
	}
	return 0
}

func (x *CCommunity_RateClanAnnouncement_Request) GetVoteUp() bool {
	if x != nil && x.VoteUp != nil {
		return *x.VoteUp
	}
	return false
}

func (x *CCommunity_RateClanAnnouncement_Request) GetClanAccountid() uint32 {
	if x != nil && x.ClanAccountid != nil {
		return *x.ClanAccountid
	}
	return 0
}

type CCommunity_RateClanAnnouncement_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_RateClanAnnouncement_Response) Reset() {
	*x = CCommunity_RateClanAnnouncement_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateClanAnnouncement_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Response) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{16}
}

type CCommunity_GetClanAnnouncementVoteForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Announcementid *uint64 `protobuf:"varint,1,opt,name=announcementid" json:"announcementid,omitempty"`
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Request) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) GetAnnouncementid() uint64 {
	if x != nil && x.Announcementid != nil {
		return *x.Announcementid
	}
	return 0
}

type CCommunity_GetClanAnnouncementVoteForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotedUp   *bool `protobuf:"varint,1,opt,name=voted_up,json=votedUp" json:"voted_up,omitempty"`
	VotedDown *bool `protobuf:"varint,2,opt,name=voted_down,json=votedDown" json:"voted_down,omitempty"`
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedUp() bool {
	if x != nil && x.VotedUp != nil {
		return *x.VotedUp
	}
	return false
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedDown() bool {
	if x != nil && x.VotedDown != nil {
		return *x.VotedDown
	}
	return false
}

type CCommunity_GetAvatarHistory_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	FilterUserUploadedOnly *bool   `protobuf:"varint,2,opt,name=filter_user_uploaded_only,json=filterUserUploadedOnly" json:"filter_user_uploaded_only,omitempty"`
}

func (x *CCommunity_GetAvatarHistory_Request) Reset() {
	*x = CCommunity_GetAvatarHistory_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAvatarHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAvatarHistory_Request) ProtoMessage() {}

func (x *CCommunity_GetAvatarHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAvatarHistory_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAvatarHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CCommunity_GetAvatarHistory_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetAvatarHistory_Request) GetFilterUserUploadedOnly() bool {
	if x != nil && x.FilterUserUploadedOnly != nil {
		return *x.FilterUserUploadedOnly
	}
	return false
}

type CCommunity_GetAvatarHistory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatars []*CCommunity_GetAvatarHistory_Response_AvatarData `protobuf:"bytes,1,rep,name=avatars" json:"avatars,omitempty"`
}

func (x *CCommunity_GetAvatarHistory_Response) Reset() {
	*x = CCommunity_GetAvatarHistory_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAvatarHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAvatarHistory_Response) ProtoMessage() {}

func (x *CCommunity_GetAvatarHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAvatarHistory_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAvatarHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CCommunity_GetAvatarHistory_Response) GetAvatars() []*CCommunity_GetAvatarHistory_Response_AvatarData {
	if x != nil {
		return x.Avatars
	}
	return nil
}

type CCommunity_GetClanEventCrowdInMetadata_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Itemid  *uint64 `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) Reset() {
	*x = CCommunity_GetClanEventCrowdInMetadata_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanEventCrowdInMetadata_Request) ProtoMessage() {}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanEventCrowdInMetadata_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanEventCrowdInMetadata_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CCommunity_GetClanEventCrowdInMetadata_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrowdinProjectId *uint64 `protobuf:"varint,1,opt,name=crowdin_project_id,json=crowdinProjectId" json:"crowdin_project_id,omitempty"`
	CrowdinFileId    *uint64 `protobuf:"varint,2,opt,name=crowdin_file_id,json=crowdinFileId" json:"crowdin_file_id,omitempty"`
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) Reset() {
	*x = CCommunity_GetClanEventCrowdInMetadata_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanEventCrowdInMetadata_Response) ProtoMessage() {}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanEventCrowdInMetadata_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanEventCrowdInMetadata_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) GetCrowdinProjectId() uint64 {
	if x != nil && x.CrowdinProjectId != nil {
		return *x.CrowdinProjectId
	}
	return 0
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) GetCrowdinFileId() uint64 {
	if x != nil && x.CrowdinFileId != nil {
		return *x.CrowdinFileId
	}
	return 0
}

type CCommunity_GetClanCrowdInMetadata_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CCommunity_GetClanCrowdInMetadata_Request) Reset() {
	*x = CCommunity_GetClanCrowdInMetadata_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanCrowdInMetadata_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanCrowdInMetadata_Request) ProtoMessage() {}

func (x *CCommunity_GetClanCrowdInMetadata_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanCrowdInMetadata_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanCrowdInMetadata_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CCommunity_GetClanCrowdInMetadata_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CCommunity_GetClanCrowdInMetadata_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrowdinProjectId   *uint64 `protobuf:"varint,1,opt,name=crowdin_project_id,json=crowdinProjectId" json:"crowdin_project_id,omitempty"`
	CrowdinDirectoryId *uint64 `protobuf:"varint,2,opt,name=crowdin_directory_id,json=crowdinDirectoryId" json:"crowdin_directory_id,omitempty"`
	PushByDefault      *bool   `protobuf:"varint,3,opt,name=push_by_default,json=pushByDefault" json:"push_by_default,omitempty"`
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) Reset() {
	*x = CCommunity_GetClanCrowdInMetadata_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanCrowdInMetadata_Response) ProtoMessage() {}

func (x *CCommunity_GetClanCrowdInMetadata_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanCrowdInMetadata_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanCrowdInMetadata_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) GetCrowdinProjectId() uint64 {
	if x != nil && x.CrowdinProjectId != nil {
		return *x.CrowdinProjectId
	}
	return 0
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) GetCrowdinDirectoryId() uint64 {
	if x != nil && x.CrowdinDirectoryId != nil {
		return *x.CrowdinDirectoryId
	}
	return 0
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) GetPushByDefault() bool {
	if x != nil && x.PushByDefault != nil {
		return *x.PushByDefault
	}
	return false
}

type CCommunity_FetchTranslationFromCrowdIn_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Itemid   *uint64 `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	Language *uint32 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) Reset() {
	*x = CCommunity_FetchTranslationFromCrowdIn_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_FetchTranslationFromCrowdIn_Request) ProtoMessage() {}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_FetchTranslationFromCrowdIn_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_FetchTranslationFromCrowdIn_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CCommunity_FetchTranslationFromCrowdIn_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Response) Reset() {
	*x = CCommunity_FetchTranslationFromCrowdIn_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_FetchTranslationFromCrowdIn_Response) ProtoMessage() {}

func (x *CCommunity_FetchTranslationFromCrowdIn_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_FetchTranslationFromCrowdIn_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_FetchTranslationFromCrowdIn_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{26}
}

type CAppPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority *uint32  `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Appid    []uint32 `protobuf:"varint,2,rep,name=appid" json:"appid,omitempty"`
}

func (x *CAppPriority) Reset() {
	*x = CAppPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppPriority) ProtoMessage() {}

func (x *CAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppPriority.ProtoReflect.Descriptor instead.
func (*CAppPriority) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CAppPriority) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CAppPriority) GetAppid() []uint32 {
	if x != nil {
		return x.Appid
	}
	return nil
}

type CCommunity_GetUserPartnerEventNews_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count              *uint32               `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Offset             *uint32               `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Rtime32StartTime   *uint32               `protobuf:"varint,3,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	Rtime32EndTime     *uint32               `protobuf:"varint,4,opt,name=rtime32_end_time,json=rtime32EndTime" json:"rtime32_end_time,omitempty"`
	LanguagePreference []uint32              `protobuf:"varint,5,rep,name=language_preference,json=languagePreference" json:"language_preference,omitempty"`
	FilterEventType    []EProtoClanEventType `protobuf:"varint,6,rep,name=filter_event_type,json=filterEventType,enum=EProtoClanEventType" json:"filter_event_type,omitempty"`
	FilterToAppid      *bool                 `protobuf:"varint,7,opt,name=filter_to_appid,json=filterToAppid" json:"filter_to_appid,omitempty"`
	AppList            []*CAppPriority       `protobuf:"bytes,8,rep,name=app_list,json=appList" json:"app_list,omitempty"`
	CountAfter         *uint32               `protobuf:"varint,9,opt,name=count_after,json=countAfter,def=0" json:"count_after,omitempty"`
	CountBefore        *uint32               `protobuf:"varint,10,opt,name=count_before,json=countBefore,def=0" json:"count_before,omitempty"`
}

// Default values for CCommunity_GetUserPartnerEventNews_Request fields.
const (
	Default_CCommunity_GetUserPartnerEventNews_Request_CountAfter  = uint32(0)
	Default_CCommunity_GetUserPartnerEventNews_Request_CountBefore = uint32(0)
)

func (x *CCommunity_GetUserPartnerEventNews_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventNews_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetRtime32StartTime() uint32 {
	if x != nil && x.Rtime32StartTime != nil {
		return *x.Rtime32StartTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetRtime32EndTime() uint32 {
	if x != nil && x.Rtime32EndTime != nil {
		return *x.Rtime32EndTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetLanguagePreference() []uint32 {
	if x != nil {
		return x.LanguagePreference
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetFilterEventType() []EProtoClanEventType {
	if x != nil {
		return x.FilterEventType
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetFilterToAppid() bool {
	if x != nil && x.FilterToAppid != nil {
		return *x.FilterToAppid
	}
	return false
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetAppList() []*CAppPriority {
	if x != nil {
		return x.AppList
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCountAfter() uint32 {
	if x != nil && x.CountAfter != nil {
		return *x.CountAfter
	}
	return Default_CCommunity_GetUserPartnerEventNews_Request_CountAfter
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCountBefore() uint32 {
	if x != nil && x.CountBefore != nil {
		return *x.CountBefore
	}
	return Default_CCommunity_GetUserPartnerEventNews_Request_CountBefore
}

type CCommunity_GetUserPartnerEventNews_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CClanMatchEventByRange `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventNews_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) GetResults() []*CClanMatchEventByRange {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_GetBestEventsForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeSteamBlog         *bool   `protobuf:"varint,1,opt,name=include_steam_blog,json=includeSteamBlog" json:"include_steam_blog,omitempty"`
	FilterToPlayedWithinDays *uint32 `protobuf:"varint,2,opt,name=filter_to_played_within_days,json=filterToPlayedWithinDays" json:"filter_to_played_within_days,omitempty"`
	IncludeOnlyGameUpdates   *bool   `protobuf:"varint,3,opt,name=include_only_game_updates,json=includeOnlyGameUpdates" json:"include_only_game_updates,omitempty"`
}

func (x *CCommunity_GetBestEventsForUser_Request) Reset() {
	*x = CCommunity_GetBestEventsForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetBestEventsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Request) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CCommunity_GetBestEventsForUser_Request) GetIncludeSteamBlog() bool {
	if x != nil && x.IncludeSteamBlog != nil {
		return *x.IncludeSteamBlog
	}
	return false
}

func (x *CCommunity_GetBestEventsForUser_Request) GetFilterToPlayedWithinDays() uint32 {
	if x != nil && x.FilterToPlayedWithinDays != nil {
		return *x.FilterToPlayedWithinDays
	}
	return 0
}

func (x *CCommunity_GetBestEventsForUser_Request) GetIncludeOnlyGameUpdates() bool {
	if x != nil && x.IncludeOnlyGameUpdates != nil {
		return *x.IncludeOnlyGameUpdates
	}
	return false
}

type CCommunity_PartnerEventResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid              *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid            *uint64 `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	AnnouncementGid     *uint64 `protobuf:"fixed64,3,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	Appid               *uint32 `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	PossibleTakeover    *bool   `protobuf:"varint,5,opt,name=possible_takeover,json=possibleTakeover" json:"possible_takeover,omitempty"`
	Rtime32LastModified *uint32 `protobuf:"varint,6,opt,name=rtime32_last_modified,json=rtime32LastModified,def=0" json:"rtime32_last_modified,omitempty"`
	UserAppPriority     *int32  `protobuf:"varint,7,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
}

// Default values for CCommunity_PartnerEventResult fields.
const (
	Default_CCommunity_PartnerEventResult_Rtime32LastModified = uint32(0)
)

func (x *CCommunity_PartnerEventResult) Reset() {
	*x = CCommunity_PartnerEventResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventResult) ProtoMessage() {}

func (x *CCommunity_PartnerEventResult) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventResult.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventResult) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CCommunity_PartnerEventResult) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetPossibleTakeover() bool {
	if x != nil && x.PossibleTakeover != nil {
		return *x.PossibleTakeover
	}
	return false
}

func (x *CCommunity_PartnerEventResult) GetRtime32LastModified() uint32 {
	if x != nil && x.Rtime32LastModified != nil {
		return *x.Rtime32LastModified
	}
	return Default_CCommunity_PartnerEventResult_Rtime32LastModified
}

func (x *CCommunity_PartnerEventResult) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetBestEventsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CCommunity_PartnerEventResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CCommunity_GetBestEventsForUser_Response) Reset() {
	*x = CCommunity_GetBestEventsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetBestEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CCommunity_GetBestEventsForUser_Response) GetResults() []*CCommunity_PartnerEventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_MarkPartnerEventsForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markings []*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking `protobuf:"bytes,1,rep,name=markings" json:"markings,omitempty"`
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) GetMarkings() []*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking {
	if x != nil {
		return x.Markings
	}
	return nil
}

type CCommunity_MarkPartnerEventsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{34}
}

type CCommunity_GetUserPartnerEventViewStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventGids             []uint64 `protobuf:"fixed64,1,rep,name=event_gids,json=eventGids" json:"event_gids,omitempty"`
	IncludeReadEventsOnly *bool    `protobuf:"varint,2,opt,name=include_read_events_only,json=includeReadEventsOnly" json:"include_read_events_only,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) GetEventGids() []uint64 {
	if x != nil {
		return x.EventGids
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) GetIncludeReadEventsOnly() bool {
	if x != nil && x.IncludeReadEventsOnly != nil {
		return *x.IncludeReadEventsOnly
	}
	return false
}

type CCommunity_GetUserPartnerEventViewStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) GetEvents() []*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CCommunity_PartnerEventsShowMoreForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Request) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_PartnerEventsShowMoreForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{38}
}

type CCommunity_PartnerEventsShowLessForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Request) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_PartnerEventsShowLessForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{40}
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Request) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{41}
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{42}
}

type CCommunity_GetUserPartnerEventsAppPriorities_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{43}
}

type CCommunity_PartnerEventsAppPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	UserAppPriority *int32  `protobuf:"varint,2,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
}

func (x *CCommunity_PartnerEventsAppPriority) Reset() {
	*x = CCommunity_PartnerEventsAppPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsAppPriority) ProtoMessage() {}

func (x *CCommunity_PartnerEventsAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsAppPriority.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsAppPriority) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CCommunity_PartnerEventsAppPriority) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventsAppPriority) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priorities []*CCommunity_PartnerEventsAppPriority `protobuf:"bytes,1,rep,name=priorities" json:"priorities,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{45}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) GetPriorities() []*CCommunity_PartnerEventsAppPriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Request) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{47}
}

type CCommunity_GetAppRichPresenceLocalization_Response_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_Token.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response_TokenList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string                                                     `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Tokens   []*CCommunity_GetAppRichPresenceLocalization_Response_Token `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_TokenList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_TokenList.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetTokens() []*CCommunity_GetAppRichPresenceLocalization_Response_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CCommunity_Comment_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reactionid *uint32 `protobuf:"varint,1,opt,name=reactionid" json:"reactionid,omitempty"`
	Count      *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CCommunity_Comment_Reaction) Reset() {
	*x = CCommunity_Comment_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_Comment_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_Comment_Reaction) ProtoMessage() {}

func (x *CCommunity_Comment_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_Comment_Reaction.ProtoReflect.Descriptor instead.
func (*CCommunity_Comment_Reaction) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CCommunity_Comment_Reaction) GetReactionid() uint32 {
	if x != nil && x.Reactionid != nil {
		return *x.Reactionid
	}
	return 0
}

func (x *CCommunity_Comment_Reaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CCommunity_GetAvatarHistory_Response_AvatarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarSha1   *string `protobuf:"bytes,1,opt,name=avatar_sha1,json=avatarSha1" json:"avatar_sha1,omitempty"`
	UserUploaded *bool   `protobuf:"varint,2,opt,name=user_uploaded,json=userUploaded" json:"user_uploaded,omitempty"`
	Timestamp    *uint32 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) Reset() {
	*x = CCommunity_GetAvatarHistory_Response_AvatarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAvatarHistory_Response_AvatarData) ProtoMessage() {}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAvatarHistory_Response_AvatarData.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAvatarHistory_Response_AvatarData) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) GetAvatarSha1() string {
	if x != nil && x.AvatarSha1 != nil {
		return *x.AvatarSha1
	}
	return ""
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) GetUserUploaded() bool {
	if x != nil && x.UserUploaded != nil {
		return *x.UserUploaded
	}
	return false
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid          *uint32                       `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid        *uint64                       `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	DisplayLocation *EPartnerEventDisplayLocation `protobuf:"varint,3,opt,name=display_location,json=displayLocation,enum=EPartnerEventDisplayLocation,def=0" json:"display_location,omitempty"`
	MarkShown       *bool                         `protobuf:"varint,4,opt,name=mark_shown,json=markShown" json:"mark_shown,omitempty"`
	MarkRead        *bool                         `protobuf:"varint,5,opt,name=mark_read,json=markRead" json:"mark_read,omitempty"`
}

// Default values for CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking fields.
const (
	Default_CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking_DisplayLocation = EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_Invalid
)

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{33, 0}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetDisplayLocation() EPartnerEventDisplayLocation {
	if x != nil && x.DisplayLocation != nil {
		return *x.DisplayLocation
	}
	return Default_CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking_DisplayLocation
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkShown() bool {
	if x != nil && x.MarkShown != nil {
		return *x.MarkShown
	}
	return false
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkRead() bool {
	if x != nil && x.MarkRead != nil {
		return *x.MarkRead
	}
	return false
}

type CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventGid      *uint64 `protobuf:"fixed64,1,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	LastShownTime *uint32 `protobuf:"varint,2,opt,name=last_shown_time,json=lastShownTime" json:"last_shown_time,omitempty"`
	LastReadTime  *uint32 `protobuf:"varint,3,opt,name=last_read_time,json=lastReadTime" json:"last_read_time,omitempty"`
	ClanAccountId *uint32 `protobuf:"varint,4,opt,name=clan_account_id,json=clanAccountId" json:"clan_account_id,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_community_steamclient_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{36, 0}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetLastShownTime() uint32 {
	if x != nil && x.LastShownTime != nil {
		return *x.LastShownTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetLastReadTime() uint32 {
	if x != nil && x.LastReadTime != nil {
		return *x.LastReadTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetClanAccountId() uint32 {
	if x != nil && x.ClanAccountId != nil {
		return *x.ClanAccountId
	}
	return 0
}

var File_steammessages_community_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_community_steamclient_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x50, 0x0a, 0x1a, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x48, 0x0a, 0x1b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x43, 0x44, 0x44, 0x42, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0x65, 0x0a, 0x31,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x32, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x5e, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x1a, 0x31, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x7a, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0xe2, 0x03, 0x0a, 0x23, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x32, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x6c, 0x64, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x22, 0x95, 0x04, 0x0a, 0x12, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x69, 0x70, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x67, 0x69, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x67, 0x69, 0x64, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x40, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x05, 0x0a,
	0x24, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32,
	0x22, 0x9d, 0x03, 0x0a, 0x26, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x69,
	0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x67, 0x69, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x67, 0x69, 0x64, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x22, 0xa3, 0x01, 0x0a, 0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x2a, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x2d, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0,
	0x02, 0x0a, 0x24, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xc2, 0x01, 0x0a, 0x25, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x55,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x2a, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xe1, 0x01, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69,
	0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x55, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x55,
	0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x31, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x22, 0x6e, 0x0a, 0x32, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x55, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x77,
	0x6e, 0x22, 0x7a, 0x0a, 0x23, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xe4, 0x01,
	0x0a, 0x24, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x73, 0x1a, 0x70, 0x0a, 0x0a, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x68, 0x61,
	0x31, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x62, 0x0a, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x2f, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x72, 0x6f, 0x77, 0x64, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x6f, 0x77, 0x64, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x45, 0x0a, 0x29, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x2a, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x6f, 0x77,
	0x64, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x69, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x7e, 0x0a, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x31, 0x0a, 0x2f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xc1, 0x03, 0x0a, 0x2a, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x33, 0x32, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x41, 0x70, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x60, 0x0a, 0x2b, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x43, 0x6c, 0x61,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x27,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x42, 0x6c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xa5, 0x02, 0x0a, 0x1d, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x15, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x28, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x86,
	0x03, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xf8, 0x01, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x70, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x30, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xb0, 0x02, 0x0a, 0x31, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
	0x31, 0x0a, 0x2f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x0a, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a,
	0x36, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x0a, 0x34, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x23, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a, 0x35, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x4e, 0x0a, 0x36, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xbd, 0x04,
	0x0a, 0x1c, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f,
	0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70,
	0x70, 0x50, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x05,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x75, 0x62, 0x10,
	0x06, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x65, 0x77, 0x73, 0x48, 0x75, 0x62, 0x10, 0x08,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x09,
	0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x75, 0x62, 0x10, 0x0a, 0x32, 0x81, 0x15,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x24, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x27, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x2b, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77,
	0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f,
	0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49, 0x6e, 0x12, 0x2f, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x49,
	0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x6f, 0x77, 0x64,
	0x49, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77,
	0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x12, 0x2f, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x12, 0x2f, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_community_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_community_steamclient_proto_rawDescData = file_steammessages_community_steamclient_proto_rawDesc
)

func file_steammessages_community_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_community_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_community_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_community_steamclient_proto_rawDescData)
	})
	return file_steammessages_community_steamclient_proto_rawDescData
}

var file_steammessages_community_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_community_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_steammessages_community_steamclient_proto_goTypes = []any{
	(EPartnerEventDisplayLocation)(0),                                       // 0: EPartnerEventDisplayLocation
	(*CCommunity_GetApps_Request)(nil),                                      // 1: CCommunity_GetApps_Request
	(*CCommunity_GetApps_Response)(nil),                                     // 2: CCommunity_GetApps_Response
	(*CCommunity_GetAppRichPresenceLocalization_Request)(nil),               // 3: CCommunity_GetAppRichPresenceLocalization_Request
	(*CCommunity_GetAppRichPresenceLocalization_Response)(nil),              // 4: CCommunity_GetAppRichPresenceLocalization_Response
	(*CCommunity_GetCommentThread_Request)(nil),                             // 5: CCommunity_GetCommentThread_Request
	(*CCommunity_Comment)(nil),                                              // 6: CCommunity_Comment
	(*CCommunity_GetCommentThread_Response)(nil),                            // 7: CCommunity_GetCommentThread_Response
	(*CCommunity_PostCommentToThread_Request)(nil),                          // 8: CCommunity_PostCommentToThread_Request
	(*CCommunity_PostCommentToThread_Response)(nil),                         // 9: CCommunity_PostCommentToThread_Response
	(*CCommunity_DeleteCommentFromThread_Request)(nil),                      // 10: CCommunity_DeleteCommentFromThread_Request
	(*CCommunity_DeleteCommentFromThread_Response)(nil),                     // 11: CCommunity_DeleteCommentFromThread_Response
	(*CCommunity_RateCommentThread_Request)(nil),                            // 12: CCommunity_RateCommentThread_Request
	(*CCommunity_RateCommentThread_Response)(nil),                           // 13: CCommunity_RateCommentThread_Response
	(*CCommunity_GetCommentThreadRatings_Request)(nil),                      // 14: CCommunity_GetCommentThreadRatings_Request
	(*CCommunity_GetCommentThreadRatings_Response)(nil),                     // 15: CCommunity_GetCommentThreadRatings_Response
	(*CCommunity_RateClanAnnouncement_Request)(nil),                         // 16: CCommunity_RateClanAnnouncement_Request
	(*CCommunity_RateClanAnnouncement_Response)(nil),                        // 17: CCommunity_RateClanAnnouncement_Response
	(*CCommunity_GetClanAnnouncementVoteForUser_Request)(nil),               // 18: CCommunity_GetClanAnnouncementVoteForUser_Request
	(*CCommunity_GetClanAnnouncementVoteForUser_Response)(nil),              // 19: CCommunity_GetClanAnnouncementVoteForUser_Response
	(*CCommunity_GetAvatarHistory_Request)(nil),                             // 20: CCommunity_GetAvatarHistory_Request
	(*CCommunity_GetAvatarHistory_Response)(nil),                            // 21: CCommunity_GetAvatarHistory_Response
	(*CCommunity_GetClanEventCrowdInMetadata_Request)(nil),                  // 22: CCommunity_GetClanEventCrowdInMetadata_Request
	(*CCommunity_GetClanEventCrowdInMetadata_Response)(nil),                 // 23: CCommunity_GetClanEventCrowdInMetadata_Response
	(*CCommunity_GetClanCrowdInMetadata_Request)(nil),                       // 24: CCommunity_GetClanCrowdInMetadata_Request
	(*CCommunity_GetClanCrowdInMetadata_Response)(nil),                      // 25: CCommunity_GetClanCrowdInMetadata_Response
	(*CCommunity_FetchTranslationFromCrowdIn_Request)(nil),                  // 26: CCommunity_FetchTranslationFromCrowdIn_Request
	(*CCommunity_FetchTranslationFromCrowdIn_Response)(nil),                 // 27: CCommunity_FetchTranslationFromCrowdIn_Response
	(*CAppPriority)(nil),                                                    // 28: CAppPriority
	(*CCommunity_GetUserPartnerEventNews_Request)(nil),                      // 29: CCommunity_GetUserPartnerEventNews_Request
	(*CCommunity_GetUserPartnerEventNews_Response)(nil),                     // 30: CCommunity_GetUserPartnerEventNews_Response
	(*CCommunity_GetBestEventsForUser_Request)(nil),                         // 31: CCommunity_GetBestEventsForUser_Request
	(*CCommunity_PartnerEventResult)(nil),                                   // 32: CCommunity_PartnerEventResult
	(*CCommunity_GetBestEventsForUser_Response)(nil),                        // 33: CCommunity_GetBestEventsForUser_Response
	(*CCommunity_MarkPartnerEventsForUser_Request)(nil),                     // 34: CCommunity_MarkPartnerEventsForUser_Request
	(*CCommunity_MarkPartnerEventsForUser_Response)(nil),                    // 35: CCommunity_MarkPartnerEventsForUser_Response
	(*CCommunity_GetUserPartnerEventViewStatus_Request)(nil),                // 36: CCommunity_GetUserPartnerEventViewStatus_Request
	(*CCommunity_GetUserPartnerEventViewStatus_Response)(nil),               // 37: CCommunity_GetUserPartnerEventViewStatus_Response
	(*CCommunity_PartnerEventsShowMoreForApp_Request)(nil),                  // 38: CCommunity_PartnerEventsShowMoreForApp_Request
	(*CCommunity_PartnerEventsShowMoreForApp_Response)(nil),                 // 39: CCommunity_PartnerEventsShowMoreForApp_Response
	(*CCommunity_PartnerEventsShowLessForApp_Request)(nil),                  // 40: CCommunity_PartnerEventsShowLessForApp_Request
	(*CCommunity_PartnerEventsShowLessForApp_Response)(nil),                 // 41: CCommunity_PartnerEventsShowLessForApp_Response
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Request)(nil),          // 42: CCommunity_ClearUserPartnerEventsAppPriorities_Request
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Response)(nil),         // 43: CCommunity_ClearUserPartnerEventsAppPriorities_Response
	(*CCommunity_GetUserPartnerEventsAppPriorities_Request)(nil),            // 44: CCommunity_GetUserPartnerEventsAppPriorities_Request
	(*CCommunity_PartnerEventsAppPriority)(nil),                             // 45: CCommunity_PartnerEventsAppPriority
	(*CCommunity_GetUserPartnerEventsAppPriorities_Response)(nil),           // 46: CCommunity_GetUserPartnerEventsAppPriorities_Response
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Request)(nil),          // 47: CCommunity_ClearSinglePartnerEventsAppPriority_Request
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Response)(nil),         // 48: CCommunity_ClearSinglePartnerEventsAppPriority_Response
	(*CCommunity_GetAppRichPresenceLocalization_Response_Token)(nil),        // 49: CCommunity_GetAppRichPresenceLocalization_Response.Token
	(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList)(nil),    // 50: CCommunity_GetAppRichPresenceLocalization_Response.TokenList
	(*CCommunity_Comment_Reaction)(nil),                                     // 51: CCommunity_Comment.Reaction
	(*CCommunity_GetAvatarHistory_Response_AvatarData)(nil),                 // 52: CCommunity_GetAvatarHistory_Response.AvatarData
	(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking)(nil), // 53: CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking
	(*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent)(nil),  // 54: CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent
	(*CCDDBAppDetailCommon)(nil),                                            // 55: CCDDBAppDetailCommon
	(ECommentThreadType)(0),                                                 // 56: ECommentThreadType
	(*CMsgIPAddress)(nil),                                                   // 57: CMsgIPAddress
	(EProtoClanEventType)(0),                                                // 58: EProtoClanEventType
	(*CClanMatchEventByRange)(nil),                                          // 59: CClanMatchEventByRange
}
var file_steammessages_community_steamclient_proto_depIdxs = []int32{
	55, // 0: CCommunity_GetApps_Response.apps:type_name -> CCDDBAppDetailCommon
	50, // 1: CCommunity_GetAppRichPresenceLocalization_Response.token_lists:type_name -> CCommunity_GetAppRichPresenceLocalization_Response.TokenList
	56, // 2: CCommunity_GetCommentThread_Request.comment_thread_type:type_name -> ECommentThreadType
	57, // 3: CCommunity_Comment.ipaddress:type_name -> CMsgIPAddress
	51, // 4: CCommunity_Comment.reactions:type_name -> CCommunity_Comment.Reaction
	6,  // 5: CCommunity_GetCommentThread_Response.comments:type_name -> CCommunity_Comment
	6,  // 6: CCommunity_GetCommentThread_Response.deleted_comments:type_name -> CCommunity_Comment
	56, // 7: CCommunity_PostCommentToThread_Request.comment_thread_type:type_name -> ECommentThreadType
	56, // 8: CCommunity_DeleteCommentFromThread_Request.comment_thread_type:type_name -> ECommentThreadType
	52, // 9: CCommunity_GetAvatarHistory_Response.avatars:type_name -> CCommunity_GetAvatarHistory_Response.AvatarData
	58, // 10: CCommunity_GetUserPartnerEventNews_Request.filter_event_type:type_name -> EProtoClanEventType
	28, // 11: CCommunity_GetUserPartnerEventNews_Request.app_list:type_name -> CAppPriority
	59, // 12: CCommunity_GetUserPartnerEventNews_Response.results:type_name -> CClanMatchEventByRange
	32, // 13: CCommunity_GetBestEventsForUser_Response.results:type_name -> CCommunity_PartnerEventResult
	53, // 14: CCommunity_MarkPartnerEventsForUser_Request.markings:type_name -> CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking
	54, // 15: CCommunity_GetUserPartnerEventViewStatus_Response.events:type_name -> CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent
	45, // 16: CCommunity_GetUserPartnerEventsAppPriorities_Response.priorities:type_name -> CCommunity_PartnerEventsAppPriority
	49, // 17: CCommunity_GetAppRichPresenceLocalization_Response.TokenList.tokens:type_name -> CCommunity_GetAppRichPresenceLocalization_Response.Token
	0,  // 18: CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking.display_location:type_name -> EPartnerEventDisplayLocation
	1,  // 19: Community.GetApps:input_type -> CCommunity_GetApps_Request
	3,  // 20: Community.GetAppRichPresenceLocalization:input_type -> CCommunity_GetAppRichPresenceLocalization_Request
	5,  // 21: Community.GetCommentThread:input_type -> CCommunity_GetCommentThread_Request
	8,  // 22: Community.PostCommentToThread:input_type -> CCommunity_PostCommentToThread_Request
	10, // 23: Community.DeleteCommentFromThread:input_type -> CCommunity_DeleteCommentFromThread_Request
	12, // 24: Community.RateCommentThread:input_type -> CCommunity_RateCommentThread_Request
	14, // 25: Community.GetCommentThreadRatings:input_type -> CCommunity_GetCommentThreadRatings_Request
	16, // 26: Community.RateClanAnnouncement:input_type -> CCommunity_RateClanAnnouncement_Request
	18, // 27: Community.GetClanAnnouncementVoteForUser:input_type -> CCommunity_GetClanAnnouncementVoteForUser_Request
	20, // 28: Community.GetAvatarHistory:input_type -> CCommunity_GetAvatarHistory_Request
	22, // 29: Community.GetClanEventCrowdInMetadata:input_type -> CCommunity_GetClanEventCrowdInMetadata_Request
	24, // 30: Community.GetClanCrowdInMetadata:input_type -> CCommunity_GetClanCrowdInMetadata_Request
	26, // 31: Community.FetchTranslationFromCrowdIn:input_type -> CCommunity_FetchTranslationFromCrowdIn_Request
	29, // 32: Community.GetUserPartnerEventNews:input_type -> CCommunity_GetUserPartnerEventNews_Request
	31, // 33: Community.GetBestEventsForUser:input_type -> CCommunity_GetBestEventsForUser_Request
	34, // 34: Community.MarkPartnerEventsForUser:input_type -> CCommunity_MarkPartnerEventsForUser_Request
	36, // 35: Community.GetUserPartnerEventViewStatus:input_type -> CCommunity_GetUserPartnerEventViewStatus_Request
	38, // 36: Community.PartnerEventsShowMoreForApp:input_type -> CCommunity_PartnerEventsShowMoreForApp_Request
	40, // 37: Community.PartnerEventsShowLessForApp:input_type -> CCommunity_PartnerEventsShowLessForApp_Request
	42, // 38: Community.ClearUserPartnerEventsAppPriorities:input_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Request
	44, // 39: Community.GetUserPartnerEventsAppPriorities:input_type -> CCommunity_GetUserPartnerEventsAppPriorities_Request
	47, // 40: Community.ClearSinglePartnerEventsAppPriority:input_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Request
	2,  // 41: Community.GetApps:output_type -> CCommunity_GetApps_Response
	4,  // 42: Community.GetAppRichPresenceLocalization:output_type -> CCommunity_GetAppRichPresenceLocalization_Response
	7,  // 43: Community.GetCommentThread:output_type -> CCommunity_GetCommentThread_Response
	9,  // 44: Community.PostCommentToThread:output_type -> CCommunity_PostCommentToThread_Response
	11, // 45: Community.DeleteCommentFromThread:output_type -> CCommunity_DeleteCommentFromThread_Response
	13, // 46: Community.RateCommentThread:output_type -> CCommunity_RateCommentThread_Response
	15, // 47: Community.GetCommentThreadRatings:output_type -> CCommunity_GetCommentThreadRatings_Response
	17, // 48: Community.RateClanAnnouncement:output_type -> CCommunity_RateClanAnnouncement_Response
	19, // 49: Community.GetClanAnnouncementVoteForUser:output_type -> CCommunity_GetClanAnnouncementVoteForUser_Response
	21, // 50: Community.GetAvatarHistory:output_type -> CCommunity_GetAvatarHistory_Response
	23, // 51: Community.GetClanEventCrowdInMetadata:output_type -> CCommunity_GetClanEventCrowdInMetadata_Response
	25, // 52: Community.GetClanCrowdInMetadata:output_type -> CCommunity_GetClanCrowdInMetadata_Response
	27, // 53: Community.FetchTranslationFromCrowdIn:output_type -> CCommunity_FetchTranslationFromCrowdIn_Response
	30, // 54: Community.GetUserPartnerEventNews:output_type -> CCommunity_GetUserPartnerEventNews_Response
	33, // 55: Community.GetBestEventsForUser:output_type -> CCommunity_GetBestEventsForUser_Response
	35, // 56: Community.MarkPartnerEventsForUser:output_type -> CCommunity_MarkPartnerEventsForUser_Response
	37, // 57: Community.GetUserPartnerEventViewStatus:output_type -> CCommunity_GetUserPartnerEventViewStatus_Response
	39, // 58: Community.PartnerEventsShowMoreForApp:output_type -> CCommunity_PartnerEventsShowMoreForApp_Response
	41, // 59: Community.PartnerEventsShowLessForApp:output_type -> CCommunity_PartnerEventsShowLessForApp_Response
	43, // 60: Community.ClearUserPartnerEventsAppPriorities:output_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Response
	46, // 61: Community.GetUserPartnerEventsAppPriorities:output_type -> CCommunity_GetUserPartnerEventsAppPriorities_Response
	48, // 62: Community.ClearSinglePartnerEventsAppPriority:output_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Response
	41, // [41:63] is the sub-list for method output_type
	19, // [19:41] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_steammessages_community_steamclient_proto_init() }
func file_steammessages_community_steamclient_proto_init() {
	if File_steammessages_community_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_community_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetCommentThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetCommentThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PostCommentToThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PostCommentToThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_DeleteCommentFromThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_DeleteCommentFromThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_RateCommentThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_RateCommentThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetCommentThreadRatings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetCommentThreadRatings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_RateClanAnnouncement_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_RateClanAnnouncement_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetClanAnnouncementVoteForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetClanAnnouncementVoteForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAvatarHistory_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAvatarHistory_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetClanEventCrowdInMetadata_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetClanEventCrowdInMetadata_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetClanCrowdInMetadata_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetClanCrowdInMetadata_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_FetchTranslationFromCrowdIn_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_FetchTranslationFromCrowdIn_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CAppPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventNews_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventNews_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetBestEventsForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PartnerEventResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetBestEventsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventViewStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventViewStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PartnerEventsShowMoreForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PartnerEventsShowMoreForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PartnerEventsShowLessForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PartnerEventsShowLessForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_ClearUserPartnerEventsAppPriorities_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_ClearUserPartnerEventsAppPriorities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventsAppPriorities_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_PartnerEventsAppPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventsAppPriorities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_ClearSinglePartnerEventsAppPriority_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_ClearSinglePartnerEventsAppPriority_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_Comment_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetAvatarHistory_Response_AvatarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_community_steamclient_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_community_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_community_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_community_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_community_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_community_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_community_steamclient_proto = out.File
	file_steammessages_community_steamclient_proto_rawDesc = nil
	file_steammessages_community_steamclient_proto_goTypes = nil
	file_steammessages_community_steamclient_proto_depIdxs = nil
}
