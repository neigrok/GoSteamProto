// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_notifications.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamNotificationType int32

const (
	ESteamNotificationType_k_ESteamNotificationType_Invalid                       ESteamNotificationType = 0
	ESteamNotificationType_k_ESteamNotificationType_Test                          ESteamNotificationType = 1
	ESteamNotificationType_k_ESteamNotificationType_Gift                          ESteamNotificationType = 2
	ESteamNotificationType_k_ESteamNotificationType_Comment                       ESteamNotificationType = 3
	ESteamNotificationType_k_ESteamNotificationType_Item                          ESteamNotificationType = 4
	ESteamNotificationType_k_ESteamNotificationType_FriendInvite                  ESteamNotificationType = 5
	ESteamNotificationType_k_ESteamNotificationType_MajorSale                     ESteamNotificationType = 6
	ESteamNotificationType_k_ESteamNotificationType_PreloadAvailable              ESteamNotificationType = 7
	ESteamNotificationType_k_ESteamNotificationType_Wishlist                      ESteamNotificationType = 8
	ESteamNotificationType_k_ESteamNotificationType_TradeOffer                    ESteamNotificationType = 9
	ESteamNotificationType_k_ESteamNotificationType_General                       ESteamNotificationType = 10
	ESteamNotificationType_k_ESteamNotificationType_HelpRequest                   ESteamNotificationType = 11
	ESteamNotificationType_k_ESteamNotificationType_AsyncGame                     ESteamNotificationType = 12
	ESteamNotificationType_k_ESteamNotificationType_ChatMsg                       ESteamNotificationType = 13
	ESteamNotificationType_k_ESteamNotificationType_ModeratorMsg                  ESteamNotificationType = 14
	ESteamNotificationType_k_ESteamNotificationType_ParentalFeatureAccessRequest  ESteamNotificationType = 15
	ESteamNotificationType_k_ESteamNotificationType_FamilyInvite                  ESteamNotificationType = 16
	ESteamNotificationType_k_ESteamNotificationType_FamilyPurchaseRequest         ESteamNotificationType = 17
	ESteamNotificationType_k_ESteamNotificationType_ParentalPlaytimeRequest       ESteamNotificationType = 18
	ESteamNotificationType_k_ESteamNotificationType_FamilyPurchaseRequestResponse ESteamNotificationType = 19
	ESteamNotificationType_k_ESteamNotificationType_ParentalFeatureAccessResponse ESteamNotificationType = 20
	ESteamNotificationType_k_ESteamNotificationType_ParentalPlaytimeResponse      ESteamNotificationType = 21
	ESteamNotificationType_k_ESteamNotificationType_RequestedGameAdded            ESteamNotificationType = 22
	ESteamNotificationType_k_ESteamNotificationType_SendToPhone                   ESteamNotificationType = 23
	ESteamNotificationType_k_ESteamNotificationType_ClipDownloaded                ESteamNotificationType = 24
	ESteamNotificationType_k_ESteamNotificationType_2FAPrompt                     ESteamNotificationType = 25
	ESteamNotificationType_k_ESteamNotificationType_MobileConfirmation            ESteamNotificationType = 26
	ESteamNotificationType_k_ESteamNotificationType_PartnerEvent                  ESteamNotificationType = 27
)

// Enum value maps for ESteamNotificationType.
var (
	ESteamNotificationType_name = map[int32]string{
		0:  "k_ESteamNotificationType_Invalid",
		1:  "k_ESteamNotificationType_Test",
		2:  "k_ESteamNotificationType_Gift",
		3:  "k_ESteamNotificationType_Comment",
		4:  "k_ESteamNotificationType_Item",
		5:  "k_ESteamNotificationType_FriendInvite",
		6:  "k_ESteamNotificationType_MajorSale",
		7:  "k_ESteamNotificationType_PreloadAvailable",
		8:  "k_ESteamNotificationType_Wishlist",
		9:  "k_ESteamNotificationType_TradeOffer",
		10: "k_ESteamNotificationType_General",
		11: "k_ESteamNotificationType_HelpRequest",
		12: "k_ESteamNotificationType_AsyncGame",
		13: "k_ESteamNotificationType_ChatMsg",
		14: "k_ESteamNotificationType_ModeratorMsg",
		15: "k_ESteamNotificationType_ParentalFeatureAccessRequest",
		16: "k_ESteamNotificationType_FamilyInvite",
		17: "k_ESteamNotificationType_FamilyPurchaseRequest",
		18: "k_ESteamNotificationType_ParentalPlaytimeRequest",
		19: "k_ESteamNotificationType_FamilyPurchaseRequestResponse",
		20: "k_ESteamNotificationType_ParentalFeatureAccessResponse",
		21: "k_ESteamNotificationType_ParentalPlaytimeResponse",
		22: "k_ESteamNotificationType_RequestedGameAdded",
		23: "k_ESteamNotificationType_SendToPhone",
		24: "k_ESteamNotificationType_ClipDownloaded",
		25: "k_ESteamNotificationType_2FAPrompt",
		26: "k_ESteamNotificationType_MobileConfirmation",
		27: "k_ESteamNotificationType_PartnerEvent",
	}
	ESteamNotificationType_value = map[string]int32{
		"k_ESteamNotificationType_Invalid":                       0,
		"k_ESteamNotificationType_Test":                          1,
		"k_ESteamNotificationType_Gift":                          2,
		"k_ESteamNotificationType_Comment":                       3,
		"k_ESteamNotificationType_Item":                          4,
		"k_ESteamNotificationType_FriendInvite":                  5,
		"k_ESteamNotificationType_MajorSale":                     6,
		"k_ESteamNotificationType_PreloadAvailable":              7,
		"k_ESteamNotificationType_Wishlist":                      8,
		"k_ESteamNotificationType_TradeOffer":                    9,
		"k_ESteamNotificationType_General":                       10,
		"k_ESteamNotificationType_HelpRequest":                   11,
		"k_ESteamNotificationType_AsyncGame":                     12,
		"k_ESteamNotificationType_ChatMsg":                       13,
		"k_ESteamNotificationType_ModeratorMsg":                  14,
		"k_ESteamNotificationType_ParentalFeatureAccessRequest":  15,
		"k_ESteamNotificationType_FamilyInvite":                  16,
		"k_ESteamNotificationType_FamilyPurchaseRequest":         17,
		"k_ESteamNotificationType_ParentalPlaytimeRequest":       18,
		"k_ESteamNotificationType_FamilyPurchaseRequestResponse": 19,
		"k_ESteamNotificationType_ParentalFeatureAccessResponse": 20,
		"k_ESteamNotificationType_ParentalPlaytimeResponse":      21,
		"k_ESteamNotificationType_RequestedGameAdded":            22,
		"k_ESteamNotificationType_SendToPhone":                   23,
		"k_ESteamNotificationType_ClipDownloaded":                24,
		"k_ESteamNotificationType_2FAPrompt":                     25,
		"k_ESteamNotificationType_MobileConfirmation":            26,
		"k_ESteamNotificationType_PartnerEvent":                  27,
	}
)

func (x ESteamNotificationType) Enum() *ESteamNotificationType {
	p := new(ESteamNotificationType)
	*p = x
	return p
}

func (x ESteamNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_notifications_steamclient_proto_enumTypes[0].Descriptor()
}

func (ESteamNotificationType) Type() protoreflect.EnumType {
	return &file_steammessages_notifications_steamclient_proto_enumTypes[0]
}

func (x ESteamNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamNotificationType(num)
	return nil
}

// Deprecated: Use ESteamNotificationType.Descriptor instead.
func (ESteamNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_notifications_steamclient_proto_rawDescGZIP(), []int{0}
}

type SteamNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId      *uint64                 `protobuf:"varint,1,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	NotificationTargets *uint32                 `protobuf:"varint,2,opt,name=notification_targets,json=notificationTargets" json:"notification_targets,omitempty"`
	NotificationType    *ESteamNotificationType `protobuf:"varint,3,opt,name=notification_type,json=notificationType,enum=ESteamNotificationType,def=0" json:"notification_type,omitempty"`
	BodyData            *string                 `protobuf:"bytes,4,opt,name=body_data,json=bodyData" json:"body_data,omitempty"`
	Read                *bool                   `protobuf:"varint,7,opt,name=read" json:"read,omitempty"`
	Timestamp           *uint32                 `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	Hidden              *bool                   `protobuf:"varint,9,opt,name=hidden" json:"hidden,omitempty"`
	Expiry              *uint32                 `protobuf:"varint,10,opt,name=expiry" json:"expiry,omitempty"`
	Viewed              *uint32                 `protobuf:"varint,11,opt,name=viewed" json:"viewed,omitempty"`
}

// Default values for SteamNotificationData fields.
const (
	Default_SteamNotificationData_NotificationType = ESteamNotificationType_k_ESteamNotificationType_Invalid
)

func (x *SteamNotificationData) Reset() {
	*x = SteamNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_notifications_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamNotificationData) ProtoMessage() {}

func (x *SteamNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_notifications_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamNotificationData.ProtoReflect.Descriptor instead.
func (*SteamNotificationData) Descriptor() ([]byte, []int) {
	return file_steammessages_notifications_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *SteamNotificationData) GetNotificationId() uint64 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *SteamNotificationData) GetNotificationTargets() uint32 {
	if x != nil && x.NotificationTargets != nil {
		return *x.NotificationTargets
	}
	return 0
}

func (x *SteamNotificationData) GetNotificationType() ESteamNotificationType {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return Default_SteamNotificationData_NotificationType
}

func (x *SteamNotificationData) GetBodyData() string {
	if x != nil && x.BodyData != nil {
		return *x.BodyData
	}
	return ""
}

func (x *SteamNotificationData) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

func (x *SteamNotificationData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SteamNotificationData) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *SteamNotificationData) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *SteamNotificationData) GetViewed() uint32 {
	if x != nil && x.Viewed != nil {
		return *x.Viewed
	}
	return 0
}

type CSteamNotification_NotificationsReceived_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications            []*SteamNotificationData `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
	PendingGiftCount         *uint32                  `protobuf:"varint,2,opt,name=pending_gift_count,json=pendingGiftCount" json:"pending_gift_count,omitempty"`
	PendingFriendCount       *uint32                  `protobuf:"varint,3,opt,name=pending_friend_count,json=pendingFriendCount" json:"pending_friend_count,omitempty"`
	PendingFamilyInviteCount *uint32                  `protobuf:"varint,4,opt,name=pending_family_invite_count,json=pendingFamilyInviteCount" json:"pending_family_invite_count,omitempty"`
}

func (x *CSteamNotification_NotificationsReceived_Notification) Reset() {
	*x = CSteamNotification_NotificationsReceived_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_notifications_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamNotification_NotificationsReceived_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_NotificationsReceived_Notification) ProtoMessage() {}

func (x *CSteamNotification_NotificationsReceived_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_notifications_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_NotificationsReceived_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_NotificationsReceived_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_notifications_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetNotifications() []*SteamNotificationData {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetPendingGiftCount() uint32 {
	if x != nil && x.PendingGiftCount != nil {
		return *x.PendingGiftCount
	}
	return 0
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetPendingFriendCount() uint32 {
	if x != nil && x.PendingFriendCount != nil {
		return *x.PendingFriendCount
	}
	return 0
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetPendingFamilyInviteCount() uint32 {
	if x != nil && x.PendingFamilyInviteCount != nil {
		return *x.PendingFamilyInviteCount
	}
	return 0
}

type SteamNotificationPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationType    *ESteamNotificationType `protobuf:"varint,1,opt,name=notification_type,json=notificationType,enum=ESteamNotificationType,def=0" json:"notification_type,omitempty"`
	NotificationTargets *uint32                 `protobuf:"varint,2,opt,name=notification_targets,json=notificationTargets" json:"notification_targets,omitempty"`
}

// Default values for SteamNotificationPreference fields.
const (
	Default_SteamNotificationPreference_NotificationType = ESteamNotificationType_k_ESteamNotificationType_Invalid
)

func (x *SteamNotificationPreference) Reset() {
	*x = SteamNotificationPreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_notifications_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamNotificationPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamNotificationPreference) ProtoMessage() {}

func (x *SteamNotificationPreference) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_notifications_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamNotificationPreference.ProtoReflect.Descriptor instead.
func (*SteamNotificationPreference) Descriptor() ([]byte, []int) {
	return file_steammessages_notifications_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *SteamNotificationPreference) GetNotificationType() ESteamNotificationType {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return Default_SteamNotificationPreference_NotificationType
}

func (x *SteamNotificationPreference) GetNotificationTargets() uint32 {
	if x != nil && x.NotificationTargets != nil {
		return *x.NotificationTargets
	}
	return 0
}

type CSteamNotification_PreferencesUpdated_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences []*SteamNotificationPreference `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
}

func (x *CSteamNotification_PreferencesUpdated_Notification) Reset() {
	*x = CSteamNotification_PreferencesUpdated_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_notifications_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamNotification_PreferencesUpdated_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_PreferencesUpdated_Notification) ProtoMessage() {}

func (x *CSteamNotification_PreferencesUpdated_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_notifications_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_PreferencesUpdated_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_PreferencesUpdated_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_notifications_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamNotification_PreferencesUpdated_Notification) GetPreferences() []*SteamNotificationPreference {
	if x != nil {
		return x.Preferences
	}
	return nil
}

var File_steammessages_notifications_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_notifications_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x66, 0x0a,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0x94, 0x02, 0x0a,
	0x35, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x74,
	0x0a, 0x32, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2a, 0xf3, 0x09, 0x0a, 0x16, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x74,
	0x65, 0x6d, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x08, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x0c, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x73, 0x67, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x10, 0x0e, 0x12,
	0x39, 0x0a, 0x35, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x10, 0x10, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x11, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x12, 0x12,
	0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x13, 0x12, 0x3a, 0x0a, 0x36, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x14, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x15, 0x12, 0x2f,
	0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x16, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x17, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x32, 0x46, 0x41, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x10, 0x19, 0x12, 0x2f,
	0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x12,
	0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1b, 0x32, 0xd5, 0x01, 0x0a, 0x17, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x36, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0xc0, 0xb5,
	0x18, 0x02, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_notifications_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_notifications_steamclient_proto_rawDescData = file_steammessages_notifications_steamclient_proto_rawDesc
)

func file_steammessages_notifications_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_notifications_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_notifications_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_notifications_steamclient_proto_rawDescData)
	})
	return file_steammessages_notifications_steamclient_proto_rawDescData
}

var file_steammessages_notifications_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_notifications_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_steammessages_notifications_steamclient_proto_goTypes = []any{
	(ESteamNotificationType)(0),                                   // 0: ESteamNotificationType
	(*SteamNotificationData)(nil),                                 // 1: SteamNotificationData
	(*CSteamNotification_NotificationsReceived_Notification)(nil), // 2: CSteamNotification_NotificationsReceived_Notification
	(*SteamNotificationPreference)(nil),                           // 3: SteamNotificationPreference
	(*CSteamNotification_PreferencesUpdated_Notification)(nil),    // 4: CSteamNotification_PreferencesUpdated_Notification
	(*NoResponse)(nil),                                            // 5: NoResponse
}
var file_steammessages_notifications_steamclient_proto_depIdxs = []int32{
	0, // 0: SteamNotificationData.notification_type:type_name -> ESteamNotificationType
	1, // 1: CSteamNotification_NotificationsReceived_Notification.notifications:type_name -> SteamNotificationData
	0, // 2: SteamNotificationPreference.notification_type:type_name -> ESteamNotificationType
	3, // 3: CSteamNotification_PreferencesUpdated_Notification.preferences:type_name -> SteamNotificationPreference
	2, // 4: SteamNotificationClient.NotificationsReceived:input_type -> CSteamNotification_NotificationsReceived_Notification
	4, // 5: SteamNotificationClient.PreferencesUpdated:input_type -> CSteamNotification_PreferencesUpdated_Notification
	5, // 6: SteamNotificationClient.NotificationsReceived:output_type -> NoResponse
	5, // 7: SteamNotificationClient.PreferencesUpdated:output_type -> NoResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_steammessages_notifications_steamclient_proto_init() }
func file_steammessages_notifications_steamclient_proto_init() {
	if File_steammessages_notifications_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_notifications_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SteamNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_notifications_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamNotification_NotificationsReceived_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_notifications_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SteamNotificationPreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_notifications_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CSteamNotification_PreferencesUpdated_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_notifications_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_notifications_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_notifications_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_notifications_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_notifications_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_notifications_steamclient_proto = out.File
	file_steammessages_notifications_steamclient_proto_rawDesc = nil
	file_steammessages_notifications_steamclient_proto_goTypes = nil
	file_steammessages_notifications_steamclient_proto_depIdxs = nil
}
