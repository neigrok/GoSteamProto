// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_clientmetrics.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamPipeWorkType int32

const (
	ESteamPipeWorkType_k_ESteamPipeClientWorkType_Invalid              ESteamPipeWorkType = 0
	ESteamPipeWorkType_k_ESteamPipeClientWorkType_StageFromChunkStores ESteamPipeWorkType = 1
)

// Enum value maps for ESteamPipeWorkType.
var (
	ESteamPipeWorkType_name = map[int32]string{
		0: "k_ESteamPipeClientWorkType_Invalid",
		1: "k_ESteamPipeClientWorkType_StageFromChunkStores",
	}
	ESteamPipeWorkType_value = map[string]int32{
		"k_ESteamPipeClientWorkType_Invalid":              0,
		"k_ESteamPipeClientWorkType_StageFromChunkStores": 1,
	}
)

func (x ESteamPipeWorkType) Enum() *ESteamPipeWorkType {
	p := new(ESteamPipeWorkType)
	*p = x
	return p
}

func (x ESteamPipeWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamPipeWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[0].Descriptor()
}

func (ESteamPipeWorkType) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[0]
}

func (x ESteamPipeWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamPipeWorkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamPipeWorkType(num)
	return nil
}

// Deprecated: Use ESteamPipeWorkType.Descriptor instead.
func (ESteamPipeWorkType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{0}
}

type ESteamPipeOperationType int32

const (
	ESteamPipeOperationType_k_ESteamPipeOperationType_Invalid    ESteamPipeOperationType = 0
	ESteamPipeOperationType_k_ESteamPipeOperationType_DecryptCPU ESteamPipeOperationType = 1
	ESteamPipeOperationType_k_ESteamPipeOperationType_DiskRead   ESteamPipeOperationType = 2
	ESteamPipeOperationType_k_ESteamPipeOperationType_DiskWrite  ESteamPipeOperationType = 3
)

// Enum value maps for ESteamPipeOperationType.
var (
	ESteamPipeOperationType_name = map[int32]string{
		0: "k_ESteamPipeOperationType_Invalid",
		1: "k_ESteamPipeOperationType_DecryptCPU",
		2: "k_ESteamPipeOperationType_DiskRead",
		3: "k_ESteamPipeOperationType_DiskWrite",
	}
	ESteamPipeOperationType_value = map[string]int32{
		"k_ESteamPipeOperationType_Invalid":    0,
		"k_ESteamPipeOperationType_DecryptCPU": 1,
		"k_ESteamPipeOperationType_DiskRead":   2,
		"k_ESteamPipeOperationType_DiskWrite":  3,
	}
)

func (x ESteamPipeOperationType) Enum() *ESteamPipeOperationType {
	p := new(ESteamPipeOperationType)
	*p = x
	return p
}

func (x ESteamPipeOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamPipeOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[1].Descriptor()
}

func (ESteamPipeOperationType) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[1]
}

func (x ESteamPipeOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamPipeOperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamPipeOperationType(num)
	return nil
}

// Deprecated: Use ESteamPipeOperationType.Descriptor instead.
func (ESteamPipeOperationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{1}
}

type EClipShareMethod int32

const (
	EClipShareMethod_k_EClipShareMethod_Chat        EClipShareMethod = 1
	EClipShareMethod_k_EClipShareMethod_Clipboard   EClipShareMethod = 2
	EClipShareMethod_k_EClipShareMethod_File        EClipShareMethod = 3
	EClipShareMethod_k_EClipShareMethod_SendClip    EClipShareMethod = 4
	EClipShareMethod_k_EClipShareMethod_SaveToMedia EClipShareMethod = 5
	EClipShareMethod_k_EClipShareMethod_CreateLink  EClipShareMethod = 6
)

// Enum value maps for EClipShareMethod.
var (
	EClipShareMethod_name = map[int32]string{
		1: "k_EClipShareMethod_Chat",
		2: "k_EClipShareMethod_Clipboard",
		3: "k_EClipShareMethod_File",
		4: "k_EClipShareMethod_SendClip",
		5: "k_EClipShareMethod_SaveToMedia",
		6: "k_EClipShareMethod_CreateLink",
	}
	EClipShareMethod_value = map[string]int32{
		"k_EClipShareMethod_Chat":        1,
		"k_EClipShareMethod_Clipboard":   2,
		"k_EClipShareMethod_File":        3,
		"k_EClipShareMethod_SendClip":    4,
		"k_EClipShareMethod_SaveToMedia": 5,
		"k_EClipShareMethod_CreateLink":  6,
	}
)

func (x EClipShareMethod) Enum() *EClipShareMethod {
	p := new(EClipShareMethod)
	*p = x
	return p
}

func (x EClipShareMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClipShareMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[2].Descriptor()
}

func (EClipShareMethod) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[2]
}

func (x EClipShareMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClipShareMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClipShareMethod(num)
	return nil
}

// Deprecated: Use EClipShareMethod.Descriptor instead.
func (EClipShareMethod) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{2}
}

type EClipRangeMethod int32

const (
	EClipRangeMethod_k_EClipRangeMethod_CreateClipButton EClipRangeMethod = 1
	EClipRangeMethod_k_EClipRangeMethod_Highlight        EClipRangeMethod = 2
	EClipRangeMethod_k_EClipRangeMethod_BeginEndButtons  EClipRangeMethod = 3
	EClipRangeMethod_k_EClipRangeMethod_ContextMenu      EClipRangeMethod = 4
	EClipRangeMethod_k_EClipRangeMethod_Drag             EClipRangeMethod = 5
	EClipRangeMethod_k_EClipRangeMethod_EntireClip       EClipRangeMethod = 6
	EClipRangeMethod_k_EClipRangeMethod_PhaseRecording   EClipRangeMethod = 7
)

// Enum value maps for EClipRangeMethod.
var (
	EClipRangeMethod_name = map[int32]string{
		1: "k_EClipRangeMethod_CreateClipButton",
		2: "k_EClipRangeMethod_Highlight",
		3: "k_EClipRangeMethod_BeginEndButtons",
		4: "k_EClipRangeMethod_ContextMenu",
		5: "k_EClipRangeMethod_Drag",
		6: "k_EClipRangeMethod_EntireClip",
		7: "k_EClipRangeMethod_PhaseRecording",
	}
	EClipRangeMethod_value = map[string]int32{
		"k_EClipRangeMethod_CreateClipButton": 1,
		"k_EClipRangeMethod_Highlight":        2,
		"k_EClipRangeMethod_BeginEndButtons":  3,
		"k_EClipRangeMethod_ContextMenu":      4,
		"k_EClipRangeMethod_Drag":             5,
		"k_EClipRangeMethod_EntireClip":       6,
		"k_EClipRangeMethod_PhaseRecording":   7,
	}
)

func (x EClipRangeMethod) Enum() *EClipRangeMethod {
	p := new(EClipRangeMethod)
	*p = x
	return p
}

func (x EClipRangeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClipRangeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[3].Descriptor()
}

func (EClipRangeMethod) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[3]
}

func (x EClipRangeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClipRangeMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClipRangeMethod(num)
	return nil
}

// Deprecated: Use EClipRangeMethod.Descriptor instead.
func (EClipRangeMethod) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{3}
}

type CClientMetrics_AppInterfaceCreation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawVersion             *string `protobuf:"bytes,1,opt,name=raw_version,json=rawVersion" json:"raw_version,omitempty"`
	RequestedInterfaceType *string `protobuf:"bytes,2,opt,name=requested_interface_type,json=requestedInterfaceType" json:"requested_interface_type,omitempty"`
}

func (x *CClientMetrics_AppInterfaceCreation) Reset() {
	*x = CClientMetrics_AppInterfaceCreation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_AppInterfaceCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceCreation) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceCreation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceCreation.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceCreation) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CClientMetrics_AppInterfaceCreation) GetRawVersion() string {
	if x != nil && x.RawVersion != nil {
		return *x.RawVersion
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceCreation) GetRequestedInterfaceType() string {
	if x != nil && x.RequestedInterfaceType != nil {
		return *x.RequestedInterfaceType
	}
	return ""
}

type CClientMetrics_AppInterfaceMethodCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName *string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	MethodName    *string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	CallCount     *uint32 `protobuf:"varint,3,opt,name=call_count,json=callCount" json:"call_count,omitempty"`
}

func (x *CClientMetrics_AppInterfaceMethodCounts) Reset() {
	*x = CClientMetrics_AppInterfaceMethodCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_AppInterfaceMethodCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceMethodCounts) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceMethodCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceMethodCounts.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceMethodCounts) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetInterfaceName() string {
	if x != nil && x.InterfaceName != nil {
		return *x.InterfaceName
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetCallCount() uint32 {
	if x != nil && x.CallCount != nil {
		return *x.CallCount
	}
	return 0
}

type CClientMetrics_AppInterfaceStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId               *uint64                                    `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	InterfacesCreated    []*CClientMetrics_AppInterfaceCreation     `protobuf:"bytes,2,rep,name=interfaces_created,json=interfacesCreated" json:"interfaces_created,omitempty"`
	MethodsCalled        []*CClientMetrics_AppInterfaceMethodCounts `protobuf:"bytes,3,rep,name=methods_called,json=methodsCalled" json:"methods_called,omitempty"`
	SessionLengthSeconds *uint32                                    `protobuf:"varint,4,opt,name=session_length_seconds,json=sessionLengthSeconds" json:"session_length_seconds,omitempty"`
}

func (x *CClientMetrics_AppInterfaceStats_Notification) Reset() {
	*x = CClientMetrics_AppInterfaceStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_AppInterfaceStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetInterfacesCreated() []*CClientMetrics_AppInterfaceCreation {
	if x != nil {
		return x.InterfacesCreated
	}
	return nil
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetMethodsCalled() []*CClientMetrics_AppInterfaceMethodCounts {
	if x != nil {
		return x.MethodsCalled
	}
	return nil
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetSessionLengthSeconds() uint32 {
	if x != nil && x.SessionLengthSeconds != nil {
		return *x.SessionLengthSeconds
	}
	return 0
}

type CClientMetrics_IPv6Connectivity_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolTested    *uint32 `protobuf:"varint,1,opt,name=protocol_tested,json=protocolTested" json:"protocol_tested,omitempty"`
	ConnectivityState *uint32 `protobuf:"varint,2,opt,name=connectivity_state,json=connectivityState" json:"connectivity_state,omitempty"`
}

func (x *CClientMetrics_IPv6Connectivity_Result) Reset() {
	*x = CClientMetrics_IPv6Connectivity_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_IPv6Connectivity_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_IPv6Connectivity_Result) ProtoMessage() {}

func (x *CClientMetrics_IPv6Connectivity_Result) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_IPv6Connectivity_Result.ProtoReflect.Descriptor instead.
func (*CClientMetrics_IPv6Connectivity_Result) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CClientMetrics_IPv6Connectivity_Result) GetProtocolTested() uint32 {
	if x != nil && x.ProtocolTested != nil {
		return *x.ProtocolTested
	}
	return 0
}

func (x *CClientMetrics_IPv6Connectivity_Result) GetConnectivityState() uint32 {
	if x != nil && x.ConnectivityState != nil {
		return *x.ConnectivityState
	}
	return 0
}

type CClientMetrics_IPv6Connectivity_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId             *uint32                                   `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Results            []*CClientMetrics_IPv6Connectivity_Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PrivateIpIsRfc6598 *bool                                     `protobuf:"varint,3,opt,name=private_ip_is_rfc6598,json=privateIpIsRfc6598" json:"private_ip_is_rfc6598,omitempty"`
}

func (x *CClientMetrics_IPv6Connectivity_Notification) Reset() {
	*x = CClientMetrics_IPv6Connectivity_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_IPv6Connectivity_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_IPv6Connectivity_Notification) ProtoMessage() {}

func (x *CClientMetrics_IPv6Connectivity_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_IPv6Connectivity_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_IPv6Connectivity_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetResults() []*CClientMetrics_IPv6Connectivity_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetPrivateIpIsRfc6598() bool {
	if x != nil && x.PrivateIpIsRfc6598 != nil {
		return *x.PrivateIpIsRfc6598
	}
	return false
}

type CClientMetrics_SteamPipeWorkStats_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *ESteamPipeOperationType `protobuf:"varint,1,opt,name=type,enum=ESteamPipeOperationType,def=0" json:"type,omitempty"`
	NumOps        *uint32                  `protobuf:"varint,2,opt,name=num_ops,json=numOps" json:"num_ops,omitempty"`
	NumBytes      *uint64                  `protobuf:"varint,3,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	BusyTimeMs    *uint64                  `protobuf:"varint,4,opt,name=busy_time_ms,json=busyTimeMs" json:"busy_time_ms,omitempty"`
	IdleTimeMs    *uint64                  `protobuf:"varint,5,opt,name=idle_time_ms,json=idleTimeMs" json:"idle_time_ms,omitempty"`
	SumRunTimeMs  *uint64                  `protobuf:"varint,6,opt,name=sum_run_time_ms,json=sumRunTimeMs" json:"sum_run_time_ms,omitempty"`
	SumWaitTimeMs *uint64                  `protobuf:"varint,7,opt,name=sum_wait_time_ms,json=sumWaitTimeMs" json:"sum_wait_time_ms,omitempty"`
}

// Default values for CClientMetrics_SteamPipeWorkStats_Operation fields.
const (
	Default_CClientMetrics_SteamPipeWorkStats_Operation_Type = ESteamPipeOperationType_k_ESteamPipeOperationType_Invalid
)

func (x *CClientMetrics_SteamPipeWorkStats_Operation) Reset() {
	*x = CClientMetrics_SteamPipeWorkStats_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_SteamPipeWorkStats_Operation) ProtoMessage() {}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_SteamPipeWorkStats_Operation.ProtoReflect.Descriptor instead.
func (*CClientMetrics_SteamPipeWorkStats_Operation) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetType() ESteamPipeOperationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CClientMetrics_SteamPipeWorkStats_Operation_Type
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetNumOps() uint32 {
	if x != nil && x.NumOps != nil {
		return *x.NumOps
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetNumBytes() uint64 {
	if x != nil && x.NumBytes != nil {
		return *x.NumBytes
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetBusyTimeMs() uint64 {
	if x != nil && x.BusyTimeMs != nil {
		return *x.BusyTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetIdleTimeMs() uint64 {
	if x != nil && x.IdleTimeMs != nil {
		return *x.IdleTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetSumRunTimeMs() uint64 {
	if x != nil && x.SumRunTimeMs != nil {
		return *x.SumRunTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetSumWaitTimeMs() uint64 {
	if x != nil && x.SumWaitTimeMs != nil {
		return *x.SumWaitTimeMs
	}
	return 0
}

type CClientMetrics_SteamPipeWorkStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32                                        `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid      *uint32                                        `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	WorkType     *ESteamPipeWorkType                            `protobuf:"varint,3,opt,name=work_type,json=workType,enum=ESteamPipeWorkType,def=0" json:"work_type,omitempty"`
	Operations   []*CClientMetrics_SteamPipeWorkStats_Operation `protobuf:"bytes,4,rep,name=operations" json:"operations,omitempty"`
	HardwareType *uint32                                        `protobuf:"varint,5,opt,name=hardware_type,json=hardwareType" json:"hardware_type,omitempty"`
}

// Default values for CClientMetrics_SteamPipeWorkStats_Notification fields.
const (
	Default_CClientMetrics_SteamPipeWorkStats_Notification_WorkType = ESteamPipeWorkType_k_ESteamPipeClientWorkType_Invalid
)

func (x *CClientMetrics_SteamPipeWorkStats_Notification) Reset() {
	*x = CClientMetrics_SteamPipeWorkStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_SteamPipeWorkStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_SteamPipeWorkStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_SteamPipeWorkStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetDepotid() uint32 {
	if x != nil && x.Depotid != nil {
		return *x.Depotid
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetWorkType() ESteamPipeWorkType {
	if x != nil && x.WorkType != nil {
		return *x.WorkType
	}
	return Default_CClientMetrics_SteamPipeWorkStats_Notification_WorkType
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetOperations() []*CClientMetrics_SteamPipeWorkStats_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetHardwareType() uint32 {
	if x != nil && x.HardwareType != nil {
		return *x.HardwareType
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product    *string                                                       `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version    *string                                                       `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Routes     []*CClientMetrics_ReportReactUsage_Notification_RouteData     `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	Components []*CClientMetrics_ReportReactUsage_Notification_ComponentData `protobuf:"bytes,4,rep,name=components" json:"components,omitempty"`
	Actions    []*CClientMetrics_ReportReactUsage_Notification_ActionData    `protobuf:"bytes,5,rep,name=actions" json:"actions,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetRoutes() []*CClientMetrics_ReportReactUsage_Notification_RouteData {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetComponents() []*CClientMetrics_ReportReactUsage_Notification_ComponentData {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetActions() []*CClientMetrics_ReportReactUsage_Notification_ActionData {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CClientMetrics_ReportClientError_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *string                                                `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version *string                                                `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Errors  []*CClientMetrics_ReportClientError_Notification_Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (x *CClientMetrics_ReportClientError_Notification) Reset() {
	*x = CClientMetrics_ReportClientError_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientError_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CClientMetrics_ReportClientError_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetErrors() []*CClientMetrics_ReportClientError_Notification_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CClientMetrics_ClientBootstrap_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CClientMetrics_ClientBootstrap_Summary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
}

func (x *CClientMetrics_ClientBootstrap_Notification) Reset() {
	*x = CClientMetrics_ClientBootstrap_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ClientBootstrap_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClientBootstrap_Notification) ProtoMessage() {}

func (x *CClientMetrics_ClientBootstrap_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClientBootstrap_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClientBootstrap_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CClientMetrics_ClientBootstrap_Notification) GetSummary() *CClientMetrics_ClientBootstrap_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CClientMetrics_DownloadRates_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId         *uint32                                                `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Stats          []*CClientMetrics_DownloadRates_Notification_StatsInfo `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	ThrottlingKbps *uint32                                                `protobuf:"varint,3,opt,name=throttling_kbps,json=throttlingKbps" json:"throttling_kbps,omitempty"`
	OsType         *uint32                                                `protobuf:"varint,4,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	DeviceType     *uint32                                                `protobuf:"varint,5,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
}

func (x *CClientMetrics_DownloadRates_Notification) Reset() {
	*x = CClientMetrics_DownloadRates_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_DownloadRates_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_DownloadRates_Notification) ProtoMessage() {}

func (x *CClientMetrics_DownloadRates_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_DownloadRates_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_DownloadRates_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CClientMetrics_DownloadRates_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification) GetStats() []*CClientMetrics_DownloadRates_Notification_StatsInfo {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CClientMetrics_DownloadRates_Notification) GetThrottlingKbps() uint32 {
	if x != nil && x.ThrottlingKbps != nil {
		return *x.ThrottlingKbps
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification) GetOsType() uint32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification) GetDeviceType() uint32 {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return 0
}

type CClientMetrics_ContentValidation_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationResult     *int32  `protobuf:"varint,1,opt,name=validation_result,json=validationResult" json:"validation_result,omitempty"`
	AppId                *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StagedFiles          *bool   `protobuf:"varint,3,opt,name=staged_files,json=stagedFiles" json:"staged_files,omitempty"`
	UserInitiated        *bool   `protobuf:"varint,4,opt,name=user_initiated,json=userInitiated" json:"user_initiated,omitempty"`
	EarlyOut             *bool   `protobuf:"varint,5,opt,name=early_out,json=earlyOut" json:"early_out,omitempty"`
	ChunksScanned        *uint32 `protobuf:"varint,6,opt,name=chunks_scanned,json=chunksScanned" json:"chunks_scanned,omitempty"`
	ChunksCorrupt        *uint32 `protobuf:"varint,7,opt,name=chunks_corrupt,json=chunksCorrupt" json:"chunks_corrupt,omitempty"`
	BytesScanned         *uint64 `protobuf:"varint,8,opt,name=bytes_scanned,json=bytesScanned" json:"bytes_scanned,omitempty"`
	ChunkBytesCorrupt    *uint64 `protobuf:"varint,9,opt,name=chunk_bytes_corrupt,json=chunkBytesCorrupt" json:"chunk_bytes_corrupt,omitempty"`
	TotalFileSizeCorrupt *uint64 `protobuf:"varint,10,opt,name=total_file_size_corrupt,json=totalFileSizeCorrupt" json:"total_file_size_corrupt,omitempty"`
}

func (x *CClientMetrics_ContentValidation_Notification) Reset() {
	*x = CClientMetrics_ContentValidation_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ContentValidation_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ContentValidation_Notification) ProtoMessage() {}

func (x *CClientMetrics_ContentValidation_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ContentValidation_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ContentValidation_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CClientMetrics_ContentValidation_Notification) GetValidationResult() int32 {
	if x != nil && x.ValidationResult != nil {
		return *x.ValidationResult
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetStagedFiles() bool {
	if x != nil && x.StagedFiles != nil {
		return *x.StagedFiles
	}
	return false
}

func (x *CClientMetrics_ContentValidation_Notification) GetUserInitiated() bool {
	if x != nil && x.UserInitiated != nil {
		return *x.UserInitiated
	}
	return false
}

func (x *CClientMetrics_ContentValidation_Notification) GetEarlyOut() bool {
	if x != nil && x.EarlyOut != nil {
		return *x.EarlyOut
	}
	return false
}

func (x *CClientMetrics_ContentValidation_Notification) GetChunksScanned() uint32 {
	if x != nil && x.ChunksScanned != nil {
		return *x.ChunksScanned
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetChunksCorrupt() uint32 {
	if x != nil && x.ChunksCorrupt != nil {
		return *x.ChunksCorrupt
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetBytesScanned() uint64 {
	if x != nil && x.BytesScanned != nil {
		return *x.BytesScanned
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetChunkBytesCorrupt() uint64 {
	if x != nil && x.ChunkBytesCorrupt != nil {
		return *x.ChunkBytesCorrupt
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetTotalFileSizeCorrupt() uint64 {
	if x != nil && x.TotalFileSizeCorrupt != nil {
		return *x.TotalFileSizeCorrupt
	}
	return 0
}

type CClientMetrics_CloudAppSyncStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                   *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	PlatformType            *uint32 `protobuf:"varint,2,opt,name=platform_type,json=platformType" json:"platform_type,omitempty"`
	Preload                 *bool   `protobuf:"varint,3,opt,name=preload" json:"preload,omitempty"`
	BlockingAppLaunch       *bool   `protobuf:"varint,4,opt,name=blocking_app_launch,json=blockingAppLaunch" json:"blocking_app_launch,omitempty"`
	FilesUploaded           *uint32 `protobuf:"varint,5,opt,name=files_uploaded,json=filesUploaded" json:"files_uploaded,omitempty"`
	FilesDownloaded         *uint32 `protobuf:"varint,6,opt,name=files_downloaded,json=filesDownloaded" json:"files_downloaded,omitempty"`
	FilesDeleted            *uint32 `protobuf:"varint,7,opt,name=files_deleted,json=filesDeleted" json:"files_deleted,omitempty"`
	BytesUploaded           *uint64 `protobuf:"varint,8,opt,name=bytes_uploaded,json=bytesUploaded" json:"bytes_uploaded,omitempty"`
	BytesDownloaded         *uint64 `protobuf:"varint,9,opt,name=bytes_downloaded,json=bytesDownloaded" json:"bytes_downloaded,omitempty"`
	MicrosecTotal           *uint64 `protobuf:"varint,10,opt,name=microsec_total,json=microsecTotal" json:"microsec_total,omitempty"`
	MicrosecInitCaches      *uint64 `protobuf:"varint,11,opt,name=microsec_init_caches,json=microsecInitCaches" json:"microsec_init_caches,omitempty"`
	MicrosecValidateState   *uint64 `protobuf:"varint,12,opt,name=microsec_validate_state,json=microsecValidateState" json:"microsec_validate_state,omitempty"`
	MicrosecAcLaunch        *uint64 `protobuf:"varint,13,opt,name=microsec_ac_launch,json=microsecAcLaunch" json:"microsec_ac_launch,omitempty"`
	MicrosecAcPrepUserFiles *uint64 `protobuf:"varint,14,opt,name=microsec_ac_prep_user_files,json=microsecAcPrepUserFiles" json:"microsec_ac_prep_user_files,omitempty"`
	MicrosecAcExit          *uint64 `protobuf:"varint,15,opt,name=microsec_ac_exit,json=microsecAcExit" json:"microsec_ac_exit,omitempty"`
	MicrosecBuildSyncList   *uint64 `protobuf:"varint,16,opt,name=microsec_build_sync_list,json=microsecBuildSyncList" json:"microsec_build_sync_list,omitempty"`
	MicrosecDeleteFiles     *uint64 `protobuf:"varint,17,opt,name=microsec_delete_files,json=microsecDeleteFiles" json:"microsec_delete_files,omitempty"`
	MicrosecDownloadFiles   *uint64 `protobuf:"varint,18,opt,name=microsec_download_files,json=microsecDownloadFiles" json:"microsec_download_files,omitempty"`
	MicrosecUploadFiles     *uint64 `protobuf:"varint,19,opt,name=microsec_upload_files,json=microsecUploadFiles" json:"microsec_upload_files,omitempty"`
	HardwareType            *uint32 `protobuf:"varint,20,opt,name=hardware_type,json=hardwareType" json:"hardware_type,omitempty"`
	FilesManaged            *uint32 `protobuf:"varint,21,opt,name=files_managed,json=filesManaged" json:"files_managed,omitempty"`
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) Reset() {
	*x = CClientMetrics_CloudAppSyncStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_CloudAppSyncStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_CloudAppSyncStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_CloudAppSyncStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_CloudAppSyncStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetPlatformType() uint32 {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetPreload() bool {
	if x != nil && x.Preload != nil {
		return *x.Preload
	}
	return false
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetBlockingAppLaunch() bool {
	if x != nil && x.BlockingAppLaunch != nil {
		return *x.BlockingAppLaunch
	}
	return false
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesUploaded() uint32 {
	if x != nil && x.FilesUploaded != nil {
		return *x.FilesUploaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesDownloaded() uint32 {
	if x != nil && x.FilesDownloaded != nil {
		return *x.FilesDownloaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesDeleted() uint32 {
	if x != nil && x.FilesDeleted != nil {
		return *x.FilesDeleted
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetBytesUploaded() uint64 {
	if x != nil && x.BytesUploaded != nil {
		return *x.BytesUploaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetBytesDownloaded() uint64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecTotal() uint64 {
	if x != nil && x.MicrosecTotal != nil {
		return *x.MicrosecTotal
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecInitCaches() uint64 {
	if x != nil && x.MicrosecInitCaches != nil {
		return *x.MicrosecInitCaches
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecValidateState() uint64 {
	if x != nil && x.MicrosecValidateState != nil {
		return *x.MicrosecValidateState
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecAcLaunch() uint64 {
	if x != nil && x.MicrosecAcLaunch != nil {
		return *x.MicrosecAcLaunch
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecAcPrepUserFiles() uint64 {
	if x != nil && x.MicrosecAcPrepUserFiles != nil {
		return *x.MicrosecAcPrepUserFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecAcExit() uint64 {
	if x != nil && x.MicrosecAcExit != nil {
		return *x.MicrosecAcExit
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecBuildSyncList() uint64 {
	if x != nil && x.MicrosecBuildSyncList != nil {
		return *x.MicrosecBuildSyncList
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecDeleteFiles() uint64 {
	if x != nil && x.MicrosecDeleteFiles != nil {
		return *x.MicrosecDeleteFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecDownloadFiles() uint64 {
	if x != nil && x.MicrosecDownloadFiles != nil {
		return *x.MicrosecDownloadFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecUploadFiles() uint64 {
	if x != nil && x.MicrosecUploadFiles != nil {
		return *x.MicrosecUploadFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetHardwareType() uint32 {
	if x != nil && x.HardwareType != nil {
		return *x.HardwareType
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesManaged() uint32 {
	if x != nil && x.FilesManaged != nil {
		return *x.FilesManaged
	}
	return 0
}

type CClientMetrics_ContentDownloadResponse_Counts_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId *uint32                                       `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Data   *CClientMetrics_ContentDownloadResponse_Hosts `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) Reset() {
	*x = CClientMetrics_ContentDownloadResponse_Counts_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ContentDownloadResponse_Counts_Notification) ProtoMessage() {}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ContentDownloadResponse_Counts_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ContentDownloadResponse_Counts_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) GetData() *CClientMetrics_ContentDownloadResponse_Hosts {
	if x != nil {
		return x.Data
	}
	return nil
}

type CClientMetrics_ReportClientArgs_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientArgs                     []string `protobuf:"bytes,1,rep,name=client_args,json=clientArgs" json:"client_args,omitempty"`
	GpuWebviewRegkeyDisabled       *bool    `protobuf:"varint,2,opt,name=gpu_webview_regkey_disabled,json=gpuWebviewRegkeyDisabled" json:"gpu_webview_regkey_disabled,omitempty"`
	SuppressGpuChrome              *bool    `protobuf:"varint,3,opt,name=suppress_gpu_chrome,json=suppressGpuChrome" json:"suppress_gpu_chrome,omitempty"`
	BrowserNotSupported            *bool    `protobuf:"varint,4,opt,name=browser_not_supported,json=browserNotSupported" json:"browser_not_supported,omitempty"`
	HwAccelVideoRegkeyDisabled     *bool    `protobuf:"varint,5,opt,name=hw_accel_video_regkey_disabled,json=hwAccelVideoRegkeyDisabled" json:"hw_accel_video_regkey_disabled,omitempty"`
	MiniModeEnabled                *bool    `protobuf:"varint,6,opt,name=mini_mode_enabled,json=miniModeEnabled" json:"mini_mode_enabled,omitempty"`
	FpsCounterEnabled              *bool    `protobuf:"varint,7,opt,name=fps_counter_enabled,json=fpsCounterEnabled" json:"fps_counter_enabled,omitempty"`
	LibraryLowBandwidthModeEnabled *bool    `protobuf:"varint,8,opt,name=library_low_bandwidth_mode_enabled,json=libraryLowBandwidthModeEnabled" json:"library_low_bandwidth_mode_enabled,omitempty"`
	LibraryLowPerfModeEnabled      *bool    `protobuf:"varint,9,opt,name=library_low_perf_mode_enabled,json=libraryLowPerfModeEnabled" json:"library_low_perf_mode_enabled,omitempty"`
	GrMode                         *int32   `protobuf:"varint,10,opt,name=gr_mode,json=grMode" json:"gr_mode,omitempty"`
}

func (x *CClientMetrics_ReportClientArgs_Notification) Reset() {
	*x = CClientMetrics_ReportClientArgs_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientArgs_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientArgs_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientArgs_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientArgs_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientArgs_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetClientArgs() []string {
	if x != nil {
		return x.ClientArgs
	}
	return nil
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetGpuWebviewRegkeyDisabled() bool {
	if x != nil && x.GpuWebviewRegkeyDisabled != nil {
		return *x.GpuWebviewRegkeyDisabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetSuppressGpuChrome() bool {
	if x != nil && x.SuppressGpuChrome != nil {
		return *x.SuppressGpuChrome
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetBrowserNotSupported() bool {
	if x != nil && x.BrowserNotSupported != nil {
		return *x.BrowserNotSupported
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetHwAccelVideoRegkeyDisabled() bool {
	if x != nil && x.HwAccelVideoRegkeyDisabled != nil {
		return *x.HwAccelVideoRegkeyDisabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetMiniModeEnabled() bool {
	if x != nil && x.MiniModeEnabled != nil {
		return *x.MiniModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetFpsCounterEnabled() bool {
	if x != nil && x.FpsCounterEnabled != nil {
		return *x.FpsCounterEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetLibraryLowBandwidthModeEnabled() bool {
	if x != nil && x.LibraryLowBandwidthModeEnabled != nil {
		return *x.LibraryLowBandwidthModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetLibraryLowPerfModeEnabled() bool {
	if x != nil && x.LibraryLowPerfModeEnabled != nil {
		return *x.LibraryLowPerfModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetGrMode() int32 {
	if x != nil && x.GrMode != nil {
		return *x.GrMode
	}
	return 0
}

type CClientMetrics_ReportLinuxStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlibcVersionMajor *int32  `protobuf:"varint,1,opt,name=glibc_version_major,json=glibcVersionMajor" json:"glibc_version_major,omitempty"`
	GlibcVersionMinor *int32  `protobuf:"varint,2,opt,name=glibc_version_minor,json=glibcVersionMinor" json:"glibc_version_minor,omitempty"`
	AccountType       *int32  `protobuf:"varint,3,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	LauncherType      *int32  `protobuf:"varint,4,opt,name=launcher_type,json=launcherType" json:"launcher_type,omitempty"`
	GameServerAppid   *int32  `protobuf:"varint,5,opt,name=game_server_appid,json=gameServerAppid" json:"game_server_appid,omitempty"`
	ProcessName       *string `protobuf:"bytes,6,opt,name=process_name,json=processName" json:"process_name,omitempty"`
}

func (x *CClientMetrics_ReportLinuxStats_Notification) Reset() {
	*x = CClientMetrics_ReportLinuxStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportLinuxStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportLinuxStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportLinuxStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportLinuxStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportLinuxStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGlibcVersionMajor() int32 {
	if x != nil && x.GlibcVersionMajor != nil {
		return *x.GlibcVersionMajor
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGlibcVersionMinor() int32 {
	if x != nil && x.GlibcVersionMinor != nil {
		return *x.GlibcVersionMinor
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetAccountType() int32 {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetLauncherType() int32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGameServerAppid() int32 {
	if x != nil && x.GameServerAppid != nil {
		return *x.GameServerAppid
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

type CClientMetrics_ClipShare_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult     *uint32           `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ShareMethod *EClipShareMethod `protobuf:"varint,2,opt,name=share_method,json=shareMethod,enum=EClipShareMethod,def=1" json:"share_method,omitempty"`
	Seconds     *float32          `protobuf:"fixed32,3,opt,name=seconds" json:"seconds,omitempty"`
	Bytes       *uint64           `protobuf:"varint,4,opt,name=bytes" json:"bytes,omitempty"`
	Gameid      *uint64           `protobuf:"fixed64,5,opt,name=gameid" json:"gameid,omitempty"`
}

// Default values for CClientMetrics_ClipShare_Notification fields.
const (
	Default_CClientMetrics_ClipShare_Notification_Eresult     = uint32(2)
	Default_CClientMetrics_ClipShare_Notification_ShareMethod = EClipShareMethod_k_EClipShareMethod_Chat
)

func (x *CClientMetrics_ClipShare_Notification) Reset() {
	*x = CClientMetrics_ClipShare_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ClipShare_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClipShare_Notification) ProtoMessage() {}

func (x *CClientMetrics_ClipShare_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClipShare_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClipShare_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CClientMetrics_ClipShare_Notification) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CClientMetrics_ClipShare_Notification_Eresult
}

func (x *CClientMetrics_ClipShare_Notification) GetShareMethod() EClipShareMethod {
	if x != nil && x.ShareMethod != nil {
		return *x.ShareMethod
	}
	return Default_CClientMetrics_ClipShare_Notification_ShareMethod
}

func (x *CClientMetrics_ClipShare_Notification) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CClientMetrics_ClipShare_Notification) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CClientMetrics_ClipShare_Notification) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CClientMetrics_ClipRange_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalRangeMethod *EClipRangeMethod                                        `protobuf:"varint,1,opt,name=original_range_method,json=originalRangeMethod,enum=EClipRangeMethod,def=1" json:"original_range_method,omitempty"`
	Start               *CClientMetrics_ClipRange_Notification_RelativeRangeEdge `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End                 *CClientMetrics_ClipRange_Notification_RelativeRangeEdge `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	Seconds             *float32                                                 `protobuf:"fixed32,4,opt,name=seconds" json:"seconds,omitempty"`
	Gameid              *uint64                                                  `protobuf:"fixed64,5,opt,name=gameid" json:"gameid,omitempty"`
}

// Default values for CClientMetrics_ClipRange_Notification fields.
const (
	Default_CClientMetrics_ClipRange_Notification_OriginalRangeMethod = EClipRangeMethod_k_EClipRangeMethod_CreateClipButton
)

func (x *CClientMetrics_ClipRange_Notification) Reset() {
	*x = CClientMetrics_ClipRange_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ClipRange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClipRange_Notification) ProtoMessage() {}

func (x *CClientMetrics_ClipRange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClipRange_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClipRange_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CClientMetrics_ClipRange_Notification) GetOriginalRangeMethod() EClipRangeMethod {
	if x != nil && x.OriginalRangeMethod != nil {
		return *x.OriginalRangeMethod
	}
	return Default_CClientMetrics_ClipRange_Notification_OriginalRangeMethod
}

func (x *CClientMetrics_ClipRange_Notification) GetStart() *CClientMetrics_ClipRange_Notification_RelativeRangeEdge {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CClientMetrics_ClipRange_Notification) GetEnd() *CClientMetrics_ClipRange_Notification_RelativeRangeEdge {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CClientMetrics_ClipRange_Notification) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CClientMetrics_ClipRange_Notification) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CClientMetrics_EndGameRecording_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingType *EGameRecordingType `protobuf:"varint,1,opt,name=recording_type,json=recordingType,enum=EGameRecordingType,def=0" json:"recording_type,omitempty"`
	Seconds       *float32            `protobuf:"fixed32,2,opt,name=seconds" json:"seconds,omitempty"`
	Bytes         *uint64             `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	Gameid        *uint64             `protobuf:"fixed64,4,opt,name=gameid" json:"gameid,omitempty"`
	InstantClip   *bool               `protobuf:"varint,5,opt,name=instant_clip,json=instantClip" json:"instant_clip,omitempty"`
}

// Default values for CClientMetrics_EndGameRecording_Notification fields.
const (
	Default_CClientMetrics_EndGameRecording_Notification_RecordingType = EGameRecordingType_k_EGameRecordingType_Unknown
)

func (x *CClientMetrics_EndGameRecording_Notification) Reset() {
	*x = CClientMetrics_EndGameRecording_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_EndGameRecording_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_EndGameRecording_Notification) ProtoMessage() {}

func (x *CClientMetrics_EndGameRecording_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_EndGameRecording_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_EndGameRecording_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CClientMetrics_EndGameRecording_Notification) GetRecordingType() EGameRecordingType {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return Default_CClientMetrics_EndGameRecording_Notification_RecordingType
}

func (x *CClientMetrics_EndGameRecording_Notification) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CClientMetrics_EndGameRecording_Notification) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CClientMetrics_EndGameRecording_Notification) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CClientMetrics_EndGameRecording_Notification) GetInstantClip() bool {
	if x != nil && x.InstantClip != nil {
		return *x.InstantClip
	}
	return false
}

type CClientMetrics_ReportReactUsage_Notification_RouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *string `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_RouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_RouteData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_RouteData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_RouteData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) GetRoute() string {
	if x != nil && x.Route != nil {
		return *x.Route
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification_ComponentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component *string `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	Count     *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_ComponentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_ComponentData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_ComponentData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_ComponentData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification_ActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_ActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_ActionData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_ActionData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_ActionData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 2}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportClientError_Notification_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Message    *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Count      *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportClientError_Notification_Error) Reset() {
	*x = CClientMetrics_ReportClientError_Notification_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification_Error) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification_Error) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification_Error.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification_Error) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_DownloadRates_Notification_StatsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType   *uint32 `protobuf:"varint,1,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	SourceId     *uint32 `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Bytes        *uint64 `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	HostName     *string `protobuf:"bytes,4,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Microseconds *uint64 `protobuf:"varint,5,opt,name=microseconds" json:"microseconds,omitempty"`
	UsedIpv6     *bool   `protobuf:"varint,6,opt,name=used_ipv6,json=usedIpv6" json:"used_ipv6,omitempty"`
	Proxied      *bool   `protobuf:"varint,7,opt,name=proxied" json:"proxied,omitempty"`
	UsedHttp2    *bool   `protobuf:"varint,8,opt,name=used_http2,json=usedHttp2" json:"used_http2,omitempty"`
	CacheHits    *uint32 `protobuf:"varint,9,opt,name=cache_hits,json=cacheHits" json:"cache_hits,omitempty"`
	CacheMisses  *uint32 `protobuf:"varint,10,opt,name=cache_misses,json=cacheMisses" json:"cache_misses,omitempty"`
	HitBytes     *uint64 `protobuf:"varint,11,opt,name=hit_bytes,json=hitBytes" json:"hit_bytes,omitempty"`
	MissBytes    *uint64 `protobuf:"varint,12,opt,name=miss_bytes,json=missBytes" json:"miss_bytes,omitempty"`
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) Reset() {
	*x = CClientMetrics_DownloadRates_Notification_StatsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_DownloadRates_Notification_StatsInfo) ProtoMessage() {}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_DownloadRates_Notification_StatsInfo.ProtoReflect.Descriptor instead.
func (*CClientMetrics_DownloadRates_Notification_StatsInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetSourceId() uint32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetMicroseconds() uint64 {
	if x != nil && x.Microseconds != nil {
		return *x.Microseconds
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetUsedIpv6() bool {
	if x != nil && x.UsedIpv6 != nil {
		return *x.UsedIpv6
	}
	return false
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetProxied() bool {
	if x != nil && x.Proxied != nil {
		return *x.Proxied
	}
	return false
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetUsedHttp2() bool {
	if x != nil && x.UsedHttp2 != nil {
		return *x.UsedHttp2
	}
	return false
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetCacheHits() uint32 {
	if x != nil && x.CacheHits != nil {
		return *x.CacheHits
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetCacheMisses() uint32 {
	if x != nil && x.CacheMisses != nil {
		return *x.CacheMisses
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetHitBytes() uint64 {
	if x != nil && x.HitBytes != nil {
		return *x.HitBytes
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetMissBytes() uint64 {
	if x != nil && x.MissBytes != nil {
		return *x.MissBytes
	}
	return 0
}

type CClientMetrics_ClipRange_Notification_RelativeRangeEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalRangeMethod *EClipRangeMethod `protobuf:"varint,1,opt,name=original_range_method,json=originalRangeMethod,enum=EClipRangeMethod,def=1" json:"original_range_method,omitempty"`
	LatestRangeMethod   *EClipRangeMethod `protobuf:"varint,2,opt,name=latest_range_method,json=latestRangeMethod,enum=EClipRangeMethod,def=1" json:"latest_range_method,omitempty"`
	DeltaMs             *int32            `protobuf:"varint,3,opt,name=delta_ms,json=deltaMs" json:"delta_ms,omitempty"`
}

// Default values for CClientMetrics_ClipRange_Notification_RelativeRangeEdge fields.
const (
	Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_OriginalRangeMethod = EClipRangeMethod_k_EClipRangeMethod_CreateClipButton
	Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_LatestRangeMethod   = EClipRangeMethod_k_EClipRangeMethod_CreateClipButton
)

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) Reset() {
	*x = CClientMetrics_ClipRange_Notification_RelativeRangeEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClipRange_Notification_RelativeRangeEdge) ProtoMessage() {}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClipRange_Notification_RelativeRangeEdge.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClipRange_Notification_RelativeRangeEdge) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) GetOriginalRangeMethod() EClipRangeMethod {
	if x != nil && x.OriginalRangeMethod != nil {
		return *x.OriginalRangeMethod
	}
	return Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_OriginalRangeMethod
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) GetLatestRangeMethod() EClipRangeMethod {
	if x != nil && x.LatestRangeMethod != nil {
		return *x.LatestRangeMethod
	}
	return Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_LatestRangeMethod
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) GetDeltaMs() int32 {
	if x != nil && x.DeltaMs != nil {
		return *x.DeltaMs
	}
	return 0
}

var File_steammessages_clientmetrics_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_clientmetrics_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x23, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x27, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xa4, 0x02, 0x0a, 0x2d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4f, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x2c, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x49, 0x50, 0x76,
	0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x66, 0x63, 0x36, 0x35, 0x39, 0x38, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x49, 0x73, 0x52, 0x66, 0x63, 0x36, 0x35, 0x39, 0x38, 0x22, 0xc8, 0x02, 0x0a, 0x2b, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x4f, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x75, 0x6d, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x73,
	0x75, 0x6d, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9e, 0x04, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8a, 0x02, 0x0a, 0x2d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x57, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70,
	0x0a, 0x2b, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0xea, 0x04, 0x0a, 0x29, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xf4, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x49, 0x70, 0x76, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x48, 0x74, 0x74, 0x70, 0x32, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xb4, 0x03,
	0x0a, 0x2d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x22, 0xc8, 0x07, 0x0a, 0x2d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x5f, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x41, 0x63, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x5f, 0x61, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x63, 0x41, 0x63, 0x50, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x5f, 0x61,
	0x63, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x41, 0x63, 0x45, 0x78, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x79, 0x6e,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x22,
	0x98, 0x01, 0x0a, 0x3a, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x04, 0x0a, 0x2c, 0x43,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x67, 0x70, 0x75, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x6b,
	0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x67, 0x70, 0x75, 0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x67,
	0x6b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x70, 0x75, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x1e, 0x68, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x72, 0x65, 0x67, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x77, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x67, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x70,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4a, 0x0a, 0x22, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x50, 0x65,
	0x72, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6c, 0x69, 0x62, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6c, 0x69, 0x62, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43,
	0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x17,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x22, 0xe6, 0x04, 0x0a,
	0x25, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x13, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x4a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64,
	0x1a, 0x82, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x13, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x66, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x3a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x2a, 0x71, 0x0a, 0x12, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x10, 0x01, 0x2a, 0xbb,
	0x01, 0x0a, 0x17, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61,
	0x64, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50,
	0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x69, 0x73, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x03, 0x2a, 0xd6, 0x01, 0x0a,
	0x10, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x10, 0x04, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x10, 0x06, 0x2a, 0x90, 0x02, 0x0a, 0x10, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x44, 0x72, 0x61, 0x67, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x10,
	0x06, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x32, 0x99, 0x0a, 0x0a, 0x0d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x1d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2f, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2a, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x1d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6c, 0x0a, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x26, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_clientmetrics_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_clientmetrics_steamclient_proto_rawDescData = file_steammessages_clientmetrics_steamclient_proto_rawDesc
)

func file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_clientmetrics_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_clientmetrics_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_clientmetrics_steamclient_proto_rawDescData)
	})
	return file_steammessages_clientmetrics_steamclient_proto_rawDescData
}

var file_steammessages_clientmetrics_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_steammessages_clientmetrics_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_steammessages_clientmetrics_steamclient_proto_goTypes = []any{
	(ESteamPipeWorkType)(0),                                            // 0: ESteamPipeWorkType
	(ESteamPipeOperationType)(0),                                       // 1: ESteamPipeOperationType
	(EClipShareMethod)(0),                                              // 2: EClipShareMethod
	(EClipRangeMethod)(0),                                              // 3: EClipRangeMethod
	(*CClientMetrics_AppInterfaceCreation)(nil),                        // 4: CClientMetrics_AppInterfaceCreation
	(*CClientMetrics_AppInterfaceMethodCounts)(nil),                    // 5: CClientMetrics_AppInterfaceMethodCounts
	(*CClientMetrics_AppInterfaceStats_Notification)(nil),              // 6: CClientMetrics_AppInterfaceStats_Notification
	(*CClientMetrics_IPv6Connectivity_Result)(nil),                     // 7: CClientMetrics_IPv6Connectivity_Result
	(*CClientMetrics_IPv6Connectivity_Notification)(nil),               // 8: CClientMetrics_IPv6Connectivity_Notification
	(*CClientMetrics_SteamPipeWorkStats_Operation)(nil),                // 9: CClientMetrics_SteamPipeWorkStats_Operation
	(*CClientMetrics_SteamPipeWorkStats_Notification)(nil),             // 10: CClientMetrics_SteamPipeWorkStats_Notification
	(*CClientMetrics_ReportReactUsage_Notification)(nil),               // 11: CClientMetrics_ReportReactUsage_Notification
	(*CClientMetrics_ReportClientError_Notification)(nil),              // 12: CClientMetrics_ReportClientError_Notification
	(*CClientMetrics_ClientBootstrap_Notification)(nil),                // 13: CClientMetrics_ClientBootstrap_Notification
	(*CClientMetrics_DownloadRates_Notification)(nil),                  // 14: CClientMetrics_DownloadRates_Notification
	(*CClientMetrics_ContentValidation_Notification)(nil),              // 15: CClientMetrics_ContentValidation_Notification
	(*CClientMetrics_CloudAppSyncStats_Notification)(nil),              // 16: CClientMetrics_CloudAppSyncStats_Notification
	(*CClientMetrics_ContentDownloadResponse_Counts_Notification)(nil), // 17: CClientMetrics_ContentDownloadResponse_Counts_Notification
	(*CClientMetrics_ReportClientArgs_Notification)(nil),               // 18: CClientMetrics_ReportClientArgs_Notification
	(*CClientMetrics_ReportLinuxStats_Notification)(nil),               // 19: CClientMetrics_ReportLinuxStats_Notification
	(*CClientMetrics_ClipShare_Notification)(nil),                      // 20: CClientMetrics_ClipShare_Notification
	(*CClientMetrics_ClipRange_Notification)(nil),                      // 21: CClientMetrics_ClipRange_Notification
	(*CClientMetrics_EndGameRecording_Notification)(nil),               // 22: CClientMetrics_EndGameRecording_Notification
	(*CClientMetrics_ReportReactUsage_Notification_RouteData)(nil),     // 23: CClientMetrics_ReportReactUsage_Notification.RouteData
	(*CClientMetrics_ReportReactUsage_Notification_ComponentData)(nil), // 24: CClientMetrics_ReportReactUsage_Notification.ComponentData
	(*CClientMetrics_ReportReactUsage_Notification_ActionData)(nil),    // 25: CClientMetrics_ReportReactUsage_Notification.ActionData
	(*CClientMetrics_ReportClientError_Notification_Error)(nil),        // 26: CClientMetrics_ReportClientError_Notification.Error
	(*CClientMetrics_DownloadRates_Notification_StatsInfo)(nil),        // 27: CClientMetrics_DownloadRates_Notification.StatsInfo
	(*CClientMetrics_ClipRange_Notification_RelativeRangeEdge)(nil),    // 28: CClientMetrics_ClipRange_Notification.RelativeRangeEdge
	(*CClientMetrics_ClientBootstrap_Summary)(nil),                     // 29: CClientMetrics_ClientBootstrap_Summary
	(*CClientMetrics_ContentDownloadResponse_Hosts)(nil),               // 30: CClientMetrics_ContentDownloadResponse_Hosts
	(EGameRecordingType)(0),                                            // 31: EGameRecordingType
	(*NoResponse)(nil),                                                 // 32: NoResponse
}
var file_steammessages_clientmetrics_steamclient_proto_depIdxs = []int32{
	4,  // 0: CClientMetrics_AppInterfaceStats_Notification.interfaces_created:type_name -> CClientMetrics_AppInterfaceCreation
	5,  // 1: CClientMetrics_AppInterfaceStats_Notification.methods_called:type_name -> CClientMetrics_AppInterfaceMethodCounts
	7,  // 2: CClientMetrics_IPv6Connectivity_Notification.results:type_name -> CClientMetrics_IPv6Connectivity_Result
	1,  // 3: CClientMetrics_SteamPipeWorkStats_Operation.type:type_name -> ESteamPipeOperationType
	0,  // 4: CClientMetrics_SteamPipeWorkStats_Notification.work_type:type_name -> ESteamPipeWorkType
	9,  // 5: CClientMetrics_SteamPipeWorkStats_Notification.operations:type_name -> CClientMetrics_SteamPipeWorkStats_Operation
	23, // 6: CClientMetrics_ReportReactUsage_Notification.routes:type_name -> CClientMetrics_ReportReactUsage_Notification.RouteData
	24, // 7: CClientMetrics_ReportReactUsage_Notification.components:type_name -> CClientMetrics_ReportReactUsage_Notification.ComponentData
	25, // 8: CClientMetrics_ReportReactUsage_Notification.actions:type_name -> CClientMetrics_ReportReactUsage_Notification.ActionData
	26, // 9: CClientMetrics_ReportClientError_Notification.errors:type_name -> CClientMetrics_ReportClientError_Notification.Error
	29, // 10: CClientMetrics_ClientBootstrap_Notification.summary:type_name -> CClientMetrics_ClientBootstrap_Summary
	27, // 11: CClientMetrics_DownloadRates_Notification.stats:type_name -> CClientMetrics_DownloadRates_Notification.StatsInfo
	30, // 12: CClientMetrics_ContentDownloadResponse_Counts_Notification.data:type_name -> CClientMetrics_ContentDownloadResponse_Hosts
	2,  // 13: CClientMetrics_ClipShare_Notification.share_method:type_name -> EClipShareMethod
	3,  // 14: CClientMetrics_ClipRange_Notification.original_range_method:type_name -> EClipRangeMethod
	28, // 15: CClientMetrics_ClipRange_Notification.start:type_name -> CClientMetrics_ClipRange_Notification.RelativeRangeEdge
	28, // 16: CClientMetrics_ClipRange_Notification.end:type_name -> CClientMetrics_ClipRange_Notification.RelativeRangeEdge
	31, // 17: CClientMetrics_EndGameRecording_Notification.recording_type:type_name -> EGameRecordingType
	3,  // 18: CClientMetrics_ClipRange_Notification.RelativeRangeEdge.original_range_method:type_name -> EClipRangeMethod
	3,  // 19: CClientMetrics_ClipRange_Notification.RelativeRangeEdge.latest_range_method:type_name -> EClipRangeMethod
	6,  // 20: ClientMetrics.ClientAppInterfaceStatsReport:input_type -> CClientMetrics_AppInterfaceStats_Notification
	8,  // 21: ClientMetrics.ClientIPv6ConnectivityReport:input_type -> CClientMetrics_IPv6Connectivity_Notification
	10, // 22: ClientMetrics.SteamPipeWorkStatsReport:input_type -> CClientMetrics_SteamPipeWorkStats_Notification
	11, // 23: ClientMetrics.ReportReactUsage:input_type -> CClientMetrics_ReportReactUsage_Notification
	12, // 24: ClientMetrics.ReportClientError:input_type -> CClientMetrics_ReportClientError_Notification
	13, // 25: ClientMetrics.ClientBootstrapReport:input_type -> CClientMetrics_ClientBootstrap_Notification
	14, // 26: ClientMetrics.ClientDownloadRatesReport:input_type -> CClientMetrics_DownloadRates_Notification
	15, // 27: ClientMetrics.ClientContentValidationReport:input_type -> CClientMetrics_ContentValidation_Notification
	16, // 28: ClientMetrics.ClientCloudAppSyncStats:input_type -> CClientMetrics_CloudAppSyncStats_Notification
	17, // 29: ClientMetrics.ClientDownloadResponseCodeCounts:input_type -> CClientMetrics_ContentDownloadResponse_Counts_Notification
	18, // 30: ClientMetrics.ReportClientArgs:input_type -> CClientMetrics_ReportClientArgs_Notification
	19, // 31: ClientMetrics.ReportLinuxStats:input_type -> CClientMetrics_ReportLinuxStats_Notification
	20, // 32: ClientMetrics.ReportClipShare:input_type -> CClientMetrics_ClipShare_Notification
	21, // 33: ClientMetrics.ReportClipRange:input_type -> CClientMetrics_ClipRange_Notification
	22, // 34: ClientMetrics.ReportEndGameRecording:input_type -> CClientMetrics_EndGameRecording_Notification
	32, // 35: ClientMetrics.ClientAppInterfaceStatsReport:output_type -> NoResponse
	32, // 36: ClientMetrics.ClientIPv6ConnectivityReport:output_type -> NoResponse
	32, // 37: ClientMetrics.SteamPipeWorkStatsReport:output_type -> NoResponse
	32, // 38: ClientMetrics.ReportReactUsage:output_type -> NoResponse
	32, // 39: ClientMetrics.ReportClientError:output_type -> NoResponse
	32, // 40: ClientMetrics.ClientBootstrapReport:output_type -> NoResponse
	32, // 41: ClientMetrics.ClientDownloadRatesReport:output_type -> NoResponse
	32, // 42: ClientMetrics.ClientContentValidationReport:output_type -> NoResponse
	32, // 43: ClientMetrics.ClientCloudAppSyncStats:output_type -> NoResponse
	32, // 44: ClientMetrics.ClientDownloadResponseCodeCounts:output_type -> NoResponse
	32, // 45: ClientMetrics.ReportClientArgs:output_type -> NoResponse
	32, // 46: ClientMetrics.ReportLinuxStats:output_type -> NoResponse
	32, // 47: ClientMetrics.ReportClipShare:output_type -> NoResponse
	32, // 48: ClientMetrics.ReportClipRange:output_type -> NoResponse
	32, // 49: ClientMetrics.ReportEndGameRecording:output_type -> NoResponse
	35, // [35:50] is the sub-list for method output_type
	20, // [20:35] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_steammessages_clientmetrics_steamclient_proto_init() }
func file_steammessages_clientmetrics_steamclient_proto_init() {
	if File_steammessages_clientmetrics_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_clientmetrics_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_AppInterfaceCreation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_AppInterfaceMethodCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_AppInterfaceStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_IPv6Connectivity_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_IPv6Connectivity_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_SteamPipeWorkStats_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_SteamPipeWorkStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportClientError_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ClientBootstrap_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_DownloadRates_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ContentValidation_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_CloudAppSyncStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ContentDownloadResponse_Counts_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportClientArgs_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportLinuxStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ClipShare_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ClipRange_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_EndGameRecording_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification_RouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification_ComponentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification_ActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportClientError_Notification_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_DownloadRates_Notification_StatsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientmetrics_steamclient_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ClipRange_Notification_RelativeRangeEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_clientmetrics_steamclient_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_clientmetrics_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_clientmetrics_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_clientmetrics_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_clientmetrics_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_clientmetrics_steamclient_proto = out.File
	file_steammessages_clientmetrics_steamclient_proto_rawDesc = nil
	file_steammessages_clientmetrics_steamclient_proto_goTypes = nil
	file_steammessages_clientmetrics_steamclient_proto_depIdxs = nil
}
