// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: enums.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPublishedFileQueryType int32

const (
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByVote                                  EPublishedFileQueryType = 0
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPublicationDate                       EPublishedFileQueryType = 1
	EPublishedFileQueryType_k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate         EPublishedFileQueryType = 2
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTrend                                 EPublishedFileQueryType = 3
	EPublishedFileQueryType_k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate     EPublishedFileQueryType = 4
	EPublishedFileQueryType_k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate       EPublishedFileQueryType = 5
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByNumTimesReported                      EPublishedFileQueryType = 6
	EPublishedFileQueryType_k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate EPublishedFileQueryType = 7
	EPublishedFileQueryType_k_PublishedFileQueryType_NotYetRated                                   EPublishedFileQueryType = 8
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions              EPublishedFileQueryType = 9
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalVotesAsc                         EPublishedFileQueryType = 10
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByVotesUp                               EPublishedFileQueryType = 11
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTextSearch                            EPublishedFileQueryType = 12
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPlaytimeTrend                         EPublishedFileQueryType = 13
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalPlaytime                         EPublishedFileQueryType = 14
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByAveragePlaytimeTrend                  EPublishedFileQueryType = 15
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime               EPublishedFileQueryType = 16
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend                 EPublishedFileQueryType = 17
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions              EPublishedFileQueryType = 18
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByInappropriateContentRating            EPublishedFileQueryType = 19
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByBanContentCheck                       EPublishedFileQueryType = 20
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLastUpdatedDate                       EPublishedFileQueryType = 21
)

// Enum value maps for EPublishedFileQueryType.
var (
	EPublishedFileQueryType_name = map[int32]string{
		0:  "k_PublishedFileQueryType_RankedByVote",
		1:  "k_PublishedFileQueryType_RankedByPublicationDate",
		2:  "k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate",
		3:  "k_PublishedFileQueryType_RankedByTrend",
		4:  "k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate",
		5:  "k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate",
		6:  "k_PublishedFileQueryType_RankedByNumTimesReported",
		7:  "k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate",
		8:  "k_PublishedFileQueryType_NotYetRated",
		9:  "k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions",
		10: "k_PublishedFileQueryType_RankedByTotalVotesAsc",
		11: "k_PublishedFileQueryType_RankedByVotesUp",
		12: "k_PublishedFileQueryType_RankedByTextSearch",
		13: "k_PublishedFileQueryType_RankedByPlaytimeTrend",
		14: "k_PublishedFileQueryType_RankedByTotalPlaytime",
		15: "k_PublishedFileQueryType_RankedByAveragePlaytimeTrend",
		16: "k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime",
		17: "k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend",
		18: "k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions",
		19: "k_PublishedFileQueryType_RankedByInappropriateContentRating",
		20: "k_PublishedFileQueryType_RankedByBanContentCheck",
		21: "k_PublishedFileQueryType_RankedByLastUpdatedDate",
	}
	EPublishedFileQueryType_value = map[string]int32{
		"k_PublishedFileQueryType_RankedByVote":                                  0,
		"k_PublishedFileQueryType_RankedByPublicationDate":                       1,
		"k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate":         2,
		"k_PublishedFileQueryType_RankedByTrend":                                 3,
		"k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate":     4,
		"k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate":       5,
		"k_PublishedFileQueryType_RankedByNumTimesReported":                      6,
		"k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate": 7,
		"k_PublishedFileQueryType_NotYetRated":                                   8,
		"k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions":              9,
		"k_PublishedFileQueryType_RankedByTotalVotesAsc":                         10,
		"k_PublishedFileQueryType_RankedByVotesUp":                               11,
		"k_PublishedFileQueryType_RankedByTextSearch":                            12,
		"k_PublishedFileQueryType_RankedByPlaytimeTrend":                         13,
		"k_PublishedFileQueryType_RankedByTotalPlaytime":                         14,
		"k_PublishedFileQueryType_RankedByAveragePlaytimeTrend":                  15,
		"k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime":               16,
		"k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend":                 17,
		"k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions":              18,
		"k_PublishedFileQueryType_RankedByInappropriateContentRating":            19,
		"k_PublishedFileQueryType_RankedByBanContentCheck":                       20,
		"k_PublishedFileQueryType_RankedByLastUpdatedDate":                       21,
	}
)

func (x EPublishedFileQueryType) Enum() *EPublishedFileQueryType {
	p := new(EPublishedFileQueryType)
	*p = x
	return p
}

func (x EPublishedFileQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (EPublishedFileQueryType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x EPublishedFileQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileQueryType(num)
	return nil
}

// Deprecated: Use EPublishedFileQueryType.Descriptor instead.
func (EPublishedFileQueryType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type EPublishedFileInappropriateProvider int32

const (
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Invalid EPublishedFileInappropriateProvider = 0
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Google  EPublishedFileInappropriateProvider = 1
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Amazon  EPublishedFileInappropriateProvider = 2
)

// Enum value maps for EPublishedFileInappropriateProvider.
var (
	EPublishedFileInappropriateProvider_name = map[int32]string{
		0: "k_EPublishedFileInappropriateProvider_Invalid",
		1: "k_EPublishedFileInappropriateProvider_Google",
		2: "k_EPublishedFileInappropriateProvider_Amazon",
	}
	EPublishedFileInappropriateProvider_value = map[string]int32{
		"k_EPublishedFileInappropriateProvider_Invalid": 0,
		"k_EPublishedFileInappropriateProvider_Google":  1,
		"k_EPublishedFileInappropriateProvider_Amazon":  2,
	}
)

func (x EPublishedFileInappropriateProvider) Enum() *EPublishedFileInappropriateProvider {
	p := new(EPublishedFileInappropriateProvider)
	*p = x
	return p
}

func (x EPublishedFileInappropriateProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileInappropriateProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (EPublishedFileInappropriateProvider) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x EPublishedFileInappropriateProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileInappropriateProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileInappropriateProvider(num)
	return nil
}

// Deprecated: Use EPublishedFileInappropriateProvider.Descriptor instead.
func (EPublishedFileInappropriateProvider) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type EPublishedFileInappropriateResult int32

const (
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_NotScanned   EPublishedFileInappropriateResult = 0
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_VeryUnlikely EPublishedFileInappropriateResult = 1
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Unlikely     EPublishedFileInappropriateResult = 30
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Possible     EPublishedFileInappropriateResult = 50
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Likely       EPublishedFileInappropriateResult = 75
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_VeryLikely   EPublishedFileInappropriateResult = 100
)

// Enum value maps for EPublishedFileInappropriateResult.
var (
	EPublishedFileInappropriateResult_name = map[int32]string{
		0:   "k_EPublishedFileInappropriateResult_NotScanned",
		1:   "k_EPublishedFileInappropriateResult_VeryUnlikely",
		30:  "k_EPublishedFileInappropriateResult_Unlikely",
		50:  "k_EPublishedFileInappropriateResult_Possible",
		75:  "k_EPublishedFileInappropriateResult_Likely",
		100: "k_EPublishedFileInappropriateResult_VeryLikely",
	}
	EPublishedFileInappropriateResult_value = map[string]int32{
		"k_EPublishedFileInappropriateResult_NotScanned":   0,
		"k_EPublishedFileInappropriateResult_VeryUnlikely": 1,
		"k_EPublishedFileInappropriateResult_Unlikely":     30,
		"k_EPublishedFileInappropriateResult_Possible":     50,
		"k_EPublishedFileInappropriateResult_Likely":       75,
		"k_EPublishedFileInappropriateResult_VeryLikely":   100,
	}
)

func (x EPublishedFileInappropriateResult) Enum() *EPublishedFileInappropriateResult {
	p := new(EPublishedFileInappropriateResult)
	*p = x
	return p
}

func (x EPublishedFileInappropriateResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileInappropriateResult) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (EPublishedFileInappropriateResult) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x EPublishedFileInappropriateResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileInappropriateResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileInappropriateResult(num)
	return nil
}

// Deprecated: Use EPublishedFileInappropriateResult.Descriptor instead.
func (EPublishedFileInappropriateResult) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type EPersonaStateFlag int32

const (
	EPersonaStateFlag_k_EPersonaStateFlag_HasRichPresence      EPersonaStateFlag = 1
	EPersonaStateFlag_k_EPersonaStateFlag_InJoinableGame       EPersonaStateFlag = 2
	EPersonaStateFlag_k_EPersonaStateFlag_Golden               EPersonaStateFlag = 4
	EPersonaStateFlag_k_EPersonaStateFlag_RemotePlayTogether   EPersonaStateFlag = 8
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeWeb        EPersonaStateFlag = 256
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeMobile     EPersonaStateFlag = 512
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeTenfoot    EPersonaStateFlag = 1024
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeVR         EPersonaStateFlag = 2048
	EPersonaStateFlag_k_EPersonaStateFlag_LaunchTypeGamepad    EPersonaStateFlag = 4096
	EPersonaStateFlag_k_EPersonaStateFlag_LaunchTypeCompatTool EPersonaStateFlag = 8192
)

// Enum value maps for EPersonaStateFlag.
var (
	EPersonaStateFlag_name = map[int32]string{
		1:    "k_EPersonaStateFlag_HasRichPresence",
		2:    "k_EPersonaStateFlag_InJoinableGame",
		4:    "k_EPersonaStateFlag_Golden",
		8:    "k_EPersonaStateFlag_RemotePlayTogether",
		256:  "k_EPersonaStateFlag_ClientTypeWeb",
		512:  "k_EPersonaStateFlag_ClientTypeMobile",
		1024: "k_EPersonaStateFlag_ClientTypeTenfoot",
		2048: "k_EPersonaStateFlag_ClientTypeVR",
		4096: "k_EPersonaStateFlag_LaunchTypeGamepad",
		8192: "k_EPersonaStateFlag_LaunchTypeCompatTool",
	}
	EPersonaStateFlag_value = map[string]int32{
		"k_EPersonaStateFlag_HasRichPresence":      1,
		"k_EPersonaStateFlag_InJoinableGame":       2,
		"k_EPersonaStateFlag_Golden":               4,
		"k_EPersonaStateFlag_RemotePlayTogether":   8,
		"k_EPersonaStateFlag_ClientTypeWeb":        256,
		"k_EPersonaStateFlag_ClientTypeMobile":     512,
		"k_EPersonaStateFlag_ClientTypeTenfoot":    1024,
		"k_EPersonaStateFlag_ClientTypeVR":         2048,
		"k_EPersonaStateFlag_LaunchTypeGamepad":    4096,
		"k_EPersonaStateFlag_LaunchTypeCompatTool": 8192,
	}
)

func (x EPersonaStateFlag) Enum() *EPersonaStateFlag {
	p := new(EPersonaStateFlag)
	*p = x
	return p
}

func (x EPersonaStateFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPersonaStateFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (EPersonaStateFlag) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x EPersonaStateFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPersonaStateFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPersonaStateFlag(num)
	return nil
}

// Deprecated: Use EPersonaStateFlag.Descriptor instead.
func (EPersonaStateFlag) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type EContentCheckProvider int32

const (
	EContentCheckProvider_k_EContentCheckProvider_Invalid           EContentCheckProvider = 0
	EContentCheckProvider_k_EContentCheckProvider_Google_DEPRECATED EContentCheckProvider = 1
	EContentCheckProvider_k_EContentCheckProvider_Amazon            EContentCheckProvider = 2
	EContentCheckProvider_k_EContentCheckProvider_Local             EContentCheckProvider = 3
	EContentCheckProvider_k_EContentCheckProvider_GoogleVertexAI    EContentCheckProvider = 4
	EContentCheckProvider_k_EContentCheckProvider_GoogleGemini      EContentCheckProvider = 5
	EContentCheckProvider_k_EContentCheckProvider_SteamLearn        EContentCheckProvider = 6
)

// Enum value maps for EContentCheckProvider.
var (
	EContentCheckProvider_name = map[int32]string{
		0: "k_EContentCheckProvider_Invalid",
		1: "k_EContentCheckProvider_Google_DEPRECATED",
		2: "k_EContentCheckProvider_Amazon",
		3: "k_EContentCheckProvider_Local",
		4: "k_EContentCheckProvider_GoogleVertexAI",
		5: "k_EContentCheckProvider_GoogleGemini",
		6: "k_EContentCheckProvider_SteamLearn",
	}
	EContentCheckProvider_value = map[string]int32{
		"k_EContentCheckProvider_Invalid":           0,
		"k_EContentCheckProvider_Google_DEPRECATED": 1,
		"k_EContentCheckProvider_Amazon":            2,
		"k_EContentCheckProvider_Local":             3,
		"k_EContentCheckProvider_GoogleVertexAI":    4,
		"k_EContentCheckProvider_GoogleGemini":      5,
		"k_EContentCheckProvider_SteamLearn":        6,
	}
)

func (x EContentCheckProvider) Enum() *EContentCheckProvider {
	p := new(EContentCheckProvider)
	*p = x
	return p
}

func (x EContentCheckProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContentCheckProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (EContentCheckProvider) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x EContentCheckProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EContentCheckProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EContentCheckProvider(num)
	return nil
}

// Deprecated: Use EContentCheckProvider.Descriptor instead.
func (EContentCheckProvider) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type EProfileCustomizationType int32

const (
	EProfileCustomizationType_k_EProfileCustomizationTypeInvalid                   EProfileCustomizationType = 0
	EProfileCustomizationType_k_EProfileCustomizationTypeRareAchievementShowcase   EProfileCustomizationType = 1
	EProfileCustomizationType_k_EProfileCustomizationTypeGameCollector             EProfileCustomizationType = 2
	EProfileCustomizationType_k_EProfileCustomizationTypeItemShowcase              EProfileCustomizationType = 3
	EProfileCustomizationType_k_EProfileCustomizationTypeTradeShowcase             EProfileCustomizationType = 4
	EProfileCustomizationType_k_EProfileCustomizationTypeBadges                    EProfileCustomizationType = 5
	EProfileCustomizationType_k_EProfileCustomizationTypeFavoriteGame              EProfileCustomizationType = 6
	EProfileCustomizationType_k_EProfileCustomizationTypeScreenshotShowcase        EProfileCustomizationType = 7
	EProfileCustomizationType_k_EProfileCustomizationTypeCustomText                EProfileCustomizationType = 8
	EProfileCustomizationType_k_EProfileCustomizationTypeFavoriteGroup             EProfileCustomizationType = 9
	EProfileCustomizationType_k_EProfileCustomizationTypeRecommendation            EProfileCustomizationType = 10
	EProfileCustomizationType_k_EProfileCustomizationTypeWorkshopItem              EProfileCustomizationType = 11
	EProfileCustomizationType_k_EProfileCustomizationTypeMyWorkshop                EProfileCustomizationType = 12
	EProfileCustomizationType_k_EProfileCustomizationTypeArtworkShowcase           EProfileCustomizationType = 13
	EProfileCustomizationType_k_EProfileCustomizationTypeVideoShowcase             EProfileCustomizationType = 14
	EProfileCustomizationType_k_EProfileCustomizationTypeGuides                    EProfileCustomizationType = 15
	EProfileCustomizationType_k_EProfileCustomizationTypeMyGuides                  EProfileCustomizationType = 16
	EProfileCustomizationType_k_EProfileCustomizationTypeAchievements              EProfileCustomizationType = 17
	EProfileCustomizationType_k_EProfileCustomizationTypeGreenlight                EProfileCustomizationType = 18
	EProfileCustomizationType_k_EProfileCustomizationTypeMyGreenlight              EProfileCustomizationType = 19
	EProfileCustomizationType_k_EProfileCustomizationTypeSalien                    EProfileCustomizationType = 20
	EProfileCustomizationType_k_EProfileCustomizationTypeLoyaltyRewardReactions    EProfileCustomizationType = 21
	EProfileCustomizationType_k_EProfileCustomizationTypeSingleArtworkShowcase     EProfileCustomizationType = 22
	EProfileCustomizationType_k_EProfileCustomizationTypeAchievementsCompletionist EProfileCustomizationType = 23
	EProfileCustomizationType_k_EProfileCustomizationTypeReplay                    EProfileCustomizationType = 24
)

// Enum value maps for EProfileCustomizationType.
var (
	EProfileCustomizationType_name = map[int32]string{
		0:  "k_EProfileCustomizationTypeInvalid",
		1:  "k_EProfileCustomizationTypeRareAchievementShowcase",
		2:  "k_EProfileCustomizationTypeGameCollector",
		3:  "k_EProfileCustomizationTypeItemShowcase",
		4:  "k_EProfileCustomizationTypeTradeShowcase",
		5:  "k_EProfileCustomizationTypeBadges",
		6:  "k_EProfileCustomizationTypeFavoriteGame",
		7:  "k_EProfileCustomizationTypeScreenshotShowcase",
		8:  "k_EProfileCustomizationTypeCustomText",
		9:  "k_EProfileCustomizationTypeFavoriteGroup",
		10: "k_EProfileCustomizationTypeRecommendation",
		11: "k_EProfileCustomizationTypeWorkshopItem",
		12: "k_EProfileCustomizationTypeMyWorkshop",
		13: "k_EProfileCustomizationTypeArtworkShowcase",
		14: "k_EProfileCustomizationTypeVideoShowcase",
		15: "k_EProfileCustomizationTypeGuides",
		16: "k_EProfileCustomizationTypeMyGuides",
		17: "k_EProfileCustomizationTypeAchievements",
		18: "k_EProfileCustomizationTypeGreenlight",
		19: "k_EProfileCustomizationTypeMyGreenlight",
		20: "k_EProfileCustomizationTypeSalien",
		21: "k_EProfileCustomizationTypeLoyaltyRewardReactions",
		22: "k_EProfileCustomizationTypeSingleArtworkShowcase",
		23: "k_EProfileCustomizationTypeAchievementsCompletionist",
		24: "k_EProfileCustomizationTypeReplay",
	}
	EProfileCustomizationType_value = map[string]int32{
		"k_EProfileCustomizationTypeInvalid":                   0,
		"k_EProfileCustomizationTypeRareAchievementShowcase":   1,
		"k_EProfileCustomizationTypeGameCollector":             2,
		"k_EProfileCustomizationTypeItemShowcase":              3,
		"k_EProfileCustomizationTypeTradeShowcase":             4,
		"k_EProfileCustomizationTypeBadges":                    5,
		"k_EProfileCustomizationTypeFavoriteGame":              6,
		"k_EProfileCustomizationTypeScreenshotShowcase":        7,
		"k_EProfileCustomizationTypeCustomText":                8,
		"k_EProfileCustomizationTypeFavoriteGroup":             9,
		"k_EProfileCustomizationTypeRecommendation":            10,
		"k_EProfileCustomizationTypeWorkshopItem":              11,
		"k_EProfileCustomizationTypeMyWorkshop":                12,
		"k_EProfileCustomizationTypeArtworkShowcase":           13,
		"k_EProfileCustomizationTypeVideoShowcase":             14,
		"k_EProfileCustomizationTypeGuides":                    15,
		"k_EProfileCustomizationTypeMyGuides":                  16,
		"k_EProfileCustomizationTypeAchievements":              17,
		"k_EProfileCustomizationTypeGreenlight":                18,
		"k_EProfileCustomizationTypeMyGreenlight":              19,
		"k_EProfileCustomizationTypeSalien":                    20,
		"k_EProfileCustomizationTypeLoyaltyRewardReactions":    21,
		"k_EProfileCustomizationTypeSingleArtworkShowcase":     22,
		"k_EProfileCustomizationTypeAchievementsCompletionist": 23,
		"k_EProfileCustomizationTypeReplay":                    24,
	}
)

func (x EProfileCustomizationType) Enum() *EProfileCustomizationType {
	p := new(EProfileCustomizationType)
	*p = x
	return p
}

func (x EProfileCustomizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfileCustomizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (EProfileCustomizationType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x EProfileCustomizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfileCustomizationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfileCustomizationType(num)
	return nil
}

// Deprecated: Use EProfileCustomizationType.Descriptor instead.
func (EProfileCustomizationType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type EPublishedFileStorageSystem int32

const (
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemInvalid     EPublishedFileStorageSystem = 0
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemLegacyCloud EPublishedFileStorageSystem = 1
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemDepot       EPublishedFileStorageSystem = 2
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemUGCCloud    EPublishedFileStorageSystem = 3
)

// Enum value maps for EPublishedFileStorageSystem.
var (
	EPublishedFileStorageSystem_name = map[int32]string{
		0: "k_EPublishedFileStorageSystemInvalid",
		1: "k_EPublishedFileStorageSystemLegacyCloud",
		2: "k_EPublishedFileStorageSystemDepot",
		3: "k_EPublishedFileStorageSystemUGCCloud",
	}
	EPublishedFileStorageSystem_value = map[string]int32{
		"k_EPublishedFileStorageSystemInvalid":     0,
		"k_EPublishedFileStorageSystemLegacyCloud": 1,
		"k_EPublishedFileStorageSystemDepot":       2,
		"k_EPublishedFileStorageSystemUGCCloud":    3,
	}
)

func (x EPublishedFileStorageSystem) Enum() *EPublishedFileStorageSystem {
	p := new(EPublishedFileStorageSystem)
	*p = x
	return p
}

func (x EPublishedFileStorageSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileStorageSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (EPublishedFileStorageSystem) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x EPublishedFileStorageSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileStorageSystem) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileStorageSystem(num)
	return nil
}

// Deprecated: Use EPublishedFileStorageSystem.Descriptor instead.
func (EPublishedFileStorageSystem) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

type ECloudStoragePersistState int32

const (
	ECloudStoragePersistState_k_ECloudStoragePersistStatePersisted ECloudStoragePersistState = 0
	ECloudStoragePersistState_k_ECloudStoragePersistStateForgotten ECloudStoragePersistState = 1
	ECloudStoragePersistState_k_ECloudStoragePersistStateDeleted   ECloudStoragePersistState = 2
)

// Enum value maps for ECloudStoragePersistState.
var (
	ECloudStoragePersistState_name = map[int32]string{
		0: "k_ECloudStoragePersistStatePersisted",
		1: "k_ECloudStoragePersistStateForgotten",
		2: "k_ECloudStoragePersistStateDeleted",
	}
	ECloudStoragePersistState_value = map[string]int32{
		"k_ECloudStoragePersistStatePersisted": 0,
		"k_ECloudStoragePersistStateForgotten": 1,
		"k_ECloudStoragePersistStateDeleted":   2,
	}
)

func (x ECloudStoragePersistState) Enum() *ECloudStoragePersistState {
	p := new(ECloudStoragePersistState)
	*p = x
	return p
}

func (x ECloudStoragePersistState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloudStoragePersistState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (ECloudStoragePersistState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x ECloudStoragePersistState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloudStoragePersistState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloudStoragePersistState(num)
	return nil
}

// Deprecated: Use ECloudStoragePersistState.Descriptor instead.
func (ECloudStoragePersistState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

type ESDCardFormatStage int32

const (
	ESDCardFormatStage_k_ESDCardFormatStage_Invalid    ESDCardFormatStage = 0
	ESDCardFormatStage_k_ESDCardFormatStage_Starting   ESDCardFormatStage = 1
	ESDCardFormatStage_k_ESDCardFormatStage_Testing    ESDCardFormatStage = 2
	ESDCardFormatStage_k_ESDCardFormatStage_Rescuing   ESDCardFormatStage = 3
	ESDCardFormatStage_k_ESDCardFormatStage_Formatting ESDCardFormatStage = 4
	ESDCardFormatStage_k_ESDCardFormatStage_Finalizing ESDCardFormatStage = 5
)

// Enum value maps for ESDCardFormatStage.
var (
	ESDCardFormatStage_name = map[int32]string{
		0: "k_ESDCardFormatStage_Invalid",
		1: "k_ESDCardFormatStage_Starting",
		2: "k_ESDCardFormatStage_Testing",
		3: "k_ESDCardFormatStage_Rescuing",
		4: "k_ESDCardFormatStage_Formatting",
		5: "k_ESDCardFormatStage_Finalizing",
	}
	ESDCardFormatStage_value = map[string]int32{
		"k_ESDCardFormatStage_Invalid":    0,
		"k_ESDCardFormatStage_Starting":   1,
		"k_ESDCardFormatStage_Testing":    2,
		"k_ESDCardFormatStage_Rescuing":   3,
		"k_ESDCardFormatStage_Formatting": 4,
		"k_ESDCardFormatStage_Finalizing": 5,
	}
)

func (x ESDCardFormatStage) Enum() *ESDCardFormatStage {
	p := new(ESDCardFormatStage)
	*p = x
	return p
}

func (x ESDCardFormatStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESDCardFormatStage) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (ESDCardFormatStage) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x ESDCardFormatStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESDCardFormatStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESDCardFormatStage(num)
	return nil
}

// Deprecated: Use ESDCardFormatStage.Descriptor instead.
func (ESDCardFormatStage) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

type EStorageFormatStage int32

const (
	EStorageFormatStage_k_EStorageFormatStage_Invalid    EStorageFormatStage = 0
	EStorageFormatStage_k_EStorageFormatStage_NotRunning EStorageFormatStage = 1
	EStorageFormatStage_k_EStorageFormatStage_Starting   EStorageFormatStage = 2
	EStorageFormatStage_k_EStorageFormatStage_Testing    EStorageFormatStage = 3
	EStorageFormatStage_k_EStorageFormatStage_Rescuing   EStorageFormatStage = 4
	EStorageFormatStage_k_EStorageFormatStage_Formatting EStorageFormatStage = 5
	EStorageFormatStage_k_EStorageFormatStage_Finalizing EStorageFormatStage = 6
)

// Enum value maps for EStorageFormatStage.
var (
	EStorageFormatStage_name = map[int32]string{
		0: "k_EStorageFormatStage_Invalid",
		1: "k_EStorageFormatStage_NotRunning",
		2: "k_EStorageFormatStage_Starting",
		3: "k_EStorageFormatStage_Testing",
		4: "k_EStorageFormatStage_Rescuing",
		5: "k_EStorageFormatStage_Formatting",
		6: "k_EStorageFormatStage_Finalizing",
	}
	EStorageFormatStage_value = map[string]int32{
		"k_EStorageFormatStage_Invalid":    0,
		"k_EStorageFormatStage_NotRunning": 1,
		"k_EStorageFormatStage_Starting":   2,
		"k_EStorageFormatStage_Testing":    3,
		"k_EStorageFormatStage_Rescuing":   4,
		"k_EStorageFormatStage_Formatting": 5,
		"k_EStorageFormatStage_Finalizing": 6,
	}
)

func (x EStorageFormatStage) Enum() *EStorageFormatStage {
	p := new(EStorageFormatStage)
	*p = x
	return p
}

func (x EStorageFormatStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageFormatStage) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (EStorageFormatStage) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x EStorageFormatStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageFormatStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageFormatStage(num)
	return nil
}

// Deprecated: Use EStorageFormatStage.Descriptor instead.
func (EStorageFormatStage) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

type ESystemFanControlMode int32

const (
	ESystemFanControlMode_k_SystemFanControlMode_Invalid  ESystemFanControlMode = 0
	ESystemFanControlMode_k_SystemFanControlMode_Disabled ESystemFanControlMode = 1
	ESystemFanControlMode_k_SystemFanControlMode_Default  ESystemFanControlMode = 2
)

// Enum value maps for ESystemFanControlMode.
var (
	ESystemFanControlMode_name = map[int32]string{
		0: "k_SystemFanControlMode_Invalid",
		1: "k_SystemFanControlMode_Disabled",
		2: "k_SystemFanControlMode_Default",
	}
	ESystemFanControlMode_value = map[string]int32{
		"k_SystemFanControlMode_Invalid":  0,
		"k_SystemFanControlMode_Disabled": 1,
		"k_SystemFanControlMode_Default":  2,
	}
)

func (x ESystemFanControlMode) Enum() *ESystemFanControlMode {
	p := new(ESystemFanControlMode)
	*p = x
	return p
}

func (x ESystemFanControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemFanControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (ESystemFanControlMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x ESystemFanControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemFanControlMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemFanControlMode(num)
	return nil
}

// Deprecated: Use ESystemFanControlMode.Descriptor instead.
func (ESystemFanControlMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

type EStartupMovieVariant int32

const (
	EStartupMovieVariant_k_EStartupMovieVariant_Invalid    EStartupMovieVariant = 0
	EStartupMovieVariant_k_EStartupMovieVariant_Generic    EStartupMovieVariant = 1
	EStartupMovieVariant_k_EStartupMovieVariant_DeckBlue   EStartupMovieVariant = 2
	EStartupMovieVariant_k_EStartupMovieVariant_DeckOrange EStartupMovieVariant = 3
)

// Enum value maps for EStartupMovieVariant.
var (
	EStartupMovieVariant_name = map[int32]string{
		0: "k_EStartupMovieVariant_Invalid",
		1: "k_EStartupMovieVariant_Generic",
		2: "k_EStartupMovieVariant_DeckBlue",
		3: "k_EStartupMovieVariant_DeckOrange",
	}
	EStartupMovieVariant_value = map[string]int32{
		"k_EStartupMovieVariant_Invalid":    0,
		"k_EStartupMovieVariant_Generic":    1,
		"k_EStartupMovieVariant_DeckBlue":   2,
		"k_EStartupMovieVariant_DeckOrange": 3,
	}
)

func (x EStartupMovieVariant) Enum() *EStartupMovieVariant {
	p := new(EStartupMovieVariant)
	*p = x
	return p
}

func (x EStartupMovieVariant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStartupMovieVariant) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (EStartupMovieVariant) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x EStartupMovieVariant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStartupMovieVariant) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStartupMovieVariant(num)
	return nil
}

// Deprecated: Use EStartupMovieVariant.Descriptor instead.
func (EStartupMovieVariant) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

type EColorGamutLabelSet int32

const (
	EColorGamutLabelSet_k_ColorGamutLabelSet_Default             EColorGamutLabelSet = 0
	EColorGamutLabelSet_k_ColorGamutLabelSet_sRGB_Native         EColorGamutLabelSet = 1
	EColorGamutLabelSet_k_ColorGamutLabelSet_Native_sRGB_Boosted EColorGamutLabelSet = 2
)

// Enum value maps for EColorGamutLabelSet.
var (
	EColorGamutLabelSet_name = map[int32]string{
		0: "k_ColorGamutLabelSet_Default",
		1: "k_ColorGamutLabelSet_sRGB_Native",
		2: "k_ColorGamutLabelSet_Native_sRGB_Boosted",
	}
	EColorGamutLabelSet_value = map[string]int32{
		"k_ColorGamutLabelSet_Default":             0,
		"k_ColorGamutLabelSet_sRGB_Native":         1,
		"k_ColorGamutLabelSet_Native_sRGB_Boosted": 2,
	}
)

func (x EColorGamutLabelSet) Enum() *EColorGamutLabelSet {
	p := new(EColorGamutLabelSet)
	*p = x
	return p
}

func (x EColorGamutLabelSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EColorGamutLabelSet) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[12].Descriptor()
}

func (EColorGamutLabelSet) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[12]
}

func (x EColorGamutLabelSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EColorGamutLabelSet) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EColorGamutLabelSet(num)
	return nil
}

// Deprecated: Use EColorGamutLabelSet.Descriptor instead.
func (EColorGamutLabelSet) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{12}
}

type EWindowStackingOrder int32

const (
	EWindowStackingOrder_k_EWindowStackingOrder_Invalid EWindowStackingOrder = 0
	EWindowStackingOrder_k_EWindowStackingOrder_Top     EWindowStackingOrder = 1
	EWindowStackingOrder_k_EWindowStackingOrder_Bottom  EWindowStackingOrder = 2
)

// Enum value maps for EWindowStackingOrder.
var (
	EWindowStackingOrder_name = map[int32]string{
		0: "k_EWindowStackingOrder_Invalid",
		1: "k_EWindowStackingOrder_Top",
		2: "k_EWindowStackingOrder_Bottom",
	}
	EWindowStackingOrder_value = map[string]int32{
		"k_EWindowStackingOrder_Invalid": 0,
		"k_EWindowStackingOrder_Top":     1,
		"k_EWindowStackingOrder_Bottom":  2,
	}
)

func (x EWindowStackingOrder) Enum() *EWindowStackingOrder {
	p := new(EWindowStackingOrder)
	*p = x
	return p
}

func (x EWindowStackingOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWindowStackingOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[13].Descriptor()
}

func (EWindowStackingOrder) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[13]
}

func (x EWindowStackingOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWindowStackingOrder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWindowStackingOrder(num)
	return nil
}

// Deprecated: Use EWindowStackingOrder.Descriptor instead.
func (EWindowStackingOrder) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{13}
}

type EBluetoothDeviceType int32

const (
	EBluetoothDeviceType_k_BluetoothDeviceType_Invalid    EBluetoothDeviceType = 0
	EBluetoothDeviceType_k_BluetoothDeviceType_Unknown    EBluetoothDeviceType = 1
	EBluetoothDeviceType_k_BluetoothDeviceType_Phone      EBluetoothDeviceType = 2
	EBluetoothDeviceType_k_BluetoothDeviceType_Computer   EBluetoothDeviceType = 3
	EBluetoothDeviceType_k_BluetoothDeviceType_Headset    EBluetoothDeviceType = 4
	EBluetoothDeviceType_k_BluetoothDeviceType_Headphones EBluetoothDeviceType = 5
	EBluetoothDeviceType_k_BluetoothDeviceType_Speakers   EBluetoothDeviceType = 6
	EBluetoothDeviceType_k_BluetoothDeviceType_OtherAudio EBluetoothDeviceType = 7
	EBluetoothDeviceType_k_BluetoothDeviceType_Mouse      EBluetoothDeviceType = 8
	EBluetoothDeviceType_k_BluetoothDeviceType_Joystick   EBluetoothDeviceType = 9
	EBluetoothDeviceType_k_BluetoothDeviceType_Gamepad    EBluetoothDeviceType = 10
	EBluetoothDeviceType_k_BluetoothDeviceType_Keyboard   EBluetoothDeviceType = 11
)

// Enum value maps for EBluetoothDeviceType.
var (
	EBluetoothDeviceType_name = map[int32]string{
		0:  "k_BluetoothDeviceType_Invalid",
		1:  "k_BluetoothDeviceType_Unknown",
		2:  "k_BluetoothDeviceType_Phone",
		3:  "k_BluetoothDeviceType_Computer",
		4:  "k_BluetoothDeviceType_Headset",
		5:  "k_BluetoothDeviceType_Headphones",
		6:  "k_BluetoothDeviceType_Speakers",
		7:  "k_BluetoothDeviceType_OtherAudio",
		8:  "k_BluetoothDeviceType_Mouse",
		9:  "k_BluetoothDeviceType_Joystick",
		10: "k_BluetoothDeviceType_Gamepad",
		11: "k_BluetoothDeviceType_Keyboard",
	}
	EBluetoothDeviceType_value = map[string]int32{
		"k_BluetoothDeviceType_Invalid":    0,
		"k_BluetoothDeviceType_Unknown":    1,
		"k_BluetoothDeviceType_Phone":      2,
		"k_BluetoothDeviceType_Computer":   3,
		"k_BluetoothDeviceType_Headset":    4,
		"k_BluetoothDeviceType_Headphones": 5,
		"k_BluetoothDeviceType_Speakers":   6,
		"k_BluetoothDeviceType_OtherAudio": 7,
		"k_BluetoothDeviceType_Mouse":      8,
		"k_BluetoothDeviceType_Joystick":   9,
		"k_BluetoothDeviceType_Gamepad":    10,
		"k_BluetoothDeviceType_Keyboard":   11,
	}
)

func (x EBluetoothDeviceType) Enum() *EBluetoothDeviceType {
	p := new(EBluetoothDeviceType)
	*p = x
	return p
}

func (x EBluetoothDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBluetoothDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[14].Descriptor()
}

func (EBluetoothDeviceType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[14]
}

func (x EBluetoothDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBluetoothDeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBluetoothDeviceType(num)
	return nil
}

// Deprecated: Use EBluetoothDeviceType.Descriptor instead.
func (EBluetoothDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{14}
}

type ESystemAudioDirection int32

const (
	ESystemAudioDirection_k_SystemAudioDirection_Invalid ESystemAudioDirection = 0
	ESystemAudioDirection_k_SystemAudioDirection_Input   ESystemAudioDirection = 1
	ESystemAudioDirection_k_SystemAudioDirection_Output  ESystemAudioDirection = 2
)

// Enum value maps for ESystemAudioDirection.
var (
	ESystemAudioDirection_name = map[int32]string{
		0: "k_SystemAudioDirection_Invalid",
		1: "k_SystemAudioDirection_Input",
		2: "k_SystemAudioDirection_Output",
	}
	ESystemAudioDirection_value = map[string]int32{
		"k_SystemAudioDirection_Invalid": 0,
		"k_SystemAudioDirection_Input":   1,
		"k_SystemAudioDirection_Output":  2,
	}
)

func (x ESystemAudioDirection) Enum() *ESystemAudioDirection {
	p := new(ESystemAudioDirection)
	*p = x
	return p
}

func (x ESystemAudioDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[15].Descriptor()
}

func (ESystemAudioDirection) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[15]
}

func (x ESystemAudioDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioDirection(num)
	return nil
}

// Deprecated: Use ESystemAudioDirection.Descriptor instead.
func (ESystemAudioDirection) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{15}
}

type ESystemAudioChannel int32

const (
	ESystemAudioChannel_k_SystemAudioChannel_Invalid     ESystemAudioChannel = 0
	ESystemAudioChannel_k_SystemAudioChannel_Aggregated  ESystemAudioChannel = 1
	ESystemAudioChannel_k_SystemAudioChannel_FrontLeft   ESystemAudioChannel = 2
	ESystemAudioChannel_k_SystemAudioChannel_FrontRight  ESystemAudioChannel = 3
	ESystemAudioChannel_k_SystemAudioChannel_LFE         ESystemAudioChannel = 4
	ESystemAudioChannel_k_SystemAudioChannel_BackLeft    ESystemAudioChannel = 5
	ESystemAudioChannel_k_SystemAudioChannel_BackRight   ESystemAudioChannel = 6
	ESystemAudioChannel_k_SystemAudioChannel_FrontCenter ESystemAudioChannel = 7
	ESystemAudioChannel_k_SystemAudioChannel_Unknown     ESystemAudioChannel = 8
	ESystemAudioChannel_k_SystemAudioChannel_Mono        ESystemAudioChannel = 9
)

// Enum value maps for ESystemAudioChannel.
var (
	ESystemAudioChannel_name = map[int32]string{
		0: "k_SystemAudioChannel_Invalid",
		1: "k_SystemAudioChannel_Aggregated",
		2: "k_SystemAudioChannel_FrontLeft",
		3: "k_SystemAudioChannel_FrontRight",
		4: "k_SystemAudioChannel_LFE",
		5: "k_SystemAudioChannel_BackLeft",
		6: "k_SystemAudioChannel_BackRight",
		7: "k_SystemAudioChannel_FrontCenter",
		8: "k_SystemAudioChannel_Unknown",
		9: "k_SystemAudioChannel_Mono",
	}
	ESystemAudioChannel_value = map[string]int32{
		"k_SystemAudioChannel_Invalid":     0,
		"k_SystemAudioChannel_Aggregated":  1,
		"k_SystemAudioChannel_FrontLeft":   2,
		"k_SystemAudioChannel_FrontRight":  3,
		"k_SystemAudioChannel_LFE":         4,
		"k_SystemAudioChannel_BackLeft":    5,
		"k_SystemAudioChannel_BackRight":   6,
		"k_SystemAudioChannel_FrontCenter": 7,
		"k_SystemAudioChannel_Unknown":     8,
		"k_SystemAudioChannel_Mono":        9,
	}
)

func (x ESystemAudioChannel) Enum() *ESystemAudioChannel {
	p := new(ESystemAudioChannel)
	*p = x
	return p
}

func (x ESystemAudioChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[16].Descriptor()
}

func (ESystemAudioChannel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[16]
}

func (x ESystemAudioChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioChannel(num)
	return nil
}

// Deprecated: Use ESystemAudioChannel.Descriptor instead.
func (ESystemAudioChannel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{16}
}

type ESystemAudioPortType int32

const (
	ESystemAudioPortType_k_SystemAudioPortType_Invalid     ESystemAudioPortType = 0
	ESystemAudioPortType_k_SystemAudioPortType_Unknown     ESystemAudioPortType = 1
	ESystemAudioPortType_k_SystemAudioPortType_Audio32f    ESystemAudioPortType = 2
	ESystemAudioPortType_k_SystemAudioPortType_Midi8b      ESystemAudioPortType = 3
	ESystemAudioPortType_k_SystemAudioPortType_Video32RGBA ESystemAudioPortType = 4
)

// Enum value maps for ESystemAudioPortType.
var (
	ESystemAudioPortType_name = map[int32]string{
		0: "k_SystemAudioPortType_Invalid",
		1: "k_SystemAudioPortType_Unknown",
		2: "k_SystemAudioPortType_Audio32f",
		3: "k_SystemAudioPortType_Midi8b",
		4: "k_SystemAudioPortType_Video32RGBA",
	}
	ESystemAudioPortType_value = map[string]int32{
		"k_SystemAudioPortType_Invalid":     0,
		"k_SystemAudioPortType_Unknown":     1,
		"k_SystemAudioPortType_Audio32f":    2,
		"k_SystemAudioPortType_Midi8b":      3,
		"k_SystemAudioPortType_Video32RGBA": 4,
	}
)

func (x ESystemAudioPortType) Enum() *ESystemAudioPortType {
	p := new(ESystemAudioPortType)
	*p = x
	return p
}

func (x ESystemAudioPortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioPortType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[17].Descriptor()
}

func (ESystemAudioPortType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[17]
}

func (x ESystemAudioPortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioPortType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioPortType(num)
	return nil
}

// Deprecated: Use ESystemAudioPortType.Descriptor instead.
func (ESystemAudioPortType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{17}
}

type ESystemAudioPortDirection int32

const (
	ESystemAudioPortDirection_k_SystemAudioPortDirection_Invalid ESystemAudioPortDirection = 0
	ESystemAudioPortDirection_k_SystemAudioPortDirection_Input   ESystemAudioPortDirection = 1
	ESystemAudioPortDirection_k_SystemAudioPortDirection_Output  ESystemAudioPortDirection = 2
)

// Enum value maps for ESystemAudioPortDirection.
var (
	ESystemAudioPortDirection_name = map[int32]string{
		0: "k_SystemAudioPortDirection_Invalid",
		1: "k_SystemAudioPortDirection_Input",
		2: "k_SystemAudioPortDirection_Output",
	}
	ESystemAudioPortDirection_value = map[string]int32{
		"k_SystemAudioPortDirection_Invalid": 0,
		"k_SystemAudioPortDirection_Input":   1,
		"k_SystemAudioPortDirection_Output":  2,
	}
)

func (x ESystemAudioPortDirection) Enum() *ESystemAudioPortDirection {
	p := new(ESystemAudioPortDirection)
	*p = x
	return p
}

func (x ESystemAudioPortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioPortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[18].Descriptor()
}

func (ESystemAudioPortDirection) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[18]
}

func (x ESystemAudioPortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioPortDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioPortDirection(num)
	return nil
}

// Deprecated: Use ESystemAudioPortDirection.Descriptor instead.
func (ESystemAudioPortDirection) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{18}
}

type ESystemServiceState int32

const (
	ESystemServiceState_k_ESystemServiceState_Unavailable ESystemServiceState = 0
	ESystemServiceState_k_ESystemServiceState_Disabled    ESystemServiceState = 1
	ESystemServiceState_k_ESystemServiceState_Enabled     ESystemServiceState = 2
)

// Enum value maps for ESystemServiceState.
var (
	ESystemServiceState_name = map[int32]string{
		0: "k_ESystemServiceState_Unavailable",
		1: "k_ESystemServiceState_Disabled",
		2: "k_ESystemServiceState_Enabled",
	}
	ESystemServiceState_value = map[string]int32{
		"k_ESystemServiceState_Unavailable": 0,
		"k_ESystemServiceState_Disabled":    1,
		"k_ESystemServiceState_Enabled":     2,
	}
)

func (x ESystemServiceState) Enum() *ESystemServiceState {
	p := new(ESystemServiceState)
	*p = x
	return p
}

func (x ESystemServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[19].Descriptor()
}

func (ESystemServiceState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[19]
}

func (x ESystemServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemServiceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemServiceState(num)
	return nil
}

// Deprecated: Use ESystemServiceState.Descriptor instead.
func (ESystemServiceState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{19}
}

type EGraphicsPerfOverlayLevel int32

const (
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Hidden  EGraphicsPerfOverlayLevel = 0
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Basic   EGraphicsPerfOverlayLevel = 1
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Medium  EGraphicsPerfOverlayLevel = 2
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Full    EGraphicsPerfOverlayLevel = 3
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Minimal EGraphicsPerfOverlayLevel = 4
)

// Enum value maps for EGraphicsPerfOverlayLevel.
var (
	EGraphicsPerfOverlayLevel_name = map[int32]string{
		0: "k_EGraphicsPerfOverlayLevel_Hidden",
		1: "k_EGraphicsPerfOverlayLevel_Basic",
		2: "k_EGraphicsPerfOverlayLevel_Medium",
		3: "k_EGraphicsPerfOverlayLevel_Full",
		4: "k_EGraphicsPerfOverlayLevel_Minimal",
	}
	EGraphicsPerfOverlayLevel_value = map[string]int32{
		"k_EGraphicsPerfOverlayLevel_Hidden":  0,
		"k_EGraphicsPerfOverlayLevel_Basic":   1,
		"k_EGraphicsPerfOverlayLevel_Medium":  2,
		"k_EGraphicsPerfOverlayLevel_Full":    3,
		"k_EGraphicsPerfOverlayLevel_Minimal": 4,
	}
)

func (x EGraphicsPerfOverlayLevel) Enum() *EGraphicsPerfOverlayLevel {
	p := new(EGraphicsPerfOverlayLevel)
	*p = x
	return p
}

func (x EGraphicsPerfOverlayLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGraphicsPerfOverlayLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[20].Descriptor()
}

func (EGraphicsPerfOverlayLevel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[20]
}

func (x EGraphicsPerfOverlayLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGraphicsPerfOverlayLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGraphicsPerfOverlayLevel(num)
	return nil
}

// Deprecated: Use EGraphicsPerfOverlayLevel.Descriptor instead.
func (EGraphicsPerfOverlayLevel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{20}
}

type EGPUPerformanceLevel int32

const (
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Invalid   EGPUPerformanceLevel = 0
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Auto      EGPUPerformanceLevel = 1
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Manual    EGPUPerformanceLevel = 2
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Low       EGPUPerformanceLevel = 3
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_High      EGPUPerformanceLevel = 4
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Profiling EGPUPerformanceLevel = 5
)

// Enum value maps for EGPUPerformanceLevel.
var (
	EGPUPerformanceLevel_name = map[int32]string{
		0: "k_EGPUPerformanceLevel_Invalid",
		1: "k_EGPUPerformanceLevel_Auto",
		2: "k_EGPUPerformanceLevel_Manual",
		3: "k_EGPUPerformanceLevel_Low",
		4: "k_EGPUPerformanceLevel_High",
		5: "k_EGPUPerformanceLevel_Profiling",
	}
	EGPUPerformanceLevel_value = map[string]int32{
		"k_EGPUPerformanceLevel_Invalid":   0,
		"k_EGPUPerformanceLevel_Auto":      1,
		"k_EGPUPerformanceLevel_Manual":    2,
		"k_EGPUPerformanceLevel_Low":       3,
		"k_EGPUPerformanceLevel_High":      4,
		"k_EGPUPerformanceLevel_Profiling": 5,
	}
)

func (x EGPUPerformanceLevel) Enum() *EGPUPerformanceLevel {
	p := new(EGPUPerformanceLevel)
	*p = x
	return p
}

func (x EGPUPerformanceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGPUPerformanceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[21].Descriptor()
}

func (EGPUPerformanceLevel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[21]
}

func (x EGPUPerformanceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGPUPerformanceLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGPUPerformanceLevel(num)
	return nil
}

// Deprecated: Use EGPUPerformanceLevel.Descriptor instead.
func (EGPUPerformanceLevel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{21}
}

type EScalingFilter int32

const (
	EScalingFilter_k_EScalingFilter_Invalid EScalingFilter = 0
	EScalingFilter_k_EScalingFilter_FSR     EScalingFilter = 1
	EScalingFilter_k_EScalingFilter_Nearest EScalingFilter = 2
	EScalingFilter_k_EScalingFilter_Integer EScalingFilter = 3
	EScalingFilter_k_EScalingFilter_Linear  EScalingFilter = 4
	EScalingFilter_k_EScalingFilter_NIS     EScalingFilter = 5
)

// Enum value maps for EScalingFilter.
var (
	EScalingFilter_name = map[int32]string{
		0: "k_EScalingFilter_Invalid",
		1: "k_EScalingFilter_FSR",
		2: "k_EScalingFilter_Nearest",
		3: "k_EScalingFilter_Integer",
		4: "k_EScalingFilter_Linear",
		5: "k_EScalingFilter_NIS",
	}
	EScalingFilter_value = map[string]int32{
		"k_EScalingFilter_Invalid": 0,
		"k_EScalingFilter_FSR":     1,
		"k_EScalingFilter_Nearest": 2,
		"k_EScalingFilter_Integer": 3,
		"k_EScalingFilter_Linear":  4,
		"k_EScalingFilter_NIS":     5,
	}
)

func (x EScalingFilter) Enum() *EScalingFilter {
	p := new(EScalingFilter)
	*p = x
	return p
}

func (x EScalingFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EScalingFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[22].Descriptor()
}

func (EScalingFilter) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[22]
}

func (x EScalingFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EScalingFilter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EScalingFilter(num)
	return nil
}

// Deprecated: Use EScalingFilter.Descriptor instead.
func (EScalingFilter) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{22}
}

type ESplitScalingFilter int32

const (
	ESplitScalingFilter_k_ESplitScalingFilter_Invalid ESplitScalingFilter = 0
	ESplitScalingFilter_k_ESplitScalingFilter_Linear  ESplitScalingFilter = 1
	ESplitScalingFilter_k_ESplitScalingFilter_Nearest ESplitScalingFilter = 2
	ESplitScalingFilter_k_ESplitScalingFilter_FSR     ESplitScalingFilter = 3
	ESplitScalingFilter_k_ESplitScalingFilter_NIS     ESplitScalingFilter = 4
)

// Enum value maps for ESplitScalingFilter.
var (
	ESplitScalingFilter_name = map[int32]string{
		0: "k_ESplitScalingFilter_Invalid",
		1: "k_ESplitScalingFilter_Linear",
		2: "k_ESplitScalingFilter_Nearest",
		3: "k_ESplitScalingFilter_FSR",
		4: "k_ESplitScalingFilter_NIS",
	}
	ESplitScalingFilter_value = map[string]int32{
		"k_ESplitScalingFilter_Invalid": 0,
		"k_ESplitScalingFilter_Linear":  1,
		"k_ESplitScalingFilter_Nearest": 2,
		"k_ESplitScalingFilter_FSR":     3,
		"k_ESplitScalingFilter_NIS":     4,
	}
)

func (x ESplitScalingFilter) Enum() *ESplitScalingFilter {
	p := new(ESplitScalingFilter)
	*p = x
	return p
}

func (x ESplitScalingFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESplitScalingFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[23].Descriptor()
}

func (ESplitScalingFilter) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[23]
}

func (x ESplitScalingFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESplitScalingFilter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESplitScalingFilter(num)
	return nil
}

// Deprecated: Use ESplitScalingFilter.Descriptor instead.
func (ESplitScalingFilter) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{23}
}

type ESplitScalingScaler int32

const (
	ESplitScalingScaler_k_ESplitScalingScaler_Invalid ESplitScalingScaler = 0
	ESplitScalingScaler_k_ESplitScalingScaler_Auto    ESplitScalingScaler = 1
	ESplitScalingScaler_k_ESplitScalingScaler_Integer ESplitScalingScaler = 2
	ESplitScalingScaler_k_ESplitScalingScaler_Fit     ESplitScalingScaler = 3
	ESplitScalingScaler_k_ESplitScalingScaler_Fill    ESplitScalingScaler = 4
	ESplitScalingScaler_k_ESplitScalingScaler_Stretch ESplitScalingScaler = 5
)

// Enum value maps for ESplitScalingScaler.
var (
	ESplitScalingScaler_name = map[int32]string{
		0: "k_ESplitScalingScaler_Invalid",
		1: "k_ESplitScalingScaler_Auto",
		2: "k_ESplitScalingScaler_Integer",
		3: "k_ESplitScalingScaler_Fit",
		4: "k_ESplitScalingScaler_Fill",
		5: "k_ESplitScalingScaler_Stretch",
	}
	ESplitScalingScaler_value = map[string]int32{
		"k_ESplitScalingScaler_Invalid": 0,
		"k_ESplitScalingScaler_Auto":    1,
		"k_ESplitScalingScaler_Integer": 2,
		"k_ESplitScalingScaler_Fit":     3,
		"k_ESplitScalingScaler_Fill":    4,
		"k_ESplitScalingScaler_Stretch": 5,
	}
)

func (x ESplitScalingScaler) Enum() *ESplitScalingScaler {
	p := new(ESplitScalingScaler)
	*p = x
	return p
}

func (x ESplitScalingScaler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESplitScalingScaler) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[24].Descriptor()
}

func (ESplitScalingScaler) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[24]
}

func (x ESplitScalingScaler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESplitScalingScaler) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESplitScalingScaler(num)
	return nil
}

// Deprecated: Use ESplitScalingScaler.Descriptor instead.
func (ESplitScalingScaler) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{24}
}

type EGamescopeBlurMode int32

const (
	EGamescopeBlurMode_k_EGamescopeBlurMode_Disabled   EGamescopeBlurMode = 0
	EGamescopeBlurMode_k_EGamescopeBlurMode_IfOccluded EGamescopeBlurMode = 1
	EGamescopeBlurMode_k_EGamescopeBlurMode_Always     EGamescopeBlurMode = 2
)

// Enum value maps for EGamescopeBlurMode.
var (
	EGamescopeBlurMode_name = map[int32]string{
		0: "k_EGamescopeBlurMode_Disabled",
		1: "k_EGamescopeBlurMode_IfOccluded",
		2: "k_EGamescopeBlurMode_Always",
	}
	EGamescopeBlurMode_value = map[string]int32{
		"k_EGamescopeBlurMode_Disabled":   0,
		"k_EGamescopeBlurMode_IfOccluded": 1,
		"k_EGamescopeBlurMode_Always":     2,
	}
)

func (x EGamescopeBlurMode) Enum() *EGamescopeBlurMode {
	p := new(EGamescopeBlurMode)
	*p = x
	return p
}

func (x EGamescopeBlurMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGamescopeBlurMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[25].Descriptor()
}

func (EGamescopeBlurMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[25]
}

func (x EGamescopeBlurMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGamescopeBlurMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGamescopeBlurMode(num)
	return nil
}

// Deprecated: Use EGamescopeBlurMode.Descriptor instead.
func (EGamescopeBlurMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{25}
}

type ESLSHelper int32

const (
	ESLSHelper_k_ESLSHelper_Invalid    ESLSHelper = 0
	ESLSHelper_k_ESLSHelper_Minidump   ESLSHelper = 1
	ESLSHelper_k_ESLSHelper_Kdump      ESLSHelper = 2
	ESLSHelper_k_ESLSHelper_Journal    ESLSHelper = 3
	ESLSHelper_k_ESLSHelper_Gpu        ESLSHelper = 4
	ESLSHelper_k_ESLSHelper_SystemInfo ESLSHelper = 5
)

// Enum value maps for ESLSHelper.
var (
	ESLSHelper_name = map[int32]string{
		0: "k_ESLSHelper_Invalid",
		1: "k_ESLSHelper_Minidump",
		2: "k_ESLSHelper_Kdump",
		3: "k_ESLSHelper_Journal",
		4: "k_ESLSHelper_Gpu",
		5: "k_ESLSHelper_SystemInfo",
	}
	ESLSHelper_value = map[string]int32{
		"k_ESLSHelper_Invalid":    0,
		"k_ESLSHelper_Minidump":   1,
		"k_ESLSHelper_Kdump":      2,
		"k_ESLSHelper_Journal":    3,
		"k_ESLSHelper_Gpu":        4,
		"k_ESLSHelper_SystemInfo": 5,
	}
)

func (x ESLSHelper) Enum() *ESLSHelper {
	p := new(ESLSHelper)
	*p = x
	return p
}

func (x ESLSHelper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESLSHelper) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[26].Descriptor()
}

func (ESLSHelper) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[26]
}

func (x ESLSHelper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESLSHelper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESLSHelper(num)
	return nil
}

// Deprecated: Use ESLSHelper.Descriptor instead.
func (ESLSHelper) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{26}
}

type EHDRVisualization int32

const (
	EHDRVisualization_k_EHDRVisualization_None            EHDRVisualization = 0
	EHDRVisualization_k_EHDRVisualization_Heatmap         EHDRVisualization = 1
	EHDRVisualization_k_EHDRVisualization_Analysis        EHDRVisualization = 2
	EHDRVisualization_k_EHDRVisualization_HeatmapExtended EHDRVisualization = 3
	EHDRVisualization_k_EHDRVisualization_HeatmapClassic  EHDRVisualization = 4
)

// Enum value maps for EHDRVisualization.
var (
	EHDRVisualization_name = map[int32]string{
		0: "k_EHDRVisualization_None",
		1: "k_EHDRVisualization_Heatmap",
		2: "k_EHDRVisualization_Analysis",
		3: "k_EHDRVisualization_HeatmapExtended",
		4: "k_EHDRVisualization_HeatmapClassic",
	}
	EHDRVisualization_value = map[string]int32{
		"k_EHDRVisualization_None":            0,
		"k_EHDRVisualization_Heatmap":         1,
		"k_EHDRVisualization_Analysis":        2,
		"k_EHDRVisualization_HeatmapExtended": 3,
		"k_EHDRVisualization_HeatmapClassic":  4,
	}
)

func (x EHDRVisualization) Enum() *EHDRVisualization {
	p := new(EHDRVisualization)
	*p = x
	return p
}

func (x EHDRVisualization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHDRVisualization) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[27].Descriptor()
}

func (EHDRVisualization) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[27]
}

func (x EHDRVisualization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHDRVisualization) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHDRVisualization(num)
	return nil
}

// Deprecated: Use EHDRVisualization.Descriptor instead.
func (EHDRVisualization) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{27}
}

type EHDRToneMapOperator int32

const (
	EHDRToneMapOperator_k_EHDRToneMapOperator_Invalid   EHDRToneMapOperator = 0
	EHDRToneMapOperator_k_EHDRToneMapOperator_Uncharted EHDRToneMapOperator = 1
	EHDRToneMapOperator_k_EHDRToneMapOperator_Reinhard  EHDRToneMapOperator = 2
)

// Enum value maps for EHDRToneMapOperator.
var (
	EHDRToneMapOperator_name = map[int32]string{
		0: "k_EHDRToneMapOperator_Invalid",
		1: "k_EHDRToneMapOperator_Uncharted",
		2: "k_EHDRToneMapOperator_Reinhard",
	}
	EHDRToneMapOperator_value = map[string]int32{
		"k_EHDRToneMapOperator_Invalid":   0,
		"k_EHDRToneMapOperator_Uncharted": 1,
		"k_EHDRToneMapOperator_Reinhard":  2,
	}
)

func (x EHDRToneMapOperator) Enum() *EHDRToneMapOperator {
	p := new(EHDRToneMapOperator)
	*p = x
	return p
}

func (x EHDRToneMapOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHDRToneMapOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[28].Descriptor()
}

func (EHDRToneMapOperator) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[28]
}

func (x EHDRToneMapOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHDRToneMapOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHDRToneMapOperator(num)
	return nil
}

// Deprecated: Use EHDRToneMapOperator.Descriptor instead.
func (EHDRToneMapOperator) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{28}
}

type ECPUGovernor int32

const (
	ECPUGovernor_k_ECPUGovernor_Invalid   ECPUGovernor = 0
	ECPUGovernor_k_ECPUGovernor_Perf      ECPUGovernor = 1
	ECPUGovernor_k_ECPUGovernor_Powersave ECPUGovernor = 2
	ECPUGovernor_k_ECPUGovernor_Manual    ECPUGovernor = 3
)

// Enum value maps for ECPUGovernor.
var (
	ECPUGovernor_name = map[int32]string{
		0: "k_ECPUGovernor_Invalid",
		1: "k_ECPUGovernor_Perf",
		2: "k_ECPUGovernor_Powersave",
		3: "k_ECPUGovernor_Manual",
	}
	ECPUGovernor_value = map[string]int32{
		"k_ECPUGovernor_Invalid":   0,
		"k_ECPUGovernor_Perf":      1,
		"k_ECPUGovernor_Powersave": 2,
		"k_ECPUGovernor_Manual":    3,
	}
)

func (x ECPUGovernor) Enum() *ECPUGovernor {
	p := new(ECPUGovernor)
	*p = x
	return p
}

func (x ECPUGovernor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECPUGovernor) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[29].Descriptor()
}

func (ECPUGovernor) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[29]
}

func (x ECPUGovernor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECPUGovernor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECPUGovernor(num)
	return nil
}

// Deprecated: Use ECPUGovernor.Descriptor instead.
func (ECPUGovernor) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{29}
}

type EUpdaterType int32

const (
	EUpdaterType_k_EUpdaterType_Invalid    EUpdaterType = 0
	EUpdaterType_k_EUpdaterType_Client     EUpdaterType = 1
	EUpdaterType_k_EUpdaterType_OS         EUpdaterType = 2
	EUpdaterType_k_EUpdaterType_BIOS       EUpdaterType = 3
	EUpdaterType_k_EUpdaterType_Aggregated EUpdaterType = 4
	EUpdaterType_k_EUpdaterType_Test1      EUpdaterType = 5
	EUpdaterType_k_EUpdaterType_Test2      EUpdaterType = 6
	EUpdaterType_k_EUpdaterType_Dummy      EUpdaterType = 7
)

// Enum value maps for EUpdaterType.
var (
	EUpdaterType_name = map[int32]string{
		0: "k_EUpdaterType_Invalid",
		1: "k_EUpdaterType_Client",
		2: "k_EUpdaterType_OS",
		3: "k_EUpdaterType_BIOS",
		4: "k_EUpdaterType_Aggregated",
		5: "k_EUpdaterType_Test1",
		6: "k_EUpdaterType_Test2",
		7: "k_EUpdaterType_Dummy",
	}
	EUpdaterType_value = map[string]int32{
		"k_EUpdaterType_Invalid":    0,
		"k_EUpdaterType_Client":     1,
		"k_EUpdaterType_OS":         2,
		"k_EUpdaterType_BIOS":       3,
		"k_EUpdaterType_Aggregated": 4,
		"k_EUpdaterType_Test1":      5,
		"k_EUpdaterType_Test2":      6,
		"k_EUpdaterType_Dummy":      7,
	}
)

func (x EUpdaterType) Enum() *EUpdaterType {
	p := new(EUpdaterType)
	*p = x
	return p
}

func (x EUpdaterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUpdaterType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[30].Descriptor()
}

func (EUpdaterType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[30]
}

func (x EUpdaterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUpdaterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUpdaterType(num)
	return nil
}

// Deprecated: Use EUpdaterType.Descriptor instead.
func (EUpdaterType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{30}
}

type EUpdaterState int32

const (
	EUpdaterState_k_EUpdaterState_Invalid              EUpdaterState = 0
	EUpdaterState_k_EUpdaterState_UpToDate             EUpdaterState = 2
	EUpdaterState_k_EUpdaterState_Checking             EUpdaterState = 3
	EUpdaterState_k_EUpdaterState_Available            EUpdaterState = 4
	EUpdaterState_k_EUpdaterState_Applying             EUpdaterState = 5
	EUpdaterState_k_EUpdaterState_ClientRestartPending EUpdaterState = 6
	EUpdaterState_k_EUpdaterState_SystemRestartPending EUpdaterState = 7
	EUpdaterState_k_EUpdaterState_RollBack             EUpdaterState = 8
)

// Enum value maps for EUpdaterState.
var (
	EUpdaterState_name = map[int32]string{
		0: "k_EUpdaterState_Invalid",
		2: "k_EUpdaterState_UpToDate",
		3: "k_EUpdaterState_Checking",
		4: "k_EUpdaterState_Available",
		5: "k_EUpdaterState_Applying",
		6: "k_EUpdaterState_ClientRestartPending",
		7: "k_EUpdaterState_SystemRestartPending",
		8: "k_EUpdaterState_RollBack",
	}
	EUpdaterState_value = map[string]int32{
		"k_EUpdaterState_Invalid":              0,
		"k_EUpdaterState_UpToDate":             2,
		"k_EUpdaterState_Checking":             3,
		"k_EUpdaterState_Available":            4,
		"k_EUpdaterState_Applying":             5,
		"k_EUpdaterState_ClientRestartPending": 6,
		"k_EUpdaterState_SystemRestartPending": 7,
		"k_EUpdaterState_RollBack":             8,
	}
)

func (x EUpdaterState) Enum() *EUpdaterState {
	p := new(EUpdaterState)
	*p = x
	return p
}

func (x EUpdaterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUpdaterState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[31].Descriptor()
}

func (EUpdaterState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[31]
}

func (x EUpdaterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUpdaterState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUpdaterState(num)
	return nil
}

// Deprecated: Use EUpdaterState.Descriptor instead.
func (EUpdaterState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{31}
}

type EStorageBlockContentType int32

const (
	EStorageBlockContentType_k_EStorageBlockContentType_Invalid    EStorageBlockContentType = 0
	EStorageBlockContentType_k_EStorageBlockContentType_Unknown    EStorageBlockContentType = 1
	EStorageBlockContentType_k_EStorageBlockContentType_FileSystem EStorageBlockContentType = 2
	EStorageBlockContentType_k_EStorageBlockContentType_Crypto     EStorageBlockContentType = 3
	EStorageBlockContentType_k_EStorageBlockContentType_Raid       EStorageBlockContentType = 4
)

// Enum value maps for EStorageBlockContentType.
var (
	EStorageBlockContentType_name = map[int32]string{
		0: "k_EStorageBlockContentType_Invalid",
		1: "k_EStorageBlockContentType_Unknown",
		2: "k_EStorageBlockContentType_FileSystem",
		3: "k_EStorageBlockContentType_Crypto",
		4: "k_EStorageBlockContentType_Raid",
	}
	EStorageBlockContentType_value = map[string]int32{
		"k_EStorageBlockContentType_Invalid":    0,
		"k_EStorageBlockContentType_Unknown":    1,
		"k_EStorageBlockContentType_FileSystem": 2,
		"k_EStorageBlockContentType_Crypto":     3,
		"k_EStorageBlockContentType_Raid":       4,
	}
)

func (x EStorageBlockContentType) Enum() *EStorageBlockContentType {
	p := new(EStorageBlockContentType)
	*p = x
	return p
}

func (x EStorageBlockContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageBlockContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[32].Descriptor()
}

func (EStorageBlockContentType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[32]
}

func (x EStorageBlockContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageBlockContentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageBlockContentType(num)
	return nil
}

// Deprecated: Use EStorageBlockContentType.Descriptor instead.
func (EStorageBlockContentType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{32}
}

type EStorageBlockFileSystemType int32

const (
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid EStorageBlockFileSystemType = 0
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Unknown EStorageBlockFileSystemType = 1
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_VFat    EStorageBlockFileSystemType = 2
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Ext4    EStorageBlockFileSystemType = 3
)

// Enum value maps for EStorageBlockFileSystemType.
var (
	EStorageBlockFileSystemType_name = map[int32]string{
		0: "k_EStorageBlockFileSystemType_Invalid",
		1: "k_EStorageBlockFileSystemType_Unknown",
		2: "k_EStorageBlockFileSystemType_VFat",
		3: "k_EStorageBlockFileSystemType_Ext4",
	}
	EStorageBlockFileSystemType_value = map[string]int32{
		"k_EStorageBlockFileSystemType_Invalid": 0,
		"k_EStorageBlockFileSystemType_Unknown": 1,
		"k_EStorageBlockFileSystemType_VFat":    2,
		"k_EStorageBlockFileSystemType_Ext4":    3,
	}
)

func (x EStorageBlockFileSystemType) Enum() *EStorageBlockFileSystemType {
	p := new(EStorageBlockFileSystemType)
	*p = x
	return p
}

func (x EStorageBlockFileSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageBlockFileSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[33].Descriptor()
}

func (EStorageBlockFileSystemType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[33]
}

func (x EStorageBlockFileSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageBlockFileSystemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageBlockFileSystemType(num)
	return nil
}

// Deprecated: Use EStorageBlockFileSystemType.Descriptor instead.
func (EStorageBlockFileSystemType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{33}
}

type EStorageDriveMediaType int32

const (
	EStorageDriveMediaType_k_EStorageDriveMediaType_Invalid   EStorageDriveMediaType = 0
	EStorageDriveMediaType_k_EStorageDriveMediaType_Unknown   EStorageDriveMediaType = 1
	EStorageDriveMediaType_k_EStorageDriveMediaType_HDD       EStorageDriveMediaType = 2
	EStorageDriveMediaType_k_EStorageDriveMediaType_SSD       EStorageDriveMediaType = 3
	EStorageDriveMediaType_k_EStorageDriveMediaType_Removable EStorageDriveMediaType = 4
)

// Enum value maps for EStorageDriveMediaType.
var (
	EStorageDriveMediaType_name = map[int32]string{
		0: "k_EStorageDriveMediaType_Invalid",
		1: "k_EStorageDriveMediaType_Unknown",
		2: "k_EStorageDriveMediaType_HDD",
		3: "k_EStorageDriveMediaType_SSD",
		4: "k_EStorageDriveMediaType_Removable",
	}
	EStorageDriveMediaType_value = map[string]int32{
		"k_EStorageDriveMediaType_Invalid":   0,
		"k_EStorageDriveMediaType_Unknown":   1,
		"k_EStorageDriveMediaType_HDD":       2,
		"k_EStorageDriveMediaType_SSD":       3,
		"k_EStorageDriveMediaType_Removable": 4,
	}
)

func (x EStorageDriveMediaType) Enum() *EStorageDriveMediaType {
	p := new(EStorageDriveMediaType)
	*p = x
	return p
}

func (x EStorageDriveMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageDriveMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[34].Descriptor()
}

func (EStorageDriveMediaType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[34]
}

func (x EStorageDriveMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageDriveMediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageDriveMediaType(num)
	return nil
}

// Deprecated: Use EStorageDriveMediaType.Descriptor instead.
func (EStorageDriveMediaType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{34}
}

type ESystemDisplayCompatibilityMode int32

const (
	ESystemDisplayCompatibilityMode_k_ESystemDisplayCompatibilityMode_Invalid         ESystemDisplayCompatibilityMode = 0
	ESystemDisplayCompatibilityMode_k_ESystemDisplayCompatibilityMode_None            ESystemDisplayCompatibilityMode = 1
	ESystemDisplayCompatibilityMode_k_ESystemDisplayCompatibilityMode_MinimalBandwith ESystemDisplayCompatibilityMode = 2
)

// Enum value maps for ESystemDisplayCompatibilityMode.
var (
	ESystemDisplayCompatibilityMode_name = map[int32]string{
		0: "k_ESystemDisplayCompatibilityMode_Invalid",
		1: "k_ESystemDisplayCompatibilityMode_None",
		2: "k_ESystemDisplayCompatibilityMode_MinimalBandwith",
	}
	ESystemDisplayCompatibilityMode_value = map[string]int32{
		"k_ESystemDisplayCompatibilityMode_Invalid":         0,
		"k_ESystemDisplayCompatibilityMode_None":            1,
		"k_ESystemDisplayCompatibilityMode_MinimalBandwith": 2,
	}
)

func (x ESystemDisplayCompatibilityMode) Enum() *ESystemDisplayCompatibilityMode {
	p := new(ESystemDisplayCompatibilityMode)
	*p = x
	return p
}

func (x ESystemDisplayCompatibilityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemDisplayCompatibilityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[35].Descriptor()
}

func (ESystemDisplayCompatibilityMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[35]
}

func (x ESystemDisplayCompatibilityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemDisplayCompatibilityMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemDisplayCompatibilityMode(num)
	return nil
}

// Deprecated: Use ESystemDisplayCompatibilityMode.Descriptor instead.
func (ESystemDisplayCompatibilityMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{35}
}

type ESteamDeckCompatibilityCategory int32

const (
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Unknown     ESteamDeckCompatibilityCategory = 0
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Unsupported ESteamDeckCompatibilityCategory = 1
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Playable    ESteamDeckCompatibilityCategory = 2
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Verified    ESteamDeckCompatibilityCategory = 3
)

// Enum value maps for ESteamDeckCompatibilityCategory.
var (
	ESteamDeckCompatibilityCategory_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityCategory_Unknown",
		1: "k_ESteamDeckCompatibilityCategory_Unsupported",
		2: "k_ESteamDeckCompatibilityCategory_Playable",
		3: "k_ESteamDeckCompatibilityCategory_Verified",
	}
	ESteamDeckCompatibilityCategory_value = map[string]int32{
		"k_ESteamDeckCompatibilityCategory_Unknown":     0,
		"k_ESteamDeckCompatibilityCategory_Unsupported": 1,
		"k_ESteamDeckCompatibilityCategory_Playable":    2,
		"k_ESteamDeckCompatibilityCategory_Verified":    3,
	}
)

func (x ESteamDeckCompatibilityCategory) Enum() *ESteamDeckCompatibilityCategory {
	p := new(ESteamDeckCompatibilityCategory)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[36].Descriptor()
}

func (ESteamDeckCompatibilityCategory) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[36]
}

func (x ESteamDeckCompatibilityCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityCategory(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityCategory.Descriptor instead.
func (ESteamDeckCompatibilityCategory) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{36}
}

type ESteamDeckCompatibilityResultDisplayType int32

const (
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Invisible     ESteamDeckCompatibilityResultDisplayType = 0
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Informational ESteamDeckCompatibilityResultDisplayType = 1
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Unsupported   ESteamDeckCompatibilityResultDisplayType = 2
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Playable      ESteamDeckCompatibilityResultDisplayType = 3
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Verified      ESteamDeckCompatibilityResultDisplayType = 4
)

// Enum value maps for ESteamDeckCompatibilityResultDisplayType.
var (
	ESteamDeckCompatibilityResultDisplayType_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityResultDisplayType_Invisible",
		1: "k_ESteamDeckCompatibilityResultDisplayType_Informational",
		2: "k_ESteamDeckCompatibilityResultDisplayType_Unsupported",
		3: "k_ESteamDeckCompatibilityResultDisplayType_Playable",
		4: "k_ESteamDeckCompatibilityResultDisplayType_Verified",
	}
	ESteamDeckCompatibilityResultDisplayType_value = map[string]int32{
		"k_ESteamDeckCompatibilityResultDisplayType_Invisible":     0,
		"k_ESteamDeckCompatibilityResultDisplayType_Informational": 1,
		"k_ESteamDeckCompatibilityResultDisplayType_Unsupported":   2,
		"k_ESteamDeckCompatibilityResultDisplayType_Playable":      3,
		"k_ESteamDeckCompatibilityResultDisplayType_Verified":      4,
	}
)

func (x ESteamDeckCompatibilityResultDisplayType) Enum() *ESteamDeckCompatibilityResultDisplayType {
	p := new(ESteamDeckCompatibilityResultDisplayType)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityResultDisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityResultDisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[37].Descriptor()
}

func (ESteamDeckCompatibilityResultDisplayType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[37]
}

func (x ESteamDeckCompatibilityResultDisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityResultDisplayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityResultDisplayType(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityResultDisplayType.Descriptor instead.
func (ESteamDeckCompatibilityResultDisplayType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{37}
}

type ESteamDeckCompatibilityTestResult int32

const (
	ESteamDeckCompatibilityTestResult_k_ESteamDeckCompatibilityTestResult_Invalid       ESteamDeckCompatibilityTestResult = 0
	ESteamDeckCompatibilityTestResult_k_ESteamDeckCompatibilityTestResult_NotApplicable ESteamDeckCompatibilityTestResult = 1
	ESteamDeckCompatibilityTestResult_k_ESteamDeckCompatibilityTestResult_Pass          ESteamDeckCompatibilityTestResult = 2
	ESteamDeckCompatibilityTestResult_k_ESteamDeckCompatibilityTestResult_Fail          ESteamDeckCompatibilityTestResult = 3
	ESteamDeckCompatibilityTestResult_k_ESteamDeckCompatibilityTestResult_FailMinor     ESteamDeckCompatibilityTestResult = 4
)

// Enum value maps for ESteamDeckCompatibilityTestResult.
var (
	ESteamDeckCompatibilityTestResult_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityTestResult_Invalid",
		1: "k_ESteamDeckCompatibilityTestResult_NotApplicable",
		2: "k_ESteamDeckCompatibilityTestResult_Pass",
		3: "k_ESteamDeckCompatibilityTestResult_Fail",
		4: "k_ESteamDeckCompatibilityTestResult_FailMinor",
	}
	ESteamDeckCompatibilityTestResult_value = map[string]int32{
		"k_ESteamDeckCompatibilityTestResult_Invalid":       0,
		"k_ESteamDeckCompatibilityTestResult_NotApplicable": 1,
		"k_ESteamDeckCompatibilityTestResult_Pass":          2,
		"k_ESteamDeckCompatibilityTestResult_Fail":          3,
		"k_ESteamDeckCompatibilityTestResult_FailMinor":     4,
	}
)

func (x ESteamDeckCompatibilityTestResult) Enum() *ESteamDeckCompatibilityTestResult {
	p := new(ESteamDeckCompatibilityTestResult)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityTestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityTestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[38].Descriptor()
}

func (ESteamDeckCompatibilityTestResult) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[38]
}

func (x ESteamDeckCompatibilityTestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityTestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityTestResult(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityTestResult.Descriptor instead.
func (ESteamDeckCompatibilityTestResult) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{38}
}

type EACState int32

const (
	EACState_k_EACState_Unknown       EACState = 0
	EACState_k_EACState_Disconnected  EACState = 1
	EACState_k_EACState_Connected     EACState = 2
	EACState_k_EACState_ConnectedSlow EACState = 3
)

// Enum value maps for EACState.
var (
	EACState_name = map[int32]string{
		0: "k_EACState_Unknown",
		1: "k_EACState_Disconnected",
		2: "k_EACState_Connected",
		3: "k_EACState_ConnectedSlow",
	}
	EACState_value = map[string]int32{
		"k_EACState_Unknown":       0,
		"k_EACState_Disconnected":  1,
		"k_EACState_Connected":     2,
		"k_EACState_ConnectedSlow": 3,
	}
)

func (x EACState) Enum() *EACState {
	p := new(EACState)
	*p = x
	return p
}

func (x EACState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EACState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[39].Descriptor()
}

func (EACState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[39]
}

func (x EACState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EACState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EACState(num)
	return nil
}

// Deprecated: Use EACState.Descriptor instead.
func (EACState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{39}
}

type EBatteryState int32

const (
	EBatteryState_k_EBatteryState_Unknown     EBatteryState = 0
	EBatteryState_k_EBatteryState_Discharging EBatteryState = 1
	EBatteryState_k_EBatteryState_Charging    EBatteryState = 2
	EBatteryState_k_EBatteryState_Full        EBatteryState = 3
)

// Enum value maps for EBatteryState.
var (
	EBatteryState_name = map[int32]string{
		0: "k_EBatteryState_Unknown",
		1: "k_EBatteryState_Discharging",
		2: "k_EBatteryState_Charging",
		3: "k_EBatteryState_Full",
	}
	EBatteryState_value = map[string]int32{
		"k_EBatteryState_Unknown":     0,
		"k_EBatteryState_Discharging": 1,
		"k_EBatteryState_Charging":    2,
		"k_EBatteryState_Full":        3,
	}
)

func (x EBatteryState) Enum() *EBatteryState {
	p := new(EBatteryState)
	*p = x
	return p
}

func (x EBatteryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBatteryState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[40].Descriptor()
}

func (EBatteryState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[40]
}

func (x EBatteryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBatteryState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBatteryState(num)
	return nil
}

// Deprecated: Use EBatteryState.Descriptor instead.
func (EBatteryState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{40}
}

type EOSBranch int32

const (
	EOSBranch_k_EOSBranch_Unknown          EOSBranch = 0
	EOSBranch_k_EOSBranch_Release          EOSBranch = 1
	EOSBranch_k_EOSBranch_ReleaseCandidate EOSBranch = 2
	EOSBranch_k_EOSBranch_Beta             EOSBranch = 3
	EOSBranch_k_EOSBranch_BetaCandidate    EOSBranch = 4
	EOSBranch_k_EOSBranch_Preview          EOSBranch = 5
	EOSBranch_k_EOSBranch_PreviewCandidate EOSBranch = 6
	EOSBranch_k_EOSBranch_Main             EOSBranch = 7
	EOSBranch_k_EOSBranch_Staging          EOSBranch = 8
)

// Enum value maps for EOSBranch.
var (
	EOSBranch_name = map[int32]string{
		0: "k_EOSBranch_Unknown",
		1: "k_EOSBranch_Release",
		2: "k_EOSBranch_ReleaseCandidate",
		3: "k_EOSBranch_Beta",
		4: "k_EOSBranch_BetaCandidate",
		5: "k_EOSBranch_Preview",
		6: "k_EOSBranch_PreviewCandidate",
		7: "k_EOSBranch_Main",
		8: "k_EOSBranch_Staging",
	}
	EOSBranch_value = map[string]int32{
		"k_EOSBranch_Unknown":          0,
		"k_EOSBranch_Release":          1,
		"k_EOSBranch_ReleaseCandidate": 2,
		"k_EOSBranch_Beta":             3,
		"k_EOSBranch_BetaCandidate":    4,
		"k_EOSBranch_Preview":          5,
		"k_EOSBranch_PreviewCandidate": 6,
		"k_EOSBranch_Main":             7,
		"k_EOSBranch_Staging":          8,
	}
)

func (x EOSBranch) Enum() *EOSBranch {
	p := new(EOSBranch)
	*p = x
	return p
}

func (x EOSBranch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOSBranch) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[41].Descriptor()
}

func (EOSBranch) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[41]
}

func (x EOSBranch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOSBranch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOSBranch(num)
	return nil
}

// Deprecated: Use EOSBranch.Descriptor instead.
func (EOSBranch) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{41}
}

type EBrowserGPUStatus int32

const (
	EBrowserGPUStatus_k_EBrowserGPUStatus_Invalid                        EBrowserGPUStatus = 0
	EBrowserGPUStatus_k_EBrowserGPUStatus_Enabled                        EBrowserGPUStatus = 1
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledUnknown                EBrowserGPUStatus = 2
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledCrashCount             EBrowserGPUStatus = 4
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledBlocklist              EBrowserGPUStatus = 5
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledJSRequest              EBrowserGPUStatus = 6
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledCommandLine            EBrowserGPUStatus = 7
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledRuntimeDetect          EBrowserGPUStatus = 8
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledChildCommandLine       EBrowserGPUStatus = 9
	EBrowserGPUStatus_k_EBrowserGPUStatus_DisabledCompositingCommandLine EBrowserGPUStatus = 10
)

// Enum value maps for EBrowserGPUStatus.
var (
	EBrowserGPUStatus_name = map[int32]string{
		0:  "k_EBrowserGPUStatus_Invalid",
		1:  "k_EBrowserGPUStatus_Enabled",
		2:  "k_EBrowserGPUStatus_DisabledUnknown",
		4:  "k_EBrowserGPUStatus_DisabledCrashCount",
		5:  "k_EBrowserGPUStatus_DisabledBlocklist",
		6:  "k_EBrowserGPUStatus_DisabledJSRequest",
		7:  "k_EBrowserGPUStatus_DisabledCommandLine",
		8:  "k_EBrowserGPUStatus_DisabledRuntimeDetect",
		9:  "k_EBrowserGPUStatus_DisabledChildCommandLine",
		10: "k_EBrowserGPUStatus_DisabledCompositingCommandLine",
	}
	EBrowserGPUStatus_value = map[string]int32{
		"k_EBrowserGPUStatus_Invalid":                        0,
		"k_EBrowserGPUStatus_Enabled":                        1,
		"k_EBrowserGPUStatus_DisabledUnknown":                2,
		"k_EBrowserGPUStatus_DisabledCrashCount":             4,
		"k_EBrowserGPUStatus_DisabledBlocklist":              5,
		"k_EBrowserGPUStatus_DisabledJSRequest":              6,
		"k_EBrowserGPUStatus_DisabledCommandLine":            7,
		"k_EBrowserGPUStatus_DisabledRuntimeDetect":          8,
		"k_EBrowserGPUStatus_DisabledChildCommandLine":       9,
		"k_EBrowserGPUStatus_DisabledCompositingCommandLine": 10,
	}
)

func (x EBrowserGPUStatus) Enum() *EBrowserGPUStatus {
	p := new(EBrowserGPUStatus)
	*p = x
	return p
}

func (x EBrowserGPUStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBrowserGPUStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[42].Descriptor()
}

func (EBrowserGPUStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[42]
}

func (x EBrowserGPUStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBrowserGPUStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBrowserGPUStatus(num)
	return nil
}

// Deprecated: Use EBrowserGPUStatus.Descriptor instead.
func (EBrowserGPUStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{42}
}

type EBrowserFeatureStatus int32

const (
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_Invalid             EBrowserFeatureStatus = 0
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_NotFound            EBrowserFeatureStatus = 1
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_Unknown             EBrowserFeatureStatus = 2
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_DisabledSoftware    EBrowserFeatureStatus = 3
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_DisabledOff         EBrowserFeatureStatus = 4
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_DisabledOffOk       EBrowserFeatureStatus = 5
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_UnavailableSoftware EBrowserFeatureStatus = 6
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_UnavailableOff      EBrowserFeatureStatus = 7
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_UnavailableOffOk    EBrowserFeatureStatus = 8
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_EnabledReadback     EBrowserFeatureStatus = 9
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_EnabledForce        EBrowserFeatureStatus = 10
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_Enabled             EBrowserFeatureStatus = 11
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_EnabledOn           EBrowserFeatureStatus = 12
	EBrowserFeatureStatus_k_EBrowserFeatureStatus_EnabledForceOn      EBrowserFeatureStatus = 13
)

// Enum value maps for EBrowserFeatureStatus.
var (
	EBrowserFeatureStatus_name = map[int32]string{
		0:  "k_EBrowserFeatureStatus_Invalid",
		1:  "k_EBrowserFeatureStatus_NotFound",
		2:  "k_EBrowserFeatureStatus_Unknown",
		3:  "k_EBrowserFeatureStatus_DisabledSoftware",
		4:  "k_EBrowserFeatureStatus_DisabledOff",
		5:  "k_EBrowserFeatureStatus_DisabledOffOk",
		6:  "k_EBrowserFeatureStatus_UnavailableSoftware",
		7:  "k_EBrowserFeatureStatus_UnavailableOff",
		8:  "k_EBrowserFeatureStatus_UnavailableOffOk",
		9:  "k_EBrowserFeatureStatus_EnabledReadback",
		10: "k_EBrowserFeatureStatus_EnabledForce",
		11: "k_EBrowserFeatureStatus_Enabled",
		12: "k_EBrowserFeatureStatus_EnabledOn",
		13: "k_EBrowserFeatureStatus_EnabledForceOn",
	}
	EBrowserFeatureStatus_value = map[string]int32{
		"k_EBrowserFeatureStatus_Invalid":             0,
		"k_EBrowserFeatureStatus_NotFound":            1,
		"k_EBrowserFeatureStatus_Unknown":             2,
		"k_EBrowserFeatureStatus_DisabledSoftware":    3,
		"k_EBrowserFeatureStatus_DisabledOff":         4,
		"k_EBrowserFeatureStatus_DisabledOffOk":       5,
		"k_EBrowserFeatureStatus_UnavailableSoftware": 6,
		"k_EBrowserFeatureStatus_UnavailableOff":      7,
		"k_EBrowserFeatureStatus_UnavailableOffOk":    8,
		"k_EBrowserFeatureStatus_EnabledReadback":     9,
		"k_EBrowserFeatureStatus_EnabledForce":        10,
		"k_EBrowserFeatureStatus_Enabled":             11,
		"k_EBrowserFeatureStatus_EnabledOn":           12,
		"k_EBrowserFeatureStatus_EnabledForceOn":      13,
	}
)

func (x EBrowserFeatureStatus) Enum() *EBrowserFeatureStatus {
	p := new(EBrowserFeatureStatus)
	*p = x
	return p
}

func (x EBrowserFeatureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBrowserFeatureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[43].Descriptor()
}

func (EBrowserFeatureStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[43]
}

func (x EBrowserFeatureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBrowserFeatureStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBrowserFeatureStatus(num)
	return nil
}

// Deprecated: Use EBrowserFeatureStatus.Descriptor instead.
func (EBrowserFeatureStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{43}
}

type EGpuDriverId int32

const (
	EGpuDriverId_k_EGpuDriverId_Invalid             EGpuDriverId = 0
	EGpuDriverId_k_EGpuDriverId_Unknown             EGpuDriverId = 1
	EGpuDriverId_k_EGpuDriverId_AmdProprietary      EGpuDriverId = 2
	EGpuDriverId_k_EGpuDriverId_AmdOpenSource       EGpuDriverId = 3
	EGpuDriverId_k_EGpuDriverId_MesaRadv            EGpuDriverId = 4
	EGpuDriverId_k_EGpuDriverId_NvidiaProprietary   EGpuDriverId = 5
	EGpuDriverId_k_EGpuDriverId_IntelPropietary     EGpuDriverId = 6
	EGpuDriverId_k_EGpuDriverId_MesaIntel           EGpuDriverId = 7
	EGpuDriverId_k_EGpuDriverId_QualcommProprietary EGpuDriverId = 8
	EGpuDriverId_k_EGpuDriverId_ArmProprietary      EGpuDriverId = 9
	EGpuDriverId_k_EGpuDriverId_GoogleSwiftshader   EGpuDriverId = 10
	EGpuDriverId_k_EGpuDriverId_BroadcomProprietary EGpuDriverId = 11
	EGpuDriverId_k_EGpuDriverId_MesaLLVMPipe        EGpuDriverId = 12
	EGpuDriverId_k_EGpuDriverId_MoltenVK            EGpuDriverId = 13
	EGpuDriverId_k_EGpuDriverId_MesaTurnip          EGpuDriverId = 14
	EGpuDriverId_k_EGpuDriverId_MesaPanVK           EGpuDriverId = 15
	EGpuDriverId_k_EGpuDriverId_MesaVenus           EGpuDriverId = 16
	EGpuDriverId_k_EGpuDriverId_MesaDozen           EGpuDriverId = 17
	EGpuDriverId_k_EGpuDriverId_MesaNVK             EGpuDriverId = 18
	EGpuDriverId_k_EGpuDriverId_MesaHoneyKrisp      EGpuDriverId = 19
)

// Enum value maps for EGpuDriverId.
var (
	EGpuDriverId_name = map[int32]string{
		0:  "k_EGpuDriverId_Invalid",
		1:  "k_EGpuDriverId_Unknown",
		2:  "k_EGpuDriverId_AmdProprietary",
		3:  "k_EGpuDriverId_AmdOpenSource",
		4:  "k_EGpuDriverId_MesaRadv",
		5:  "k_EGpuDriverId_NvidiaProprietary",
		6:  "k_EGpuDriverId_IntelPropietary",
		7:  "k_EGpuDriverId_MesaIntel",
		8:  "k_EGpuDriverId_QualcommProprietary",
		9:  "k_EGpuDriverId_ArmProprietary",
		10: "k_EGpuDriverId_GoogleSwiftshader",
		11: "k_EGpuDriverId_BroadcomProprietary",
		12: "k_EGpuDriverId_MesaLLVMPipe",
		13: "k_EGpuDriverId_MoltenVK",
		14: "k_EGpuDriverId_MesaTurnip",
		15: "k_EGpuDriverId_MesaPanVK",
		16: "k_EGpuDriverId_MesaVenus",
		17: "k_EGpuDriverId_MesaDozen",
		18: "k_EGpuDriverId_MesaNVK",
		19: "k_EGpuDriverId_MesaHoneyKrisp",
	}
	EGpuDriverId_value = map[string]int32{
		"k_EGpuDriverId_Invalid":             0,
		"k_EGpuDriverId_Unknown":             1,
		"k_EGpuDriverId_AmdProprietary":      2,
		"k_EGpuDriverId_AmdOpenSource":       3,
		"k_EGpuDriverId_MesaRadv":            4,
		"k_EGpuDriverId_NvidiaProprietary":   5,
		"k_EGpuDriverId_IntelPropietary":     6,
		"k_EGpuDriverId_MesaIntel":           7,
		"k_EGpuDriverId_QualcommProprietary": 8,
		"k_EGpuDriverId_ArmProprietary":      9,
		"k_EGpuDriverId_GoogleSwiftshader":   10,
		"k_EGpuDriverId_BroadcomProprietary": 11,
		"k_EGpuDriverId_MesaLLVMPipe":        12,
		"k_EGpuDriverId_MoltenVK":            13,
		"k_EGpuDriverId_MesaTurnip":          14,
		"k_EGpuDriverId_MesaPanVK":           15,
		"k_EGpuDriverId_MesaVenus":           16,
		"k_EGpuDriverId_MesaDozen":           17,
		"k_EGpuDriverId_MesaNVK":             18,
		"k_EGpuDriverId_MesaHoneyKrisp":      19,
	}
)

func (x EGpuDriverId) Enum() *EGpuDriverId {
	p := new(EGpuDriverId)
	*p = x
	return p
}

func (x EGpuDriverId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGpuDriverId) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[44].Descriptor()
}

func (EGpuDriverId) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[44]
}

func (x EGpuDriverId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGpuDriverId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGpuDriverId(num)
	return nil
}

// Deprecated: Use EGpuDriverId.Descriptor instead.
func (EGpuDriverId) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{44}
}

type ECommunityItemClass int32

const (
	ECommunityItemClass_k_ECommunityItemClass_Invalid               ECommunityItemClass = 0
	ECommunityItemClass_k_ECommunityItemClass_Badge                 ECommunityItemClass = 1
	ECommunityItemClass_k_ECommunityItemClass_GameCard              ECommunityItemClass = 2
	ECommunityItemClass_k_ECommunityItemClass_ProfileBackground     ECommunityItemClass = 3
	ECommunityItemClass_k_ECommunityItemClass_Emoticon              ECommunityItemClass = 4
	ECommunityItemClass_k_ECommunityItemClass_BoosterPack           ECommunityItemClass = 5
	ECommunityItemClass_k_ECommunityItemClass_Consumable            ECommunityItemClass = 6
	ECommunityItemClass_k_ECommunityItemClass_GameGoo               ECommunityItemClass = 7
	ECommunityItemClass_k_ECommunityItemClass_ProfileModifier       ECommunityItemClass = 8
	ECommunityItemClass_k_ECommunityItemClass_Scene                 ECommunityItemClass = 9
	ECommunityItemClass_k_ECommunityItemClass_SalienItem            ECommunityItemClass = 10
	ECommunityItemClass_k_ECommunityItemClass_Sticker               ECommunityItemClass = 11
	ECommunityItemClass_k_ECommunityItemClass_ChatEffect            ECommunityItemClass = 12
	ECommunityItemClass_k_ECommunityItemClass_MiniProfileBackground ECommunityItemClass = 13
	ECommunityItemClass_k_ECommunityItemClass_AvatarFrame           ECommunityItemClass = 14
	ECommunityItemClass_k_ECommunityItemClass_AnimatedAvatar        ECommunityItemClass = 15
	ECommunityItemClass_k_ECommunityItemClass_SteamDeckKeyboardSkin ECommunityItemClass = 16
	ECommunityItemClass_k_ECommunityItemClass_SteamDeckStartupMovie ECommunityItemClass = 17
)

// Enum value maps for ECommunityItemClass.
var (
	ECommunityItemClass_name = map[int32]string{
		0:  "k_ECommunityItemClass_Invalid",
		1:  "k_ECommunityItemClass_Badge",
		2:  "k_ECommunityItemClass_GameCard",
		3:  "k_ECommunityItemClass_ProfileBackground",
		4:  "k_ECommunityItemClass_Emoticon",
		5:  "k_ECommunityItemClass_BoosterPack",
		6:  "k_ECommunityItemClass_Consumable",
		7:  "k_ECommunityItemClass_GameGoo",
		8:  "k_ECommunityItemClass_ProfileModifier",
		9:  "k_ECommunityItemClass_Scene",
		10: "k_ECommunityItemClass_SalienItem",
		11: "k_ECommunityItemClass_Sticker",
		12: "k_ECommunityItemClass_ChatEffect",
		13: "k_ECommunityItemClass_MiniProfileBackground",
		14: "k_ECommunityItemClass_AvatarFrame",
		15: "k_ECommunityItemClass_AnimatedAvatar",
		16: "k_ECommunityItemClass_SteamDeckKeyboardSkin",
		17: "k_ECommunityItemClass_SteamDeckStartupMovie",
	}
	ECommunityItemClass_value = map[string]int32{
		"k_ECommunityItemClass_Invalid":               0,
		"k_ECommunityItemClass_Badge":                 1,
		"k_ECommunityItemClass_GameCard":              2,
		"k_ECommunityItemClass_ProfileBackground":     3,
		"k_ECommunityItemClass_Emoticon":              4,
		"k_ECommunityItemClass_BoosterPack":           5,
		"k_ECommunityItemClass_Consumable":            6,
		"k_ECommunityItemClass_GameGoo":               7,
		"k_ECommunityItemClass_ProfileModifier":       8,
		"k_ECommunityItemClass_Scene":                 9,
		"k_ECommunityItemClass_SalienItem":            10,
		"k_ECommunityItemClass_Sticker":               11,
		"k_ECommunityItemClass_ChatEffect":            12,
		"k_ECommunityItemClass_MiniProfileBackground": 13,
		"k_ECommunityItemClass_AvatarFrame":           14,
		"k_ECommunityItemClass_AnimatedAvatar":        15,
		"k_ECommunityItemClass_SteamDeckKeyboardSkin": 16,
		"k_ECommunityItemClass_SteamDeckStartupMovie": 17,
	}
)

func (x ECommunityItemClass) Enum() *ECommunityItemClass {
	p := new(ECommunityItemClass)
	*p = x
	return p
}

func (x ECommunityItemClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommunityItemClass) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[45].Descriptor()
}

func (ECommunityItemClass) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[45]
}

func (x ECommunityItemClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECommunityItemClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECommunityItemClass(num)
	return nil
}

// Deprecated: Use ECommunityItemClass.Descriptor instead.
func (ECommunityItemClass) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{45}
}

type ESteamDeckCompatibilityFeedback int32

const (
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Unset    ESteamDeckCompatibilityFeedback = 0
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Agree    ESteamDeckCompatibilityFeedback = 1
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Disagree ESteamDeckCompatibilityFeedback = 2
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Ignore   ESteamDeckCompatibilityFeedback = 3
)

// Enum value maps for ESteamDeckCompatibilityFeedback.
var (
	ESteamDeckCompatibilityFeedback_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityFeedback_Unset",
		1: "k_ESteamDeckCompatibilityFeedback_Agree",
		2: "k_ESteamDeckCompatibilityFeedback_Disagree",
		3: "k_ESteamDeckCompatibilityFeedback_Ignore",
	}
	ESteamDeckCompatibilityFeedback_value = map[string]int32{
		"k_ESteamDeckCompatibilityFeedback_Unset":    0,
		"k_ESteamDeckCompatibilityFeedback_Agree":    1,
		"k_ESteamDeckCompatibilityFeedback_Disagree": 2,
		"k_ESteamDeckCompatibilityFeedback_Ignore":   3,
	}
)

func (x ESteamDeckCompatibilityFeedback) Enum() *ESteamDeckCompatibilityFeedback {
	p := new(ESteamDeckCompatibilityFeedback)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityFeedback) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityFeedback) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[46].Descriptor()
}

func (ESteamDeckCompatibilityFeedback) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[46]
}

func (x ESteamDeckCompatibilityFeedback) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityFeedback) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityFeedback(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityFeedback.Descriptor instead.
func (ESteamDeckCompatibilityFeedback) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{46}
}

type EProvideDeckFeedbackPreference int32

const (
	EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_Unset EProvideDeckFeedbackPreference = 0
	EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_Yes   EProvideDeckFeedbackPreference = 1
	EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_No    EProvideDeckFeedbackPreference = 2
)

// Enum value maps for EProvideDeckFeedbackPreference.
var (
	EProvideDeckFeedbackPreference_name = map[int32]string{
		0: "k_EProvideDeckFeedbackPreference_Unset",
		1: "k_EProvideDeckFeedbackPreference_Yes",
		2: "k_EProvideDeckFeedbackPreference_No",
	}
	EProvideDeckFeedbackPreference_value = map[string]int32{
		"k_EProvideDeckFeedbackPreference_Unset": 0,
		"k_EProvideDeckFeedbackPreference_Yes":   1,
		"k_EProvideDeckFeedbackPreference_No":    2,
	}
)

func (x EProvideDeckFeedbackPreference) Enum() *EProvideDeckFeedbackPreference {
	p := new(EProvideDeckFeedbackPreference)
	*p = x
	return p
}

func (x EProvideDeckFeedbackPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProvideDeckFeedbackPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[47].Descriptor()
}

func (EProvideDeckFeedbackPreference) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[47]
}

func (x EProvideDeckFeedbackPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProvideDeckFeedbackPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProvideDeckFeedbackPreference(num)
	return nil
}

// Deprecated: Use EProvideDeckFeedbackPreference.Descriptor instead.
func (EProvideDeckFeedbackPreference) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{47}
}

type ETouchGesture int32

const (
	ETouchGesture_k_ETouchGestureNone           ETouchGesture = 0
	ETouchGesture_k_ETouchGestureTouch          ETouchGesture = 1
	ETouchGesture_k_ETouchGestureTap            ETouchGesture = 2
	ETouchGesture_k_ETouchGestureDoubleTap      ETouchGesture = 3
	ETouchGesture_k_ETouchGestureShortPress     ETouchGesture = 4
	ETouchGesture_k_ETouchGestureLongPress      ETouchGesture = 5
	ETouchGesture_k_ETouchGestureLongTap        ETouchGesture = 6
	ETouchGesture_k_ETouchGestureTwoFingerTap   ETouchGesture = 7
	ETouchGesture_k_ETouchGestureTapCancelled   ETouchGesture = 8
	ETouchGesture_k_ETouchGesturePinchBegin     ETouchGesture = 9
	ETouchGesture_k_ETouchGesturePinchUpdate    ETouchGesture = 10
	ETouchGesture_k_ETouchGesturePinchEnd       ETouchGesture = 11
	ETouchGesture_k_ETouchGestureFlingStart     ETouchGesture = 12
	ETouchGesture_k_ETouchGestureFlingCancelled ETouchGesture = 13
)

// Enum value maps for ETouchGesture.
var (
	ETouchGesture_name = map[int32]string{
		0:  "k_ETouchGestureNone",
		1:  "k_ETouchGestureTouch",
		2:  "k_ETouchGestureTap",
		3:  "k_ETouchGestureDoubleTap",
		4:  "k_ETouchGestureShortPress",
		5:  "k_ETouchGestureLongPress",
		6:  "k_ETouchGestureLongTap",
		7:  "k_ETouchGestureTwoFingerTap",
		8:  "k_ETouchGestureTapCancelled",
		9:  "k_ETouchGesturePinchBegin",
		10: "k_ETouchGesturePinchUpdate",
		11: "k_ETouchGesturePinchEnd",
		12: "k_ETouchGestureFlingStart",
		13: "k_ETouchGestureFlingCancelled",
	}
	ETouchGesture_value = map[string]int32{
		"k_ETouchGestureNone":           0,
		"k_ETouchGestureTouch":          1,
		"k_ETouchGestureTap":            2,
		"k_ETouchGestureDoubleTap":      3,
		"k_ETouchGestureShortPress":     4,
		"k_ETouchGestureLongPress":      5,
		"k_ETouchGestureLongTap":        6,
		"k_ETouchGestureTwoFingerTap":   7,
		"k_ETouchGestureTapCancelled":   8,
		"k_ETouchGesturePinchBegin":     9,
		"k_ETouchGesturePinchUpdate":    10,
		"k_ETouchGesturePinchEnd":       11,
		"k_ETouchGestureFlingStart":     12,
		"k_ETouchGestureFlingCancelled": 13,
	}
)

func (x ETouchGesture) Enum() *ETouchGesture {
	p := new(ETouchGesture)
	*p = x
	return p
}

func (x ETouchGesture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETouchGesture) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[48].Descriptor()
}

func (ETouchGesture) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[48]
}

func (x ETouchGesture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETouchGesture) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETouchGesture(num)
	return nil
}

// Deprecated: Use ETouchGesture.Descriptor instead.
func (ETouchGesture) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{48}
}

type ESessionPersistence int32

const (
	ESessionPersistence_k_ESessionPersistence_Invalid    ESessionPersistence = -1
	ESessionPersistence_k_ESessionPersistence_Ephemeral  ESessionPersistence = 0
	ESessionPersistence_k_ESessionPersistence_Persistent ESessionPersistence = 1
)

// Enum value maps for ESessionPersistence.
var (
	ESessionPersistence_name = map[int32]string{
		-1: "k_ESessionPersistence_Invalid",
		0:  "k_ESessionPersistence_Ephemeral",
		1:  "k_ESessionPersistence_Persistent",
	}
	ESessionPersistence_value = map[string]int32{
		"k_ESessionPersistence_Invalid":    -1,
		"k_ESessionPersistence_Ephemeral":  0,
		"k_ESessionPersistence_Persistent": 1,
	}
)

func (x ESessionPersistence) Enum() *ESessionPersistence {
	p := new(ESessionPersistence)
	*p = x
	return p
}

func (x ESessionPersistence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESessionPersistence) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[49].Descriptor()
}

func (ESessionPersistence) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[49]
}

func (x ESessionPersistence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESessionPersistence) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESessionPersistence(num)
	return nil
}

// Deprecated: Use ESessionPersistence.Descriptor instead.
func (ESessionPersistence) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{49}
}

type ENewSteamAnnouncementState int32

const (
	ENewSteamAnnouncementState_k_ENewSteamAnnouncementState_Invalid              ENewSteamAnnouncementState = 0
	ENewSteamAnnouncementState_k_ENewSteamAnnouncementState_AllRead              ENewSteamAnnouncementState = 1
	ENewSteamAnnouncementState_k_ENewSteamAnnouncementState_NewAnnouncement      ENewSteamAnnouncementState = 2
	ENewSteamAnnouncementState_k_ENewSteamAnnouncementState_FeaturedAnnouncement ENewSteamAnnouncementState = 3
)

// Enum value maps for ENewSteamAnnouncementState.
var (
	ENewSteamAnnouncementState_name = map[int32]string{
		0: "k_ENewSteamAnnouncementState_Invalid",
		1: "k_ENewSteamAnnouncementState_AllRead",
		2: "k_ENewSteamAnnouncementState_NewAnnouncement",
		3: "k_ENewSteamAnnouncementState_FeaturedAnnouncement",
	}
	ENewSteamAnnouncementState_value = map[string]int32{
		"k_ENewSteamAnnouncementState_Invalid":              0,
		"k_ENewSteamAnnouncementState_AllRead":              1,
		"k_ENewSteamAnnouncementState_NewAnnouncement":      2,
		"k_ENewSteamAnnouncementState_FeaturedAnnouncement": 3,
	}
)

func (x ENewSteamAnnouncementState) Enum() *ENewSteamAnnouncementState {
	p := new(ENewSteamAnnouncementState)
	*p = x
	return p
}

func (x ENewSteamAnnouncementState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENewSteamAnnouncementState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[50].Descriptor()
}

func (ENewSteamAnnouncementState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[50]
}

func (x ENewSteamAnnouncementState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENewSteamAnnouncementState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENewSteamAnnouncementState(num)
	return nil
}

// Deprecated: Use ENewSteamAnnouncementState.Descriptor instead.
func (ENewSteamAnnouncementState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{50}
}

type EForumType int32

const (
	EForumType_k_EForumType_Invalid       EForumType = 0
	EForumType_k_EForumType_General       EForumType = 1
	EForumType_k_EForumType_ReportedPosts EForumType = 2
	EForumType_k_EForumType_Workshop      EForumType = 3
	EForumType_k_EForumType_PublishedFile EForumType = 4
	EForumType_k_EForumType_Trading       EForumType = 5
	EForumType_k_EForumType_PlayTest      EForumType = 6
	EForumType_k_EForumType_Event         EForumType = 7
	EForumType_k_EForumType_Max           EForumType = 8
)

// Enum value maps for EForumType.
var (
	EForumType_name = map[int32]string{
		0: "k_EForumType_Invalid",
		1: "k_EForumType_General",
		2: "k_EForumType_ReportedPosts",
		3: "k_EForumType_Workshop",
		4: "k_EForumType_PublishedFile",
		5: "k_EForumType_Trading",
		6: "k_EForumType_PlayTest",
		7: "k_EForumType_Event",
		8: "k_EForumType_Max",
	}
	EForumType_value = map[string]int32{
		"k_EForumType_Invalid":       0,
		"k_EForumType_General":       1,
		"k_EForumType_ReportedPosts": 2,
		"k_EForumType_Workshop":      3,
		"k_EForumType_PublishedFile": 4,
		"k_EForumType_Trading":       5,
		"k_EForumType_PlayTest":      6,
		"k_EForumType_Event":         7,
		"k_EForumType_Max":           8,
	}
)

func (x EForumType) Enum() *EForumType {
	p := new(EForumType)
	*p = x
	return p
}

func (x EForumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EForumType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[51].Descriptor()
}

func (EForumType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[51]
}

func (x EForumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EForumType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EForumType(num)
	return nil
}

// Deprecated: Use EForumType.Descriptor instead.
func (EForumType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{51}
}

type ECommentThreadType int32

const (
	ECommentThreadType_k_ECommentThreadTypeInvalid                    ECommentThreadType = 0
	ECommentThreadType_k_ECommentThreadTypeScreenshot_Deprecated      ECommentThreadType = 1
	ECommentThreadType_k_ECommentThreadTypeWorkshopAccount_Developer  ECommentThreadType = 2
	ECommentThreadType_k_ECommentThreadTypeWorkshopAccount_Public     ECommentThreadType = 3
	ECommentThreadType_k_ECommentThreadTypePublishedFile_Developer    ECommentThreadType = 4
	ECommentThreadType_k_ECommentThreadTypePublishedFile_Public       ECommentThreadType = 5
	ECommentThreadType_k_ECommentThreadTypeTest                       ECommentThreadType = 6
	ECommentThreadType_k_ECommentThreadTypeForumTopic                 ECommentThreadType = 7
	ECommentThreadType_k_ECommentThreadTypeRecommendation             ECommentThreadType = 8
	ECommentThreadType_k_ECommentThreadTypeVideo_Deprecated           ECommentThreadType = 9
	ECommentThreadType_k_ECommentThreadTypeProfile                    ECommentThreadType = 10
	ECommentThreadType_k_ECommentThreadTypeNewsPost                   ECommentThreadType = 11
	ECommentThreadType_k_ECommentThreadTypeClan                       ECommentThreadType = 12
	ECommentThreadType_k_ECommentThreadTypeClanAnnouncement           ECommentThreadType = 13
	ECommentThreadType_k_ECommentThreadTypeClanEvent                  ECommentThreadType = 14
	ECommentThreadType_k_ECommentThreadTypeUserStatusPublished        ECommentThreadType = 15
	ECommentThreadType_k_ECommentThreadTypeUserReceivedNewGame        ECommentThreadType = 16
	ECommentThreadType_k_ECommentThreadTypePublishedFile_Announcement ECommentThreadType = 17
	ECommentThreadType_k_ECommentThreadTypeModeratorMessage           ECommentThreadType = 18
	ECommentThreadType_k_ECommentThreadTypeClanCuratedApp             ECommentThreadType = 19
	ECommentThreadType_k_ECommentThreadTypeQAndASession               ECommentThreadType = 20
	ECommentThreadType_k_ECommentThreadTypeMax                        ECommentThreadType = 21
)

// Enum value maps for ECommentThreadType.
var (
	ECommentThreadType_name = map[int32]string{
		0:  "k_ECommentThreadTypeInvalid",
		1:  "k_ECommentThreadTypeScreenshot_Deprecated",
		2:  "k_ECommentThreadTypeWorkshopAccount_Developer",
		3:  "k_ECommentThreadTypeWorkshopAccount_Public",
		4:  "k_ECommentThreadTypePublishedFile_Developer",
		5:  "k_ECommentThreadTypePublishedFile_Public",
		6:  "k_ECommentThreadTypeTest",
		7:  "k_ECommentThreadTypeForumTopic",
		8:  "k_ECommentThreadTypeRecommendation",
		9:  "k_ECommentThreadTypeVideo_Deprecated",
		10: "k_ECommentThreadTypeProfile",
		11: "k_ECommentThreadTypeNewsPost",
		12: "k_ECommentThreadTypeClan",
		13: "k_ECommentThreadTypeClanAnnouncement",
		14: "k_ECommentThreadTypeClanEvent",
		15: "k_ECommentThreadTypeUserStatusPublished",
		16: "k_ECommentThreadTypeUserReceivedNewGame",
		17: "k_ECommentThreadTypePublishedFile_Announcement",
		18: "k_ECommentThreadTypeModeratorMessage",
		19: "k_ECommentThreadTypeClanCuratedApp",
		20: "k_ECommentThreadTypeQAndASession",
		21: "k_ECommentThreadTypeMax",
	}
	ECommentThreadType_value = map[string]int32{
		"k_ECommentThreadTypeInvalid":                    0,
		"k_ECommentThreadTypeScreenshot_Deprecated":      1,
		"k_ECommentThreadTypeWorkshopAccount_Developer":  2,
		"k_ECommentThreadTypeWorkshopAccount_Public":     3,
		"k_ECommentThreadTypePublishedFile_Developer":    4,
		"k_ECommentThreadTypePublishedFile_Public":       5,
		"k_ECommentThreadTypeTest":                       6,
		"k_ECommentThreadTypeForumTopic":                 7,
		"k_ECommentThreadTypeRecommendation":             8,
		"k_ECommentThreadTypeVideo_Deprecated":           9,
		"k_ECommentThreadTypeProfile":                    10,
		"k_ECommentThreadTypeNewsPost":                   11,
		"k_ECommentThreadTypeClan":                       12,
		"k_ECommentThreadTypeClanAnnouncement":           13,
		"k_ECommentThreadTypeClanEvent":                  14,
		"k_ECommentThreadTypeUserStatusPublished":        15,
		"k_ECommentThreadTypeUserReceivedNewGame":        16,
		"k_ECommentThreadTypePublishedFile_Announcement": 17,
		"k_ECommentThreadTypeModeratorMessage":           18,
		"k_ECommentThreadTypeClanCuratedApp":             19,
		"k_ECommentThreadTypeQAndASession":               20,
		"k_ECommentThreadTypeMax":                        21,
	}
)

func (x ECommentThreadType) Enum() *ECommentThreadType {
	p := new(ECommentThreadType)
	*p = x
	return p
}

func (x ECommentThreadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommentThreadType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[52].Descriptor()
}

func (ECommentThreadType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[52]
}

func (x ECommentThreadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECommentThreadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECommentThreadType(num)
	return nil
}

// Deprecated: Use ECommentThreadType.Descriptor instead.
func (ECommentThreadType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{52}
}

type EBroadcastPermission int32

const (
	EBroadcastPermission_k_EBroadcastPermissionDisabled       EBroadcastPermission = 0
	EBroadcastPermission_k_EBroadcastPermissionFriendsApprove EBroadcastPermission = 1
	EBroadcastPermission_k_EBroadcastPermissionFriendsAllowed EBroadcastPermission = 2
	EBroadcastPermission_k_EBroadcastPermissionPublic         EBroadcastPermission = 3
	EBroadcastPermission_k_EBroadcastPermissionSubscribers    EBroadcastPermission = 4
)

// Enum value maps for EBroadcastPermission.
var (
	EBroadcastPermission_name = map[int32]string{
		0: "k_EBroadcastPermissionDisabled",
		1: "k_EBroadcastPermissionFriendsApprove",
		2: "k_EBroadcastPermissionFriendsAllowed",
		3: "k_EBroadcastPermissionPublic",
		4: "k_EBroadcastPermissionSubscribers",
	}
	EBroadcastPermission_value = map[string]int32{
		"k_EBroadcastPermissionDisabled":       0,
		"k_EBroadcastPermissionFriendsApprove": 1,
		"k_EBroadcastPermissionFriendsAllowed": 2,
		"k_EBroadcastPermissionPublic":         3,
		"k_EBroadcastPermissionSubscribers":    4,
	}
)

func (x EBroadcastPermission) Enum() *EBroadcastPermission {
	p := new(EBroadcastPermission)
	*p = x
	return p
}

func (x EBroadcastPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBroadcastPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[53].Descriptor()
}

func (EBroadcastPermission) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[53]
}

func (x EBroadcastPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBroadcastPermission) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBroadcastPermission(num)
	return nil
}

// Deprecated: Use EBroadcastPermission.Descriptor instead.
func (EBroadcastPermission) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{53}
}

type EBroadcastEncoderSetting int32

const (
	EBroadcastEncoderSetting_k_EBroadcastEncoderBestQuality     EBroadcastEncoderSetting = 0
	EBroadcastEncoderSetting_k_EBroadcastEncoderBestPerformance EBroadcastEncoderSetting = 1
)

// Enum value maps for EBroadcastEncoderSetting.
var (
	EBroadcastEncoderSetting_name = map[int32]string{
		0: "k_EBroadcastEncoderBestQuality",
		1: "k_EBroadcastEncoderBestPerformance",
	}
	EBroadcastEncoderSetting_value = map[string]int32{
		"k_EBroadcastEncoderBestQuality":     0,
		"k_EBroadcastEncoderBestPerformance": 1,
	}
)

func (x EBroadcastEncoderSetting) Enum() *EBroadcastEncoderSetting {
	p := new(EBroadcastEncoderSetting)
	*p = x
	return p
}

func (x EBroadcastEncoderSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBroadcastEncoderSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[54].Descriptor()
}

func (EBroadcastEncoderSetting) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[54]
}

func (x EBroadcastEncoderSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBroadcastEncoderSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBroadcastEncoderSetting(num)
	return nil
}

// Deprecated: Use EBroadcastEncoderSetting.Descriptor instead.
func (EBroadcastEncoderSetting) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{54}
}

type ECloudGamingPlatform int32

const (
	ECloudGamingPlatform_k_ECloudGamingPlatformNone   ECloudGamingPlatform = 0
	ECloudGamingPlatform_k_ECloudGamingPlatformValve  ECloudGamingPlatform = 1
	ECloudGamingPlatform_k_ECloudGamingPlatformNVIDIA ECloudGamingPlatform = 2
)

// Enum value maps for ECloudGamingPlatform.
var (
	ECloudGamingPlatform_name = map[int32]string{
		0: "k_ECloudGamingPlatformNone",
		1: "k_ECloudGamingPlatformValve",
		2: "k_ECloudGamingPlatformNVIDIA",
	}
	ECloudGamingPlatform_value = map[string]int32{
		"k_ECloudGamingPlatformNone":   0,
		"k_ECloudGamingPlatformValve":  1,
		"k_ECloudGamingPlatformNVIDIA": 2,
	}
)

func (x ECloudGamingPlatform) Enum() *ECloudGamingPlatform {
	p := new(ECloudGamingPlatform)
	*p = x
	return p
}

func (x ECloudGamingPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloudGamingPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[55].Descriptor()
}

func (ECloudGamingPlatform) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[55]
}

func (x ECloudGamingPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloudGamingPlatform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloudGamingPlatform(num)
	return nil
}

// Deprecated: Use ECloudGamingPlatform.Descriptor instead.
func (ECloudGamingPlatform) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{55}
}

type ECompromiseDetectionType int32

const (
	ECompromiseDetectionType_k_ECompromiseDetectionType_None            ECompromiseDetectionType = 0
	ECompromiseDetectionType_k_ECompromiseDetectionType_TradeEvent      ECompromiseDetectionType = 1
	ECompromiseDetectionType_k_ECompromiseDetectionType_ApiCallRate     ECompromiseDetectionType = 2
	ECompromiseDetectionType_k_ECompromiseDetectionType_Manual          ECompromiseDetectionType = 3
	ECompromiseDetectionType_k_ECompromiseDetectionType_TicketAction    ECompromiseDetectionType = 4
	ECompromiseDetectionType_k_ECompromiseDetectionType_MaliciousRefund ECompromiseDetectionType = 5
)

// Enum value maps for ECompromiseDetectionType.
var (
	ECompromiseDetectionType_name = map[int32]string{
		0: "k_ECompromiseDetectionType_None",
		1: "k_ECompromiseDetectionType_TradeEvent",
		2: "k_ECompromiseDetectionType_ApiCallRate",
		3: "k_ECompromiseDetectionType_Manual",
		4: "k_ECompromiseDetectionType_TicketAction",
		5: "k_ECompromiseDetectionType_MaliciousRefund",
	}
	ECompromiseDetectionType_value = map[string]int32{
		"k_ECompromiseDetectionType_None":            0,
		"k_ECompromiseDetectionType_TradeEvent":      1,
		"k_ECompromiseDetectionType_ApiCallRate":     2,
		"k_ECompromiseDetectionType_Manual":          3,
		"k_ECompromiseDetectionType_TicketAction":    4,
		"k_ECompromiseDetectionType_MaliciousRefund": 5,
	}
)

func (x ECompromiseDetectionType) Enum() *ECompromiseDetectionType {
	p := new(ECompromiseDetectionType)
	*p = x
	return p
}

func (x ECompromiseDetectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECompromiseDetectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[56].Descriptor()
}

func (ECompromiseDetectionType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[56]
}

func (x ECompromiseDetectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECompromiseDetectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECompromiseDetectionType(num)
	return nil
}

// Deprecated: Use ECompromiseDetectionType.Descriptor instead.
func (ECompromiseDetectionType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{56}
}

type EAsyncGameSessionUserState int32

const (
	EAsyncGameSessionUserState_k_EAsyncGameSessionUserStateUnknown          EAsyncGameSessionUserState = -1
	EAsyncGameSessionUserState_k_EAsyncGameSessionUserStateWaitingForOthers EAsyncGameSessionUserState = 0
	EAsyncGameSessionUserState_k_EAsyncGameSessionUserStateReadyForAction   EAsyncGameSessionUserState = 1
	EAsyncGameSessionUserState_k_EAsyncGameSessionUserStateDone             EAsyncGameSessionUserState = 2
)

// Enum value maps for EAsyncGameSessionUserState.
var (
	EAsyncGameSessionUserState_name = map[int32]string{
		-1: "k_EAsyncGameSessionUserStateUnknown",
		0:  "k_EAsyncGameSessionUserStateWaitingForOthers",
		1:  "k_EAsyncGameSessionUserStateReadyForAction",
		2:  "k_EAsyncGameSessionUserStateDone",
	}
	EAsyncGameSessionUserState_value = map[string]int32{
		"k_EAsyncGameSessionUserStateUnknown":          -1,
		"k_EAsyncGameSessionUserStateWaitingForOthers": 0,
		"k_EAsyncGameSessionUserStateReadyForAction":   1,
		"k_EAsyncGameSessionUserStateDone":             2,
	}
)

func (x EAsyncGameSessionUserState) Enum() *EAsyncGameSessionUserState {
	p := new(EAsyncGameSessionUserState)
	*p = x
	return p
}

func (x EAsyncGameSessionUserState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAsyncGameSessionUserState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[57].Descriptor()
}

func (EAsyncGameSessionUserState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[57]
}

func (x EAsyncGameSessionUserState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAsyncGameSessionUserState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAsyncGameSessionUserState(num)
	return nil
}

// Deprecated: Use EAsyncGameSessionUserState.Descriptor instead.
func (EAsyncGameSessionUserState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{57}
}

type EAsyncGameSessionUserVisibility int32

const (
	EAsyncGameSessionUserVisibility_k_EAsyncGameSessionUserVisibilityEnvelopeAndSessionList EAsyncGameSessionUserVisibility = 0
	EAsyncGameSessionUserVisibility_k_EAsyncGameSessionUserVisibilitySessionListOnly        EAsyncGameSessionUserVisibility = 1
	EAsyncGameSessionUserVisibility_k_EAsyncGameSessionUserVisibilityDismissed              EAsyncGameSessionUserVisibility = 2
)

// Enum value maps for EAsyncGameSessionUserVisibility.
var (
	EAsyncGameSessionUserVisibility_name = map[int32]string{
		0: "k_EAsyncGameSessionUserVisibilityEnvelopeAndSessionList",
		1: "k_EAsyncGameSessionUserVisibilitySessionListOnly",
		2: "k_EAsyncGameSessionUserVisibilityDismissed",
	}
	EAsyncGameSessionUserVisibility_value = map[string]int32{
		"k_EAsyncGameSessionUserVisibilityEnvelopeAndSessionList": 0,
		"k_EAsyncGameSessionUserVisibilitySessionListOnly":        1,
		"k_EAsyncGameSessionUserVisibilityDismissed":              2,
	}
)

func (x EAsyncGameSessionUserVisibility) Enum() *EAsyncGameSessionUserVisibility {
	p := new(EAsyncGameSessionUserVisibility)
	*p = x
	return p
}

func (x EAsyncGameSessionUserVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAsyncGameSessionUserVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[58].Descriptor()
}

func (EAsyncGameSessionUserVisibility) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[58]
}

func (x EAsyncGameSessionUserVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAsyncGameSessionUserVisibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAsyncGameSessionUserVisibility(num)
	return nil
}

// Deprecated: Use EAsyncGameSessionUserVisibility.Descriptor instead.
func (EAsyncGameSessionUserVisibility) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{58}
}

type EGameRecordingType int32

const (
	EGameRecordingType_k_EGameRecordingType_Unknown             EGameRecordingType = 0
	EGameRecordingType_k_EGameRecordingType_NotRecording        EGameRecordingType = 1
	EGameRecordingType_k_EGameRecordingType_ManualRecording     EGameRecordingType = 2
	EGameRecordingType_k_EGameRecordingType_BackgroundRecording EGameRecordingType = 3
	EGameRecordingType_k_EGameRecordingType_Clip                EGameRecordingType = 4
)

// Enum value maps for EGameRecordingType.
var (
	EGameRecordingType_name = map[int32]string{
		0: "k_EGameRecordingType_Unknown",
		1: "k_EGameRecordingType_NotRecording",
		2: "k_EGameRecordingType_ManualRecording",
		3: "k_EGameRecordingType_BackgroundRecording",
		4: "k_EGameRecordingType_Clip",
	}
	EGameRecordingType_value = map[string]int32{
		"k_EGameRecordingType_Unknown":             0,
		"k_EGameRecordingType_NotRecording":        1,
		"k_EGameRecordingType_ManualRecording":     2,
		"k_EGameRecordingType_BackgroundRecording": 3,
		"k_EGameRecordingType_Clip":                4,
	}
)

func (x EGameRecordingType) Enum() *EGameRecordingType {
	p := new(EGameRecordingType)
	*p = x
	return p
}

func (x EGameRecordingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameRecordingType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[59].Descriptor()
}

func (EGameRecordingType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[59]
}

func (x EGameRecordingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameRecordingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameRecordingType(num)
	return nil
}

// Deprecated: Use EGameRecordingType.Descriptor instead.
func (EGameRecordingType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{59}
}

type EExportCodec int32

const (
	EExportCodec_k_EExportCodec_Default EExportCodec = 0
	EExportCodec_k_EExportCodec_H264    EExportCodec = 1
	EExportCodec_k_EExportCodec_H265    EExportCodec = 2
)

// Enum value maps for EExportCodec.
var (
	EExportCodec_name = map[int32]string{
		0: "k_EExportCodec_Default",
		1: "k_EExportCodec_H264",
		2: "k_EExportCodec_H265",
	}
	EExportCodec_value = map[string]int32{
		"k_EExportCodec_Default": 0,
		"k_EExportCodec_H264":    1,
		"k_EExportCodec_H265":    2,
	}
)

func (x EExportCodec) Enum() *EExportCodec {
	p := new(EExportCodec)
	*p = x
	return p
}

func (x EExportCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExportCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[60].Descriptor()
}

func (EExportCodec) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[60]
}

func (x EExportCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExportCodec) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExportCodec(num)
	return nil
}

// Deprecated: Use EExportCodec.Descriptor instead.
func (EExportCodec) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{60}
}

type EProtoAppType int32

const (
	EProtoAppType_k_EAppTypeInvalid     EProtoAppType = 0
	EProtoAppType_k_EAppTypeGame        EProtoAppType = 1
	EProtoAppType_k_EAppTypeApplication EProtoAppType = 2
	EProtoAppType_k_EAppTypeTool        EProtoAppType = 4
	EProtoAppType_k_EAppTypeDemo        EProtoAppType = 8
	EProtoAppType_k_EAppTypeDeprected   EProtoAppType = 16
	EProtoAppType_k_EAppTypeDLC         EProtoAppType = 32
	EProtoAppType_k_EAppTypeGuide       EProtoAppType = 64
	EProtoAppType_k_EAppTypeDriver      EProtoAppType = 128
	EProtoAppType_k_EAppTypeConfig      EProtoAppType = 256
	EProtoAppType_k_EAppTypeHardware    EProtoAppType = 512
	EProtoAppType_k_EAppTypeFranchise   EProtoAppType = 1024
	EProtoAppType_k_EAppTypeVideo       EProtoAppType = 2048
	EProtoAppType_k_EAppTypePlugin      EProtoAppType = 4096
	EProtoAppType_k_EAppTypeMusicAlbum  EProtoAppType = 8192
	EProtoAppType_k_EAppTypeSeries      EProtoAppType = 16384
	EProtoAppType_k_EAppTypeComic       EProtoAppType = 32768
	EProtoAppType_k_EAppTypeBeta        EProtoAppType = 65536
	EProtoAppType_k_EAppTypeShortcut    EProtoAppType = 1073741824
	EProtoAppType_k_EAppTypeDepotOnly   EProtoAppType = -2147483648
)

// Enum value maps for EProtoAppType.
var (
	EProtoAppType_name = map[int32]string{
		0:           "k_EAppTypeInvalid",
		1:           "k_EAppTypeGame",
		2:           "k_EAppTypeApplication",
		4:           "k_EAppTypeTool",
		8:           "k_EAppTypeDemo",
		16:          "k_EAppTypeDeprected",
		32:          "k_EAppTypeDLC",
		64:          "k_EAppTypeGuide",
		128:         "k_EAppTypeDriver",
		256:         "k_EAppTypeConfig",
		512:         "k_EAppTypeHardware",
		1024:        "k_EAppTypeFranchise",
		2048:        "k_EAppTypeVideo",
		4096:        "k_EAppTypePlugin",
		8192:        "k_EAppTypeMusicAlbum",
		16384:       "k_EAppTypeSeries",
		32768:       "k_EAppTypeComic",
		65536:       "k_EAppTypeBeta",
		1073741824:  "k_EAppTypeShortcut",
		-2147483648: "k_EAppTypeDepotOnly",
	}
	EProtoAppType_value = map[string]int32{
		"k_EAppTypeInvalid":     0,
		"k_EAppTypeGame":        1,
		"k_EAppTypeApplication": 2,
		"k_EAppTypeTool":        4,
		"k_EAppTypeDemo":        8,
		"k_EAppTypeDeprected":   16,
		"k_EAppTypeDLC":         32,
		"k_EAppTypeGuide":       64,
		"k_EAppTypeDriver":      128,
		"k_EAppTypeConfig":      256,
		"k_EAppTypeHardware":    512,
		"k_EAppTypeFranchise":   1024,
		"k_EAppTypeVideo":       2048,
		"k_EAppTypePlugin":      4096,
		"k_EAppTypeMusicAlbum":  8192,
		"k_EAppTypeSeries":      16384,
		"k_EAppTypeComic":       32768,
		"k_EAppTypeBeta":        65536,
		"k_EAppTypeShortcut":    1073741824,
		"k_EAppTypeDepotOnly":   -2147483648,
	}
)

func (x EProtoAppType) Enum() *EProtoAppType {
	p := new(EProtoAppType)
	*p = x
	return p
}

func (x EProtoAppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProtoAppType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[61].Descriptor()
}

func (EProtoAppType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[61]
}

func (x EProtoAppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProtoAppType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProtoAppType(num)
	return nil
}

// Deprecated: Use EProtoAppType.Descriptor instead.
func (EProtoAppType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{61}
}

type EWindowsUpdateInstallationImpact int32

const (
	EWindowsUpdateInstallationImpact_k_EWindowsUpdateInstallationImpact_Unknown           EWindowsUpdateInstallationImpact = -1
	EWindowsUpdateInstallationImpact_k_EWindowsUpdateInstallationImpact_Normal            EWindowsUpdateInstallationImpact = 0
	EWindowsUpdateInstallationImpact_k_EWindowsUpdateInstallationImpact_Minor             EWindowsUpdateInstallationImpact = 1
	EWindowsUpdateInstallationImpact_k_EWindowsUpdateInstallationImpact_ExclusiveHandling EWindowsUpdateInstallationImpact = 2
)

// Enum value maps for EWindowsUpdateInstallationImpact.
var (
	EWindowsUpdateInstallationImpact_name = map[int32]string{
		-1: "k_EWindowsUpdateInstallationImpact_Unknown",
		0:  "k_EWindowsUpdateInstallationImpact_Normal",
		1:  "k_EWindowsUpdateInstallationImpact_Minor",
		2:  "k_EWindowsUpdateInstallationImpact_ExclusiveHandling",
	}
	EWindowsUpdateInstallationImpact_value = map[string]int32{
		"k_EWindowsUpdateInstallationImpact_Unknown":           -1,
		"k_EWindowsUpdateInstallationImpact_Normal":            0,
		"k_EWindowsUpdateInstallationImpact_Minor":             1,
		"k_EWindowsUpdateInstallationImpact_ExclusiveHandling": 2,
	}
)

func (x EWindowsUpdateInstallationImpact) Enum() *EWindowsUpdateInstallationImpact {
	p := new(EWindowsUpdateInstallationImpact)
	*p = x
	return p
}

func (x EWindowsUpdateInstallationImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWindowsUpdateInstallationImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[62].Descriptor()
}

func (EWindowsUpdateInstallationImpact) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[62]
}

func (x EWindowsUpdateInstallationImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWindowsUpdateInstallationImpact) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWindowsUpdateInstallationImpact(num)
	return nil
}

// Deprecated: Use EWindowsUpdateInstallationImpact.Descriptor instead.
func (EWindowsUpdateInstallationImpact) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{62}
}

type EWindowsUpdateRebootBehavior int32

const (
	EWindowsUpdateRebootBehavior_k_EWindowsUpdateRebootBehavior_Unknown           EWindowsUpdateRebootBehavior = -1
	EWindowsUpdateRebootBehavior_k_EWindowsUpdateRebootBehavior_NeverNeedsReboot  EWindowsUpdateRebootBehavior = 0
	EWindowsUpdateRebootBehavior_k_EWindowsUpdateRebootBehavior_AlwaysNeedsReboot EWindowsUpdateRebootBehavior = 1
	EWindowsUpdateRebootBehavior_k_EWindowsUpdateRebootBehavior_MightNeedReboot   EWindowsUpdateRebootBehavior = 2
)

// Enum value maps for EWindowsUpdateRebootBehavior.
var (
	EWindowsUpdateRebootBehavior_name = map[int32]string{
		-1: "k_EWindowsUpdateRebootBehavior_Unknown",
		0:  "k_EWindowsUpdateRebootBehavior_NeverNeedsReboot",
		1:  "k_EWindowsUpdateRebootBehavior_AlwaysNeedsReboot",
		2:  "k_EWindowsUpdateRebootBehavior_MightNeedReboot",
	}
	EWindowsUpdateRebootBehavior_value = map[string]int32{
		"k_EWindowsUpdateRebootBehavior_Unknown":           -1,
		"k_EWindowsUpdateRebootBehavior_NeverNeedsReboot":  0,
		"k_EWindowsUpdateRebootBehavior_AlwaysNeedsReboot": 1,
		"k_EWindowsUpdateRebootBehavior_MightNeedReboot":   2,
	}
)

func (x EWindowsUpdateRebootBehavior) Enum() *EWindowsUpdateRebootBehavior {
	p := new(EWindowsUpdateRebootBehavior)
	*p = x
	return p
}

func (x EWindowsUpdateRebootBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWindowsUpdateRebootBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[63].Descriptor()
}

func (EWindowsUpdateRebootBehavior) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[63]
}

func (x EWindowsUpdateRebootBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWindowsUpdateRebootBehavior) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWindowsUpdateRebootBehavior(num)
	return nil
}

// Deprecated: Use EWindowsUpdateRebootBehavior.Descriptor instead.
func (EWindowsUpdateRebootBehavior) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{63}
}

type EExternalSaleEventType int32

const (
	EExternalSaleEventType_k_EExternalSaleEventType_Unknown   EExternalSaleEventType = 0
	EExternalSaleEventType_k_EExternalSaleEventType_Publisher EExternalSaleEventType = 1
	EExternalSaleEventType_k_EExternalSaleEventType_Showcase  EExternalSaleEventType = 2
	EExternalSaleEventType_k_EExternalSaleEventType_Region    EExternalSaleEventType = 3
	EExternalSaleEventType_k_EExternalSaleEventType_Theme     EExternalSaleEventType = 4
	EExternalSaleEventType_k_EExternalSaleEventType_Franchise EExternalSaleEventType = 5
)

// Enum value maps for EExternalSaleEventType.
var (
	EExternalSaleEventType_name = map[int32]string{
		0: "k_EExternalSaleEventType_Unknown",
		1: "k_EExternalSaleEventType_Publisher",
		2: "k_EExternalSaleEventType_Showcase",
		3: "k_EExternalSaleEventType_Region",
		4: "k_EExternalSaleEventType_Theme",
		5: "k_EExternalSaleEventType_Franchise",
	}
	EExternalSaleEventType_value = map[string]int32{
		"k_EExternalSaleEventType_Unknown":   0,
		"k_EExternalSaleEventType_Publisher": 1,
		"k_EExternalSaleEventType_Showcase":  2,
		"k_EExternalSaleEventType_Region":    3,
		"k_EExternalSaleEventType_Theme":     4,
		"k_EExternalSaleEventType_Franchise": 5,
	}
)

func (x EExternalSaleEventType) Enum() *EExternalSaleEventType {
	p := new(EExternalSaleEventType)
	*p = x
	return p
}

func (x EExternalSaleEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExternalSaleEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[64].Descriptor()
}

func (EExternalSaleEventType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[64]
}

func (x EExternalSaleEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExternalSaleEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExternalSaleEventType(num)
	return nil
}

// Deprecated: Use EExternalSaleEventType.Descriptor instead.
func (EExternalSaleEventType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{64}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x80, 0x0a, 0x0a, 0x17, 0x45, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x10, 0x00, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x10, 0x03, 0x12, 0x46, 0x0a, 0x42, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x44, 0x0a, 0x40,
	0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x4a, 0x0a, 0x46, 0x6b, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x59, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x3d, 0x0a, 0x39, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x32,
	0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x73, 0x63,
	0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x70, 0x10, 0x0b,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10,
	0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x0e, 0x12, 0x39, 0x0a, 0x35, 0x6b, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x10, 0x0f, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x10, 0x10, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x3d,
	0x0a, 0x39, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x12, 0x12, 0x3f, 0x0a,
	0x3b, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x13, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x10, 0x14, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x10, 0x15, 0x2a, 0xbc, 0x01, 0x0a, 0x23, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0xd5, 0x02, 0x0a, 0x21, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x55,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x1e, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x32, 0x12, 0x2e, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x4b, 0x12, 0x32, 0x0a,
	0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10,
	0x64, 0x2a, 0xb1, 0x03, 0x0a, 0x11, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x48,
	0x61, 0x73, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x49, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x62, 0x10, 0x80, 0x02, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x10, 0x80, 0x04, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6e, 0x66, 0x6f, 0x6f, 0x74,
	0x10, 0x80, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x52, 0x10, 0x80, 0x10, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x5f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x10, 0x80, 0x20, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x10, 0x80, 0x40, 0x2a, 0xb0, 0x02, 0x0a, 0x15, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x41,
	0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x41, 0x49, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x10, 0x06, 0x2a, 0x93, 0x09, 0x0a, 0x19, 0x45, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x72,
	0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10,
	0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x04, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x73, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x10,
	0x08, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x09, 0x12,
	0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x79, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x10, 0x0c, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x10, 0x0d, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x6b,
	0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x79, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10,
	0x11, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27,
	0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x79, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x6c, 0x69, 0x65, 0x6e, 0x10, 0x14,
	0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x15, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x16, 0x12, 0x38, 0x0a,
	0x34, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x73, 0x74, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x18, 0x2a, 0xc8,
	0x01, 0x0a, 0x1b, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x10, 0x02, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x47, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x10, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x19, 0x45, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x2a, 0xe8, 0x01, 0x0a, 0x12, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x63, 0x75, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x2a, 0x95,
	0x02, 0x0a, 0x13, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x63, 0x75, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x05,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x2a, 0x84, 0x01, 0x0a, 0x15, 0x45, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x2a, 0xaa, 0x01,
	0x0a, 0x14, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x44, 0x65,
	0x63, 0x6b, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x2a, 0x8b, 0x01, 0x0a, 0x13, 0x45,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d,
	0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47,
	0x61, 0x6d, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x5f, 0x73, 0x52, 0x47,
	0x42, 0x5f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x5f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x52, 0x47, 0x42, 0x5f, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x14, 0x45, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x54,
	0x6f, 0x70, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x2a, 0xc0, 0x03, 0x0a, 0x14, 0x45, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x73, 0x65, 0x74, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x73, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x07, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x08, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x0b, 0x2a, 0x80, 0x01, 0x0a, 0x15, 0x45,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x02, 0x2a, 0xf1, 0x02,
	0x0a, 0x13, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4c, 0x46,
	0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x42, 0x61, 0x63, 0x6b,
	0x4c, 0x65, 0x66, 0x74, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x42,
	0x61, 0x63, 0x6b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x07,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4d, 0x6f, 0x6e, 0x6f, 0x10,
	0x09, 0x2a, 0xc9, 0x01, 0x0a, 0x14, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x33,
	0x32, 0x66, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69,
	0x64, 0x69, 0x38, 0x62, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x33, 0x32, 0x52, 0x47, 0x42, 0x41, 0x10, 0x04, 0x2a, 0x90, 0x01,
	0x0a, 0x19, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x02,
	0x2a, 0x83, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0xe1, 0x01, 0x0a, 0x19, 0x45, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x10,
	0x03, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0xe5, 0x01, 0x0a, 0x14, 0x45,
	0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x50,
	0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47,
	0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x6f, 0x77, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0x05, 0x2a, 0xbb, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x46, 0x53, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x49, 0x53, 0x10, 0x05,
	0x2a, 0xbb, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x46, 0x53, 0x52, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x49, 0x53, 0x10, 0x04, 0x2a, 0xdd,
	0x01, 0x0a, 0x13, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x46, 0x69, 0x74, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x46, 0x69, 0x6c, 0x6c, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x10, 0x05, 0x2a, 0x7d,
	0x0a, 0x12, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x6c, 0x75, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x66, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x6c, 0x75, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x02, 0x2a, 0xa6, 0x01,
	0x0a, 0x0a, 0x45, 0x53, 0x4c, 0x53, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14,
	0x6b, 0x5f, 0x45, 0x53, 0x4c, 0x53, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x4c, 0x53,
	0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x64, 0x75, 0x6d, 0x70, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x53, 0x4c, 0x53, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x5f, 0x4b, 0x64, 0x75, 0x6d, 0x70, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45,
	0x53, 0x4c, 0x53, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x53, 0x4c, 0x53, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x5f, 0x47, 0x70, 0x75, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x53, 0x4c, 0x53, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x05, 0x2a, 0xc5, 0x01, 0x0a, 0x11, 0x45, 0x48, 0x44, 0x52, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18,
	0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x48, 0x44, 0x52, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x48, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x48, 0x44, 0x52, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x48, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x48, 0x65,
	0x61, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x10, 0x04, 0x2a, 0x81,
	0x01, 0x0a, 0x13, 0x45, 0x48, 0x44, 0x52, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52,
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x48, 0x44, 0x52, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x69, 0x6e, 0x68, 0x61, 0x72, 0x64,
	0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x0c, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x5f, 0x50, 0x65, 0x72, 0x66, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x50,
	0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x61, 0x76, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x03,
	0x2a, 0xe2, 0x01, 0x0a, 0x0c, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x53, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x49, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x31, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x32, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x75,
	0x6d, 0x6d, 0x79, 0x10, 0x07, 0x2a, 0x97, 0x02, 0x0a, 0x0d, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x07, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x08, 0x2a,
	0xe1, 0x01, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x69,
	0x64, 0x10, 0x04, 0x2a, 0xc3, 0x01, 0x0a, 0x1b, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x46, 0x61, 0x74, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x78, 0x74, 0x34, 0x10, 0x03, 0x2a, 0xd0, 0x01, 0x0a, 0x16, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x44, 0x44,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x53, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x2a, 0xb3, 0x01, 0x0a,
	0x1f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x6b,
	0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x74, 0x68,
	0x10, 0x02, 0x2a, 0xe3, 0x01, 0x0a, 0x1f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x03, 0x2a, 0xd0, 0x02, 0x0a, 0x28, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12,
	0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x3a, 0x0a,
	0x36, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x9a, 0x02, 0x0a, 0x21,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x50, 0x61, 0x73, 0x73, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x08, 0x45, 0x41, 0x43, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x41, 0x43, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x45, 0x41, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45,
	0x41, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x77, 0x10,
	0x03, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x03, 0x2a, 0xfe, 0x01, 0x0a, 0x09, 0x45, 0x4f,
	0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4f, 0x53,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x42, 0x65, 0x74, 0x61, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x42, 0x65, 0x74, 0x61, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x2a, 0xc6, 0x03, 0x0a, 0x11, 0x45,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50,
	0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47,
	0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b,
	0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4a, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x06, 0x12, 0x2b, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f,
	0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x36, 0x0a, 0x32, 0x6b,
	0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x10, 0x0a, 0x2a, 0xe3, 0x04, 0x0a, 0x15, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x2c, 0x0a,
	0x28, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x6b,
	0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f,
	0x66, 0x66, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x4f, 0x6b, 0x10, 0x05, 0x12,
	0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x10, 0x06,
	0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28,
	0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x4f, 0x6b, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f,
	0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x10,
	0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x10, 0x0c, 0x12, 0x2a, 0x0a,
	0x26, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x10, 0x0d, 0x2a, 0x9f, 0x05, 0x0a, 0x0c, 0x45, 0x47,
	0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x5f, 0x41, 0x6d, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x41, 0x6d, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x70,
	0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d, 0x65, 0x73, 0x61, 0x52, 0x61,
	0x64, 0x76, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x50, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x49, 0x6e, 0x74,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x5f, 0x4d, 0x65, 0x73, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x51,
	0x75, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x41, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47, 0x70,
	0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x53, 0x77, 0x69, 0x66, 0x74, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d, 0x65, 0x73, 0x61, 0x4c, 0x4c, 0x56, 0x4d,
	0x50, 0x69, 0x70, 0x65, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d, 0x6f, 0x6c, 0x74, 0x65, 0x6e, 0x56,
	0x4b, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d, 0x65, 0x73, 0x61, 0x54, 0x75, 0x72, 0x6e, 0x69, 0x70,
	0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d, 0x65, 0x73, 0x61, 0x50, 0x61, 0x6e, 0x56, 0x4b, 0x10, 0x0f,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x5f, 0x4d, 0x65, 0x73, 0x61, 0x56, 0x65, 0x6e, 0x75, 0x73, 0x10, 0x10, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x5f, 0x4d, 0x65, 0x73, 0x61, 0x44, 0x6f, 0x7a, 0x65, 0x6e, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16,
	0x6b, 0x5f, 0x45, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d,
	0x65, 0x73, 0x61, 0x4e, 0x56, 0x4b, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47,
	0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x5f, 0x4d, 0x65, 0x73, 0x61, 0x48,
	0x6f, 0x6e, 0x65, 0x79, 0x4b, 0x72, 0x69, 0x73, 0x70, 0x10, 0x13, 0x2a, 0xdd, 0x05, 0x0a, 0x13,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x6f, 0x6f, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x53, 0x61, 0x6c, 0x69, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0a, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10,
	0x0b, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x10, 0x0e, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x10, 0x11, 0x2a, 0xd9, 0x01, 0x0a, 0x1f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x41, 0x67, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x44,
	0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x10, 0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x1e, 0x45, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x55,
	0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x59, 0x65, 0x73, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x10, 0x02, 0x2a, 0xb1, 0x03, 0x0a, 0x0d, 0x45, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x61, 0x70, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x70, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x61, 0x70, 0x10, 0x06, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x77, 0x6f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x54, 0x61, 0x70, 0x10, 0x07, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x61, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x09, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x2a, 0x8c, 0x01,
	0x0a, 0x13, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x2a, 0xd9, 0x01, 0x0a,
	0x1a, 0x45, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4e, 0x65, 0x77, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12,
	0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x65, 0x77, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x02, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x2a, 0xfe, 0x01, 0x0a, 0x0a, 0x45, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x45, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x05,
	0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x73, 0x74, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x6b,
	0x5f, 0x45, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x08, 0x2a, 0x8b, 0x07, 0x0a, 0x12, 0x45, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x10, 0x06,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x65, 0x77, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6c, 0x61, 0x6e, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x0e, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10,
	0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x10, 0x12, 0x32,
	0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x51, 0x41, 0x6e, 0x64,
	0x41, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x15, 0x2a, 0xd7, 0x01, 0x0a, 0x14, 0x45, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x10,
	0x04, 0x2a, 0x66, 0x0a, 0x18, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x42, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x2a, 0x79, 0x0a, 0x14, 0x45, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x6c, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x56, 0x49, 0x44,
	0x49, 0x41, 0x10, 0x02, 0x2a, 0x9a, 0x02, 0x0a, 0x18, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x6f, 0x6d, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x61, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10,
	0x05, 0x2a, 0xd6, 0x01, 0x0a, 0x1a, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x2a, 0xc4, 0x01, 0x0a, 0x1f, 0x45,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x37, 0x6b, 0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x6b,
	0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x10,
	0x02, 0x2a, 0xd4, 0x01, 0x0a, 0x12, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x6b,
	0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x10, 0x04, 0x2a, 0x5c, 0x0a, 0x0c, 0x45, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x48, 0x32, 0x36, 0x34, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x5f,
	0x48, 0x32, 0x36, 0x35, 0x10, 0x02, 0x2a, 0xea, 0x03, 0x0a, 0x0d, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x6f, 0x6c,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x6d, 0x6f, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x10, 0x12,
	0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x43,
	0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x10, 0x40, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x10, 0x80, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x10, 0x80, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x10, 0x80, 0x04, 0x12, 0x18,
	0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x46, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x69, 0x73, 0x65, 0x10, 0x80, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x80, 0x10, 0x12, 0x15,
	0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x10, 0x80, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x10, 0x80, 0x40,
	0x12, 0x16, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x10, 0x80, 0x80, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x10, 0x80, 0x80, 0x02, 0x12,
	0x14, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x65, 0x74,
	0x61, 0x10, 0x80, 0x80, 0x04, 0x12, 0x1a, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x04, 0x12, 0x20, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x80, 0x80, 0x80, 0x80, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x2a, 0xf2, 0x01, 0x0a, 0x20, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x38,
	0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x5f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0xf2, 0x01, 0x0a, 0x1c, 0x45, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x26, 0x6b, 0x5f, 0x45,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x33,
	0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x5f, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x4d, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10, 0x02, 0x2a, 0xfe, 0x01,
	0x0a, 0x16, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x10, 0x05, 0x42, 0x09,
	0x80, 0xb5, 0x18, 0x01, 0x48, 0x01, 0x80, 0x01, 0x01,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 65)
var file_enums_proto_goTypes = []any{
	(EPublishedFileQueryType)(0),                  // 0: EPublishedFileQueryType
	(EPublishedFileInappropriateProvider)(0),      // 1: EPublishedFileInappropriateProvider
	(EPublishedFileInappropriateResult)(0),        // 2: EPublishedFileInappropriateResult
	(EPersonaStateFlag)(0),                        // 3: EPersonaStateFlag
	(EContentCheckProvider)(0),                    // 4: EContentCheckProvider
	(EProfileCustomizationType)(0),                // 5: EProfileCustomizationType
	(EPublishedFileStorageSystem)(0),              // 6: EPublishedFileStorageSystem
	(ECloudStoragePersistState)(0),                // 7: ECloudStoragePersistState
	(ESDCardFormatStage)(0),                       // 8: ESDCardFormatStage
	(EStorageFormatStage)(0),                      // 9: EStorageFormatStage
	(ESystemFanControlMode)(0),                    // 10: ESystemFanControlMode
	(EStartupMovieVariant)(0),                     // 11: EStartupMovieVariant
	(EColorGamutLabelSet)(0),                      // 12: EColorGamutLabelSet
	(EWindowStackingOrder)(0),                     // 13: EWindowStackingOrder
	(EBluetoothDeviceType)(0),                     // 14: EBluetoothDeviceType
	(ESystemAudioDirection)(0),                    // 15: ESystemAudioDirection
	(ESystemAudioChannel)(0),                      // 16: ESystemAudioChannel
	(ESystemAudioPortType)(0),                     // 17: ESystemAudioPortType
	(ESystemAudioPortDirection)(0),                // 18: ESystemAudioPortDirection
	(ESystemServiceState)(0),                      // 19: ESystemServiceState
	(EGraphicsPerfOverlayLevel)(0),                // 20: EGraphicsPerfOverlayLevel
	(EGPUPerformanceLevel)(0),                     // 21: EGPUPerformanceLevel
	(EScalingFilter)(0),                           // 22: EScalingFilter
	(ESplitScalingFilter)(0),                      // 23: ESplitScalingFilter
	(ESplitScalingScaler)(0),                      // 24: ESplitScalingScaler
	(EGamescopeBlurMode)(0),                       // 25: EGamescopeBlurMode
	(ESLSHelper)(0),                               // 26: ESLSHelper
	(EHDRVisualization)(0),                        // 27: EHDRVisualization
	(EHDRToneMapOperator)(0),                      // 28: EHDRToneMapOperator
	(ECPUGovernor)(0),                             // 29: ECPUGovernor
	(EUpdaterType)(0),                             // 30: EUpdaterType
	(EUpdaterState)(0),                            // 31: EUpdaterState
	(EStorageBlockContentType)(0),                 // 32: EStorageBlockContentType
	(EStorageBlockFileSystemType)(0),              // 33: EStorageBlockFileSystemType
	(EStorageDriveMediaType)(0),                   // 34: EStorageDriveMediaType
	(ESystemDisplayCompatibilityMode)(0),          // 35: ESystemDisplayCompatibilityMode
	(ESteamDeckCompatibilityCategory)(0),          // 36: ESteamDeckCompatibilityCategory
	(ESteamDeckCompatibilityResultDisplayType)(0), // 37: ESteamDeckCompatibilityResultDisplayType
	(ESteamDeckCompatibilityTestResult)(0),        // 38: ESteamDeckCompatibilityTestResult
	(EACState)(0),                                 // 39: EACState
	(EBatteryState)(0),                            // 40: EBatteryState
	(EOSBranch)(0),                                // 41: EOSBranch
	(EBrowserGPUStatus)(0),                        // 42: EBrowserGPUStatus
	(EBrowserFeatureStatus)(0),                    // 43: EBrowserFeatureStatus
	(EGpuDriverId)(0),                             // 44: EGpuDriverId
	(ECommunityItemClass)(0),                      // 45: ECommunityItemClass
	(ESteamDeckCompatibilityFeedback)(0),          // 46: ESteamDeckCompatibilityFeedback
	(EProvideDeckFeedbackPreference)(0),           // 47: EProvideDeckFeedbackPreference
	(ETouchGesture)(0),                            // 48: ETouchGesture
	(ESessionPersistence)(0),                      // 49: ESessionPersistence
	(ENewSteamAnnouncementState)(0),               // 50: ENewSteamAnnouncementState
	(EForumType)(0),                               // 51: EForumType
	(ECommentThreadType)(0),                       // 52: ECommentThreadType
	(EBroadcastPermission)(0),                     // 53: EBroadcastPermission
	(EBroadcastEncoderSetting)(0),                 // 54: EBroadcastEncoderSetting
	(ECloudGamingPlatform)(0),                     // 55: ECloudGamingPlatform
	(ECompromiseDetectionType)(0),                 // 56: ECompromiseDetectionType
	(EAsyncGameSessionUserState)(0),               // 57: EAsyncGameSessionUserState
	(EAsyncGameSessionUserVisibility)(0),          // 58: EAsyncGameSessionUserVisibility
	(EGameRecordingType)(0),                       // 59: EGameRecordingType
	(EExportCodec)(0),                             // 60: EExportCodec
	(EProtoAppType)(0),                            // 61: EProtoAppType
	(EWindowsUpdateInstallationImpact)(0),         // 62: EWindowsUpdateInstallationImpact
	(EWindowsUpdateRebootBehavior)(0),             // 63: EWindowsUpdateRebootBehavior
	(EExternalSaleEventType)(0),                   // 64: EExternalSaleEventType
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      65,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
