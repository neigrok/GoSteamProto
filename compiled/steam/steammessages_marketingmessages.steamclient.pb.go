// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_marketingmessages.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EMarketingMessageType int32

const (
	EMarketingMessageType_k_EMarketingMessageInvalid           EMarketingMessageType = 0
	EMarketingMessageType_k_EMarketingMessageNowAvailable      EMarketingMessageType = 1
	EMarketingMessageType_k_EMarketingMessageWeekendDeal       EMarketingMessageType = 2
	EMarketingMessageType_k_EMarketingMessagePrePurchase       EMarketingMessageType = 3
	EMarketingMessageType_k_EMarketingMessagePlayNow           EMarketingMessageType = 4
	EMarketingMessageType_k_EMarketingMessagePreloadNow        EMarketingMessageType = 5
	EMarketingMessageType_k_EMarketingMessageGeneral           EMarketingMessageType = 6
	EMarketingMessageType_k_EMarketingMessageDemoQuit          EMarketingMessageType = 7
	EMarketingMessageType_k_EMarketingMessageGifting           EMarketingMessageType = 8
	EMarketingMessageType_k_EMarketingMessageEJsKorner         EMarketingMessageType = 9
	EMarketingMessageType_k_EMarketingMessageUpdate            EMarketingMessageType = 10
	EMarketingMessageType_k_EMarketingMessageMidweekDeal       EMarketingMessageType = 11
	EMarketingMessageType_k_EMarketingMessageDailyDeal         EMarketingMessageType = 12
	EMarketingMessageType_k_EMarketingMessageNewDLC            EMarketingMessageType = 13
	EMarketingMessageType_k_EMarketingMessageFreeWeekend       EMarketingMessageType = 14
	EMarketingMessageType_k_EMarketingMessageSalePages         EMarketingMessageType = 15
	EMarketingMessageType_k_EMarketingMessagePlaytestAvailable EMarketingMessageType = 16
)

// Enum value maps for EMarketingMessageType.
var (
	EMarketingMessageType_name = map[int32]string{
		0:  "k_EMarketingMessageInvalid",
		1:  "k_EMarketingMessageNowAvailable",
		2:  "k_EMarketingMessageWeekendDeal",
		3:  "k_EMarketingMessagePrePurchase",
		4:  "k_EMarketingMessagePlayNow",
		5:  "k_EMarketingMessagePreloadNow",
		6:  "k_EMarketingMessageGeneral",
		7:  "k_EMarketingMessageDemoQuit",
		8:  "k_EMarketingMessageGifting",
		9:  "k_EMarketingMessageEJsKorner",
		10: "k_EMarketingMessageUpdate",
		11: "k_EMarketingMessageMidweekDeal",
		12: "k_EMarketingMessageDailyDeal",
		13: "k_EMarketingMessageNewDLC",
		14: "k_EMarketingMessageFreeWeekend",
		15: "k_EMarketingMessageSalePages",
		16: "k_EMarketingMessagePlaytestAvailable",
	}
	EMarketingMessageType_value = map[string]int32{
		"k_EMarketingMessageInvalid":           0,
		"k_EMarketingMessageNowAvailable":      1,
		"k_EMarketingMessageWeekendDeal":       2,
		"k_EMarketingMessagePrePurchase":       3,
		"k_EMarketingMessagePlayNow":           4,
		"k_EMarketingMessagePreloadNow":        5,
		"k_EMarketingMessageGeneral":           6,
		"k_EMarketingMessageDemoQuit":          7,
		"k_EMarketingMessageGifting":           8,
		"k_EMarketingMessageEJsKorner":         9,
		"k_EMarketingMessageUpdate":            10,
		"k_EMarketingMessageMidweekDeal":       11,
		"k_EMarketingMessageDailyDeal":         12,
		"k_EMarketingMessageNewDLC":            13,
		"k_EMarketingMessageFreeWeekend":       14,
		"k_EMarketingMessageSalePages":         15,
		"k_EMarketingMessagePlaytestAvailable": 16,
	}
)

func (x EMarketingMessageType) Enum() *EMarketingMessageType {
	p := new(EMarketingMessageType)
	*p = x
	return p
}

func (x EMarketingMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMarketingMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_marketingmessages_steamclient_proto_enumTypes[0].Descriptor()
}

func (EMarketingMessageType) Type() protoreflect.EnumType {
	return &file_steammessages_marketingmessages_steamclient_proto_enumTypes[0]
}

func (x EMarketingMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMarketingMessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMarketingMessageType(num)
	return nil
}

// Deprecated: Use EMarketingMessageType.Descriptor instead.
func (EMarketingMessageType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{0}
}

type EMarketingMessageVisibility int32

const (
	EMarketingMessageVisibility_k_EMarketingMessageVisibleBeta               EMarketingMessageVisibility = 1
	EMarketingMessageVisibility_k_EMarketingMessageVisiblePublic             EMarketingMessageVisibility = 2
	EMarketingMessageVisibility_k_EMarketingMessageVisibleApprovedForPublish EMarketingMessageVisibility = 3
)

// Enum value maps for EMarketingMessageVisibility.
var (
	EMarketingMessageVisibility_name = map[int32]string{
		1: "k_EMarketingMessageVisibleBeta",
		2: "k_EMarketingMessageVisiblePublic",
		3: "k_EMarketingMessageVisibleApprovedForPublish",
	}
	EMarketingMessageVisibility_value = map[string]int32{
		"k_EMarketingMessageVisibleBeta":               1,
		"k_EMarketingMessageVisiblePublic":             2,
		"k_EMarketingMessageVisibleApprovedForPublish": 3,
	}
)

func (x EMarketingMessageVisibility) Enum() *EMarketingMessageVisibility {
	p := new(EMarketingMessageVisibility)
	*p = x
	return p
}

func (x EMarketingMessageVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMarketingMessageVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_marketingmessages_steamclient_proto_enumTypes[1].Descriptor()
}

func (EMarketingMessageVisibility) Type() protoreflect.EnumType {
	return &file_steammessages_marketingmessages_steamclient_proto_enumTypes[1]
}

func (x EMarketingMessageVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMarketingMessageVisibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMarketingMessageVisibility(num)
	return nil
}

// Deprecated: Use EMarketingMessageVisibility.Descriptor instead.
func (EMarketingMessageVisibility) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{1}
}

type EMarketingMessageAssociationType int32

const (
	EMarketingMessageAssociationType_k_EMarketingMessageNoAssociation           EMarketingMessageAssociationType = 0
	EMarketingMessageAssociationType_k_EMarketingMessageAppAssociation          EMarketingMessageAssociationType = 1
	EMarketingMessageAssociationType_k_EMarketingMessageSubscriptionAssociation EMarketingMessageAssociationType = 2
	EMarketingMessageAssociationType_k_EMarketingMessagePublisherAssociation    EMarketingMessageAssociationType = 3
	EMarketingMessageAssociationType_k_EMarketingMessageGenreAssociation        EMarketingMessageAssociationType = 4
	EMarketingMessageAssociationType_k_EMarketingMessageBundleAssociation       EMarketingMessageAssociationType = 5
)

// Enum value maps for EMarketingMessageAssociationType.
var (
	EMarketingMessageAssociationType_name = map[int32]string{
		0: "k_EMarketingMessageNoAssociation",
		1: "k_EMarketingMessageAppAssociation",
		2: "k_EMarketingMessageSubscriptionAssociation",
		3: "k_EMarketingMessagePublisherAssociation",
		4: "k_EMarketingMessageGenreAssociation",
		5: "k_EMarketingMessageBundleAssociation",
	}
	EMarketingMessageAssociationType_value = map[string]int32{
		"k_EMarketingMessageNoAssociation":           0,
		"k_EMarketingMessageAppAssociation":          1,
		"k_EMarketingMessageSubscriptionAssociation": 2,
		"k_EMarketingMessagePublisherAssociation":    3,
		"k_EMarketingMessageGenreAssociation":        4,
		"k_EMarketingMessageBundleAssociation":       5,
	}
)

func (x EMarketingMessageAssociationType) Enum() *EMarketingMessageAssociationType {
	p := new(EMarketingMessageAssociationType)
	*p = x
	return p
}

func (x EMarketingMessageAssociationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMarketingMessageAssociationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_marketingmessages_steamclient_proto_enumTypes[2].Descriptor()
}

func (EMarketingMessageAssociationType) Type() protoreflect.EnumType {
	return &file_steammessages_marketingmessages_steamclient_proto_enumTypes[2]
}

func (x EMarketingMessageAssociationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMarketingMessageAssociationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMarketingMessageAssociationType(num)
	return nil
}

// Deprecated: Use EMarketingMessageAssociationType.Descriptor instead.
func (EMarketingMessageAssociationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{2}
}

type EMarketingMessageTemplateType int32

const (
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Unknown        EMarketingMessageTemplateType = 0
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Image          EMarketingMessageTemplateType = 1
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Animated       EMarketingMessageTemplateType = 2
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Featured_Video EMarketingMessageTemplateType = 3
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_DLC_Override   EMarketingMessageTemplateType = 4
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Replay         EMarketingMessageTemplateType = 5
	EMarketingMessageTemplateType_k_EMarketingMessageTemplate_MAX            EMarketingMessageTemplateType = 6
)

// Enum value maps for EMarketingMessageTemplateType.
var (
	EMarketingMessageTemplateType_name = map[int32]string{
		0: "k_EMarketingMessageTemplate_Unknown",
		1: "k_EMarketingMessageTemplate_Image",
		2: "k_EMarketingMessageTemplate_Animated",
		3: "k_EMarketingMessageTemplate_Featured_Video",
		4: "k_EMarketingMessageTemplate_DLC_Override",
		5: "k_EMarketingMessageTemplate_Replay",
		6: "k_EMarketingMessageTemplate_MAX",
	}
	EMarketingMessageTemplateType_value = map[string]int32{
		"k_EMarketingMessageTemplate_Unknown":        0,
		"k_EMarketingMessageTemplate_Image":          1,
		"k_EMarketingMessageTemplate_Animated":       2,
		"k_EMarketingMessageTemplate_Featured_Video": 3,
		"k_EMarketingMessageTemplate_DLC_Override":   4,
		"k_EMarketingMessageTemplate_Replay":         5,
		"k_EMarketingMessageTemplate_MAX":            6,
	}
)

func (x EMarketingMessageTemplateType) Enum() *EMarketingMessageTemplateType {
	p := new(EMarketingMessageTemplateType)
	*p = x
	return p
}

func (x EMarketingMessageTemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMarketingMessageTemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_marketingmessages_steamclient_proto_enumTypes[3].Descriptor()
}

func (EMarketingMessageTemplateType) Type() protoreflect.EnumType {
	return &file_steammessages_marketingmessages_steamclient_proto_enumTypes[3]
}

func (x EMarketingMessageTemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMarketingMessageTemplateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMarketingMessageTemplateType(num)
	return nil
}

// Deprecated: Use EMarketingMessageTemplateType.Descriptor instead.
func (EMarketingMessageTemplateType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{3}
}

type EMarketingMessageLookupType int32

const (
	EMarketingMessageLookupType_k_EMarketingMessageLookupInvalid         EMarketingMessageLookupType = 0
	EMarketingMessageLookupType_k_EMarketingMessageLookupByGID           EMarketingMessageLookupType = 1
	EMarketingMessageLookupType_k_EMarketingMessageLookupActive          EMarketingMessageLookupType = 2
	EMarketingMessageLookupType_k_EMarketingMessageLookupByTitleWithType EMarketingMessageLookupType = 3
	EMarketingMessageLookupType_k_EMarketingMessageLookupByGIDList       EMarketingMessageLookupType = 4
)

// Enum value maps for EMarketingMessageLookupType.
var (
	EMarketingMessageLookupType_name = map[int32]string{
		0: "k_EMarketingMessageLookupInvalid",
		1: "k_EMarketingMessageLookupByGID",
		2: "k_EMarketingMessageLookupActive",
		3: "k_EMarketingMessageLookupByTitleWithType",
		4: "k_EMarketingMessageLookupByGIDList",
	}
	EMarketingMessageLookupType_value = map[string]int32{
		"k_EMarketingMessageLookupInvalid":         0,
		"k_EMarketingMessageLookupByGID":           1,
		"k_EMarketingMessageLookupActive":          2,
		"k_EMarketingMessageLookupByTitleWithType": 3,
		"k_EMarketingMessageLookupByGIDList":       4,
	}
)

func (x EMarketingMessageLookupType) Enum() *EMarketingMessageLookupType {
	p := new(EMarketingMessageLookupType)
	*p = x
	return p
}

func (x EMarketingMessageLookupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMarketingMessageLookupType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_marketingmessages_steamclient_proto_enumTypes[4].Descriptor()
}

func (EMarketingMessageLookupType) Type() protoreflect.EnumType {
	return &file_steammessages_marketingmessages_steamclient_proto_enumTypes[4]
}

func (x EMarketingMessageLookupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMarketingMessageLookupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMarketingMessageLookupType(num)
	return nil
}

// Deprecated: Use EMarketingMessageLookupType.Descriptor instead.
func (EMarketingMessageLookupType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{4}
}

type CMarketingMessages_GetActiveMarketingMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country       *string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	AnonymousUser *bool   `protobuf:"varint,2,opt,name=anonymous_user,json=anonymousUser" json:"anonymous_user,omitempty"`
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Request) Reset() {
	*x = CMarketingMessages_GetActiveMarketingMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetActiveMarketingMessages_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetActiveMarketingMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetActiveMarketingMessages_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetActiveMarketingMessages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Request) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Request) GetAnonymousUser() bool {
	if x != nil && x.AnonymousUser != nil {
		return *x.AnonymousUser
	}
	return false
}

type CMarketingMessageProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid                             *uint64                           `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Title                           *string                           `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Type                            *EMarketingMessageType            `protobuf:"varint,3,opt,name=type,enum=EMarketingMessageType,def=0" json:"type,omitempty"`
	Visibility                      *EMarketingMessageVisibility      `protobuf:"varint,4,opt,name=visibility,enum=EMarketingMessageVisibility,def=1" json:"visibility,omitempty"`
	Priority                        *uint32                           `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	AssociationType                 *EMarketingMessageAssociationType `protobuf:"varint,6,opt,name=association_type,json=associationType,enum=EMarketingMessageAssociationType,def=0" json:"association_type,omitempty"`
	AssociatedId                    *uint32                           `protobuf:"varint,7,opt,name=associated_id,json=associatedId" json:"associated_id,omitempty"`
	AssociatedName                  *string                           `protobuf:"bytes,8,opt,name=associated_name,json=associatedName" json:"associated_name,omitempty"`
	StartDate                       *uint32                           `protobuf:"varint,9,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate                         *uint32                           `protobuf:"varint,10,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	CountryAllow                    *string                           `protobuf:"bytes,11,opt,name=country_allow,json=countryAllow" json:"country_allow,omitempty"`
	CountryDeny                     *string                           `protobuf:"bytes,12,opt,name=country_deny,json=countryDeny" json:"country_deny,omitempty"`
	OwnershipRestrictionsOverridden *bool                             `protobuf:"varint,13,opt,name=ownership_restrictions_overridden,json=ownershipRestrictionsOverridden" json:"ownership_restrictions_overridden,omitempty"`
	MustOwnAppid                    *uint32                           `protobuf:"varint,14,opt,name=must_own_appid,json=mustOwnAppid" json:"must_own_appid,omitempty"`
	MustNotOwnAppid                 *uint32                           `protobuf:"varint,15,opt,name=must_not_own_appid,json=mustNotOwnAppid" json:"must_not_own_appid,omitempty"`
	MustOwnPackageid                *uint32                           `protobuf:"varint,16,opt,name=must_own_packageid,json=mustOwnPackageid" json:"must_own_packageid,omitempty"`
	MustNotOwnPackageid             *uint32                           `protobuf:"varint,17,opt,name=must_not_own_packageid,json=mustNotOwnPackageid" json:"must_not_own_packageid,omitempty"`
	MustHaveLaunchedAppid           *uint32                           `protobuf:"varint,18,opt,name=must_have_launched_appid,json=mustHaveLaunchedAppid" json:"must_have_launched_appid,omitempty"`
	AdditionalRestrictions          *string                           `protobuf:"bytes,19,opt,name=additional_restrictions,json=additionalRestrictions" json:"additional_restrictions,omitempty"`
	TemplateType                    *string                           `protobuf:"bytes,20,opt,name=template_type,json=templateType" json:"template_type,omitempty"`
	TemplateVars                    *string                           `protobuf:"bytes,21,opt,name=template_vars,json=templateVars" json:"template_vars,omitempty"`
	Flags                           *uint32                           `protobuf:"varint,22,opt,name=flags" json:"flags,omitempty"`
	CreatorName                     *string                           `protobuf:"bytes,23,opt,name=creator_name,json=creatorName" json:"creator_name,omitempty"`
	TemplateVarsJson                *string                           `protobuf:"bytes,24,opt,name=template_vars_json,json=templateVarsJson" json:"template_vars_json,omitempty"`
	AdditionalRestrictionsJson      *string                           `protobuf:"bytes,25,opt,name=additional_restrictions_json,json=additionalRestrictionsJson" json:"additional_restrictions_json,omitempty"`
}

// Default values for CMarketingMessageProto fields.
const (
	Default_CMarketingMessageProto_Type            = EMarketingMessageType_k_EMarketingMessageInvalid
	Default_CMarketingMessageProto_Visibility      = EMarketingMessageVisibility_k_EMarketingMessageVisibleBeta
	Default_CMarketingMessageProto_AssociationType = EMarketingMessageAssociationType_k_EMarketingMessageNoAssociation
)

func (x *CMarketingMessageProto) Reset() {
	*x = CMarketingMessageProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessageProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessageProto) ProtoMessage() {}

func (x *CMarketingMessageProto) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessageProto.ProtoReflect.Descriptor instead.
func (*CMarketingMessageProto) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CMarketingMessageProto) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessageProto) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CMarketingMessageProto) GetType() EMarketingMessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMarketingMessageProto_Type
}

func (x *CMarketingMessageProto) GetVisibility() EMarketingMessageVisibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Default_CMarketingMessageProto_Visibility
}

func (x *CMarketingMessageProto) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CMarketingMessageProto) GetAssociationType() EMarketingMessageAssociationType {
	if x != nil && x.AssociationType != nil {
		return *x.AssociationType
	}
	return Default_CMarketingMessageProto_AssociationType
}

func (x *CMarketingMessageProto) GetAssociatedId() uint32 {
	if x != nil && x.AssociatedId != nil {
		return *x.AssociatedId
	}
	return 0
}

func (x *CMarketingMessageProto) GetAssociatedName() string {
	if x != nil && x.AssociatedName != nil {
		return *x.AssociatedName
	}
	return ""
}

func (x *CMarketingMessageProto) GetStartDate() uint32 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

func (x *CMarketingMessageProto) GetEndDate() uint32 {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return 0
}

func (x *CMarketingMessageProto) GetCountryAllow() string {
	if x != nil && x.CountryAllow != nil {
		return *x.CountryAllow
	}
	return ""
}

func (x *CMarketingMessageProto) GetCountryDeny() string {
	if x != nil && x.CountryDeny != nil {
		return *x.CountryDeny
	}
	return ""
}

func (x *CMarketingMessageProto) GetOwnershipRestrictionsOverridden() bool {
	if x != nil && x.OwnershipRestrictionsOverridden != nil {
		return *x.OwnershipRestrictionsOverridden
	}
	return false
}

func (x *CMarketingMessageProto) GetMustOwnAppid() uint32 {
	if x != nil && x.MustOwnAppid != nil {
		return *x.MustOwnAppid
	}
	return 0
}

func (x *CMarketingMessageProto) GetMustNotOwnAppid() uint32 {
	if x != nil && x.MustNotOwnAppid != nil {
		return *x.MustNotOwnAppid
	}
	return 0
}

func (x *CMarketingMessageProto) GetMustOwnPackageid() uint32 {
	if x != nil && x.MustOwnPackageid != nil {
		return *x.MustOwnPackageid
	}
	return 0
}

func (x *CMarketingMessageProto) GetMustNotOwnPackageid() uint32 {
	if x != nil && x.MustNotOwnPackageid != nil {
		return *x.MustNotOwnPackageid
	}
	return 0
}

func (x *CMarketingMessageProto) GetMustHaveLaunchedAppid() uint32 {
	if x != nil && x.MustHaveLaunchedAppid != nil {
		return *x.MustHaveLaunchedAppid
	}
	return 0
}

func (x *CMarketingMessageProto) GetAdditionalRestrictions() string {
	if x != nil && x.AdditionalRestrictions != nil {
		return *x.AdditionalRestrictions
	}
	return ""
}

func (x *CMarketingMessageProto) GetTemplateType() string {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return ""
}

func (x *CMarketingMessageProto) GetTemplateVars() string {
	if x != nil && x.TemplateVars != nil {
		return *x.TemplateVars
	}
	return ""
}

func (x *CMarketingMessageProto) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMarketingMessageProto) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *CMarketingMessageProto) GetTemplateVarsJson() string {
	if x != nil && x.TemplateVarsJson != nil {
		return *x.TemplateVarsJson
	}
	return ""
}

func (x *CMarketingMessageProto) GetAdditionalRestrictionsJson() string {
	if x != nil && x.AdditionalRestrictionsJson != nil {
		return *x.AdditionalRestrictionsJson
	}
	return ""
}

type CMarketingMessages_GetActiveMarketingMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages           []*CMarketingMessageProto `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	TimeNextMessageAge *uint32                   `protobuf:"varint,2,opt,name=time_next_message_age,json=timeNextMessageAge" json:"time_next_message_age,omitempty"`
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Response) Reset() {
	*x = CMarketingMessages_GetActiveMarketingMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetActiveMarketingMessages_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetActiveMarketingMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetActiveMarketingMessages_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetActiveMarketingMessages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Response) GetMessages() []*CMarketingMessageProto {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CMarketingMessages_GetActiveMarketingMessages_Response) GetTimeNextMessageAge() uint32 {
	if x != nil && x.TimeNextMessageAge != nil {
		return *x.TimeNextMessageAge
	}
	return 0
}

type CMarketingMessages_GetPastMarketingMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPastDays *uint32 `protobuf:"varint,1,opt,name=start_past_days,json=startPastDays" json:"start_past_days,omitempty"`
	UptoPastDays  *uint32 `protobuf:"varint,2,opt,name=upto_past_days,json=uptoPastDays" json:"upto_past_days,omitempty"`
}

func (x *CMarketingMessages_GetPastMarketingMessages_Request) Reset() {
	*x = CMarketingMessages_GetPastMarketingMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetPastMarketingMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetPastMarketingMessages_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetPastMarketingMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetPastMarketingMessages_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetPastMarketingMessages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CMarketingMessages_GetPastMarketingMessages_Request) GetStartPastDays() uint32 {
	if x != nil && x.StartPastDays != nil {
		return *x.StartPastDays
	}
	return 0
}

func (x *CMarketingMessages_GetPastMarketingMessages_Request) GetUptoPastDays() uint32 {
	if x != nil && x.UptoPastDays != nil {
		return *x.UptoPastDays
	}
	return 0
}

type CMarketingMessages_GetPastMarketingMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CMarketingMessageProto `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMarketingMessages_GetPastMarketingMessages_Response) Reset() {
	*x = CMarketingMessages_GetPastMarketingMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetPastMarketingMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetPastMarketingMessages_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetPastMarketingMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetPastMarketingMessages_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetPastMarketingMessages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CMarketingMessages_GetPastMarketingMessages_Response) GetMessages() []*CMarketingMessageProto {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMarketingMessages_GetMarketingMessagesForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeSeenMessages  *bool                       `protobuf:"varint,1,opt,name=include_seen_messages,json=includeSeenMessages" json:"include_seen_messages,omitempty"`
	CountryCode          *string                     `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Elanguage            *int32                      `protobuf:"varint,3,opt,name=elanguage" json:"elanguage,omitempty"`
	OperatingSystem      *int32                      `protobuf:"varint,4,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	ClientPackageVersion *int32                      `protobuf:"varint,5,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
	Context              *StoreBrowseContext         `protobuf:"bytes,6,opt,name=context" json:"context,omitempty"`
	DataRequest          *StoreBrowseItemDataRequest `protobuf:"bytes,7,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) Reset() {
	*x = CMarketingMessages_GetMarketingMessagesForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessagesForUser_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessagesForUser_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessagesForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetIncludeSeenMessages() bool {
	if x != nil && x.IncludeSeenMessages != nil {
		return *x.IncludeSeenMessages
	}
	return false
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetElanguage() int32 {
	if x != nil && x.Elanguage != nil {
		return *x.Elanguage
	}
	return 0
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetOperatingSystem() int32 {
	if x != nil && x.OperatingSystem != nil {
		return *x.OperatingSystem
	}
	return 0
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetClientPackageVersion() int32 {
	if x != nil && x.ClientPackageVersion != nil {
		return *x.ClientPackageVersion
	}
	return 0
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CDisplayMarketingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid              *uint64                `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Title            *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Type             *EMarketingMessageType `protobuf:"varint,3,opt,name=type,enum=EMarketingMessageType,def=0" json:"type,omitempty"`
	AssociatedItemId *StoreItemID           `protobuf:"bytes,4,opt,name=associated_item_id,json=associatedItemId" json:"associated_item_id,omitempty"`
	AssociatedItem   *StoreItem             `protobuf:"bytes,5,opt,name=associated_item,json=associatedItem" json:"associated_item,omitempty"`
	AssociatedName   *string                `protobuf:"bytes,6,opt,name=associated_name,json=associatedName" json:"associated_name,omitempty"`
	TemplateType     *string                `protobuf:"bytes,10,opt,name=template_type,json=templateType" json:"template_type,omitempty"`
	TemplateVarsJson *string                `protobuf:"bytes,11,opt,name=template_vars_json,json=templateVarsJson" json:"template_vars_json,omitempty"`
}

// Default values for CDisplayMarketingMessage fields.
const (
	Default_CDisplayMarketingMessage_Type = EMarketingMessageType_k_EMarketingMessageInvalid
)

func (x *CDisplayMarketingMessage) Reset() {
	*x = CDisplayMarketingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDisplayMarketingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDisplayMarketingMessage) ProtoMessage() {}

func (x *CDisplayMarketingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDisplayMarketingMessage.ProtoReflect.Descriptor instead.
func (*CDisplayMarketingMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CDisplayMarketingMessage) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CDisplayMarketingMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CDisplayMarketingMessage) GetType() EMarketingMessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CDisplayMarketingMessage_Type
}

func (x *CDisplayMarketingMessage) GetAssociatedItemId() *StoreItemID {
	if x != nil {
		return x.AssociatedItemId
	}
	return nil
}

func (x *CDisplayMarketingMessage) GetAssociatedItem() *StoreItem {
	if x != nil {
		return x.AssociatedItem
	}
	return nil
}

func (x *CDisplayMarketingMessage) GetAssociatedName() string {
	if x != nil && x.AssociatedName != nil {
		return *x.AssociatedName
	}
	return ""
}

func (x *CDisplayMarketingMessage) GetTemplateType() string {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return ""
}

func (x *CDisplayMarketingMessage) GetTemplateVarsJson() string {
	if x != nil && x.TemplateVarsJson != nil {
		return *x.TemplateVarsJson
	}
	return ""
}

type CMarketingMessages_GetMarketingMessagesForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response) Reset() {
	*x = CMarketingMessages_GetMarketingMessagesForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessagesForUser_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessagesForUser_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessagesForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response) GetMessages() []*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMarketingMessages_DoesUserHavePendingMarketingMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode          *string `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Elanguage            *int32  `protobuf:"varint,3,opt,name=elanguage" json:"elanguage,omitempty"`
	OperatingSystem      *int32  `protobuf:"varint,4,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	ClientPackageVersion *int32  `protobuf:"varint,5,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) Reset() {
	*x = CMarketingMessages_DoesUserHavePendingMarketingMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) ProtoMessage() {}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) GetElanguage() int32 {
	if x != nil && x.Elanguage != nil {
		return *x.Elanguage
	}
	return 0
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) GetOperatingSystem() int32 {
	if x != nil && x.OperatingSystem != nil {
		return *x.OperatingSystem
	}
	return 0
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) GetClientPackageVersion() int32 {
	if x != nil && x.ClientPackageVersion != nil {
		return *x.ClientPackageVersion
	}
	return 0
}

type CMarketingMessages_DoesUserHavePendingMarketingMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasPendingMessages  *bool  `protobuf:"varint,1,opt,name=has_pending_messages,json=hasPendingMessages" json:"has_pending_messages,omitempty"`
	PendingMessageCount *int32 `protobuf:"varint,2,opt,name=pending_message_count,json=pendingMessageCount" json:"pending_message_count,omitempty"`
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) Reset() {
	*x = CMarketingMessages_DoesUserHavePendingMarketingMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) ProtoMessage() {}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_DoesUserHavePendingMarketingMessages_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) GetHasPendingMessages() bool {
	if x != nil && x.HasPendingMessages != nil {
		return *x.HasPendingMessages
	}
	return false
}

func (x *CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) GetPendingMessageCount() int32 {
	if x != nil && x.PendingMessageCount != nil {
		return *x.PendingMessageCount
	}
	return 0
}

type CMarketingMessages_GetDisplayMarketingMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid         *uint64                     `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Context     *StoreBrowseContext         `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	DataRequest *StoreBrowseItemDataRequest `protobuf:"bytes,3,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Request) Reset() {
	*x = CMarketingMessages_GetDisplayMarketingMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetDisplayMarketingMessage_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetDisplayMarketingMessage_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetDisplayMarketingMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CMarketingMessages_GetDisplayMarketingMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *CDisplayMarketingMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Response) Reset() {
	*x = CMarketingMessages_GetDisplayMarketingMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetDisplayMarketingMessage_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetDisplayMarketingMessage_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetDisplayMarketingMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CMarketingMessages_GetDisplayMarketingMessage_Response) GetMessage() *CDisplayMarketingMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type CMarketingMessages_MarkMessageSeen_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid          *uint64                        `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	DisplayIndex *uint32                        `protobuf:"varint,2,opt,name=display_index,json=displayIndex,def=0" json:"display_index,omitempty"`
	TemplateType *EMarketingMessageTemplateType `protobuf:"varint,3,opt,name=template_type,json=templateType,enum=EMarketingMessageTemplateType,def=0" json:"template_type,omitempty"`
}

// Default values for CMarketingMessages_MarkMessageSeen_Notification fields.
const (
	Default_CMarketingMessages_MarkMessageSeen_Notification_DisplayIndex = uint32(0)
	Default_CMarketingMessages_MarkMessageSeen_Notification_TemplateType = EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Unknown
)

func (x *CMarketingMessages_MarkMessageSeen_Notification) Reset() {
	*x = CMarketingMessages_MarkMessageSeen_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_MarkMessageSeen_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_MarkMessageSeen_Notification) ProtoMessage() {}

func (x *CMarketingMessages_MarkMessageSeen_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_MarkMessageSeen_Notification.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_MarkMessageSeen_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CMarketingMessages_MarkMessageSeen_Notification) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessages_MarkMessageSeen_Notification) GetDisplayIndex() uint32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return Default_CMarketingMessages_MarkMessageSeen_Notification_DisplayIndex
}

func (x *CMarketingMessages_MarkMessageSeen_Notification) GetTemplateType() EMarketingMessageTemplateType {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return Default_CMarketingMessages_MarkMessageSeen_Notification_TemplateType
}

type CMarketingMessages_GetMarketingMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessage_Request) Reset() {
	*x = CMarketingMessages_GetMarketingMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessage_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessage_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CMarketingMessages_GetMarketingMessage_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

type CMarketingMessages_GetMarketingMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *CMarketingMessageProto `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessage_Response) Reset() {
	*x = CMarketingMessages_GetMarketingMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessage_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessage_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CMarketingMessages_GetMarketingMessage_Response) GetMessage() *CMarketingMessageProto {
	if x != nil {
		return x.Message
	}
	return nil
}

type CMarketingMessages_CreateMarketingMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  *CMarketingMessageProto `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	FromJson *bool                   `protobuf:"varint,2,opt,name=from_json,json=fromJson" json:"from_json,omitempty"`
}

func (x *CMarketingMessages_CreateMarketingMessage_Request) Reset() {
	*x = CMarketingMessages_CreateMarketingMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_CreateMarketingMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_CreateMarketingMessage_Request) ProtoMessage() {}

func (x *CMarketingMessages_CreateMarketingMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_CreateMarketingMessage_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_CreateMarketingMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CMarketingMessages_CreateMarketingMessage_Request) GetMessage() *CMarketingMessageProto {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CMarketingMessages_CreateMarketingMessage_Request) GetFromJson() bool {
	if x != nil && x.FromJson != nil {
		return *x.FromJson
	}
	return false
}

type CMarketingMessages_CreateMarketingMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
}

func (x *CMarketingMessages_CreateMarketingMessage_Response) Reset() {
	*x = CMarketingMessages_CreateMarketingMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_CreateMarketingMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_CreateMarketingMessage_Response) ProtoMessage() {}

func (x *CMarketingMessages_CreateMarketingMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_CreateMarketingMessage_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_CreateMarketingMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CMarketingMessages_CreateMarketingMessage_Response) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

type CMarketingMessages_UpdateMarketingMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid      *uint64                 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Message  *CMarketingMessageProto `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	FromJson *bool                   `protobuf:"varint,3,opt,name=from_json,json=fromJson" json:"from_json,omitempty"`
}

func (x *CMarketingMessages_UpdateMarketingMessage_Request) Reset() {
	*x = CMarketingMessages_UpdateMarketingMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_UpdateMarketingMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_UpdateMarketingMessage_Request) ProtoMessage() {}

func (x *CMarketingMessages_UpdateMarketingMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_UpdateMarketingMessage_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_UpdateMarketingMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CMarketingMessages_UpdateMarketingMessage_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessages_UpdateMarketingMessage_Request) GetMessage() *CMarketingMessageProto {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CMarketingMessages_UpdateMarketingMessage_Request) GetFromJson() bool {
	if x != nil && x.FromJson != nil {
		return *x.FromJson
	}
	return false
}

type CMarketingMessages_UpdateMarketingMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMarketingMessages_UpdateMarketingMessage_Response) Reset() {
	*x = CMarketingMessages_UpdateMarketingMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_UpdateMarketingMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_UpdateMarketingMessage_Response) ProtoMessage() {}

func (x *CMarketingMessages_UpdateMarketingMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_UpdateMarketingMessage_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_UpdateMarketingMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{18}
}

type CMarketingMessages_DeleteMarketingMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
}

func (x *CMarketingMessages_DeleteMarketingMessage_Request) Reset() {
	*x = CMarketingMessages_DeleteMarketingMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_DeleteMarketingMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_DeleteMarketingMessage_Request) ProtoMessage() {}

func (x *CMarketingMessages_DeleteMarketingMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_DeleteMarketingMessage_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_DeleteMarketingMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CMarketingMessages_DeleteMarketingMessage_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

type CMarketingMessages_DeleteMarketingMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMarketingMessages_DeleteMarketingMessage_Response) Reset() {
	*x = CMarketingMessages_DeleteMarketingMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_DeleteMarketingMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_DeleteMarketingMessage_Response) ProtoMessage() {}

func (x *CMarketingMessages_DeleteMarketingMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_DeleteMarketingMessage_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_DeleteMarketingMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{20}
}

type CMarketingMessages_FindMarketingMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LookupType  *EMarketingMessageLookupType `protobuf:"varint,1,opt,name=lookup_type,json=lookupType,enum=EMarketingMessageLookupType,def=0" json:"lookup_type,omitempty"`
	Gid         *uint64                      `protobuf:"fixed64,2,opt,name=gid" json:"gid,omitempty"`
	MessageType *EMarketingMessageType       `protobuf:"varint,3,opt,name=message_type,json=messageType,enum=EMarketingMessageType,def=0" json:"message_type,omitempty"`
	Gidlist     []uint64                     `protobuf:"fixed64,4,rep,name=gidlist" json:"gidlist,omitempty"`
	Title       *string                      `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
}

// Default values for CMarketingMessages_FindMarketingMessages_Request fields.
const (
	Default_CMarketingMessages_FindMarketingMessages_Request_LookupType  = EMarketingMessageLookupType_k_EMarketingMessageLookupInvalid
	Default_CMarketingMessages_FindMarketingMessages_Request_MessageType = EMarketingMessageType_k_EMarketingMessageInvalid
)

func (x *CMarketingMessages_FindMarketingMessages_Request) Reset() {
	*x = CMarketingMessages_FindMarketingMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_FindMarketingMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_FindMarketingMessages_Request) ProtoMessage() {}

func (x *CMarketingMessages_FindMarketingMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_FindMarketingMessages_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_FindMarketingMessages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CMarketingMessages_FindMarketingMessages_Request) GetLookupType() EMarketingMessageLookupType {
	if x != nil && x.LookupType != nil {
		return *x.LookupType
	}
	return Default_CMarketingMessages_FindMarketingMessages_Request_LookupType
}

func (x *CMarketingMessages_FindMarketingMessages_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessages_FindMarketingMessages_Request) GetMessageType() EMarketingMessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return Default_CMarketingMessages_FindMarketingMessages_Request_MessageType
}

func (x *CMarketingMessages_FindMarketingMessages_Request) GetGidlist() []uint64 {
	if x != nil {
		return x.Gidlist
	}
	return nil
}

func (x *CMarketingMessages_FindMarketingMessages_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CMarketingMessages_FindMarketingMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CMarketingMessageProto `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMarketingMessages_FindMarketingMessages_Response) Reset() {
	*x = CMarketingMessages_FindMarketingMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_FindMarketingMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_FindMarketingMessages_Response) ProtoMessage() {}

func (x *CMarketingMessages_FindMarketingMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_FindMarketingMessages_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_FindMarketingMessages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CMarketingMessages_FindMarketingMessages_Response) GetMessages() []*CMarketingMessageProto {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMarketingMessages_GetMarketingMessageViewerStats_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Request) Reset() {
	*x = CMarketingMessages_GetMarketingMessageViewerStats_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessageViewerStats_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessageViewerStats_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessageViewerStats_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

type CMarketingMessageHourlyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtTimeHour   *uint32                        `protobuf:"varint,1,opt,name=rt_time_hour,json=rtTimeHour" json:"rt_time_hour,omitempty"`
	SeenCount    *uint32                        `protobuf:"varint,2,opt,name=seen_count,json=seenCount" json:"seen_count,omitempty"`
	TemplateType *EMarketingMessageTemplateType `protobuf:"varint,3,opt,name=template_type,json=templateType,enum=EMarketingMessageTemplateType,def=0" json:"template_type,omitempty"`
	DisplayIndex *uint32                        `protobuf:"varint,4,opt,name=display_index,json=displayIndex" json:"display_index,omitempty"`
}

// Default values for CMarketingMessageHourlyStats fields.
const (
	Default_CMarketingMessageHourlyStats_TemplateType = EMarketingMessageTemplateType_k_EMarketingMessageTemplate_Unknown
)

func (x *CMarketingMessageHourlyStats) Reset() {
	*x = CMarketingMessageHourlyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessageHourlyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessageHourlyStats) ProtoMessage() {}

func (x *CMarketingMessageHourlyStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessageHourlyStats.ProtoReflect.Descriptor instead.
func (*CMarketingMessageHourlyStats) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CMarketingMessageHourlyStats) GetRtTimeHour() uint32 {
	if x != nil && x.RtTimeHour != nil {
		return *x.RtTimeHour
	}
	return 0
}

func (x *CMarketingMessageHourlyStats) GetSeenCount() uint32 {
	if x != nil && x.SeenCount != nil {
		return *x.SeenCount
	}
	return 0
}

func (x *CMarketingMessageHourlyStats) GetTemplateType() EMarketingMessageTemplateType {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return Default_CMarketingMessageHourlyStats_TemplateType
}

func (x *CMarketingMessageHourlyStats) GetDisplayIndex() uint32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

type CMarketingMessages_GetMarketingMessageViewerStats_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*CMarketingMessageHourlyStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Response) Reset() {
	*x = CMarketingMessages_GetMarketingMessageViewerStats_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessageViewerStats_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessageViewerStats_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessageViewerStats_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CMarketingMessages_GetMarketingMessageViewerStats_Response) GetStats() []*CMarketingMessageHourlyStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtStartTime *uint32 `protobuf:"varint,1,opt,name=rt_start_time,json=rtStartTime" json:"rt_start_time,omitempty"`
	RtEndTime   *uint32 `protobuf:"varint,2,opt,name=rt_end_time,json=rtEndTime" json:"rt_end_time,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) Reset() {
	*x = CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) GetRtStartTime() uint32 {
	if x != nil && x.RtStartTime != nil {
		return *x.RtStartTime
	}
	return 0
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) GetRtEndTime() uint32 {
	if x != nil && x.RtEndTime != nil {
		return *x.RtEndTime
	}
	return 0
}

type CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*CMarketingMessageHourlyStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) Reset() {
	*x = CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) GetStats() []*CMarketingMessageHourlyStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMarketingMessages_GetPartnerReadyToPublishMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partnerid *uint32 `protobuf:"varint,1,opt,name=partnerid" json:"partnerid,omitempty"`
}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Request) Reset() {
	*x = CMarketingMessages_GetPartnerReadyToPublishMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetPartnerReadyToPublishMessages_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetPartnerReadyToPublishMessages_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetPartnerReadyToPublishMessages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Request) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

type CMarketingMessages_GetPartnerReadyToPublishMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CDisplayMarketingMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Response) Reset() {
	*x = CMarketingMessages_GetPartnerReadyToPublishMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetPartnerReadyToPublishMessages_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetPartnerReadyToPublishMessages_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetPartnerReadyToPublishMessages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CMarketingMessages_GetPartnerReadyToPublishMessages_Response) GetMessages() []*CDisplayMarketingMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMarketingMessages_PartnerPublishMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid       *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Partnerid *uint32 `protobuf:"varint,2,opt,name=partnerid" json:"partnerid,omitempty"`
}

func (x *CMarketingMessages_PartnerPublishMessage_Request) Reset() {
	*x = CMarketingMessages_PartnerPublishMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_PartnerPublishMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_PartnerPublishMessage_Request) ProtoMessage() {}

func (x *CMarketingMessages_PartnerPublishMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_PartnerPublishMessage_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_PartnerPublishMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CMarketingMessages_PartnerPublishMessage_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessages_PartnerPublishMessage_Request) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

type CMarketingMessages_PartnerPublishMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMarketingMessages_PartnerPublishMessage_Response) Reset() {
	*x = CMarketingMessages_PartnerPublishMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_PartnerPublishMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_PartnerPublishMessage_Response) ProtoMessage() {}

func (x *CMarketingMessages_PartnerPublishMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_PartnerPublishMessage_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_PartnerPublishMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{31}
}

type CMarketingMessages_GetPartnerMessagePreview_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid       *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Partnerid *uint32 `protobuf:"varint,2,opt,name=partnerid" json:"partnerid,omitempty"`
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Request) Reset() {
	*x = CMarketingMessages_GetPartnerMessagePreview_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetPartnerMessagePreview_Request) ProtoMessage() {}

func (x *CMarketingMessages_GetPartnerMessagePreview_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetPartnerMessagePreview_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetPartnerMessagePreview_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Request) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Request) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

type CMarketingMessages_GetPartnerMessagePreview_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *CMarketingMessageProto `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Response) Reset() {
	*x = CMarketingMessages_GetPartnerMessagePreview_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetPartnerMessagePreview_Response) ProtoMessage() {}

func (x *CMarketingMessages_GetPartnerMessagePreview_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetPartnerMessagePreview_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetPartnerMessagePreview_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CMarketingMessages_GetPartnerMessagePreview_Response) GetMessage() *CMarketingMessageProto {
	if x != nil {
		return x.Message
	}
	return nil
}

type CMarketingMessage_GetMarketingMessagesForPartner_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partnerid *uint32 `protobuf:"varint,1,opt,name=partnerid" json:"partnerid,omitempty"`
}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Request) Reset() {
	*x = CMarketingMessage_GetMarketingMessagesForPartner_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessage_GetMarketingMessagesForPartner_Request) ProtoMessage() {}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessage_GetMarketingMessagesForPartner_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessage_GetMarketingMessagesForPartner_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Request) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

type CMarketingMessage_GetMarketingMessagesForPartner_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CMarketingMessageProto `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Response) Reset() {
	*x = CMarketingMessage_GetMarketingMessagesForPartner_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessage_GetMarketingMessagesForPartner_Response) ProtoMessage() {}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessage_GetMarketingMessagesForPartner_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessage_GetMarketingMessagesForPartner_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CMarketingMessage_GetMarketingMessagesForPartner_Response) GetMessages() []*CMarketingMessageProto {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMarketingMessage_GetMarketingMessagesForApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids []uint32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Request) Reset() {
	*x = CMarketingMessage_GetMarketingMessagesForApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessage_GetMarketingMessagesForApps_Request) ProtoMessage() {}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessage_GetMarketingMessagesForApps_Request.ProtoReflect.Descriptor instead.
func (*CMarketingMessage_GetMarketingMessagesForApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Request) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CMarketingMessage_GetMarketingMessagesForApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CMarketingMessageProto `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Response) Reset() {
	*x = CMarketingMessage_GetMarketingMessagesForApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessage_GetMarketingMessagesForApps_Response) ProtoMessage() {}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessage_GetMarketingMessagesForApps_Response.ProtoReflect.Descriptor instead.
func (*CMarketingMessage_GetMarketingMessagesForApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CMarketingMessage_GetMarketingMessagesForApps_Response) GetMessages() []*CMarketingMessageProto {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlreadySeen *bool                     `protobuf:"varint,1,opt,name=already_seen,json=alreadySeen" json:"already_seen,omitempty"`
	Message     *CDisplayMarketingMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) Reset() {
	*x = CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) ProtoMessage() {
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_marketingmessages_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser.ProtoReflect.Descriptor instead.
func (*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) Descriptor() ([]byte, []int) {
	return file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) GetAlreadySeen() bool {
	if x != nil && x.AlreadySeen != nil {
		return *x.AlreadySeen
	}
	return false
}

func (x *CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser) GetMessage() *CDisplayMarketingMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_steammessages_marketingmessages_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_marketingmessages_steamclient_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x35, 0x43, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x22, 0xa9, 0x09, 0x0a, 0x16, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a,
	0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x64, 0x65, 0x6e, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x4a, 0x0a, 0x21, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73,
	0x74, 0x4f, 0x77, 0x6e, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x4f, 0x77,
	0x6e, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6f,
	0x77, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x75, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x4f, 0x77, 0x6e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x75, 0x73,
	0x74, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x75, 0x73,
	0x74, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xa0,
	0x01, 0x0a, 0x36, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74,
	0x69, 0x6d, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x67,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x33, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x70, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x74, 0x6f, 0x50,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x73, 0x22, 0x6b, 0x0a, 0x34, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x36, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x43, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x52, 0x10, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x9a,
	0x02, 0x0a, 0x37, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x71, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x3f,
	0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x44, 0x6f, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x40, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x6f, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x61, 0x76, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a,
	0x35, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x36, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x2f, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x68, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x45, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x6b, 0x5f, 0x45,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42,
	0x0a, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x22, 0x64, 0x0a, 0x2f, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x31, 0x43, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x46,
	0x0a, 0x32, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x31, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x34,
	0x0a, 0x32, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x31, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x32, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xac, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x07, 0x67, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x68, 0x0a, 0x31, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x39, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x1c, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x71, 0x0a, 0x3a, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x3f, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x74, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x40, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5b,
	0x0a, 0x3b, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x3c, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x43, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x62, 0x0a, 0x30, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x31, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x33, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x69, 0x64, 0x22, 0x69, 0x0a, 0x34, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a,
	0x38, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x39, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x35, 0x43, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x36, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2a, 0xde, 0x04, 0x0a, 0x15, 0x45, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x77, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f,
	0x77, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x51, 0x75,
	0x69, 0x74, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x4a, 0x73, 0x4b, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x64, 0x77,
	0x65, 0x65, 0x6b, 0x44, 0x65, 0x61, 0x6c, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x65, 0x77, 0x44, 0x4c, 0x43, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x10, 0x0e, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x10, 0x0f,
	0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x10, 0x2a, 0x99, 0x01, 0x0a, 0x1b, 0x45,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x61, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x10, 0x03, 0x2a, 0x9f, 0x02, 0x0a, 0x20, 0x45, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x2a, 0xc4, 0x02, 0x0a, 0x1d, 0x45, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x44, 0x4c, 0x43, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x06, 0x2a,
	0xe2, 0x01, 0x0a, 0x1b, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x42, 0x79, 0x47, 0x49, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x2c,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x47, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0x04, 0x32, 0xa3, 0x16, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x43, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x24, 0x44, 0x6f, 0x65, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x76, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x40, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x6f, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61,
	0x76, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x41, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x6f, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x61, 0x76, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x36, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x30, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x43, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x46, 0x69, 0x6e,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x43,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40,
	0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x34, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x39, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x12, 0x36, 0x2e, 0x43, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x43, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_marketingmessages_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_marketingmessages_steamclient_proto_rawDescData = file_steammessages_marketingmessages_steamclient_proto_rawDesc
)

func file_steammessages_marketingmessages_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_marketingmessages_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_marketingmessages_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_marketingmessages_steamclient_proto_rawDescData)
	})
	return file_steammessages_marketingmessages_steamclient_proto_rawDescData
}

var file_steammessages_marketingmessages_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_steammessages_marketingmessages_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_steammessages_marketingmessages_steamclient_proto_goTypes = []any{
	(EMarketingMessageType)(0),                                                              // 0: EMarketingMessageType
	(EMarketingMessageVisibility)(0),                                                        // 1: EMarketingMessageVisibility
	(EMarketingMessageAssociationType)(0),                                                   // 2: EMarketingMessageAssociationType
	(EMarketingMessageTemplateType)(0),                                                      // 3: EMarketingMessageTemplateType
	(EMarketingMessageLookupType)(0),                                                        // 4: EMarketingMessageLookupType
	(*CMarketingMessages_GetActiveMarketingMessages_Request)(nil),                           // 5: CMarketingMessages_GetActiveMarketingMessages_Request
	(*CMarketingMessageProto)(nil),                                                          // 6: CMarketingMessageProto
	(*CMarketingMessages_GetActiveMarketingMessages_Response)(nil),                          // 7: CMarketingMessages_GetActiveMarketingMessages_Response
	(*CMarketingMessages_GetPastMarketingMessages_Request)(nil),                             // 8: CMarketingMessages_GetPastMarketingMessages_Request
	(*CMarketingMessages_GetPastMarketingMessages_Response)(nil),                            // 9: CMarketingMessages_GetPastMarketingMessages_Response
	(*CMarketingMessages_GetMarketingMessagesForUser_Request)(nil),                          // 10: CMarketingMessages_GetMarketingMessagesForUser_Request
	(*CDisplayMarketingMessage)(nil),                                                        // 11: CDisplayMarketingMessage
	(*CMarketingMessages_GetMarketingMessagesForUser_Response)(nil),                         // 12: CMarketingMessages_GetMarketingMessagesForUser_Response
	(*CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)(nil),                 // 13: CMarketingMessages_DoesUserHavePendingMarketingMessages_Request
	(*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)(nil),                // 14: CMarketingMessages_DoesUserHavePendingMarketingMessages_Response
	(*CMarketingMessages_GetDisplayMarketingMessage_Request)(nil),                           // 15: CMarketingMessages_GetDisplayMarketingMessage_Request
	(*CMarketingMessages_GetDisplayMarketingMessage_Response)(nil),                          // 16: CMarketingMessages_GetDisplayMarketingMessage_Response
	(*CMarketingMessages_MarkMessageSeen_Notification)(nil),                                 // 17: CMarketingMessages_MarkMessageSeen_Notification
	(*CMarketingMessages_GetMarketingMessage_Request)(nil),                                  // 18: CMarketingMessages_GetMarketingMessage_Request
	(*CMarketingMessages_GetMarketingMessage_Response)(nil),                                 // 19: CMarketingMessages_GetMarketingMessage_Response
	(*CMarketingMessages_CreateMarketingMessage_Request)(nil),                               // 20: CMarketingMessages_CreateMarketingMessage_Request
	(*CMarketingMessages_CreateMarketingMessage_Response)(nil),                              // 21: CMarketingMessages_CreateMarketingMessage_Response
	(*CMarketingMessages_UpdateMarketingMessage_Request)(nil),                               // 22: CMarketingMessages_UpdateMarketingMessage_Request
	(*CMarketingMessages_UpdateMarketingMessage_Response)(nil),                              // 23: CMarketingMessages_UpdateMarketingMessage_Response
	(*CMarketingMessages_DeleteMarketingMessage_Request)(nil),                               // 24: CMarketingMessages_DeleteMarketingMessage_Request
	(*CMarketingMessages_DeleteMarketingMessage_Response)(nil),                              // 25: CMarketingMessages_DeleteMarketingMessage_Response
	(*CMarketingMessages_FindMarketingMessages_Request)(nil),                                // 26: CMarketingMessages_FindMarketingMessages_Request
	(*CMarketingMessages_FindMarketingMessages_Response)(nil),                               // 27: CMarketingMessages_FindMarketingMessages_Response
	(*CMarketingMessages_GetMarketingMessageViewerStats_Request)(nil),                       // 28: CMarketingMessages_GetMarketingMessageViewerStats_Request
	(*CMarketingMessageHourlyStats)(nil),                                                    // 29: CMarketingMessageHourlyStats
	(*CMarketingMessages_GetMarketingMessageViewerStats_Response)(nil),                      // 30: CMarketingMessages_GetMarketingMessageViewerStats_Response
	(*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)(nil),                 // 31: CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request
	(*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)(nil),                // 32: CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response
	(*CMarketingMessages_GetPartnerReadyToPublishMessages_Request)(nil),                     // 33: CMarketingMessages_GetPartnerReadyToPublishMessages_Request
	(*CMarketingMessages_GetPartnerReadyToPublishMessages_Response)(nil),                    // 34: CMarketingMessages_GetPartnerReadyToPublishMessages_Response
	(*CMarketingMessages_PartnerPublishMessage_Request)(nil),                                // 35: CMarketingMessages_PartnerPublishMessage_Request
	(*CMarketingMessages_PartnerPublishMessage_Response)(nil),                               // 36: CMarketingMessages_PartnerPublishMessage_Response
	(*CMarketingMessages_GetPartnerMessagePreview_Request)(nil),                             // 37: CMarketingMessages_GetPartnerMessagePreview_Request
	(*CMarketingMessages_GetPartnerMessagePreview_Response)(nil),                            // 38: CMarketingMessages_GetPartnerMessagePreview_Response
	(*CMarketingMessage_GetMarketingMessagesForPartner_Request)(nil),                        // 39: CMarketingMessage_GetMarketingMessagesForPartner_Request
	(*CMarketingMessage_GetMarketingMessagesForPartner_Response)(nil),                       // 40: CMarketingMessage_GetMarketingMessagesForPartner_Response
	(*CMarketingMessage_GetMarketingMessagesForApps_Request)(nil),                           // 41: CMarketingMessage_GetMarketingMessagesForApps_Request
	(*CMarketingMessage_GetMarketingMessagesForApps_Response)(nil),                          // 42: CMarketingMessage_GetMarketingMessagesForApps_Response
	(*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser)(nil), // 43: CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser
	(*StoreBrowseContext)(nil),                                                              // 44: StoreBrowseContext
	(*StoreBrowseItemDataRequest)(nil),                                                      // 45: StoreBrowseItemDataRequest
	(*StoreItemID)(nil),                                                                     // 46: StoreItemID
	(*StoreItem)(nil),                                                                       // 47: StoreItem
	(*NoResponse)(nil),                                                                      // 48: NoResponse
}
var file_steammessages_marketingmessages_steamclient_proto_depIdxs = []int32{
	0,  // 0: CMarketingMessageProto.type:type_name -> EMarketingMessageType
	1,  // 1: CMarketingMessageProto.visibility:type_name -> EMarketingMessageVisibility
	2,  // 2: CMarketingMessageProto.association_type:type_name -> EMarketingMessageAssociationType
	6,  // 3: CMarketingMessages_GetActiveMarketingMessages_Response.messages:type_name -> CMarketingMessageProto
	6,  // 4: CMarketingMessages_GetPastMarketingMessages_Response.messages:type_name -> CMarketingMessageProto
	44, // 5: CMarketingMessages_GetMarketingMessagesForUser_Request.context:type_name -> StoreBrowseContext
	45, // 6: CMarketingMessages_GetMarketingMessagesForUser_Request.data_request:type_name -> StoreBrowseItemDataRequest
	0,  // 7: CDisplayMarketingMessage.type:type_name -> EMarketingMessageType
	46, // 8: CDisplayMarketingMessage.associated_item_id:type_name -> StoreItemID
	47, // 9: CDisplayMarketingMessage.associated_item:type_name -> StoreItem
	43, // 10: CMarketingMessages_GetMarketingMessagesForUser_Response.messages:type_name -> CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser
	44, // 11: CMarketingMessages_GetDisplayMarketingMessage_Request.context:type_name -> StoreBrowseContext
	45, // 12: CMarketingMessages_GetDisplayMarketingMessage_Request.data_request:type_name -> StoreBrowseItemDataRequest
	11, // 13: CMarketingMessages_GetDisplayMarketingMessage_Response.message:type_name -> CDisplayMarketingMessage
	3,  // 14: CMarketingMessages_MarkMessageSeen_Notification.template_type:type_name -> EMarketingMessageTemplateType
	6,  // 15: CMarketingMessages_GetMarketingMessage_Response.message:type_name -> CMarketingMessageProto
	6,  // 16: CMarketingMessages_CreateMarketingMessage_Request.message:type_name -> CMarketingMessageProto
	6,  // 17: CMarketingMessages_UpdateMarketingMessage_Request.message:type_name -> CMarketingMessageProto
	4,  // 18: CMarketingMessages_FindMarketingMessages_Request.lookup_type:type_name -> EMarketingMessageLookupType
	0,  // 19: CMarketingMessages_FindMarketingMessages_Request.message_type:type_name -> EMarketingMessageType
	6,  // 20: CMarketingMessages_FindMarketingMessages_Response.messages:type_name -> CMarketingMessageProto
	3,  // 21: CMarketingMessageHourlyStats.template_type:type_name -> EMarketingMessageTemplateType
	29, // 22: CMarketingMessages_GetMarketingMessageViewerStats_Response.stats:type_name -> CMarketingMessageHourlyStats
	29, // 23: CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.stats:type_name -> CMarketingMessageHourlyStats
	11, // 24: CMarketingMessages_GetPartnerReadyToPublishMessages_Response.messages:type_name -> CDisplayMarketingMessage
	6,  // 25: CMarketingMessages_GetPartnerMessagePreview_Response.message:type_name -> CMarketingMessageProto
	6,  // 26: CMarketingMessage_GetMarketingMessagesForPartner_Response.messages:type_name -> CMarketingMessageProto
	6,  // 27: CMarketingMessage_GetMarketingMessagesForApps_Response.messages:type_name -> CMarketingMessageProto
	11, // 28: CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.message:type_name -> CDisplayMarketingMessage
	5,  // 29: MarketingMessages.GetActiveMarketingMessages:input_type -> CMarketingMessages_GetActiveMarketingMessages_Request
	8,  // 30: MarketingMessages.GetPastMarketingMessages:input_type -> CMarketingMessages_GetPastMarketingMessages_Request
	10, // 31: MarketingMessages.GetMarketingMessagesForUser:input_type -> CMarketingMessages_GetMarketingMessagesForUser_Request
	13, // 32: MarketingMessages.DoesUserHavePendingMarketingMessages:input_type -> CMarketingMessages_DoesUserHavePendingMarketingMessages_Request
	15, // 33: MarketingMessages.GetDisplayMarketingMessage:input_type -> CMarketingMessages_GetDisplayMarketingMessage_Request
	15, // 34: MarketingMessages.GetDisplayMarketingMessageForUser:input_type -> CMarketingMessages_GetDisplayMarketingMessage_Request
	15, // 35: MarketingMessages.GetDisplayMarketingMessageAdmin:input_type -> CMarketingMessages_GetDisplayMarketingMessage_Request
	17, // 36: MarketingMessages.MarkMessageSeen:input_type -> CMarketingMessages_MarkMessageSeen_Notification
	18, // 37: MarketingMessages.GetMarketingMessage:input_type -> CMarketingMessages_GetMarketingMessage_Request
	20, // 38: MarketingMessages.CreateMarketingMessage:input_type -> CMarketingMessages_CreateMarketingMessage_Request
	22, // 39: MarketingMessages.UpdateMarketingMessage:input_type -> CMarketingMessages_UpdateMarketingMessage_Request
	24, // 40: MarketingMessages.DeleteMarketingMessage:input_type -> CMarketingMessages_DeleteMarketingMessage_Request
	26, // 41: MarketingMessages.FindMarketingMessages:input_type -> CMarketingMessages_FindMarketingMessages_Request
	28, // 42: MarketingMessages.GetMarketingMessageViewerStats:input_type -> CMarketingMessages_GetMarketingMessageViewerStats_Request
	31, // 43: MarketingMessages.GetMarketingMessagesViewerRangeStats:input_type -> CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request
	33, // 44: MarketingMessages.GetPartnerReadyToPublishMessages:input_type -> CMarketingMessages_GetPartnerReadyToPublishMessages_Request
	35, // 45: MarketingMessages.PublishPartnerMessage:input_type -> CMarketingMessages_PartnerPublishMessage_Request
	37, // 46: MarketingMessages.GetPartnerMessagePreview:input_type -> CMarketingMessages_GetPartnerMessagePreview_Request
	39, // 47: MarketingMessages.GetMarketingMessagesForPartner:input_type -> CMarketingMessage_GetMarketingMessagesForPartner_Request
	41, // 48: MarketingMessages.GetMarketingMessagesForApps:input_type -> CMarketingMessage_GetMarketingMessagesForApps_Request
	7,  // 49: MarketingMessages.GetActiveMarketingMessages:output_type -> CMarketingMessages_GetActiveMarketingMessages_Response
	9,  // 50: MarketingMessages.GetPastMarketingMessages:output_type -> CMarketingMessages_GetPastMarketingMessages_Response
	12, // 51: MarketingMessages.GetMarketingMessagesForUser:output_type -> CMarketingMessages_GetMarketingMessagesForUser_Response
	14, // 52: MarketingMessages.DoesUserHavePendingMarketingMessages:output_type -> CMarketingMessages_DoesUserHavePendingMarketingMessages_Response
	16, // 53: MarketingMessages.GetDisplayMarketingMessage:output_type -> CMarketingMessages_GetDisplayMarketingMessage_Response
	16, // 54: MarketingMessages.GetDisplayMarketingMessageForUser:output_type -> CMarketingMessages_GetDisplayMarketingMessage_Response
	16, // 55: MarketingMessages.GetDisplayMarketingMessageAdmin:output_type -> CMarketingMessages_GetDisplayMarketingMessage_Response
	48, // 56: MarketingMessages.MarkMessageSeen:output_type -> NoResponse
	19, // 57: MarketingMessages.GetMarketingMessage:output_type -> CMarketingMessages_GetMarketingMessage_Response
	21, // 58: MarketingMessages.CreateMarketingMessage:output_type -> CMarketingMessages_CreateMarketingMessage_Response
	23, // 59: MarketingMessages.UpdateMarketingMessage:output_type -> CMarketingMessages_UpdateMarketingMessage_Response
	25, // 60: MarketingMessages.DeleteMarketingMessage:output_type -> CMarketingMessages_DeleteMarketingMessage_Response
	27, // 61: MarketingMessages.FindMarketingMessages:output_type -> CMarketingMessages_FindMarketingMessages_Response
	30, // 62: MarketingMessages.GetMarketingMessageViewerStats:output_type -> CMarketingMessages_GetMarketingMessageViewerStats_Response
	32, // 63: MarketingMessages.GetMarketingMessagesViewerRangeStats:output_type -> CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response
	34, // 64: MarketingMessages.GetPartnerReadyToPublishMessages:output_type -> CMarketingMessages_GetPartnerReadyToPublishMessages_Response
	36, // 65: MarketingMessages.PublishPartnerMessage:output_type -> CMarketingMessages_PartnerPublishMessage_Response
	38, // 66: MarketingMessages.GetPartnerMessagePreview:output_type -> CMarketingMessages_GetPartnerMessagePreview_Response
	40, // 67: MarketingMessages.GetMarketingMessagesForPartner:output_type -> CMarketingMessage_GetMarketingMessagesForPartner_Response
	42, // 68: MarketingMessages.GetMarketingMessagesForApps:output_type -> CMarketingMessage_GetMarketingMessagesForApps_Response
	49, // [49:69] is the sub-list for method output_type
	29, // [29:49] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_steammessages_marketingmessages_steamclient_proto_init() }
func file_steammessages_marketingmessages_steamclient_proto_init() {
	if File_steammessages_marketingmessages_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_steammessages_storebrowse_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetActiveMarketingMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessageProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetActiveMarketingMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetPastMarketingMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetPastMarketingMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessagesForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CDisplayMarketingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessagesForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_DoesUserHavePendingMarketingMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetDisplayMarketingMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetDisplayMarketingMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_MarkMessageSeen_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_CreateMarketingMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_CreateMarketingMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_UpdateMarketingMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_UpdateMarketingMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_DeleteMarketingMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_DeleteMarketingMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_FindMarketingMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_FindMarketingMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessageViewerStats_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessageHourlyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessageViewerStats_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetPartnerReadyToPublishMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetPartnerReadyToPublishMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_PartnerPublishMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_PartnerPublishMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetPartnerMessagePreview_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetPartnerMessagePreview_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessage_GetMarketingMessagesForPartner_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessage_GetMarketingMessagesForPartner_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessage_GetMarketingMessagesForApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessage_GetMarketingMessagesForApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_marketingmessages_steamclient_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_marketingmessages_steamclient_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_marketingmessages_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_marketingmessages_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_marketingmessages_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_marketingmessages_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_marketingmessages_steamclient_proto = out.File
	file_steammessages_marketingmessages_steamclient_proto_rawDesc = nil
	file_steammessages_marketingmessages_steamclient_proto_goTypes = nil
	file_steammessages_marketingmessages_steamclient_proto_depIdxs = nil
}
