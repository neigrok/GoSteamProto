// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_familygroups.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EFamilyGroupRole int32

const (
	EFamilyGroupRole_k_EFamilyGroupRole_None  EFamilyGroupRole = 0
	EFamilyGroupRole_k_EFamilyGroupRole_Adult EFamilyGroupRole = 1
	EFamilyGroupRole_k_EFamilyGroupRole_Child EFamilyGroupRole = 2
	EFamilyGroupRole_k_EFamilyGroupRole_MAX   EFamilyGroupRole = 3
)

// Enum value maps for EFamilyGroupRole.
var (
	EFamilyGroupRole_name = map[int32]string{
		0: "k_EFamilyGroupRole_None",
		1: "k_EFamilyGroupRole_Adult",
		2: "k_EFamilyGroupRole_Child",
		3: "k_EFamilyGroupRole_MAX",
	}
	EFamilyGroupRole_value = map[string]int32{
		"k_EFamilyGroupRole_None":  0,
		"k_EFamilyGroupRole_Adult": 1,
		"k_EFamilyGroupRole_Child": 2,
		"k_EFamilyGroupRole_MAX":   3,
	}
)

func (x EFamilyGroupRole) Enum() *EFamilyGroupRole {
	p := new(EFamilyGroupRole)
	*p = x
	return p
}

func (x EFamilyGroupRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFamilyGroupRole) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_familygroups_steamclient_proto_enumTypes[0].Descriptor()
}

func (EFamilyGroupRole) Type() protoreflect.EnumType {
	return &file_steammessages_familygroups_steamclient_proto_enumTypes[0]
}

func (x EFamilyGroupRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFamilyGroupRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFamilyGroupRole(num)
	return nil
}

// Deprecated: Use EFamilyGroupRole.Descriptor instead.
func (EFamilyGroupRole) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{0}
}

type EFamilyGroupsTwoFactorMethod int32

const (
	EFamilyGroupsTwoFactorMethod_k_EFamilyGroupsTwoFactorMethodNone   EFamilyGroupsTwoFactorMethod = 0
	EFamilyGroupsTwoFactorMethod_k_EFamilyGroupsTwoFactorMethodMobile EFamilyGroupsTwoFactorMethod = 1
	EFamilyGroupsTwoFactorMethod_k_EFamilyGroupsTwoFactorMethodEmail  EFamilyGroupsTwoFactorMethod = 2
)

// Enum value maps for EFamilyGroupsTwoFactorMethod.
var (
	EFamilyGroupsTwoFactorMethod_name = map[int32]string{
		0: "k_EFamilyGroupsTwoFactorMethodNone",
		1: "k_EFamilyGroupsTwoFactorMethodMobile",
		2: "k_EFamilyGroupsTwoFactorMethodEmail",
	}
	EFamilyGroupsTwoFactorMethod_value = map[string]int32{
		"k_EFamilyGroupsTwoFactorMethodNone":   0,
		"k_EFamilyGroupsTwoFactorMethodMobile": 1,
		"k_EFamilyGroupsTwoFactorMethodEmail":  2,
	}
)

func (x EFamilyGroupsTwoFactorMethod) Enum() *EFamilyGroupsTwoFactorMethod {
	p := new(EFamilyGroupsTwoFactorMethod)
	*p = x
	return p
}

func (x EFamilyGroupsTwoFactorMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFamilyGroupsTwoFactorMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_familygroups_steamclient_proto_enumTypes[1].Descriptor()
}

func (EFamilyGroupsTwoFactorMethod) Type() protoreflect.EnumType {
	return &file_steammessages_familygroups_steamclient_proto_enumTypes[1]
}

func (x EFamilyGroupsTwoFactorMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFamilyGroupsTwoFactorMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFamilyGroupsTwoFactorMethod(num)
	return nil
}

// Deprecated: Use EFamilyGroupsTwoFactorMethod.Descriptor instead.
func (EFamilyGroupsTwoFactorMethod) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{1}
}

type EPurchaseRequestAction int32

const (
	EPurchaseRequestAction_k_EPurchaseRequestAction_None      EPurchaseRequestAction = 0
	EPurchaseRequestAction_k_EPurchaseRequestAction_Decline   EPurchaseRequestAction = 1
	EPurchaseRequestAction_k_EPurchaseRequestAction_Purchased EPurchaseRequestAction = 2
	EPurchaseRequestAction_k_EPurchaseRequestAction_Abandoned EPurchaseRequestAction = 3
	EPurchaseRequestAction_k_EPurchaseRequestAction_Cancel    EPurchaseRequestAction = 4
	EPurchaseRequestAction_k_EPurchaseRequestAction_MAX       EPurchaseRequestAction = 5
)

// Enum value maps for EPurchaseRequestAction.
var (
	EPurchaseRequestAction_name = map[int32]string{
		0: "k_EPurchaseRequestAction_None",
		1: "k_EPurchaseRequestAction_Decline",
		2: "k_EPurchaseRequestAction_Purchased",
		3: "k_EPurchaseRequestAction_Abandoned",
		4: "k_EPurchaseRequestAction_Cancel",
		5: "k_EPurchaseRequestAction_MAX",
	}
	EPurchaseRequestAction_value = map[string]int32{
		"k_EPurchaseRequestAction_None":      0,
		"k_EPurchaseRequestAction_Decline":   1,
		"k_EPurchaseRequestAction_Purchased": 2,
		"k_EPurchaseRequestAction_Abandoned": 3,
		"k_EPurchaseRequestAction_Cancel":    4,
		"k_EPurchaseRequestAction_MAX":       5,
	}
)

func (x EPurchaseRequestAction) Enum() *EPurchaseRequestAction {
	p := new(EPurchaseRequestAction)
	*p = x
	return p
}

func (x EPurchaseRequestAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPurchaseRequestAction) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_familygroups_steamclient_proto_enumTypes[2].Descriptor()
}

func (EPurchaseRequestAction) Type() protoreflect.EnumType {
	return &file_steammessages_familygroups_steamclient_proto_enumTypes[2]
}

func (x EPurchaseRequestAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPurchaseRequestAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPurchaseRequestAction(num)
	return nil
}

// Deprecated: Use EPurchaseRequestAction.Descriptor instead.
func (EPurchaseRequestAction) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{2}
}

type EFamilyGroupChangeLogType int32

const (
	EFamilyGroupChangeLogType_k_InvalidChangeType              EFamilyGroupChangeLogType = 0
	EFamilyGroupChangeLogType_k_FamilyGroupCreated             EFamilyGroupChangeLogType = 1
	EFamilyGroupChangeLogType_k_FamilyGroupModified            EFamilyGroupChangeLogType = 2
	EFamilyGroupChangeLogType_k_FamilyGroupDeleted             EFamilyGroupChangeLogType = 3
	EFamilyGroupChangeLogType_k_AccountInvited                 EFamilyGroupChangeLogType = 4
	EFamilyGroupChangeLogType_k_InviteDeniedByGroupSize        EFamilyGroupChangeLogType = 5
	EFamilyGroupChangeLogType_k_JoinedFamilyGroup              EFamilyGroupChangeLogType = 6
	EFamilyGroupChangeLogType_k_JoinDeniedByRegionMismatch     EFamilyGroupChangeLogType = 7
	EFamilyGroupChangeLogType_k_JoinDeniedByMissingIpAddress   EFamilyGroupChangeLogType = 8
	EFamilyGroupChangeLogType_k_JoinDeniedByFamilyCooldown     EFamilyGroupChangeLogType = 9
	EFamilyGroupChangeLogType_k_JoinDeniedByUserCooldown       EFamilyGroupChangeLogType = 10
	EFamilyGroupChangeLogType_k_JoinDeniedByOtherGroup         EFamilyGroupChangeLogType = 11
	EFamilyGroupChangeLogType_k_AccountRemoved                 EFamilyGroupChangeLogType = 12
	EFamilyGroupChangeLogType_k_InviteCanceled                 EFamilyGroupChangeLogType = 13
	EFamilyGroupChangeLogType_k_PurchaseRequested              EFamilyGroupChangeLogType = 14
	EFamilyGroupChangeLogType_k_ParentalSettingsEnabled        EFamilyGroupChangeLogType = 15
	EFamilyGroupChangeLogType_k_ParentalSettingsDisabled       EFamilyGroupChangeLogType = 16
	EFamilyGroupChangeLogType_k_ParentalSettingsChanged        EFamilyGroupChangeLogType = 17
	EFamilyGroupChangeLogType_k_FamilyCooldownOverridesChanged EFamilyGroupChangeLogType = 18
	EFamilyGroupChangeLogType_k_PurchaseRequestCanceled        EFamilyGroupChangeLogType = 19
	EFamilyGroupChangeLogType_k_PurchaseRequestApproved        EFamilyGroupChangeLogType = 20
	EFamilyGroupChangeLogType_k_PurchaseRequestDeclined        EFamilyGroupChangeLogType = 21
	EFamilyGroupChangeLogType_k_CooldownSkipConsumed           EFamilyGroupChangeLogType = 22
	EFamilyGroupChangeLogType_k_FamilyGroupRestored            EFamilyGroupChangeLogType = 23
	EFamilyGroupChangeLogType_k_JoinDenied                     EFamilyGroupChangeLogType = 24
	EFamilyGroupChangeLogType_k_SupportForceAcceptedInvite     EFamilyGroupChangeLogType = 25
)

// Enum value maps for EFamilyGroupChangeLogType.
var (
	EFamilyGroupChangeLogType_name = map[int32]string{
		0:  "k_InvalidChangeType",
		1:  "k_FamilyGroupCreated",
		2:  "k_FamilyGroupModified",
		3:  "k_FamilyGroupDeleted",
		4:  "k_AccountInvited",
		5:  "k_InviteDeniedByGroupSize",
		6:  "k_JoinedFamilyGroup",
		7:  "k_JoinDeniedByRegionMismatch",
		8:  "k_JoinDeniedByMissingIpAddress",
		9:  "k_JoinDeniedByFamilyCooldown",
		10: "k_JoinDeniedByUserCooldown",
		11: "k_JoinDeniedByOtherGroup",
		12: "k_AccountRemoved",
		13: "k_InviteCanceled",
		14: "k_PurchaseRequested",
		15: "k_ParentalSettingsEnabled",
		16: "k_ParentalSettingsDisabled",
		17: "k_ParentalSettingsChanged",
		18: "k_FamilyCooldownOverridesChanged",
		19: "k_PurchaseRequestCanceled",
		20: "k_PurchaseRequestApproved",
		21: "k_PurchaseRequestDeclined",
		22: "k_CooldownSkipConsumed",
		23: "k_FamilyGroupRestored",
		24: "k_JoinDenied",
		25: "k_SupportForceAcceptedInvite",
	}
	EFamilyGroupChangeLogType_value = map[string]int32{
		"k_InvalidChangeType":              0,
		"k_FamilyGroupCreated":             1,
		"k_FamilyGroupModified":            2,
		"k_FamilyGroupDeleted":             3,
		"k_AccountInvited":                 4,
		"k_InviteDeniedByGroupSize":        5,
		"k_JoinedFamilyGroup":              6,
		"k_JoinDeniedByRegionMismatch":     7,
		"k_JoinDeniedByMissingIpAddress":   8,
		"k_JoinDeniedByFamilyCooldown":     9,
		"k_JoinDeniedByUserCooldown":       10,
		"k_JoinDeniedByOtherGroup":         11,
		"k_AccountRemoved":                 12,
		"k_InviteCanceled":                 13,
		"k_PurchaseRequested":              14,
		"k_ParentalSettingsEnabled":        15,
		"k_ParentalSettingsDisabled":       16,
		"k_ParentalSettingsChanged":        17,
		"k_FamilyCooldownOverridesChanged": 18,
		"k_PurchaseRequestCanceled":        19,
		"k_PurchaseRequestApproved":        20,
		"k_PurchaseRequestDeclined":        21,
		"k_CooldownSkipConsumed":           22,
		"k_FamilyGroupRestored":            23,
		"k_JoinDenied":                     24,
		"k_SupportForceAcceptedInvite":     25,
	}
)

func (x EFamilyGroupChangeLogType) Enum() *EFamilyGroupChangeLogType {
	p := new(EFamilyGroupChangeLogType)
	*p = x
	return p
}

func (x EFamilyGroupChangeLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFamilyGroupChangeLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_familygroups_steamclient_proto_enumTypes[3].Descriptor()
}

func (EFamilyGroupChangeLogType) Type() protoreflect.EnumType {
	return &file_steammessages_familygroups_steamclient_proto_enumTypes[3]
}

func (x EFamilyGroupChangeLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFamilyGroupChangeLogType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFamilyGroupChangeLogType(num)
	return nil
}

// Deprecated: Use EFamilyGroupChangeLogType.Descriptor instead.
func (EFamilyGroupChangeLogType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{3}
}

type ESharedLibraryExcludeReason int32

const (
	ESharedLibraryExcludeReason_k_ESharedLibrary_Included                                ESharedLibraryExcludeReason = 0
	ESharedLibraryExcludeReason_k_ESharedLibrary_AppExcluded_ByPartner                   ESharedLibraryExcludeReason = 1
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded                         ESharedLibraryExcludeReason = 2
	ESharedLibraryExcludeReason_k_ESharedLibrary_FreeGame                                ESharedLibraryExcludeReason = 3
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicensePrivate                          ESharedLibraryExcludeReason = 4
	ESharedLibraryExcludeReason_k_ESharedLibrary_AppExcluded_WrongAppType                ESharedLibraryExcludeReason = 6
	ESharedLibraryExcludeReason_k_ESharedLibrary_AppExcluded_NonrefundableDLC            ESharedLibraryExcludeReason = 7
	ESharedLibraryExcludeReason_k_ESharedLibrary_AppExcluded_UnreleasedApp               ESharedLibraryExcludeReason = 8
	ESharedLibraryExcludeReason_k_ESharedLibrary_AppExcluded_ParentAppExcluded           ESharedLibraryExcludeReason = 9
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_ByPartner               ESharedLibraryExcludeReason = 10
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_Special                 ESharedLibraryExcludeReason = 11
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_Dev                     ESharedLibraryExcludeReason = 12
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_FreeWeekend             ESharedLibraryExcludeReason = 13
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_Invalid                 ESharedLibraryExcludeReason = 15
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_RecurringLicense        ESharedLibraryExcludeReason = 16
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_WrongLicenseType        ESharedLibraryExcludeReason = 17
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_MasterSub               ESharedLibraryExcludeReason = 18
	ESharedLibraryExcludeReason_k_ESharedLibrary_PackageExcluded_NoShareableApps         ESharedLibraryExcludeReason = 19
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_PaymentMasterSub        ESharedLibraryExcludeReason = 20
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_PaymentFamilyGroup      ESharedLibraryExcludeReason = 21
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_PaymentAuthorizedDevice ESharedLibraryExcludeReason = 22
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_PaymentAutoGrant        ESharedLibraryExcludeReason = 23
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_FlagPending             ESharedLibraryExcludeReason = 24
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_FlagPendingRefund       ESharedLibraryExcludeReason = 25
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_FlagBorrowed            ESharedLibraryExcludeReason = 26
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_FlagAutoGrant           ESharedLibraryExcludeReason = 27
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_FlagTimedTrial          ESharedLibraryExcludeReason = 28
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_FreeSub                 ESharedLibraryExcludeReason = 29
	ESharedLibraryExcludeReason_k_ESharedLibrary_LicenseExcluded_Inactive                ESharedLibraryExcludeReason = 30
)

// Enum value maps for ESharedLibraryExcludeReason.
var (
	ESharedLibraryExcludeReason_name = map[int32]string{
		0:  "k_ESharedLibrary_Included",
		1:  "k_ESharedLibrary_AppExcluded_ByPartner",
		2:  "k_ESharedLibrary_LicenseExcluded",
		3:  "k_ESharedLibrary_FreeGame",
		4:  "k_ESharedLibrary_LicensePrivate",
		6:  "k_ESharedLibrary_AppExcluded_WrongAppType",
		7:  "k_ESharedLibrary_AppExcluded_NonrefundableDLC",
		8:  "k_ESharedLibrary_AppExcluded_UnreleasedApp",
		9:  "k_ESharedLibrary_AppExcluded_ParentAppExcluded",
		10: "k_ESharedLibrary_PackageExcluded_ByPartner",
		11: "k_ESharedLibrary_PackageExcluded_Special",
		12: "k_ESharedLibrary_PackageExcluded_Dev",
		13: "k_ESharedLibrary_PackageExcluded_FreeWeekend",
		15: "k_ESharedLibrary_PackageExcluded_Invalid",
		16: "k_ESharedLibrary_PackageExcluded_RecurringLicense",
		17: "k_ESharedLibrary_PackageExcluded_WrongLicenseType",
		18: "k_ESharedLibrary_PackageExcluded_MasterSub",
		19: "k_ESharedLibrary_PackageExcluded_NoShareableApps",
		20: "k_ESharedLibrary_LicenseExcluded_PaymentMasterSub",
		21: "k_ESharedLibrary_LicenseExcluded_PaymentFamilyGroup",
		22: "k_ESharedLibrary_LicenseExcluded_PaymentAuthorizedDevice",
		23: "k_ESharedLibrary_LicenseExcluded_PaymentAutoGrant",
		24: "k_ESharedLibrary_LicenseExcluded_FlagPending",
		25: "k_ESharedLibrary_LicenseExcluded_FlagPendingRefund",
		26: "k_ESharedLibrary_LicenseExcluded_FlagBorrowed",
		27: "k_ESharedLibrary_LicenseExcluded_FlagAutoGrant",
		28: "k_ESharedLibrary_LicenseExcluded_FlagTimedTrial",
		29: "k_ESharedLibrary_LicenseExcluded_FreeSub",
		30: "k_ESharedLibrary_LicenseExcluded_Inactive",
	}
	ESharedLibraryExcludeReason_value = map[string]int32{
		"k_ESharedLibrary_Included":                                0,
		"k_ESharedLibrary_AppExcluded_ByPartner":                   1,
		"k_ESharedLibrary_LicenseExcluded":                         2,
		"k_ESharedLibrary_FreeGame":                                3,
		"k_ESharedLibrary_LicensePrivate":                          4,
		"k_ESharedLibrary_AppExcluded_WrongAppType":                6,
		"k_ESharedLibrary_AppExcluded_NonrefundableDLC":            7,
		"k_ESharedLibrary_AppExcluded_UnreleasedApp":               8,
		"k_ESharedLibrary_AppExcluded_ParentAppExcluded":           9,
		"k_ESharedLibrary_PackageExcluded_ByPartner":               10,
		"k_ESharedLibrary_PackageExcluded_Special":                 11,
		"k_ESharedLibrary_PackageExcluded_Dev":                     12,
		"k_ESharedLibrary_PackageExcluded_FreeWeekend":             13,
		"k_ESharedLibrary_PackageExcluded_Invalid":                 15,
		"k_ESharedLibrary_PackageExcluded_RecurringLicense":        16,
		"k_ESharedLibrary_PackageExcluded_WrongLicenseType":        17,
		"k_ESharedLibrary_PackageExcluded_MasterSub":               18,
		"k_ESharedLibrary_PackageExcluded_NoShareableApps":         19,
		"k_ESharedLibrary_LicenseExcluded_PaymentMasterSub":        20,
		"k_ESharedLibrary_LicenseExcluded_PaymentFamilyGroup":      21,
		"k_ESharedLibrary_LicenseExcluded_PaymentAuthorizedDevice": 22,
		"k_ESharedLibrary_LicenseExcluded_PaymentAutoGrant":        23,
		"k_ESharedLibrary_LicenseExcluded_FlagPending":             24,
		"k_ESharedLibrary_LicenseExcluded_FlagPendingRefund":       25,
		"k_ESharedLibrary_LicenseExcluded_FlagBorrowed":            26,
		"k_ESharedLibrary_LicenseExcluded_FlagAutoGrant":           27,
		"k_ESharedLibrary_LicenseExcluded_FlagTimedTrial":          28,
		"k_ESharedLibrary_LicenseExcluded_FreeSub":                 29,
		"k_ESharedLibrary_LicenseExcluded_Inactive":                30,
	}
)

func (x ESharedLibraryExcludeReason) Enum() *ESharedLibraryExcludeReason {
	p := new(ESharedLibraryExcludeReason)
	*p = x
	return p
}

func (x ESharedLibraryExcludeReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESharedLibraryExcludeReason) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_familygroups_steamclient_proto_enumTypes[4].Descriptor()
}

func (ESharedLibraryExcludeReason) Type() protoreflect.EnumType {
	return &file_steammessages_familygroups_steamclient_proto_enumTypes[4]
}

func (x ESharedLibraryExcludeReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESharedLibraryExcludeReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESharedLibraryExcludeReason(num)
	return nil
}

// Deprecated: Use ESharedLibraryExcludeReason.Descriptor instead.
func (ESharedLibraryExcludeReason) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{4}
}

type CFamilyGroups_CreateFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CFamilyGroups_CreateFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_CreateFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_CreateFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_CreateFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_CreateFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_CreateFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_CreateFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CFamilyGroups_CreateFamilyGroup_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CFamilyGroups_CreateFamilyGroup_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFamilyGroups_CreateFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid       *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	CooldownSkipGranted *bool   `protobuf:"varint,2,opt,name=cooldown_skip_granted,json=cooldownSkipGranted" json:"cooldown_skip_granted,omitempty"`
}

func (x *CFamilyGroups_CreateFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_CreateFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_CreateFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_CreateFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_CreateFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_CreateFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_CreateFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CFamilyGroups_CreateFamilyGroup_Response) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_CreateFamilyGroup_Response) GetCooldownSkipGranted() bool {
	if x != nil && x.CooldownSkipGranted != nil {
		return *x.CooldownSkipGranted
	}
	return false
}

type CFamilyGroups_GetFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid   *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	SendRunningApps *bool   `protobuf:"varint,2,opt,name=send_running_apps,json=sendRunningApps" json:"send_running_apps,omitempty"`
}

func (x *CFamilyGroups_GetFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_GetFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CFamilyGroups_GetFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroup_Request) GetSendRunningApps() bool {
	if x != nil && x.SendRunningApps != nil {
		return *x.SendRunningApps
	}
	return false
}

type FamilyGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                  *uint64           `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Role                     *EFamilyGroupRole `protobuf:"varint,2,opt,name=role,enum=EFamilyGroupRole,def=0" json:"role,omitempty"`
	TimeJoined               *uint32           `protobuf:"varint,3,opt,name=time_joined,json=timeJoined" json:"time_joined,omitempty"`
	CooldownSecondsRemaining *uint32           `protobuf:"varint,4,opt,name=cooldown_seconds_remaining,json=cooldownSecondsRemaining" json:"cooldown_seconds_remaining,omitempty"`
}

// Default values for FamilyGroupMember fields.
const (
	Default_FamilyGroupMember_Role = EFamilyGroupRole_k_EFamilyGroupRole_None
)

func (x *FamilyGroupMember) Reset() {
	*x = FamilyGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyGroupMember) ProtoMessage() {}

func (x *FamilyGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyGroupMember.ProtoReflect.Descriptor instead.
func (*FamilyGroupMember) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *FamilyGroupMember) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *FamilyGroupMember) GetRole() EFamilyGroupRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Default_FamilyGroupMember_Role
}

func (x *FamilyGroupMember) GetTimeJoined() uint32 {
	if x != nil && x.TimeJoined != nil {
		return *x.TimeJoined
	}
	return 0
}

func (x *FamilyGroupMember) GetCooldownSecondsRemaining() uint32 {
	if x != nil && x.CooldownSecondsRemaining != nil {
		return *x.CooldownSecondsRemaining
	}
	return 0
}

type FamilyGroupPendingInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64           `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Role    *EFamilyGroupRole `protobuf:"varint,2,opt,name=role,enum=EFamilyGroupRole,def=0" json:"role,omitempty"`
}

// Default values for FamilyGroupPendingInvite fields.
const (
	Default_FamilyGroupPendingInvite_Role = EFamilyGroupRole_k_EFamilyGroupRole_None
)

func (x *FamilyGroupPendingInvite) Reset() {
	*x = FamilyGroupPendingInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyGroupPendingInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyGroupPendingInvite) ProtoMessage() {}

func (x *FamilyGroupPendingInvite) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyGroupPendingInvite.ProtoReflect.Descriptor instead.
func (*FamilyGroupPendingInvite) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *FamilyGroupPendingInvite) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *FamilyGroupPendingInvite) GetRole() EFamilyGroupRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Default_FamilyGroupPendingInvite_Role
}

type FamilyGroupFormerMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *FamilyGroupFormerMember) Reset() {
	*x = FamilyGroupFormerMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyGroupFormerMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyGroupFormerMember) ProtoMessage() {}

func (x *FamilyGroupFormerMember) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyGroupFormerMember.ProtoReflect.Descriptor instead.
func (*FamilyGroupFormerMember) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *FamilyGroupFormerMember) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFamilyGroups_GetFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                         *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Members                      []*FamilyGroupMember        `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	PendingInvites               []*FamilyGroupPendingInvite `protobuf:"bytes,3,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	FreeSpots                    *uint32                     `protobuf:"varint,4,opt,name=free_spots,json=freeSpots" json:"free_spots,omitempty"`
	Country                      *string                     `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	SlotCooldownRemainingSeconds *uint32                     `protobuf:"varint,6,opt,name=slot_cooldown_remaining_seconds,json=slotCooldownRemainingSeconds" json:"slot_cooldown_remaining_seconds,omitempty"`
	FormerMembers                []*FamilyGroupFormerMember  `protobuf:"bytes,7,rep,name=former_members,json=formerMembers" json:"former_members,omitempty"`
	SlotCooldownOverrides        *uint32                     `protobuf:"varint,8,opt,name=slot_cooldown_overrides,json=slotCooldownOverrides" json:"slot_cooldown_overrides,omitempty"`
}

func (x *CFamilyGroups_GetFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_GetFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetMembers() []*FamilyGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetPendingInvites() []*FamilyGroupPendingInvite {
	if x != nil {
		return x.PendingInvites
	}
	return nil
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetFreeSpots() uint32 {
	if x != nil && x.FreeSpots != nil {
		return *x.FreeSpots
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetSlotCooldownRemainingSeconds() uint32 {
	if x != nil && x.SlotCooldownRemainingSeconds != nil {
		return *x.SlotCooldownRemainingSeconds
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetFormerMembers() []*FamilyGroupFormerMember {
	if x != nil {
		return x.FormerMembers
	}
	return nil
}

func (x *CFamilyGroups_GetFamilyGroup_Response) GetSlotCooldownOverrides() uint32 {
	if x != nil && x.SlotCooldownOverrides != nil {
		return *x.SlotCooldownOverrides
	}
	return 0
}

type CFamilyGroups_GetFamilyGroupForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                    *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeFamilyGroupResponse *bool   `protobuf:"varint,2,opt,name=include_family_group_response,json=includeFamilyGroupResponse" json:"include_family_group_response,omitempty"`
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Request) Reset() {
	*x = CFamilyGroups_GetFamilyGroupForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetFamilyGroupForUser_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetFamilyGroupForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetFamilyGroupForUser_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetFamilyGroupForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Request) GetIncludeFamilyGroupResponse() bool {
	if x != nil && x.IncludeFamilyGroupResponse != nil {
		return *x.IncludeFamilyGroupResponse
	}
	return false
}

type FamilyGroupPendingInviteForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid  *uint64           `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Role           *EFamilyGroupRole `protobuf:"varint,2,opt,name=role,enum=EFamilyGroupRole,def=0" json:"role,omitempty"`
	InviterSteamid *uint64           `protobuf:"fixed64,3,opt,name=inviter_steamid,json=inviterSteamid" json:"inviter_steamid,omitempty"`
	Awaiting_2Fa   *bool             `protobuf:"varint,4,opt,name=awaiting_2fa,json=awaiting2fa" json:"awaiting_2fa,omitempty"`
}

// Default values for FamilyGroupPendingInviteForUser fields.
const (
	Default_FamilyGroupPendingInviteForUser_Role = EFamilyGroupRole_k_EFamilyGroupRole_None
)

func (x *FamilyGroupPendingInviteForUser) Reset() {
	*x = FamilyGroupPendingInviteForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyGroupPendingInviteForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyGroupPendingInviteForUser) ProtoMessage() {}

func (x *FamilyGroupPendingInviteForUser) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyGroupPendingInviteForUser.ProtoReflect.Descriptor instead.
func (*FamilyGroupPendingInviteForUser) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *FamilyGroupPendingInviteForUser) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *FamilyGroupPendingInviteForUser) GetRole() EFamilyGroupRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Default_FamilyGroupPendingInviteForUser_Role
}

func (x *FamilyGroupPendingInviteForUser) GetInviterSteamid() uint64 {
	if x != nil && x.InviterSteamid != nil {
		return *x.InviterSteamid
	}
	return 0
}

func (x *FamilyGroupPendingInviteForUser) GetAwaiting_2Fa() bool {
	if x != nil && x.Awaiting_2Fa != nil {
		return *x.Awaiting_2Fa
	}
	return false
}

type CFamilyGroups_GetFamilyGroupForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid               *uint64                                `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	IsNotMemberOfAnyGroup       *bool                                  `protobuf:"varint,2,opt,name=is_not_member_of_any_group,json=isNotMemberOfAnyGroup" json:"is_not_member_of_any_group,omitempty"`
	LatestTimeJoined            *uint32                                `protobuf:"varint,3,opt,name=latest_time_joined,json=latestTimeJoined" json:"latest_time_joined,omitempty"`
	LatestJoinedFamilyGroupid   *uint64                                `protobuf:"varint,4,opt,name=latest_joined_family_groupid,json=latestJoinedFamilyGroupid" json:"latest_joined_family_groupid,omitempty"`
	PendingGroupInvites         []*FamilyGroupPendingInviteForUser     `protobuf:"bytes,5,rep,name=pending_group_invites,json=pendingGroupInvites" json:"pending_group_invites,omitempty"`
	Role                        *uint32                                `protobuf:"varint,6,opt,name=role" json:"role,omitempty"`
	CooldownSecondsRemaining    *uint32                                `protobuf:"varint,7,opt,name=cooldown_seconds_remaining,json=cooldownSecondsRemaining" json:"cooldown_seconds_remaining,omitempty"`
	FamilyGroup                 *CFamilyGroups_GetFamilyGroup_Response `protobuf:"bytes,8,opt,name=family_group,json=familyGroup" json:"family_group,omitempty"`
	CanUndeleteLastJoinedFamily *bool                                  `protobuf:"varint,9,opt,name=can_undelete_last_joined_family,json=canUndeleteLastJoinedFamily" json:"can_undelete_last_joined_family,omitempty"`
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) Reset() {
	*x = CFamilyGroups_GetFamilyGroupForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetFamilyGroupForUser_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetFamilyGroupForUser_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetFamilyGroupForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetIsNotMemberOfAnyGroup() bool {
	if x != nil && x.IsNotMemberOfAnyGroup != nil {
		return *x.IsNotMemberOfAnyGroup
	}
	return false
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetLatestTimeJoined() uint32 {
	if x != nil && x.LatestTimeJoined != nil {
		return *x.LatestTimeJoined
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetLatestJoinedFamilyGroupid() uint64 {
	if x != nil && x.LatestJoinedFamilyGroupid != nil {
		return *x.LatestJoinedFamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetPendingGroupInvites() []*FamilyGroupPendingInviteForUser {
	if x != nil {
		return x.PendingGroupInvites
	}
	return nil
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetCooldownSecondsRemaining() uint32 {
	if x != nil && x.CooldownSecondsRemaining != nil {
		return *x.CooldownSecondsRemaining
	}
	return 0
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetFamilyGroup() *CFamilyGroups_GetFamilyGroup_Response {
	if x != nil {
		return x.FamilyGroup
	}
	return nil
}

func (x *CFamilyGroups_GetFamilyGroupForUser_Response) GetCanUndeleteLastJoinedFamily() bool {
	if x != nil && x.CanUndeleteLastJoinedFamily != nil {
		return *x.CanUndeleteLastJoinedFamily
	}
	return false
}

type CFamilyGroups_ModifyFamilyGroupDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Request) Reset() {
	*x = CFamilyGroups_ModifyFamilyGroupDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ModifyFamilyGroupDetails_Request) ProtoMessage() {}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ModifyFamilyGroupDetails_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ModifyFamilyGroupDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CFamilyGroups_ModifyFamilyGroupDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Response) Reset() {
	*x = CFamilyGroups_ModifyFamilyGroupDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ModifyFamilyGroupDetails_Response) ProtoMessage() {}

func (x *CFamilyGroups_ModifyFamilyGroupDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ModifyFamilyGroupDetails_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ModifyFamilyGroupDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{11}
}

type CFamilyGroups_InviteToFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid   *uint64           `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	ReceiverSteamid *uint64           `protobuf:"fixed64,2,opt,name=receiver_steamid,json=receiverSteamid" json:"receiver_steamid,omitempty"`
	ReceiverRole    *EFamilyGroupRole `protobuf:"varint,3,opt,name=receiver_role,json=receiverRole,enum=EFamilyGroupRole,def=0" json:"receiver_role,omitempty"`
}

// Default values for CFamilyGroups_InviteToFamilyGroup_Request fields.
const (
	Default_CFamilyGroups_InviteToFamilyGroup_Request_ReceiverRole = EFamilyGroupRole_k_EFamilyGroupRole_None
)

func (x *CFamilyGroups_InviteToFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_InviteToFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_InviteToFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_InviteToFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_InviteToFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_InviteToFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_InviteToFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CFamilyGroups_InviteToFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_InviteToFamilyGroup_Request) GetReceiverSteamid() uint64 {
	if x != nil && x.ReceiverSteamid != nil {
		return *x.ReceiverSteamid
	}
	return 0
}

func (x *CFamilyGroups_InviteToFamilyGroup_Request) GetReceiverRole() EFamilyGroupRole {
	if x != nil && x.ReceiverRole != nil {
		return *x.ReceiverRole
	}
	return Default_CFamilyGroups_InviteToFamilyGroup_Request_ReceiverRole
}

type CFamilyGroups_InviteToFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId        *uint64                       `protobuf:"varint,1,opt,name=invite_id,json=inviteId" json:"invite_id,omitempty"`
	TwoFactorMethod *EFamilyGroupsTwoFactorMethod `protobuf:"varint,2,opt,name=two_factor_method,json=twoFactorMethod,enum=EFamilyGroupsTwoFactorMethod,def=0" json:"two_factor_method,omitempty"`
}

// Default values for CFamilyGroups_InviteToFamilyGroup_Response fields.
const (
	Default_CFamilyGroups_InviteToFamilyGroup_Response_TwoFactorMethod = EFamilyGroupsTwoFactorMethod_k_EFamilyGroupsTwoFactorMethodNone
)

func (x *CFamilyGroups_InviteToFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_InviteToFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_InviteToFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_InviteToFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_InviteToFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_InviteToFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_InviteToFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CFamilyGroups_InviteToFamilyGroup_Response) GetInviteId() uint64 {
	if x != nil && x.InviteId != nil {
		return *x.InviteId
	}
	return 0
}

func (x *CFamilyGroups_InviteToFamilyGroup_Response) GetTwoFactorMethod() EFamilyGroupsTwoFactorMethod {
	if x != nil && x.TwoFactorMethod != nil {
		return *x.TwoFactorMethod
	}
	return Default_CFamilyGroups_InviteToFamilyGroup_Response_TwoFactorMethod
}

type CFamilyGroups_ConfirmInviteToFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	InviteId      *uint64 `protobuf:"varint,2,opt,name=invite_id,json=inviteId" json:"invite_id,omitempty"`
	Nonce         *uint64 `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_ConfirmInviteToFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ConfirmInviteToFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ConfirmInviteToFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ConfirmInviteToFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Request) GetInviteId() uint64 {
	if x != nil && x.InviteId != nil {
		return *x.InviteId
	}
	return 0
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Request) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

type CFamilyGroups_ConfirmInviteToFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_ConfirmInviteToFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ConfirmInviteToFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_ConfirmInviteToFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ConfirmInviteToFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ConfirmInviteToFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{15}
}

type CFamilyGroups_ResendInvitationToFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Steamid       *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_ResendInvitationToFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ResendInvitationToFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ResendInvitationToFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ResendInvitationToFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFamilyGroups_ResendInvitationToFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_ResendInvitationToFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ResendInvitationToFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_ResendInvitationToFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ResendInvitationToFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ResendInvitationToFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{17}
}

type CFamilyGroups_JoinFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Nonce         *uint64 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
}

func (x *CFamilyGroups_JoinFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_JoinFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_JoinFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_JoinFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_JoinFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_JoinFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_JoinFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CFamilyGroups_JoinFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_JoinFamilyGroup_Request) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

type CFamilyGroups_JoinFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TwoFactorMethod       *EFamilyGroupsTwoFactorMethod `protobuf:"varint,2,opt,name=two_factor_method,json=twoFactorMethod,enum=EFamilyGroupsTwoFactorMethod,def=0" json:"two_factor_method,omitempty"`
	CooldownSkipGranted   *bool                         `protobuf:"varint,3,opt,name=cooldown_skip_granted,json=cooldownSkipGranted" json:"cooldown_skip_granted,omitempty"`
	InviteAlreadyAccepted *bool                         `protobuf:"varint,4,opt,name=invite_already_accepted,json=inviteAlreadyAccepted" json:"invite_already_accepted,omitempty"`
}

// Default values for CFamilyGroups_JoinFamilyGroup_Response fields.
const (
	Default_CFamilyGroups_JoinFamilyGroup_Response_TwoFactorMethod = EFamilyGroupsTwoFactorMethod_k_EFamilyGroupsTwoFactorMethodNone
)

func (x *CFamilyGroups_JoinFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_JoinFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_JoinFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_JoinFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_JoinFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_JoinFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_JoinFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CFamilyGroups_JoinFamilyGroup_Response) GetTwoFactorMethod() EFamilyGroupsTwoFactorMethod {
	if x != nil && x.TwoFactorMethod != nil {
		return *x.TwoFactorMethod
	}
	return Default_CFamilyGroups_JoinFamilyGroup_Response_TwoFactorMethod
}

func (x *CFamilyGroups_JoinFamilyGroup_Response) GetCooldownSkipGranted() bool {
	if x != nil && x.CooldownSkipGranted != nil {
		return *x.CooldownSkipGranted
	}
	return false
}

func (x *CFamilyGroups_JoinFamilyGroup_Response) GetInviteAlreadyAccepted() bool {
	if x != nil && x.InviteAlreadyAccepted != nil {
		return *x.InviteAlreadyAccepted
	}
	return false
}

type CFamilyGroups_ConfirmJoinFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	InviteId      *uint64 `protobuf:"varint,2,opt,name=invite_id,json=inviteId" json:"invite_id,omitempty"`
	Nonce         *uint64 `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_ConfirmJoinFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ConfirmJoinFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ConfirmJoinFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ConfirmJoinFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Request) GetInviteId() uint64 {
	if x != nil && x.InviteId != nil {
		return *x.InviteId
	}
	return 0
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Request) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

type CFamilyGroups_ConfirmJoinFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_ConfirmJoinFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ConfirmJoinFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_ConfirmJoinFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ConfirmJoinFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ConfirmJoinFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{21}
}

type CFamilyGroups_RemoveFromFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid   *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	SteamidToRemove *uint64 `protobuf:"fixed64,2,opt,name=steamid_to_remove,json=steamidToRemove" json:"steamid_to_remove,omitempty"`
}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_RemoveFromFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_RemoveFromFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_RemoveFromFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_RemoveFromFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Request) GetSteamidToRemove() uint64 {
	if x != nil && x.SteamidToRemove != nil {
		return *x.SteamidToRemove
	}
	return 0
}

type CFamilyGroups_RemoveFromFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_RemoveFromFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_RemoveFromFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_RemoveFromFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_RemoveFromFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_RemoveFromFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{23}
}

type CFamilyGroups_CancelFamilyGroupInvite_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid   *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	SteamidToCancel *uint64 `protobuf:"fixed64,2,opt,name=steamid_to_cancel,json=steamidToCancel" json:"steamid_to_cancel,omitempty"`
}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Request) Reset() {
	*x = CFamilyGroups_CancelFamilyGroupInvite_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_CancelFamilyGroupInvite_Request) ProtoMessage() {}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_CancelFamilyGroupInvite_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_CancelFamilyGroupInvite_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Request) GetSteamidToCancel() uint64 {
	if x != nil && x.SteamidToCancel != nil {
		return *x.SteamidToCancel
	}
	return 0
}

type CFamilyGroups_CancelFamilyGroupInvite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Response) Reset() {
	*x = CFamilyGroups_CancelFamilyGroupInvite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_CancelFamilyGroupInvite_Response) ProtoMessage() {}

func (x *CFamilyGroups_CancelFamilyGroupInvite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_CancelFamilyGroupInvite_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_CancelFamilyGroupInvite_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{25}
}

type CFamilyGroups_GetUsersSharingDevice_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid    *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	ClientInstanceId *uint64 `protobuf:"varint,2,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
}

func (x *CFamilyGroups_GetUsersSharingDevice_Request) Reset() {
	*x = CFamilyGroups_GetUsersSharingDevice_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetUsersSharingDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetUsersSharingDevice_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetUsersSharingDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetUsersSharingDevice_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetUsersSharingDevice_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CFamilyGroups_GetUsersSharingDevice_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetUsersSharingDevice_Request) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

type CFamilyGroups_GetUsersSharingDevice_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []uint64 `protobuf:"fixed64,1,rep,name=users" json:"users,omitempty"`
}

func (x *CFamilyGroups_GetUsersSharingDevice_Response) Reset() {
	*x = CFamilyGroups_GetUsersSharingDevice_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetUsersSharingDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetUsersSharingDevice_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetUsersSharingDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetUsersSharingDevice_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetUsersSharingDevice_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CFamilyGroups_GetUsersSharingDevice_Response) GetUsers() []uint64 {
	if x != nil {
		return x.Users
	}
	return nil
}

type CFamilyGroups_DeleteFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
}

func (x *CFamilyGroups_DeleteFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_DeleteFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_DeleteFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_DeleteFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_DeleteFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_DeleteFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_DeleteFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CFamilyGroups_DeleteFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

type CFamilyGroups_DeleteFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_DeleteFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_DeleteFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_DeleteFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_DeleteFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_DeleteFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_DeleteFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_DeleteFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{29}
}

type CFamilyGroups_UndeleteFamilyGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
}

func (x *CFamilyGroups_UndeleteFamilyGroup_Request) Reset() {
	*x = CFamilyGroups_UndeleteFamilyGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_UndeleteFamilyGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_UndeleteFamilyGroup_Request) ProtoMessage() {}

func (x *CFamilyGroups_UndeleteFamilyGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_UndeleteFamilyGroup_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_UndeleteFamilyGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CFamilyGroups_UndeleteFamilyGroup_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

type CFamilyGroups_UndeleteFamilyGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_UndeleteFamilyGroup_Response) Reset() {
	*x = CFamilyGroups_UndeleteFamilyGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_UndeleteFamilyGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_UndeleteFamilyGroup_Response) ProtoMessage() {}

func (x *CFamilyGroups_UndeleteFamilyGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_UndeleteFamilyGroup_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_UndeleteFamilyGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{31}
}

type CFamilyGroups_GetPlaytimeSummary_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"fixed64,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
}

func (x *CFamilyGroups_GetPlaytimeSummary_Request) Reset() {
	*x = CFamilyGroups_GetPlaytimeSummary_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPlaytimeSummary_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPlaytimeSummary_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetPlaytimeSummary_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPlaytimeSummary_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPlaytimeSummary_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CFamilyGroups_GetPlaytimeSummary_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

type CFamilyGroups_PlaytimeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid       *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid         *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FirstPlayed   *uint32 `protobuf:"varint,3,opt,name=first_played,json=firstPlayed" json:"first_played,omitempty"`
	LatestPlayed  *uint32 `protobuf:"varint,4,opt,name=latest_played,json=latestPlayed" json:"latest_played,omitempty"`
	SecondsPlayed *uint32 `protobuf:"varint,5,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
}

func (x *CFamilyGroups_PlaytimeEntry) Reset() {
	*x = CFamilyGroups_PlaytimeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_PlaytimeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_PlaytimeEntry) ProtoMessage() {}

func (x *CFamilyGroups_PlaytimeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_PlaytimeEntry.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_PlaytimeEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CFamilyGroups_PlaytimeEntry) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFamilyGroups_PlaytimeEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CFamilyGroups_PlaytimeEntry) GetFirstPlayed() uint32 {
	if x != nil && x.FirstPlayed != nil {
		return *x.FirstPlayed
	}
	return 0
}

func (x *CFamilyGroups_PlaytimeEntry) GetLatestPlayed() uint32 {
	if x != nil && x.LatestPlayed != nil {
		return *x.LatestPlayed
	}
	return 0
}

func (x *CFamilyGroups_PlaytimeEntry) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

type CFamilyGroups_GetPlaytimeSummary_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries        []*CFamilyGroups_PlaytimeEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	EntriesByOwner []*CFamilyGroups_PlaytimeEntry `protobuf:"bytes,2,rep,name=entries_by_owner,json=entriesByOwner" json:"entries_by_owner,omitempty"`
}

func (x *CFamilyGroups_GetPlaytimeSummary_Response) Reset() {
	*x = CFamilyGroups_GetPlaytimeSummary_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPlaytimeSummary_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPlaytimeSummary_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetPlaytimeSummary_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPlaytimeSummary_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPlaytimeSummary_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CFamilyGroups_GetPlaytimeSummary_Response) GetEntries() []*CFamilyGroups_PlaytimeEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CFamilyGroups_GetPlaytimeSummary_Response) GetEntriesByOwner() []*CFamilyGroups_PlaytimeEntry {
	if x != nil {
		return x.EntriesByOwner
	}
	return nil
}

type CFamilyGroups_RequestPurchase_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid    *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Gidshoppingcart  *uint64 `protobuf:"varint,2,opt,name=gidshoppingcart" json:"gidshoppingcart,omitempty"`
	StoreCountryCode *string `protobuf:"bytes,3,opt,name=store_country_code,json=storeCountryCode" json:"store_country_code,omitempty"`
	UseAccountCart   *bool   `protobuf:"varint,4,opt,name=use_account_cart,json=useAccountCart" json:"use_account_cart,omitempty"`
}

func (x *CFamilyGroups_RequestPurchase_Request) Reset() {
	*x = CFamilyGroups_RequestPurchase_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_RequestPurchase_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_RequestPurchase_Request) ProtoMessage() {}

func (x *CFamilyGroups_RequestPurchase_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_RequestPurchase_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_RequestPurchase_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CFamilyGroups_RequestPurchase_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_RequestPurchase_Request) GetGidshoppingcart() uint64 {
	if x != nil && x.Gidshoppingcart != nil {
		return *x.Gidshoppingcart
	}
	return 0
}

func (x *CFamilyGroups_RequestPurchase_Request) GetStoreCountryCode() string {
	if x != nil && x.StoreCountryCode != nil {
		return *x.StoreCountryCode
	}
	return ""
}

func (x *CFamilyGroups_RequestPurchase_Request) GetUseAccountCart() bool {
	if x != nil && x.UseAccountCart != nil {
		return *x.UseAccountCart
	}
	return false
}

type CFamilyGroups_RequestPurchase_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidshoppingcart *uint64 `protobuf:"varint,1,opt,name=gidshoppingcart" json:"gidshoppingcart,omitempty"`
	RequestId       *uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (x *CFamilyGroups_RequestPurchase_Response) Reset() {
	*x = CFamilyGroups_RequestPurchase_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_RequestPurchase_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_RequestPurchase_Response) ProtoMessage() {}

func (x *CFamilyGroups_RequestPurchase_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_RequestPurchase_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_RequestPurchase_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CFamilyGroups_RequestPurchase_Response) GetGidshoppingcart() uint64 {
	if x != nil && x.Gidshoppingcart != nil {
		return *x.Gidshoppingcart
	}
	return 0
}

func (x *CFamilyGroups_RequestPurchase_Response) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CFamilyGroups_GetPurchaseRequests_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid           *uint64  `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	RequestIds              []uint64 `protobuf:"varint,3,rep,name=request_ids,json=requestIds" json:"request_ids,omitempty"`
	RtIncludeCompletedSince *uint32  `protobuf:"varint,4,opt,name=rt_include_completed_since,json=rtIncludeCompletedSince" json:"rt_include_completed_since,omitempty"`
}

func (x *CFamilyGroups_GetPurchaseRequests_Request) Reset() {
	*x = CFamilyGroups_GetPurchaseRequests_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPurchaseRequests_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPurchaseRequests_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetPurchaseRequests_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPurchaseRequests_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPurchaseRequests_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CFamilyGroups_GetPurchaseRequests_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetPurchaseRequests_Request) GetRequestIds() []uint64 {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

func (x *CFamilyGroups_GetPurchaseRequests_Request) GetRtIncludeCompletedSince() uint32 {
	if x != nil && x.RtIncludeCompletedSince != nil {
		return *x.RtIncludeCompletedSince
	}
	return 0
}

type PurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterSteamid    *uint64                 `protobuf:"fixed64,1,opt,name=requester_steamid,json=requesterSteamid" json:"requester_steamid,omitempty"`
	Gidshoppingcart     *uint64                 `protobuf:"varint,2,opt,name=gidshoppingcart" json:"gidshoppingcart,omitempty"`
	TimeRequested       *uint32                 `protobuf:"varint,3,opt,name=time_requested,json=timeRequested" json:"time_requested,omitempty"`
	TimeResponded       *uint32                 `protobuf:"varint,4,opt,name=time_responded,json=timeResponded" json:"time_responded,omitempty"`
	ResponderSteamid    *uint64                 `protobuf:"fixed64,5,opt,name=responder_steamid,json=responderSteamid" json:"responder_steamid,omitempty"`
	ResponseAction      *EPurchaseRequestAction `protobuf:"varint,6,opt,name=response_action,json=responseAction,enum=EPurchaseRequestAction,def=0" json:"response_action,omitempty"`
	IsCompleted         *bool                   `protobuf:"varint,7,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	RequestId           *uint64                 `protobuf:"varint,8,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestedPackageids []uint32                `protobuf:"varint,9,rep,name=requested_packageids,json=requestedPackageids" json:"requested_packageids,omitempty"`
	PurchasedPackageids []uint32                `protobuf:"varint,10,rep,name=purchased_packageids,json=purchasedPackageids" json:"purchased_packageids,omitempty"`
	RequestedBundleids  []uint32                `protobuf:"varint,11,rep,name=requested_bundleids,json=requestedBundleids" json:"requested_bundleids,omitempty"`
	PurchasedBundleids  []uint32                `protobuf:"varint,12,rep,name=purchased_bundleids,json=purchasedBundleids" json:"purchased_bundleids,omitempty"`
}

// Default values for PurchaseRequest fields.
const (
	Default_PurchaseRequest_ResponseAction = EPurchaseRequestAction_k_EPurchaseRequestAction_None
)

func (x *PurchaseRequest) Reset() {
	*x = PurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseRequest) ProtoMessage() {}

func (x *PurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseRequest.ProtoReflect.Descriptor instead.
func (*PurchaseRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *PurchaseRequest) GetRequesterSteamid() uint64 {
	if x != nil && x.RequesterSteamid != nil {
		return *x.RequesterSteamid
	}
	return 0
}

func (x *PurchaseRequest) GetGidshoppingcart() uint64 {
	if x != nil && x.Gidshoppingcart != nil {
		return *x.Gidshoppingcart
	}
	return 0
}

func (x *PurchaseRequest) GetTimeRequested() uint32 {
	if x != nil && x.TimeRequested != nil {
		return *x.TimeRequested
	}
	return 0
}

func (x *PurchaseRequest) GetTimeResponded() uint32 {
	if x != nil && x.TimeResponded != nil {
		return *x.TimeResponded
	}
	return 0
}

func (x *PurchaseRequest) GetResponderSteamid() uint64 {
	if x != nil && x.ResponderSteamid != nil {
		return *x.ResponderSteamid
	}
	return 0
}

func (x *PurchaseRequest) GetResponseAction() EPurchaseRequestAction {
	if x != nil && x.ResponseAction != nil {
		return *x.ResponseAction
	}
	return Default_PurchaseRequest_ResponseAction
}

func (x *PurchaseRequest) GetIsCompleted() bool {
	if x != nil && x.IsCompleted != nil {
		return *x.IsCompleted
	}
	return false
}

func (x *PurchaseRequest) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *PurchaseRequest) GetRequestedPackageids() []uint32 {
	if x != nil {
		return x.RequestedPackageids
	}
	return nil
}

func (x *PurchaseRequest) GetPurchasedPackageids() []uint32 {
	if x != nil {
		return x.PurchasedPackageids
	}
	return nil
}

func (x *PurchaseRequest) GetRequestedBundleids() []uint32 {
	if x != nil {
		return x.RequestedBundleids
	}
	return nil
}

func (x *PurchaseRequest) GetPurchasedBundleids() []uint32 {
	if x != nil {
		return x.PurchasedBundleids
	}
	return nil
}

type CFamilyGroups_GetPurchaseRequests_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*PurchaseRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (x *CFamilyGroups_GetPurchaseRequests_Response) Reset() {
	*x = CFamilyGroups_GetPurchaseRequests_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPurchaseRequests_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPurchaseRequests_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetPurchaseRequests_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPurchaseRequests_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPurchaseRequests_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CFamilyGroups_GetPurchaseRequests_Response) GetRequests() []*PurchaseRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type CFamilyGroups_RespondToRequestedPurchase_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64                 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Action        *EPurchaseRequestAction `protobuf:"varint,3,opt,name=action,enum=EPurchaseRequestAction,def=0" json:"action,omitempty"`
	RequestId     *uint64                 `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

// Default values for CFamilyGroups_RespondToRequestedPurchase_Request fields.
const (
	Default_CFamilyGroups_RespondToRequestedPurchase_Request_Action = EPurchaseRequestAction_k_EPurchaseRequestAction_None
)

func (x *CFamilyGroups_RespondToRequestedPurchase_Request) Reset() {
	*x = CFamilyGroups_RespondToRequestedPurchase_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_RespondToRequestedPurchase_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_RespondToRequestedPurchase_Request) ProtoMessage() {}

func (x *CFamilyGroups_RespondToRequestedPurchase_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_RespondToRequestedPurchase_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_RespondToRequestedPurchase_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CFamilyGroups_RespondToRequestedPurchase_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_RespondToRequestedPurchase_Request) GetAction() EPurchaseRequestAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CFamilyGroups_RespondToRequestedPurchase_Request_Action
}

func (x *CFamilyGroups_RespondToRequestedPurchase_Request) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CFamilyGroups_RespondToRequestedPurchase_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_RespondToRequestedPurchase_Response) Reset() {
	*x = CFamilyGroups_RespondToRequestedPurchase_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_RespondToRequestedPurchase_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_RespondToRequestedPurchase_Response) ProtoMessage() {}

func (x *CFamilyGroups_RespondToRequestedPurchase_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_RespondToRequestedPurchase_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_RespondToRequestedPurchase_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{41}
}

type CFamilyGroups_GetChangeLog_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
}

func (x *CFamilyGroups_GetChangeLog_Request) Reset() {
	*x = CFamilyGroups_GetChangeLog_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetChangeLog_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetChangeLog_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetChangeLog_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetChangeLog_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetChangeLog_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{42}
}

func (x *CFamilyGroups_GetChangeLog_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

type CFamilyGroups_GetChangeLog_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*CFamilyGroups_GetChangeLog_Response_Change `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
}

func (x *CFamilyGroups_GetChangeLog_Response) Reset() {
	*x = CFamilyGroups_GetChangeLog_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetChangeLog_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetChangeLog_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetChangeLog_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetChangeLog_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetChangeLog_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CFamilyGroups_GetChangeLog_Response) GetChanges() []*CFamilyGroups_GetChangeLog_Response_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CFamilyGroups_SetFamilyCooldownOverrides_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	CooldownCount *uint32 `protobuf:"varint,2,opt,name=cooldown_count,json=cooldownCount" json:"cooldown_count,omitempty"`
}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Request) Reset() {
	*x = CFamilyGroups_SetFamilyCooldownOverrides_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_SetFamilyCooldownOverrides_Request) ProtoMessage() {}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_SetFamilyCooldownOverrides_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_SetFamilyCooldownOverrides_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Request) GetCooldownCount() uint32 {
	if x != nil && x.CooldownCount != nil {
		return *x.CooldownCount
	}
	return 0
}

type CFamilyGroups_SetFamilyCooldownOverrides_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Response) Reset() {
	*x = CFamilyGroups_SetFamilyCooldownOverrides_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_SetFamilyCooldownOverrides_Response) ProtoMessage() {}

func (x *CFamilyGroups_SetFamilyCooldownOverrides_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_SetFamilyCooldownOverrides_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_SetFamilyCooldownOverrides_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{45}
}

type CFamilyGroups_GetSharedLibraryApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid   *uint64 `protobuf:"fixed64,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	IncludeOwn      *bool   `protobuf:"varint,2,opt,name=include_own,json=includeOwn" json:"include_own,omitempty"`
	IncludeExcluded *bool   `protobuf:"varint,3,opt,name=include_excluded,json=includeExcluded" json:"include_excluded,omitempty"`
	Language        *string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	MaxApps         *uint32 `protobuf:"varint,6,opt,name=max_apps,json=maxApps" json:"max_apps,omitempty"`
	IncludeNonGames *bool   `protobuf:"varint,7,opt,name=include_non_games,json=includeNonGames" json:"include_non_games,omitempty"`
	Steamid         *uint64 `protobuf:"fixed64,8,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) Reset() {
	*x = CFamilyGroups_GetSharedLibraryApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetSharedLibraryApps_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetSharedLibraryApps_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetSharedLibraryApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetIncludeOwn() bool {
	if x != nil && x.IncludeOwn != nil {
		return *x.IncludeOwn
	}
	return false
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetIncludeExcluded() bool {
	if x != nil && x.IncludeExcluded != nil {
		return *x.IncludeExcluded
	}
	return false
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetMaxApps() uint32 {
	if x != nil && x.MaxApps != nil {
		return *x.MaxApps
	}
	return 0
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetIncludeNonGames() bool {
	if x != nil && x.IncludeNonGames != nil {
		return *x.IncludeNonGames
	}
	return false
}

func (x *CFamilyGroups_GetSharedLibraryApps_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFamilyGroups_GetSharedLibraryApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps         []*CFamilyGroups_GetSharedLibraryApps_Response_SharedApp `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	OwnerSteamid *uint64                                                  `protobuf:"fixed64,2,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response) Reset() {
	*x = CFamilyGroups_GetSharedLibraryApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetSharedLibraryApps_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetSharedLibraryApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetSharedLibraryApps_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetSharedLibraryApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response) GetApps() []*CFamilyGroups_GetSharedLibraryApps_Response_SharedApp {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

type CFamilyGroups_SetPreferredLender_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Appid         *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	LenderSteamid *uint64 `protobuf:"fixed64,3,opt,name=lender_steamid,json=lenderSteamid" json:"lender_steamid,omitempty"`
}

func (x *CFamilyGroups_SetPreferredLender_Request) Reset() {
	*x = CFamilyGroups_SetPreferredLender_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_SetPreferredLender_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_SetPreferredLender_Request) ProtoMessage() {}

func (x *CFamilyGroups_SetPreferredLender_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_SetPreferredLender_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_SetPreferredLender_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{48}
}

func (x *CFamilyGroups_SetPreferredLender_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_SetPreferredLender_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CFamilyGroups_SetPreferredLender_Request) GetLenderSteamid() uint64 {
	if x != nil && x.LenderSteamid != nil {
		return *x.LenderSteamid
	}
	return 0
}

type CFamilyGroups_SetPreferredLender_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_SetPreferredLender_Response) Reset() {
	*x = CFamilyGroups_SetPreferredLender_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_SetPreferredLender_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_SetPreferredLender_Response) ProtoMessage() {}

func (x *CFamilyGroups_SetPreferredLender_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_SetPreferredLender_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_SetPreferredLender_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{49}
}

type CFamilyGroups_GetPreferredLenders_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
}

func (x *CFamilyGroups_GetPreferredLenders_Request) Reset() {
	*x = CFamilyGroups_GetPreferredLenders_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPreferredLenders_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPreferredLenders_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetPreferredLenders_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPreferredLenders_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPreferredLenders_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{50}
}

func (x *CFamilyGroups_GetPreferredLenders_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

type CFamilyGroups_GetPreferredLenders_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*CFamilyGroups_GetPreferredLenders_Response_FamilyMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (x *CFamilyGroups_GetPreferredLenders_Response) Reset() {
	*x = CFamilyGroups_GetPreferredLenders_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPreferredLenders_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPreferredLenders_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetPreferredLenders_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPreferredLenders_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPreferredLenders_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CFamilyGroups_GetPreferredLenders_Response) GetMembers() []*CFamilyGroups_GetPreferredLenders_Response_FamilyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type CFamilyGroups_ForceAcceptInvite_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Steamid       *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CFamilyGroups_ForceAcceptInvite_Request) Reset() {
	*x = CFamilyGroups_ForceAcceptInvite_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ForceAcceptInvite_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ForceAcceptInvite_Request) ProtoMessage() {}

func (x *CFamilyGroups_ForceAcceptInvite_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ForceAcceptInvite_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ForceAcceptInvite_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{52}
}

func (x *CFamilyGroups_ForceAcceptInvite_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_ForceAcceptInvite_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFamilyGroups_ForceAcceptInvite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_ForceAcceptInvite_Response) Reset() {
	*x = CFamilyGroups_ForceAcceptInvite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ForceAcceptInvite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ForceAcceptInvite_Response) ProtoMessage() {}

func (x *CFamilyGroups_ForceAcceptInvite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ForceAcceptInvite_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ForceAcceptInvite_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{53}
}

type CFamilyGroups_GetInviteCheckResults_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	Steamid       *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CFamilyGroups_GetInviteCheckResults_Request) Reset() {
	*x = CFamilyGroups_GetInviteCheckResults_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetInviteCheckResults_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetInviteCheckResults_Request) ProtoMessage() {}

func (x *CFamilyGroups_GetInviteCheckResults_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetInviteCheckResults_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetInviteCheckResults_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{54}
}

func (x *CFamilyGroups_GetInviteCheckResults_Request) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroups_GetInviteCheckResults_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFamilyGroups_GetInviteCheckResults_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletCountryMatches *bool   `protobuf:"varint,1,opt,name=wallet_country_matches,json=walletCountryMatches" json:"wallet_country_matches,omitempty"`
	IpMatch              *bool   `protobuf:"varint,2,opt,name=ip_match,json=ipMatch" json:"ip_match,omitempty"`
	JoinRestriction      *uint32 `protobuf:"varint,3,opt,name=join_restriction,json=joinRestriction" json:"join_restriction,omitempty"`
}

func (x *CFamilyGroups_GetInviteCheckResults_Response) Reset() {
	*x = CFamilyGroups_GetInviteCheckResults_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetInviteCheckResults_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetInviteCheckResults_Response) ProtoMessage() {}

func (x *CFamilyGroups_GetInviteCheckResults_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetInviteCheckResults_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetInviteCheckResults_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CFamilyGroups_GetInviteCheckResults_Response) GetWalletCountryMatches() bool {
	if x != nil && x.WalletCountryMatches != nil {
		return *x.WalletCountryMatches
	}
	return false
}

func (x *CFamilyGroups_GetInviteCheckResults_Response) GetIpMatch() bool {
	if x != nil && x.IpMatch != nil {
		return *x.IpMatch
	}
	return false
}

func (x *CFamilyGroups_GetInviteCheckResults_Response) GetJoinRestriction() uint32 {
	if x != nil && x.JoinRestriction != nil {
		return *x.JoinRestriction
	}
	return 0
}

type CFamilyGroups_ClearCooldownSkip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	InviteId *uint64 `protobuf:"varint,2,opt,name=invite_id,json=inviteId" json:"invite_id,omitempty"`
}

func (x *CFamilyGroups_ClearCooldownSkip_Request) Reset() {
	*x = CFamilyGroups_ClearCooldownSkip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ClearCooldownSkip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ClearCooldownSkip_Request) ProtoMessage() {}

func (x *CFamilyGroups_ClearCooldownSkip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ClearCooldownSkip_Request.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ClearCooldownSkip_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{56}
}

func (x *CFamilyGroups_ClearCooldownSkip_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFamilyGroups_ClearCooldownSkip_Request) GetInviteId() uint64 {
	if x != nil && x.InviteId != nil {
		return *x.InviteId
	}
	return 0
}

type CFamilyGroups_ClearCooldownSkip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroups_ClearCooldownSkip_Response) Reset() {
	*x = CFamilyGroups_ClearCooldownSkip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_ClearCooldownSkip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_ClearCooldownSkip_Response) ProtoMessage() {}

func (x *CFamilyGroups_ClearCooldownSkip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_ClearCooldownSkip_Response.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_ClearCooldownSkip_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{57}
}

type CFamilyGroupsClient_NotifyRunningApps_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64                                                          `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
	RunningApps   []*CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp `protobuf:"bytes,2,rep,name=running_apps,json=runningApps" json:"running_apps,omitempty"`
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification) Reset() {
	*x = CFamilyGroupsClient_NotifyRunningApps_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroupsClient_NotifyRunningApps_Notification) ProtoMessage() {}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroupsClient_NotifyRunningApps_Notification.ProtoReflect.Descriptor instead.
func (*CFamilyGroupsClient_NotifyRunningApps_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{58}
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification) GetRunningApps() []*CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp {
	if x != nil {
		return x.RunningApps
	}
	return nil
}

type CFamilyGroupsClient_InviteStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFamilyGroupsClient_InviteStatus_Notification) Reset() {
	*x = CFamilyGroupsClient_InviteStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroupsClient_InviteStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroupsClient_InviteStatus_Notification) ProtoMessage() {}

func (x *CFamilyGroupsClient_InviteStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroupsClient_InviteStatus_Notification.ProtoReflect.Descriptor instead.
func (*CFamilyGroupsClient_InviteStatus_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{59}
}

type CFamilyGroupsClient_GroupChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyGroupid *uint64 `protobuf:"varint,1,opt,name=family_groupid,json=familyGroupid" json:"family_groupid,omitempty"`
}

func (x *CFamilyGroupsClient_GroupChanged_Notification) Reset() {
	*x = CFamilyGroupsClient_GroupChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroupsClient_GroupChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroupsClient_GroupChanged_Notification) ProtoMessage() {}

func (x *CFamilyGroupsClient_GroupChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroupsClient_GroupChanged_Notification.ProtoReflect.Descriptor instead.
func (*CFamilyGroupsClient_GroupChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{60}
}

func (x *CFamilyGroupsClient_GroupChanged_Notification) GetFamilyGroupid() uint64 {
	if x != nil && x.FamilyGroupid != nil {
		return *x.FamilyGroupid
	}
	return 0
}

type CFamilyGroups_GetChangeLog_Response_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    *uint64                    `protobuf:"fixed64,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ActorSteamid *uint64                    `protobuf:"fixed64,2,opt,name=actor_steamid,json=actorSteamid" json:"actor_steamid,omitempty"`
	Type         *EFamilyGroupChangeLogType `protobuf:"varint,3,opt,name=type,enum=EFamilyGroupChangeLogType,def=0" json:"type,omitempty"`
	Body         *string                    `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	BySupport    *bool                      `protobuf:"varint,5,opt,name=by_support,json=bySupport" json:"by_support,omitempty"`
}

// Default values for CFamilyGroups_GetChangeLog_Response_Change fields.
const (
	Default_CFamilyGroups_GetChangeLog_Response_Change_Type = EFamilyGroupChangeLogType_k_InvalidChangeType
)

func (x *CFamilyGroups_GetChangeLog_Response_Change) Reset() {
	*x = CFamilyGroups_GetChangeLog_Response_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetChangeLog_Response_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetChangeLog_Response_Change) ProtoMessage() {}

func (x *CFamilyGroups_GetChangeLog_Response_Change) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetChangeLog_Response_Change.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetChangeLog_Response_Change) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{43, 0}
}

func (x *CFamilyGroups_GetChangeLog_Response_Change) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CFamilyGroups_GetChangeLog_Response_Change) GetActorSteamid() uint64 {
	if x != nil && x.ActorSteamid != nil {
		return *x.ActorSteamid
	}
	return 0
}

func (x *CFamilyGroups_GetChangeLog_Response_Change) GetType() EFamilyGroupChangeLogType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CFamilyGroups_GetChangeLog_Response_Change_Type
}

func (x *CFamilyGroups_GetChangeLog_Response_Change) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *CFamilyGroups_GetChangeLog_Response_Change) GetBySupport() bool {
	if x != nil && x.BySupport != nil {
		return *x.BySupport
	}
	return false
}

type CFamilyGroups_GetSharedLibraryApps_Response_SharedApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid              *uint32                      `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	OwnerSteamids      []uint64                     `protobuf:"fixed64,2,rep,name=owner_steamids,json=ownerSteamids" json:"owner_steamids,omitempty"`
	Name               *string                      `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	SortAs             *string                      `protobuf:"bytes,7,opt,name=sort_as,json=sortAs" json:"sort_as,omitempty"`
	CapsuleFilename    *string                      `protobuf:"bytes,8,opt,name=capsule_filename,json=capsuleFilename" json:"capsule_filename,omitempty"`
	ImgIconHash        *string                      `protobuf:"bytes,9,opt,name=img_icon_hash,json=imgIconHash" json:"img_icon_hash,omitempty"`
	ExcludeReason      *ESharedLibraryExcludeReason `protobuf:"varint,10,opt,name=exclude_reason,json=excludeReason,enum=ESharedLibraryExcludeReason,def=0" json:"exclude_reason,omitempty"`
	RtTimeAcquired     *uint32                      `protobuf:"varint,11,opt,name=rt_time_acquired,json=rtTimeAcquired" json:"rt_time_acquired,omitempty"`
	RtLastPlayed       *uint32                      `protobuf:"varint,12,opt,name=rt_last_played,json=rtLastPlayed" json:"rt_last_played,omitempty"`
	RtPlaytime         *uint32                      `protobuf:"varint,13,opt,name=rt_playtime,json=rtPlaytime" json:"rt_playtime,omitempty"`
	AppType            *EProtoAppType               `protobuf:"varint,14,opt,name=app_type,json=appType,enum=EProtoAppType,def=1" json:"app_type,omitempty"`
	ContentDescriptors []uint32                     `protobuf:"varint,15,rep,name=content_descriptors,json=contentDescriptors" json:"content_descriptors,omitempty"`
}

// Default values for CFamilyGroups_GetSharedLibraryApps_Response_SharedApp fields.
const (
	Default_CFamilyGroups_GetSharedLibraryApps_Response_SharedApp_ExcludeReason = ESharedLibraryExcludeReason_k_ESharedLibrary_Included
	Default_CFamilyGroups_GetSharedLibraryApps_Response_SharedApp_AppType       = EProtoAppType_k_EAppTypeGame
)

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) Reset() {
	*x = CFamilyGroups_GetSharedLibraryApps_Response_SharedApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) ProtoMessage() {}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetSharedLibraryApps_Response_SharedApp.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetOwnerSteamids() []uint64 {
	if x != nil {
		return x.OwnerSteamids
	}
	return nil
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetSortAs() string {
	if x != nil && x.SortAs != nil {
		return *x.SortAs
	}
	return ""
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetCapsuleFilename() string {
	if x != nil && x.CapsuleFilename != nil {
		return *x.CapsuleFilename
	}
	return ""
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetImgIconHash() string {
	if x != nil && x.ImgIconHash != nil {
		return *x.ImgIconHash
	}
	return ""
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetExcludeReason() ESharedLibraryExcludeReason {
	if x != nil && x.ExcludeReason != nil {
		return *x.ExcludeReason
	}
	return Default_CFamilyGroups_GetSharedLibraryApps_Response_SharedApp_ExcludeReason
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetRtTimeAcquired() uint32 {
	if x != nil && x.RtTimeAcquired != nil {
		return *x.RtTimeAcquired
	}
	return 0
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetRtLastPlayed() uint32 {
	if x != nil && x.RtLastPlayed != nil {
		return *x.RtLastPlayed
	}
	return 0
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetRtPlaytime() uint32 {
	if x != nil && x.RtPlaytime != nil {
		return *x.RtPlaytime
	}
	return 0
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetAppType() EProtoAppType {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return Default_CFamilyGroups_GetSharedLibraryApps_Response_SharedApp_AppType
}

func (x *CFamilyGroups_GetSharedLibraryApps_Response_SharedApp) GetContentDescriptors() []uint32 {
	if x != nil {
		return x.ContentDescriptors
	}
	return nil
}

type CFamilyGroups_GetPreferredLenders_Response_FamilyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	PreferredAppids []uint32 `protobuf:"varint,2,rep,name=preferred_appids,json=preferredAppids" json:"preferred_appids,omitempty"`
}

func (x *CFamilyGroups_GetPreferredLenders_Response_FamilyMember) Reset() {
	*x = CFamilyGroups_GetPreferredLenders_Response_FamilyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroups_GetPreferredLenders_Response_FamilyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroups_GetPreferredLenders_Response_FamilyMember) ProtoMessage() {}

func (x *CFamilyGroups_GetPreferredLenders_Response_FamilyMember) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroups_GetPreferredLenders_Response_FamilyMember.ProtoReflect.Descriptor instead.
func (*CFamilyGroups_GetPreferredLenders_Response_FamilyMember) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CFamilyGroups_GetPreferredLenders_Response_FamilyMember) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFamilyGroups_GetPreferredLenders_Response_FamilyMember) GetPreferredAppids() []uint32 {
	if x != nil {
		return x.PreferredAppids
	}
	return nil
}

type CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberSteamid *uint64 `protobuf:"fixed64,1,opt,name=member_steamid,json=memberSteamid" json:"member_steamid,omitempty"`
	OwnerSteamid  *uint64 `protobuf:"fixed64,2,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) Reset() {
	*x = CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) ProtoMessage() {}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember.ProtoReflect.Descriptor instead.
func (*CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{58, 0}
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) GetMemberSteamid() uint64 {
	if x != nil && x.MemberSteamid != nil {
		return *x.MemberSteamid
	}
	return 0
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

type CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid          *uint32                                                             `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	PlayingMembers []*CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember `protobuf:"bytes,3,rep,name=playing_members,json=playingMembers" json:"playing_members,omitempty"`
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) Reset() {
	*x = CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) ProtoMessage() {}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_familygroups_steamclient_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp.ProtoReflect.Descriptor instead.
func (*CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) Descriptor() ([]byte, []int) {
	return file_steammessages_familygroups_steamclient_proto_rawDescGZIP(), []int{58, 1}
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp) GetPlayingMembers() []*CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember {
	if x != nil {
		return x.PlayingMembers
	}
	return nil
}

var File_steammessages_familygroups_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_familygroups_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x27, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a,
	0x28, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x24, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x22,
	0xcc, 0x01, 0x0a, 0x11, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x74,
	0x0a, 0x18, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x25, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x6c, 0x6f,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x6c, 0x6f,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x2b, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd4, 0x01, 0x0a, 0x1f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x32, 0x66, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x32, 0x66, 0x61, 0x22, 0xb8, 0x04, 0x0a, 0x2c, 0x43, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x49, 0x0a, 0x0c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x1f, 0x63,
	0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x22, 0x6b, 0x0a, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31,
	0x0a, 0x2f, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xce, 0x01, 0x0a, 0x29, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x2a, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6d,
	0x0a, 0x11, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0f, 0x74, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x30, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x31,
	0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x76, 0x0a, 0x33, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x34, 0x43, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x64, 0x0a, 0x25, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x26, 0x43, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x11, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x22, 0x6b, 0x5f,
	0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x6e, 0x65,
	0x52, 0x0f, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x2c, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x2b, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x2e, 0x0a, 0x2c,
	0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x2d, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x22, 0x30, 0x0a, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x2b, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x2c, 0x43, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x50,
	0x0a, 0x27, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x22, 0x2a, 0x0a, 0x28, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x29,
	0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51,
	0x0a, 0x28, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x29, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xd0,
	0x01, 0x0a, 0x25, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x67, 0x69, 0x64, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x69, 0x64, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72,
	0x74, 0x22, 0x71, 0x0a, 0x26, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67,
	0x69, 0x64, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x69, 0x64, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x63, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x29, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x72, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xce, 0x04, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x69, 0x64, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x67, 0x69, 0x64, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61,
	0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x5f, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x1d, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x2a, 0x43, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x30, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x12, 0x4e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x31, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x22, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x22, 0xb2, 0x02, 0x0a, 0x23, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x1a, 0xc3, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x45,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x6b, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x30, 0x43, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x31, 0x43, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c,
	0x02, 0x0a, 0x2a, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x41, 0x70, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xa2, 0x05,
	0x0a, 0x2b, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x1a, 0x81,
	0x04, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6d, 0x67, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x67, 0x49, 0x63, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5e, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x19, 0x6b, 0x5f, 0x45,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x28, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x29, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x2a, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x27,
	0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x2b, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x2c, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x60, 0x0a, 0x27, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x53, 0x6b, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xac, 0x03, 0x0a, 0x32, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x61, 0x0a,
	0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73,
	0x1a, 0x5b, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x1a, 0x8e, 0x01,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x6a, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x2f,
	0x0a, 0x2d, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x56, 0x0a, 0x2d, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x2a, 0x87, 0x01, 0x0a, 0x10, 0x45, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x41, 0x64, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x03, 0x2a, 0x99, 0x01, 0x0a, 0x1c, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x2a, 0xf8, 0x01,
	0x0a, 0x16, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x88, 0x06, 0x0a, 0x19, 0x45, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a,
	0x65, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x10, 0x17, 0x12,
	0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10,
	0x18, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x19, 0x2a, 0x9c, 0x0b, 0x0a, 0x1b, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x41, 0x70, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x5f, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x41, 0x70, 0x70,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x41, 0x70, 0x70, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4c, 0x43, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f,
	0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x41,
	0x70, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x55, 0x6e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x41, 0x70, 0x70, 0x10, 0x08, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f,
	0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x41,
	0x70, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x2e,
	0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x5f, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x2c,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x5f, 0x44, 0x65, 0x76, 0x10, 0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x57,
	0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x10, 0x10, 0x12, 0x35, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x5f, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x11, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x10, 0x12, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x73, 0x10, 0x13, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f,
	0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x10,
	0x14, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x15, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f,
	0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x16, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x10, 0x17, 0x12,
	0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x18, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x19, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x46, 0x6c,
	0x61, 0x67, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x1a, 0x12, 0x32, 0x0a, 0x2e,
	0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x5f, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x10, 0x1b,
	0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x10, 0x1c, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x53, 0x75,
	0x62, 0x10, 0x1d, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x1e, 0x32, 0xb4, 0x17, 0x0a, 0x0c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x25, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x2f, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x43, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x31, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x2e, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a, 0x6f,
	0x69, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a, 0x6f, 0x69,
	0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c,
	0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2c, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x28, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a,
	0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x2e,
	0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x26, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x2a, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x31, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x23,
	0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x53, 0x65,
	0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x2c, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x53, 0x6b, 0x69, 0x70, 0x12, 0x28, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x6b, 0x69, 0x70,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x97, 0x02, 0x0a, 0x12, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x70, 0x70, 0x73, 0x12, 0x33, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e,
	0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x2e, 0x2e, 0x43, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0xc0,
	0xb5, 0x18, 0x02, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_familygroups_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_familygroups_steamclient_proto_rawDescData = file_steammessages_familygroups_steamclient_proto_rawDesc
)

func file_steammessages_familygroups_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_familygroups_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_familygroups_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_familygroups_steamclient_proto_rawDescData)
	})
	return file_steammessages_familygroups_steamclient_proto_rawDescData
}

var file_steammessages_familygroups_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_steammessages_familygroups_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_steammessages_familygroups_steamclient_proto_goTypes = []any{
	(EFamilyGroupRole)(0),                                                    // 0: EFamilyGroupRole
	(EFamilyGroupsTwoFactorMethod)(0),                                        // 1: EFamilyGroupsTwoFactorMethod
	(EPurchaseRequestAction)(0),                                              // 2: EPurchaseRequestAction
	(EFamilyGroupChangeLogType)(0),                                           // 3: EFamilyGroupChangeLogType
	(ESharedLibraryExcludeReason)(0),                                         // 4: ESharedLibraryExcludeReason
	(*CFamilyGroups_CreateFamilyGroup_Request)(nil),                          // 5: CFamilyGroups_CreateFamilyGroup_Request
	(*CFamilyGroups_CreateFamilyGroup_Response)(nil),                         // 6: CFamilyGroups_CreateFamilyGroup_Response
	(*CFamilyGroups_GetFamilyGroup_Request)(nil),                             // 7: CFamilyGroups_GetFamilyGroup_Request
	(*FamilyGroupMember)(nil),                                                // 8: FamilyGroupMember
	(*FamilyGroupPendingInvite)(nil),                                         // 9: FamilyGroupPendingInvite
	(*FamilyGroupFormerMember)(nil),                                          // 10: FamilyGroupFormerMember
	(*CFamilyGroups_GetFamilyGroup_Response)(nil),                            // 11: CFamilyGroups_GetFamilyGroup_Response
	(*CFamilyGroups_GetFamilyGroupForUser_Request)(nil),                      // 12: CFamilyGroups_GetFamilyGroupForUser_Request
	(*FamilyGroupPendingInviteForUser)(nil),                                  // 13: FamilyGroupPendingInviteForUser
	(*CFamilyGroups_GetFamilyGroupForUser_Response)(nil),                     // 14: CFamilyGroups_GetFamilyGroupForUser_Response
	(*CFamilyGroups_ModifyFamilyGroupDetails_Request)(nil),                   // 15: CFamilyGroups_ModifyFamilyGroupDetails_Request
	(*CFamilyGroups_ModifyFamilyGroupDetails_Response)(nil),                  // 16: CFamilyGroups_ModifyFamilyGroupDetails_Response
	(*CFamilyGroups_InviteToFamilyGroup_Request)(nil),                        // 17: CFamilyGroups_InviteToFamilyGroup_Request
	(*CFamilyGroups_InviteToFamilyGroup_Response)(nil),                       // 18: CFamilyGroups_InviteToFamilyGroup_Response
	(*CFamilyGroups_ConfirmInviteToFamilyGroup_Request)(nil),                 // 19: CFamilyGroups_ConfirmInviteToFamilyGroup_Request
	(*CFamilyGroups_ConfirmInviteToFamilyGroup_Response)(nil),                // 20: CFamilyGroups_ConfirmInviteToFamilyGroup_Response
	(*CFamilyGroups_ResendInvitationToFamilyGroup_Request)(nil),              // 21: CFamilyGroups_ResendInvitationToFamilyGroup_Request
	(*CFamilyGroups_ResendInvitationToFamilyGroup_Response)(nil),             // 22: CFamilyGroups_ResendInvitationToFamilyGroup_Response
	(*CFamilyGroups_JoinFamilyGroup_Request)(nil),                            // 23: CFamilyGroups_JoinFamilyGroup_Request
	(*CFamilyGroups_JoinFamilyGroup_Response)(nil),                           // 24: CFamilyGroups_JoinFamilyGroup_Response
	(*CFamilyGroups_ConfirmJoinFamilyGroup_Request)(nil),                     // 25: CFamilyGroups_ConfirmJoinFamilyGroup_Request
	(*CFamilyGroups_ConfirmJoinFamilyGroup_Response)(nil),                    // 26: CFamilyGroups_ConfirmJoinFamilyGroup_Response
	(*CFamilyGroups_RemoveFromFamilyGroup_Request)(nil),                      // 27: CFamilyGroups_RemoveFromFamilyGroup_Request
	(*CFamilyGroups_RemoveFromFamilyGroup_Response)(nil),                     // 28: CFamilyGroups_RemoveFromFamilyGroup_Response
	(*CFamilyGroups_CancelFamilyGroupInvite_Request)(nil),                    // 29: CFamilyGroups_CancelFamilyGroupInvite_Request
	(*CFamilyGroups_CancelFamilyGroupInvite_Response)(nil),                   // 30: CFamilyGroups_CancelFamilyGroupInvite_Response
	(*CFamilyGroups_GetUsersSharingDevice_Request)(nil),                      // 31: CFamilyGroups_GetUsersSharingDevice_Request
	(*CFamilyGroups_GetUsersSharingDevice_Response)(nil),                     // 32: CFamilyGroups_GetUsersSharingDevice_Response
	(*CFamilyGroups_DeleteFamilyGroup_Request)(nil),                          // 33: CFamilyGroups_DeleteFamilyGroup_Request
	(*CFamilyGroups_DeleteFamilyGroup_Response)(nil),                         // 34: CFamilyGroups_DeleteFamilyGroup_Response
	(*CFamilyGroups_UndeleteFamilyGroup_Request)(nil),                        // 35: CFamilyGroups_UndeleteFamilyGroup_Request
	(*CFamilyGroups_UndeleteFamilyGroup_Response)(nil),                       // 36: CFamilyGroups_UndeleteFamilyGroup_Response
	(*CFamilyGroups_GetPlaytimeSummary_Request)(nil),                         // 37: CFamilyGroups_GetPlaytimeSummary_Request
	(*CFamilyGroups_PlaytimeEntry)(nil),                                      // 38: CFamilyGroups_PlaytimeEntry
	(*CFamilyGroups_GetPlaytimeSummary_Response)(nil),                        // 39: CFamilyGroups_GetPlaytimeSummary_Response
	(*CFamilyGroups_RequestPurchase_Request)(nil),                            // 40: CFamilyGroups_RequestPurchase_Request
	(*CFamilyGroups_RequestPurchase_Response)(nil),                           // 41: CFamilyGroups_RequestPurchase_Response
	(*CFamilyGroups_GetPurchaseRequests_Request)(nil),                        // 42: CFamilyGroups_GetPurchaseRequests_Request
	(*PurchaseRequest)(nil),                                                  // 43: PurchaseRequest
	(*CFamilyGroups_GetPurchaseRequests_Response)(nil),                       // 44: CFamilyGroups_GetPurchaseRequests_Response
	(*CFamilyGroups_RespondToRequestedPurchase_Request)(nil),                 // 45: CFamilyGroups_RespondToRequestedPurchase_Request
	(*CFamilyGroups_RespondToRequestedPurchase_Response)(nil),                // 46: CFamilyGroups_RespondToRequestedPurchase_Response
	(*CFamilyGroups_GetChangeLog_Request)(nil),                               // 47: CFamilyGroups_GetChangeLog_Request
	(*CFamilyGroups_GetChangeLog_Response)(nil),                              // 48: CFamilyGroups_GetChangeLog_Response
	(*CFamilyGroups_SetFamilyCooldownOverrides_Request)(nil),                 // 49: CFamilyGroups_SetFamilyCooldownOverrides_Request
	(*CFamilyGroups_SetFamilyCooldownOverrides_Response)(nil),                // 50: CFamilyGroups_SetFamilyCooldownOverrides_Response
	(*CFamilyGroups_GetSharedLibraryApps_Request)(nil),                       // 51: CFamilyGroups_GetSharedLibraryApps_Request
	(*CFamilyGroups_GetSharedLibraryApps_Response)(nil),                      // 52: CFamilyGroups_GetSharedLibraryApps_Response
	(*CFamilyGroups_SetPreferredLender_Request)(nil),                         // 53: CFamilyGroups_SetPreferredLender_Request
	(*CFamilyGroups_SetPreferredLender_Response)(nil),                        // 54: CFamilyGroups_SetPreferredLender_Response
	(*CFamilyGroups_GetPreferredLenders_Request)(nil),                        // 55: CFamilyGroups_GetPreferredLenders_Request
	(*CFamilyGroups_GetPreferredLenders_Response)(nil),                       // 56: CFamilyGroups_GetPreferredLenders_Response
	(*CFamilyGroups_ForceAcceptInvite_Request)(nil),                          // 57: CFamilyGroups_ForceAcceptInvite_Request
	(*CFamilyGroups_ForceAcceptInvite_Response)(nil),                         // 58: CFamilyGroups_ForceAcceptInvite_Response
	(*CFamilyGroups_GetInviteCheckResults_Request)(nil),                      // 59: CFamilyGroups_GetInviteCheckResults_Request
	(*CFamilyGroups_GetInviteCheckResults_Response)(nil),                     // 60: CFamilyGroups_GetInviteCheckResults_Response
	(*CFamilyGroups_ClearCooldownSkip_Request)(nil),                          // 61: CFamilyGroups_ClearCooldownSkip_Request
	(*CFamilyGroups_ClearCooldownSkip_Response)(nil),                         // 62: CFamilyGroups_ClearCooldownSkip_Response
	(*CFamilyGroupsClient_NotifyRunningApps_Notification)(nil),               // 63: CFamilyGroupsClient_NotifyRunningApps_Notification
	(*CFamilyGroupsClient_InviteStatus_Notification)(nil),                    // 64: CFamilyGroupsClient_InviteStatus_Notification
	(*CFamilyGroupsClient_GroupChanged_Notification)(nil),                    // 65: CFamilyGroupsClient_GroupChanged_Notification
	(*CFamilyGroups_GetChangeLog_Response_Change)(nil),                       // 66: CFamilyGroups_GetChangeLog_Response.Change
	(*CFamilyGroups_GetSharedLibraryApps_Response_SharedApp)(nil),            // 67: CFamilyGroups_GetSharedLibraryApps_Response.SharedApp
	(*CFamilyGroups_GetPreferredLenders_Response_FamilyMember)(nil),          // 68: CFamilyGroups_GetPreferredLenders_Response.FamilyMember
	(*CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember)(nil), // 69: CFamilyGroupsClient_NotifyRunningApps_Notification.PlayingMember
	(*CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp)(nil),    // 70: CFamilyGroupsClient_NotifyRunningApps_Notification.RunningApp
	(EProtoAppType)(0), // 71: EProtoAppType
	(*NoResponse)(nil), // 72: NoResponse
}
var file_steammessages_familygroups_steamclient_proto_depIdxs = []int32{
	0,  // 0: FamilyGroupMember.role:type_name -> EFamilyGroupRole
	0,  // 1: FamilyGroupPendingInvite.role:type_name -> EFamilyGroupRole
	8,  // 2: CFamilyGroups_GetFamilyGroup_Response.members:type_name -> FamilyGroupMember
	9,  // 3: CFamilyGroups_GetFamilyGroup_Response.pending_invites:type_name -> FamilyGroupPendingInvite
	10, // 4: CFamilyGroups_GetFamilyGroup_Response.former_members:type_name -> FamilyGroupFormerMember
	0,  // 5: FamilyGroupPendingInviteForUser.role:type_name -> EFamilyGroupRole
	13, // 6: CFamilyGroups_GetFamilyGroupForUser_Response.pending_group_invites:type_name -> FamilyGroupPendingInviteForUser
	11, // 7: CFamilyGroups_GetFamilyGroupForUser_Response.family_group:type_name -> CFamilyGroups_GetFamilyGroup_Response
	0,  // 8: CFamilyGroups_InviteToFamilyGroup_Request.receiver_role:type_name -> EFamilyGroupRole
	1,  // 9: CFamilyGroups_InviteToFamilyGroup_Response.two_factor_method:type_name -> EFamilyGroupsTwoFactorMethod
	1,  // 10: CFamilyGroups_JoinFamilyGroup_Response.two_factor_method:type_name -> EFamilyGroupsTwoFactorMethod
	38, // 11: CFamilyGroups_GetPlaytimeSummary_Response.entries:type_name -> CFamilyGroups_PlaytimeEntry
	38, // 12: CFamilyGroups_GetPlaytimeSummary_Response.entries_by_owner:type_name -> CFamilyGroups_PlaytimeEntry
	2,  // 13: PurchaseRequest.response_action:type_name -> EPurchaseRequestAction
	43, // 14: CFamilyGroups_GetPurchaseRequests_Response.requests:type_name -> PurchaseRequest
	2,  // 15: CFamilyGroups_RespondToRequestedPurchase_Request.action:type_name -> EPurchaseRequestAction
	66, // 16: CFamilyGroups_GetChangeLog_Response.changes:type_name -> CFamilyGroups_GetChangeLog_Response.Change
	67, // 17: CFamilyGroups_GetSharedLibraryApps_Response.apps:type_name -> CFamilyGroups_GetSharedLibraryApps_Response.SharedApp
	68, // 18: CFamilyGroups_GetPreferredLenders_Response.members:type_name -> CFamilyGroups_GetPreferredLenders_Response.FamilyMember
	70, // 19: CFamilyGroupsClient_NotifyRunningApps_Notification.running_apps:type_name -> CFamilyGroupsClient_NotifyRunningApps_Notification.RunningApp
	3,  // 20: CFamilyGroups_GetChangeLog_Response.Change.type:type_name -> EFamilyGroupChangeLogType
	4,  // 21: CFamilyGroups_GetSharedLibraryApps_Response.SharedApp.exclude_reason:type_name -> ESharedLibraryExcludeReason
	71, // 22: CFamilyGroups_GetSharedLibraryApps_Response.SharedApp.app_type:type_name -> EProtoAppType
	69, // 23: CFamilyGroupsClient_NotifyRunningApps_Notification.RunningApp.playing_members:type_name -> CFamilyGroupsClient_NotifyRunningApps_Notification.PlayingMember
	5,  // 24: FamilyGroups.CreateFamilyGroup:input_type -> CFamilyGroups_CreateFamilyGroup_Request
	7,  // 25: FamilyGroups.GetFamilyGroup:input_type -> CFamilyGroups_GetFamilyGroup_Request
	12, // 26: FamilyGroups.GetFamilyGroupForUser:input_type -> CFamilyGroups_GetFamilyGroupForUser_Request
	15, // 27: FamilyGroups.ModifyFamilyGroupDetails:input_type -> CFamilyGroups_ModifyFamilyGroupDetails_Request
	17, // 28: FamilyGroups.InviteToFamilyGroup:input_type -> CFamilyGroups_InviteToFamilyGroup_Request
	19, // 29: FamilyGroups.ConfirmInviteToFamilyGroup:input_type -> CFamilyGroups_ConfirmInviteToFamilyGroup_Request
	21, // 30: FamilyGroups.ResendInvitationToFamilyGroup:input_type -> CFamilyGroups_ResendInvitationToFamilyGroup_Request
	23, // 31: FamilyGroups.JoinFamilyGroup:input_type -> CFamilyGroups_JoinFamilyGroup_Request
	25, // 32: FamilyGroups.ConfirmJoinFamilyGroup:input_type -> CFamilyGroups_ConfirmJoinFamilyGroup_Request
	27, // 33: FamilyGroups.RemoveFromFamilyGroup:input_type -> CFamilyGroups_RemoveFromFamilyGroup_Request
	29, // 34: FamilyGroups.CancelFamilyGroupInvite:input_type -> CFamilyGroups_CancelFamilyGroupInvite_Request
	31, // 35: FamilyGroups.GetUsersSharingDevice:input_type -> CFamilyGroups_GetUsersSharingDevice_Request
	33, // 36: FamilyGroups.DeleteFamilyGroup:input_type -> CFamilyGroups_DeleteFamilyGroup_Request
	35, // 37: FamilyGroups.UndeleteFamilyGroup:input_type -> CFamilyGroups_UndeleteFamilyGroup_Request
	37, // 38: FamilyGroups.GetPlaytimeSummary:input_type -> CFamilyGroups_GetPlaytimeSummary_Request
	40, // 39: FamilyGroups.RequestPurchase:input_type -> CFamilyGroups_RequestPurchase_Request
	42, // 40: FamilyGroups.GetPurchaseRequests:input_type -> CFamilyGroups_GetPurchaseRequests_Request
	45, // 41: FamilyGroups.RespondToRequestedPurchase:input_type -> CFamilyGroups_RespondToRequestedPurchase_Request
	47, // 42: FamilyGroups.GetChangeLog:input_type -> CFamilyGroups_GetChangeLog_Request
	49, // 43: FamilyGroups.SetFamilyCooldownOverrides:input_type -> CFamilyGroups_SetFamilyCooldownOverrides_Request
	51, // 44: FamilyGroups.GetSharedLibraryApps:input_type -> CFamilyGroups_GetSharedLibraryApps_Request
	53, // 45: FamilyGroups.SetPreferredLender:input_type -> CFamilyGroups_SetPreferredLender_Request
	55, // 46: FamilyGroups.GetPreferredLenders:input_type -> CFamilyGroups_GetPreferredLenders_Request
	57, // 47: FamilyGroups.ForceAcceptInvite:input_type -> CFamilyGroups_ForceAcceptInvite_Request
	59, // 48: FamilyGroups.GetInviteCheckResults:input_type -> CFamilyGroups_GetInviteCheckResults_Request
	61, // 49: FamilyGroups.ClearCooldownSkip:input_type -> CFamilyGroups_ClearCooldownSkip_Request
	63, // 50: FamilyGroupsClient.NotifyRunningApps:input_type -> CFamilyGroupsClient_NotifyRunningApps_Notification
	64, // 51: FamilyGroupsClient.NotifyInviteStatus:input_type -> CFamilyGroupsClient_InviteStatus_Notification
	65, // 52: FamilyGroupsClient.NotifyGroupChanged:input_type -> CFamilyGroupsClient_GroupChanged_Notification
	6,  // 53: FamilyGroups.CreateFamilyGroup:output_type -> CFamilyGroups_CreateFamilyGroup_Response
	11, // 54: FamilyGroups.GetFamilyGroup:output_type -> CFamilyGroups_GetFamilyGroup_Response
	14, // 55: FamilyGroups.GetFamilyGroupForUser:output_type -> CFamilyGroups_GetFamilyGroupForUser_Response
	16, // 56: FamilyGroups.ModifyFamilyGroupDetails:output_type -> CFamilyGroups_ModifyFamilyGroupDetails_Response
	18, // 57: FamilyGroups.InviteToFamilyGroup:output_type -> CFamilyGroups_InviteToFamilyGroup_Response
	20, // 58: FamilyGroups.ConfirmInviteToFamilyGroup:output_type -> CFamilyGroups_ConfirmInviteToFamilyGroup_Response
	22, // 59: FamilyGroups.ResendInvitationToFamilyGroup:output_type -> CFamilyGroups_ResendInvitationToFamilyGroup_Response
	24, // 60: FamilyGroups.JoinFamilyGroup:output_type -> CFamilyGroups_JoinFamilyGroup_Response
	26, // 61: FamilyGroups.ConfirmJoinFamilyGroup:output_type -> CFamilyGroups_ConfirmJoinFamilyGroup_Response
	28, // 62: FamilyGroups.RemoveFromFamilyGroup:output_type -> CFamilyGroups_RemoveFromFamilyGroup_Response
	30, // 63: FamilyGroups.CancelFamilyGroupInvite:output_type -> CFamilyGroups_CancelFamilyGroupInvite_Response
	32, // 64: FamilyGroups.GetUsersSharingDevice:output_type -> CFamilyGroups_GetUsersSharingDevice_Response
	34, // 65: FamilyGroups.DeleteFamilyGroup:output_type -> CFamilyGroups_DeleteFamilyGroup_Response
	36, // 66: FamilyGroups.UndeleteFamilyGroup:output_type -> CFamilyGroups_UndeleteFamilyGroup_Response
	39, // 67: FamilyGroups.GetPlaytimeSummary:output_type -> CFamilyGroups_GetPlaytimeSummary_Response
	41, // 68: FamilyGroups.RequestPurchase:output_type -> CFamilyGroups_RequestPurchase_Response
	44, // 69: FamilyGroups.GetPurchaseRequests:output_type -> CFamilyGroups_GetPurchaseRequests_Response
	46, // 70: FamilyGroups.RespondToRequestedPurchase:output_type -> CFamilyGroups_RespondToRequestedPurchase_Response
	48, // 71: FamilyGroups.GetChangeLog:output_type -> CFamilyGroups_GetChangeLog_Response
	50, // 72: FamilyGroups.SetFamilyCooldownOverrides:output_type -> CFamilyGroups_SetFamilyCooldownOverrides_Response
	52, // 73: FamilyGroups.GetSharedLibraryApps:output_type -> CFamilyGroups_GetSharedLibraryApps_Response
	54, // 74: FamilyGroups.SetPreferredLender:output_type -> CFamilyGroups_SetPreferredLender_Response
	56, // 75: FamilyGroups.GetPreferredLenders:output_type -> CFamilyGroups_GetPreferredLenders_Response
	58, // 76: FamilyGroups.ForceAcceptInvite:output_type -> CFamilyGroups_ForceAcceptInvite_Response
	60, // 77: FamilyGroups.GetInviteCheckResults:output_type -> CFamilyGroups_GetInviteCheckResults_Response
	62, // 78: FamilyGroups.ClearCooldownSkip:output_type -> CFamilyGroups_ClearCooldownSkip_Response
	72, // 79: FamilyGroupsClient.NotifyRunningApps:output_type -> NoResponse
	72, // 80: FamilyGroupsClient.NotifyInviteStatus:output_type -> NoResponse
	72, // 81: FamilyGroupsClient.NotifyGroupChanged:output_type -> NoResponse
	53, // [53:82] is the sub-list for method output_type
	24, // [24:53] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_steammessages_familygroups_steamclient_proto_init() }
func file_steammessages_familygroups_steamclient_proto_init() {
	if File_steammessages_familygroups_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_familygroups_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_CreateFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_CreateFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FamilyGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FamilyGroupPendingInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FamilyGroupFormerMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetFamilyGroupForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FamilyGroupPendingInviteForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetFamilyGroupForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ModifyFamilyGroupDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ModifyFamilyGroupDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_InviteToFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_InviteToFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ConfirmInviteToFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ConfirmInviteToFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ResendInvitationToFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ResendInvitationToFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_JoinFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_JoinFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ConfirmJoinFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ConfirmJoinFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_RemoveFromFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_RemoveFromFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_CancelFamilyGroupInvite_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_CancelFamilyGroupInvite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetUsersSharingDevice_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetUsersSharingDevice_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_DeleteFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_DeleteFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_UndeleteFamilyGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_UndeleteFamilyGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPlaytimeSummary_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_PlaytimeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPlaytimeSummary_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_RequestPurchase_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_RequestPurchase_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPurchaseRequests_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*PurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPurchaseRequests_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_RespondToRequestedPurchase_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_RespondToRequestedPurchase_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetChangeLog_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetChangeLog_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_SetFamilyCooldownOverrides_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_SetFamilyCooldownOverrides_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetSharedLibraryApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetSharedLibraryApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_SetPreferredLender_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_SetPreferredLender_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPreferredLenders_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPreferredLenders_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ForceAcceptInvite_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ForceAcceptInvite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetInviteCheckResults_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetInviteCheckResults_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ClearCooldownSkip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_ClearCooldownSkip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroupsClient_NotifyRunningApps_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroupsClient_InviteStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroupsClient_GroupChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetChangeLog_Response_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetSharedLibraryApps_Response_SharedApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroups_GetPreferredLenders_Response_FamilyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroupsClient_NotifyRunningApps_Notification_PlayingMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_familygroups_steamclient_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*CFamilyGroupsClient_NotifyRunningApps_Notification_RunningApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_familygroups_steamclient_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_familygroups_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_familygroups_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_familygroups_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_familygroups_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_familygroups_steamclient_proto = out.File
	file_steammessages_familygroups_steamclient_proto_rawDesc = nil
	file_steammessages_familygroups_steamclient_proto_goTypes = nil
	file_steammessages_familygroups_steamclient_proto_depIdxs = nil
}
