// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_gamerecording.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CVideoManagerClipID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoManagerClipId  *uint64 `protobuf:"fixed64,1,opt,name=video_manager_clip_id,json=videoManagerClipId" json:"video_manager_clip_id,omitempty"`
	VideoManagerVideoId *uint64 `protobuf:"fixed64,2,opt,name=video_manager_video_id,json=videoManagerVideoId" json:"video_manager_video_id,omitempty"`
	ServerTimelineId    *uint64 `protobuf:"fixed64,3,opt,name=server_timeline_id,json=serverTimelineId" json:"server_timeline_id,omitempty"`
	ManifestUrl         *string `protobuf:"bytes,4,opt,name=manifest_url,json=manifestUrl" json:"manifest_url,omitempty"`
	DurationMs          *uint32 `protobuf:"varint,5,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	StartOffsetMs       *uint32 `protobuf:"varint,6,opt,name=start_offset_ms,json=startOffsetMs" json:"start_offset_ms,omitempty"`
}

func (x *CVideoManagerClipID) Reset() {
	*x = CVideoManagerClipID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideoManagerClipID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideoManagerClipID) ProtoMessage() {}

func (x *CVideoManagerClipID) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideoManagerClipID.ProtoReflect.Descriptor instead.
func (*CVideoManagerClipID) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CVideoManagerClipID) GetVideoManagerClipId() uint64 {
	if x != nil && x.VideoManagerClipId != nil {
		return *x.VideoManagerClipId
	}
	return 0
}

func (x *CVideoManagerClipID) GetVideoManagerVideoId() uint64 {
	if x != nil && x.VideoManagerVideoId != nil {
		return *x.VideoManagerVideoId
	}
	return 0
}

func (x *CVideoManagerClipID) GetServerTimelineId() uint64 {
	if x != nil && x.ServerTimelineId != nil {
		return *x.ServerTimelineId
	}
	return 0
}

func (x *CVideoManagerClipID) GetManifestUrl() string {
	if x != nil && x.ManifestUrl != nil {
		return *x.ManifestUrl
	}
	return ""
}

func (x *CVideoManagerClipID) GetDurationMs() uint32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CVideoManagerClipID) GetStartOffsetMs() uint32 {
	if x != nil && x.StartOffsetMs != nil {
		return *x.StartOffsetMs
	}
	return 0
}

type CGameRecordingClip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId             *uint64                `protobuf:"fixed64,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Gameid             *uint64                `protobuf:"varint,2,opt,name=gameid" json:"gameid,omitempty"`
	DateRecorded       *uint32                `protobuf:"varint,4,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	TotalFileSizeBytes *uint64                `protobuf:"varint,7,opt,name=total_file_size_bytes,json=totalFileSizeBytes" json:"total_file_size_bytes,omitempty"`
	VideoIds           []*CVideoManagerClipID `protobuf:"bytes,9,rep,name=video_ids,json=videoIds" json:"video_ids,omitempty"`
	OwnerSteamid       *uint64                `protobuf:"fixed64,10,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	UploadComplete     *bool                  `protobuf:"varint,11,opt,name=upload_complete,json=uploadComplete" json:"upload_complete,omitempty"`
	DurationMs         *uint32                `protobuf:"varint,12,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
}

func (x *CGameRecordingClip) Reset() {
	*x = CGameRecordingClip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingClip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingClip) ProtoMessage() {}

func (x *CGameRecordingClip) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingClip.ProtoReflect.Descriptor instead.
func (*CGameRecordingClip) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CGameRecordingClip) GetClipId() uint64 {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return 0
}

func (x *CGameRecordingClip) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CGameRecordingClip) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecordingClip) GetTotalFileSizeBytes() uint64 {
	if x != nil && x.TotalFileSizeBytes != nil {
		return *x.TotalFileSizeBytes
	}
	return 0
}

func (x *CGameRecordingClip) GetVideoIds() []*CVideoManagerClipID {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

func (x *CGameRecordingClip) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CGameRecordingClip) GetUploadComplete() bool {
	if x != nil && x.UploadComplete != nil {
		return *x.UploadComplete
	}
	return false
}

func (x *CGameRecordingClip) GetDurationMs() uint32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

type CGameRecording_CreateShareClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clip     *CGameRecordingClip          `protobuf:"bytes,2,opt,name=clip" json:"clip,omitempty"`
	VideoDef []*CMsgVideoGameRecordingDef `protobuf:"bytes,3,rep,name=video_def,json=videoDef" json:"video_def,omitempty"`
}

func (x *CGameRecording_CreateShareClip_Request) Reset() {
	*x = CGameRecording_CreateShareClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_CreateShareClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_CreateShareClip_Request) ProtoMessage() {}

func (x *CGameRecording_CreateShareClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_CreateShareClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_CreateShareClip_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CGameRecording_CreateShareClip_Request) GetClip() *CGameRecordingClip {
	if x != nil {
		return x.Clip
	}
	return nil
}

func (x *CGameRecording_CreateShareClip_Request) GetVideoDef() []*CMsgVideoGameRecordingDef {
	if x != nil {
		return x.VideoDef
	}
	return nil
}

type CGameRecording_CreateShareClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clip *CGameRecordingClip `protobuf:"bytes,1,opt,name=clip" json:"clip,omitempty"`
}

func (x *CGameRecording_CreateShareClip_Response) Reset() {
	*x = CGameRecording_CreateShareClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_CreateShareClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_CreateShareClip_Response) ProtoMessage() {}

func (x *CGameRecording_CreateShareClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_CreateShareClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_CreateShareClip_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CGameRecording_CreateShareClip_Response) GetClip() *CGameRecordingClip {
	if x != nil {
		return x.Clip
	}
	return nil
}

type CGameRecording_DeleteSharedClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId *uint64 `protobuf:"fixed64,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_DeleteSharedClip_Request) Reset() {
	*x = CGameRecording_DeleteSharedClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_DeleteSharedClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeleteSharedClip_Request) ProtoMessage() {}

func (x *CGameRecording_DeleteSharedClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeleteSharedClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeleteSharedClip_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CGameRecording_DeleteSharedClip_Request) GetClipId() uint64 {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return 0
}

type CGameRecording_DeleteSharedClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_DeleteSharedClip_Response) Reset() {
	*x = CGameRecording_DeleteSharedClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_DeleteSharedClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeleteSharedClip_Response) ProtoMessage() {}

func (x *CGameRecording_DeleteSharedClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeleteSharedClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeleteSharedClip_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{5}
}

type CGameRecording_GetSingleSharedClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId *uint64 `protobuf:"fixed64,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_GetSingleSharedClip_Request) Reset() {
	*x = CGameRecording_GetSingleSharedClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetSingleSharedClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetSingleSharedClip_Request) ProtoMessage() {}

func (x *CGameRecording_GetSingleSharedClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetSingleSharedClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetSingleSharedClip_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CGameRecording_GetSingleSharedClip_Request) GetClipId() uint64 {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return 0
}

type CGameRecording_GetSingleSharedClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clip *CGameRecordingClip `protobuf:"bytes,1,opt,name=clip" json:"clip,omitempty"`
}

func (x *CGameRecording_GetSingleSharedClip_Response) Reset() {
	*x = CGameRecording_GetSingleSharedClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetSingleSharedClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetSingleSharedClip_Response) ProtoMessage() {}

func (x *CGameRecording_GetSingleSharedClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetSingleSharedClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetSingleSharedClip_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CGameRecording_GetSingleSharedClip_Response) GetClip() *CGameRecordingClip {
	if x != nil {
		return x.Clip
	}
	return nil
}

type CVideo_BeginGameRecordingSegmentsUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId        *uint64                            `protobuf:"varint,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	ComponentName      *string                            `protobuf:"bytes,2,opt,name=component_name,json=componentName" json:"component_name,omitempty"`
	RepresentationName *string                            `protobuf:"bytes,3,opt,name=representation_name,json=representationName" json:"representation_name,omitempty"`
	SegmentsToStore    []*CVideo_GameRecordingSegmentInfo `protobuf:"bytes,4,rep,name=segments_to_store,json=segmentsToStore" json:"segments_to_store,omitempty"`
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) Reset() {
	*x = CVideo_BeginGameRecordingSegmentsUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_BeginGameRecordingSegmentsUpload_Request) ProtoMessage() {}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_BeginGameRecordingSegmentsUpload_Request.ProtoReflect.Descriptor instead.
func (*CVideo_BeginGameRecordingSegmentsUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) GetRecordingId() uint64 {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return 0
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) GetComponentName() string {
	if x != nil && x.ComponentName != nil {
		return *x.ComponentName
	}
	return ""
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) GetRepresentationName() string {
	if x != nil && x.RepresentationName != nil {
		return *x.RepresentationName
	}
	return ""
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Request) GetSegmentsToStore() []*CVideo_GameRecordingSegmentInfo {
	if x != nil {
		return x.SegmentsToStore
	}
	return nil
}

type CVideo_BeginGameRecordingSegmentsUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentsNeeded []*CVideo_GameRecordingSegmentUploadInfo `protobuf:"bytes,1,rep,name=segments_needed,json=segmentsNeeded" json:"segments_needed,omitempty"`
	CallAgain      *bool                                    `protobuf:"varint,2,opt,name=call_again,json=callAgain" json:"call_again,omitempty"`
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Response) Reset() {
	*x = CVideo_BeginGameRecordingSegmentsUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_BeginGameRecordingSegmentsUpload_Response) ProtoMessage() {}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_BeginGameRecordingSegmentsUpload_Response.ProtoReflect.Descriptor instead.
func (*CVideo_BeginGameRecordingSegmentsUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Response) GetSegmentsNeeded() []*CVideo_GameRecordingSegmentUploadInfo {
	if x != nil {
		return x.SegmentsNeeded
	}
	return nil
}

func (x *CVideo_BeginGameRecordingSegmentsUpload_Response) GetCallAgain() bool {
	if x != nil && x.CallAgain != nil {
		return *x.CallAgain
	}
	return false
}

type CVideo_CommitGameRecordingSegmentsUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId        *uint64 `protobuf:"varint,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	ComponentName      *string `protobuf:"bytes,2,opt,name=component_name,json=componentName" json:"component_name,omitempty"`
	RepresentationName *string `protobuf:"bytes,3,opt,name=representation_name,json=representationName" json:"representation_name,omitempty"`
	FirstSegmentNumber *uint32 `protobuf:"varint,4,opt,name=first_segment_number,json=firstSegmentNumber" json:"first_segment_number,omitempty"`
	NumSegments        *uint32 `protobuf:"varint,5,opt,name=num_segments,json=numSegments" json:"num_segments,omitempty"`
	UploadResult       *uint32 `protobuf:"varint,6,opt,name=upload_result,json=uploadResult" json:"upload_result,omitempty"`
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) Reset() {
	*x = CVideo_CommitGameRecordingSegmentsUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_CommitGameRecordingSegmentsUpload_Request) ProtoMessage() {}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_CommitGameRecordingSegmentsUpload_Request.ProtoReflect.Descriptor instead.
func (*CVideo_CommitGameRecordingSegmentsUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) GetRecordingId() uint64 {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return 0
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) GetComponentName() string {
	if x != nil && x.ComponentName != nil {
		return *x.ComponentName
	}
	return ""
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) GetRepresentationName() string {
	if x != nil && x.RepresentationName != nil {
		return *x.RepresentationName
	}
	return ""
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) GetFirstSegmentNumber() uint32 {
	if x != nil && x.FirstSegmentNumber != nil {
		return *x.FirstSegmentNumber
	}
	return 0
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) GetNumSegments() uint32 {
	if x != nil && x.NumSegments != nil {
		return *x.NumSegments
	}
	return 0
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Request) GetUploadResult() uint32 {
	if x != nil && x.UploadResult != nil {
		return *x.UploadResult
	}
	return 0
}

type CVideo_CommitGameRecordingSegmentsUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Response) Reset() {
	*x = CVideo_CommitGameRecordingSegmentsUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_CommitGameRecordingSegmentsUpload_Response) ProtoMessage() {}

func (x *CVideo_CommitGameRecordingSegmentsUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_CommitGameRecordingSegmentsUpload_Response.ProtoReflect.Descriptor instead.
func (*CVideo_CommitGameRecordingSegmentsUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{11}
}

type CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId *uint64 `protobuf:"varint,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) Reset() {
	*x = CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) ProtoMessage() {}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request.ProtoReflect.Descriptor instead.
func (*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) GetRecordingId() uint64 {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return 0
}

type CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentsNeeded []*CVideo_GameRecordingSegmentUploadInfo `protobuf:"bytes,1,rep,name=segments_needed,json=segmentsNeeded" json:"segments_needed,omitempty"`
}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) Reset() {
	*x = CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) ProtoMessage() {}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.ProtoReflect.Descriptor instead.
func (*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) GetSegmentsNeeded() []*CVideo_GameRecordingSegmentUploadInfo {
	if x != nil {
		return x.SegmentsNeeded
	}
	return nil
}

type CVideo_GameRecordingCommitSegmentUploads_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId      *uint64                            `protobuf:"varint,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	SegmentsUploaded []*CVideo_GameRecordingSegmentInfo `protobuf:"bytes,2,rep,name=segments_uploaded,json=segmentsUploaded" json:"segments_uploaded,omitempty"`
}

func (x *CVideo_GameRecordingCommitSegmentUploads_Request) Reset() {
	*x = CVideo_GameRecordingCommitSegmentUploads_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_GameRecordingCommitSegmentUploads_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_GameRecordingCommitSegmentUploads_Request) ProtoMessage() {}

func (x *CVideo_GameRecordingCommitSegmentUploads_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_GameRecordingCommitSegmentUploads_Request.ProtoReflect.Descriptor instead.
func (*CVideo_GameRecordingCommitSegmentUploads_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CVideo_GameRecordingCommitSegmentUploads_Request) GetRecordingId() uint64 {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return 0
}

func (x *CVideo_GameRecordingCommitSegmentUploads_Request) GetSegmentsUploaded() []*CVideo_GameRecordingSegmentInfo {
	if x != nil {
		return x.SegmentsUploaded
	}
	return nil
}

type CVideo_GameRecordingCommitSegmentUploads_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVideo_GameRecordingCommitSegmentUploads_Response) Reset() {
	*x = CVideo_GameRecordingCommitSegmentUploads_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_GameRecordingCommitSegmentUploads_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_GameRecordingCommitSegmentUploads_Response) ProtoMessage() {}

func (x *CVideo_GameRecordingCommitSegmentUploads_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_GameRecordingCommitSegmentUploads_Response.ProtoReflect.Descriptor instead.
func (*CVideo_GameRecordingCommitSegmentUploads_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_steamclient_proto_rawDescGZIP(), []int{15}
}

var File_steammessages_gamerecording_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_gamerecording_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x97, 0x02, 0x0a, 0x13, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x12, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x70,
	0x49, 0x44, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x26,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x12,
	0x37, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x52, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x22, 0x52, 0x0a, 0x27, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x22, 0x42, 0x0a, 0x27,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64,
	0x22, 0x2a, 0x0a, 0x28, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x2a,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x70, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x2b, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x22, 0xfa, 0x01, 0x0a, 0x2f,
	0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x30, 0x43, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x22, 0xa7, 0x02,
	0x0a, 0x30, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a, 0x31, 0x43, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x3a,
	0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x3b, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xa4,
	0x01, 0x0a, 0x30, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x31, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd4, 0x02, 0x0a, 0x11, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x70,
	0x12, 0x64, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6c, 0x69, 0x70, 0x12, 0x27, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x28, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xbf, 0x04, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x12,
	0x87, 0x01, 0x0a, 0x20, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x31, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x2e, 0x43, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x43,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_gamerecording_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_gamerecording_steamclient_proto_rawDescData = file_steammessages_gamerecording_steamclient_proto_rawDesc
)

func file_steammessages_gamerecording_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_gamerecording_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_gamerecording_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_gamerecording_steamclient_proto_rawDescData)
	})
	return file_steammessages_gamerecording_steamclient_proto_rawDescData
}

var file_steammessages_gamerecording_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_steammessages_gamerecording_steamclient_proto_goTypes = []any{
	(*CVideoManagerClipID)(nil),                                         // 0: CVideoManagerClipID
	(*CGameRecordingClip)(nil),                                          // 1: CGameRecordingClip
	(*CGameRecording_CreateShareClip_Request)(nil),                      // 2: CGameRecording_CreateShareClip_Request
	(*CGameRecording_CreateShareClip_Response)(nil),                     // 3: CGameRecording_CreateShareClip_Response
	(*CGameRecording_DeleteSharedClip_Request)(nil),                     // 4: CGameRecording_DeleteSharedClip_Request
	(*CGameRecording_DeleteSharedClip_Response)(nil),                    // 5: CGameRecording_DeleteSharedClip_Response
	(*CGameRecording_GetSingleSharedClip_Request)(nil),                  // 6: CGameRecording_GetSingleSharedClip_Request
	(*CGameRecording_GetSingleSharedClip_Response)(nil),                 // 7: CGameRecording_GetSingleSharedClip_Response
	(*CVideo_BeginGameRecordingSegmentsUpload_Request)(nil),             // 8: CVideo_BeginGameRecordingSegmentsUpload_Request
	(*CVideo_BeginGameRecordingSegmentsUpload_Response)(nil),            // 9: CVideo_BeginGameRecordingSegmentsUpload_Response
	(*CVideo_CommitGameRecordingSegmentsUpload_Request)(nil),            // 10: CVideo_CommitGameRecordingSegmentsUpload_Request
	(*CVideo_CommitGameRecordingSegmentsUpload_Response)(nil),           // 11: CVideo_CommitGameRecordingSegmentsUpload_Response
	(*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)(nil),  // 12: CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request
	(*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)(nil), // 13: CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response
	(*CVideo_GameRecordingCommitSegmentUploads_Request)(nil),            // 14: CVideo_GameRecordingCommitSegmentUploads_Request
	(*CVideo_GameRecordingCommitSegmentUploads_Response)(nil),           // 15: CVideo_GameRecordingCommitSegmentUploads_Response
	(*CMsgVideoGameRecordingDef)(nil),                                   // 16: CMsgVideoGameRecordingDef
	(*CVideo_GameRecordingSegmentInfo)(nil),                             // 17: CVideo_GameRecordingSegmentInfo
	(*CVideo_GameRecordingSegmentUploadInfo)(nil),                       // 18: CVideo_GameRecordingSegmentUploadInfo
}
var file_steammessages_gamerecording_steamclient_proto_depIdxs = []int32{
	0,  // 0: CGameRecordingClip.video_ids:type_name -> CVideoManagerClipID
	1,  // 1: CGameRecording_CreateShareClip_Request.clip:type_name -> CGameRecordingClip
	16, // 2: CGameRecording_CreateShareClip_Request.video_def:type_name -> CMsgVideoGameRecordingDef
	1,  // 3: CGameRecording_CreateShareClip_Response.clip:type_name -> CGameRecordingClip
	1,  // 4: CGameRecording_GetSingleSharedClip_Response.clip:type_name -> CGameRecordingClip
	17, // 5: CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store:type_name -> CVideo_GameRecordingSegmentInfo
	18, // 6: CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed:type_name -> CVideo_GameRecordingSegmentUploadInfo
	18, // 7: CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed:type_name -> CVideo_GameRecordingSegmentUploadInfo
	17, // 8: CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded:type_name -> CVideo_GameRecordingSegmentInfo
	2,  // 9: GameRecordingClip.CreateShareClip:input_type -> CGameRecording_CreateShareClip_Request
	4,  // 10: GameRecordingClip.DeleteSharedClip:input_type -> CGameRecording_DeleteSharedClip_Request
	6,  // 11: GameRecordingClip.GetSingleSharedClip:input_type -> CGameRecording_GetSingleSharedClip_Request
	8,  // 12: VideoClip.BeginGameRecordingSegmentsUpload:input_type -> CVideo_BeginGameRecordingSegmentsUpload_Request
	10, // 13: VideoClip.CommitGameRecordingSegmentsUpload:input_type -> CVideo_CommitGameRecordingSegmentsUpload_Request
	12, // 14: VideoClip.GetNextBatchOfSegmentsToUpload:input_type -> CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request
	14, // 15: VideoClip.CommitSegmentUploads:input_type -> CVideo_GameRecordingCommitSegmentUploads_Request
	3,  // 16: GameRecordingClip.CreateShareClip:output_type -> CGameRecording_CreateShareClip_Response
	5,  // 17: GameRecordingClip.DeleteSharedClip:output_type -> CGameRecording_DeleteSharedClip_Response
	7,  // 18: GameRecordingClip.GetSingleSharedClip:output_type -> CGameRecording_GetSingleSharedClip_Response
	9,  // 19: VideoClip.BeginGameRecordingSegmentsUpload:output_type -> CVideo_BeginGameRecordingSegmentsUpload_Response
	11, // 20: VideoClip.CommitGameRecordingSegmentsUpload:output_type -> CVideo_CommitGameRecordingSegmentsUpload_Response
	13, // 21: VideoClip.GetNextBatchOfSegmentsToUpload:output_type -> CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response
	15, // 22: VideoClip.CommitSegmentUploads:output_type -> CVideo_GameRecordingCommitSegmentUploads_Response
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_steammessages_gamerecording_steamclient_proto_init() }
func file_steammessages_gamerecording_steamclient_proto_init() {
	if File_steammessages_gamerecording_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_steammessages_clientserver_video_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_gamerecording_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CVideoManagerClipID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingClip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_CreateShareClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_CreateShareClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_DeleteSharedClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_DeleteSharedClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetSingleSharedClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetSingleSharedClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_BeginGameRecordingSegmentsUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_BeginGameRecordingSegmentsUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_CommitGameRecordingSegmentsUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_CommitGameRecordingSegmentsUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_GameRecordingCommitSegmentUploads_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gamerecording_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CVideo_GameRecordingCommitSegmentUploads_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_gamerecording_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_gamerecording_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_gamerecording_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_gamerecording_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_gamerecording_steamclient_proto = out.File
	file_steammessages_gamerecording_steamclient_proto_rawDesc = nil
	file_steammessages_gamerecording_steamclient_proto_goTypes = nil
	file_steammessages_gamerecording_steamclient_proto_depIdxs = nil
}
