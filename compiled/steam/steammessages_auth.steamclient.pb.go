// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_auth.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EAuthTokenPlatformType int32

const (
	EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown     EAuthTokenPlatformType = 0
	EAuthTokenPlatformType_k_EAuthTokenPlatformType_SteamClient EAuthTokenPlatformType = 1
	EAuthTokenPlatformType_k_EAuthTokenPlatformType_WebBrowser  EAuthTokenPlatformType = 2
	EAuthTokenPlatformType_k_EAuthTokenPlatformType_MobileApp   EAuthTokenPlatformType = 3
)

// Enum value maps for EAuthTokenPlatformType.
var (
	EAuthTokenPlatformType_name = map[int32]string{
		0: "k_EAuthTokenPlatformType_Unknown",
		1: "k_EAuthTokenPlatformType_SteamClient",
		2: "k_EAuthTokenPlatformType_WebBrowser",
		3: "k_EAuthTokenPlatformType_MobileApp",
	}
	EAuthTokenPlatformType_value = map[string]int32{
		"k_EAuthTokenPlatformType_Unknown":     0,
		"k_EAuthTokenPlatformType_SteamClient": 1,
		"k_EAuthTokenPlatformType_WebBrowser":  2,
		"k_EAuthTokenPlatformType_MobileApp":   3,
	}
)

func (x EAuthTokenPlatformType) Enum() *EAuthTokenPlatformType {
	p := new(EAuthTokenPlatformType)
	*p = x
	return p
}

func (x EAuthTokenPlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthTokenPlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[0].Descriptor()
}

func (EAuthTokenPlatformType) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[0]
}

func (x EAuthTokenPlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthTokenPlatformType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthTokenPlatformType(num)
	return nil
}

// Deprecated: Use EAuthTokenPlatformType.Descriptor instead.
func (EAuthTokenPlatformType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{0}
}

type EAuthTokenAppType int32

const (
	EAuthTokenAppType_k_EAuthTokenAppType_Unknown         EAuthTokenAppType = 0
	EAuthTokenAppType_k_EAuthTokenAppType_Mobile_SteamApp EAuthTokenAppType = 1
	EAuthTokenAppType_k_EAuthTokenAppType_Mobile_ChatApp  EAuthTokenAppType = 2
)

// Enum value maps for EAuthTokenAppType.
var (
	EAuthTokenAppType_name = map[int32]string{
		0: "k_EAuthTokenAppType_Unknown",
		1: "k_EAuthTokenAppType_Mobile_SteamApp",
		2: "k_EAuthTokenAppType_Mobile_ChatApp",
	}
	EAuthTokenAppType_value = map[string]int32{
		"k_EAuthTokenAppType_Unknown":         0,
		"k_EAuthTokenAppType_Mobile_SteamApp": 1,
		"k_EAuthTokenAppType_Mobile_ChatApp":  2,
	}
)

func (x EAuthTokenAppType) Enum() *EAuthTokenAppType {
	p := new(EAuthTokenAppType)
	*p = x
	return p
}

func (x EAuthTokenAppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthTokenAppType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[1].Descriptor()
}

func (EAuthTokenAppType) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[1]
}

func (x EAuthTokenAppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthTokenAppType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthTokenAppType(num)
	return nil
}

// Deprecated: Use EAuthTokenAppType.Descriptor instead.
func (EAuthTokenAppType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{1}
}

type EAuthSessionGuardType int32

const (
	EAuthSessionGuardType_k_EAuthSessionGuardType_Unknown            EAuthSessionGuardType = 0
	EAuthSessionGuardType_k_EAuthSessionGuardType_None               EAuthSessionGuardType = 1
	EAuthSessionGuardType_k_EAuthSessionGuardType_EmailCode          EAuthSessionGuardType = 2
	EAuthSessionGuardType_k_EAuthSessionGuardType_DeviceCode         EAuthSessionGuardType = 3
	EAuthSessionGuardType_k_EAuthSessionGuardType_DeviceConfirmation EAuthSessionGuardType = 4
	EAuthSessionGuardType_k_EAuthSessionGuardType_EmailConfirmation  EAuthSessionGuardType = 5
	EAuthSessionGuardType_k_EAuthSessionGuardType_MachineToken       EAuthSessionGuardType = 6
	EAuthSessionGuardType_k_EAuthSessionGuardType_LegacyMachineAuth  EAuthSessionGuardType = 7
)

// Enum value maps for EAuthSessionGuardType.
var (
	EAuthSessionGuardType_name = map[int32]string{
		0: "k_EAuthSessionGuardType_Unknown",
		1: "k_EAuthSessionGuardType_None",
		2: "k_EAuthSessionGuardType_EmailCode",
		3: "k_EAuthSessionGuardType_DeviceCode",
		4: "k_EAuthSessionGuardType_DeviceConfirmation",
		5: "k_EAuthSessionGuardType_EmailConfirmation",
		6: "k_EAuthSessionGuardType_MachineToken",
		7: "k_EAuthSessionGuardType_LegacyMachineAuth",
	}
	EAuthSessionGuardType_value = map[string]int32{
		"k_EAuthSessionGuardType_Unknown":            0,
		"k_EAuthSessionGuardType_None":               1,
		"k_EAuthSessionGuardType_EmailCode":          2,
		"k_EAuthSessionGuardType_DeviceCode":         3,
		"k_EAuthSessionGuardType_DeviceConfirmation": 4,
		"k_EAuthSessionGuardType_EmailConfirmation":  5,
		"k_EAuthSessionGuardType_MachineToken":       6,
		"k_EAuthSessionGuardType_LegacyMachineAuth":  7,
	}
)

func (x EAuthSessionGuardType) Enum() *EAuthSessionGuardType {
	p := new(EAuthSessionGuardType)
	*p = x
	return p
}

func (x EAuthSessionGuardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthSessionGuardType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[2].Descriptor()
}

func (EAuthSessionGuardType) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[2]
}

func (x EAuthSessionGuardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthSessionGuardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthSessionGuardType(num)
	return nil
}

// Deprecated: Use EAuthSessionGuardType.Descriptor instead.
func (EAuthSessionGuardType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{2}
}

type EAuthSessionSecurityHistory int32

const (
	EAuthSessionSecurityHistory_k_EAuthSessionSecurityHistory_Invalid        EAuthSessionSecurityHistory = 0
	EAuthSessionSecurityHistory_k_EAuthSessionSecurityHistory_UsedPreviously EAuthSessionSecurityHistory = 1
	EAuthSessionSecurityHistory_k_EAuthSessionSecurityHistory_NoPriorHistory EAuthSessionSecurityHistory = 2
)

// Enum value maps for EAuthSessionSecurityHistory.
var (
	EAuthSessionSecurityHistory_name = map[int32]string{
		0: "k_EAuthSessionSecurityHistory_Invalid",
		1: "k_EAuthSessionSecurityHistory_UsedPreviously",
		2: "k_EAuthSessionSecurityHistory_NoPriorHistory",
	}
	EAuthSessionSecurityHistory_value = map[string]int32{
		"k_EAuthSessionSecurityHistory_Invalid":        0,
		"k_EAuthSessionSecurityHistory_UsedPreviously": 1,
		"k_EAuthSessionSecurityHistory_NoPriorHistory": 2,
	}
)

func (x EAuthSessionSecurityHistory) Enum() *EAuthSessionSecurityHistory {
	p := new(EAuthSessionSecurityHistory)
	*p = x
	return p
}

func (x EAuthSessionSecurityHistory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthSessionSecurityHistory) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[3].Descriptor()
}

func (EAuthSessionSecurityHistory) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[3]
}

func (x EAuthSessionSecurityHistory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthSessionSecurityHistory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthSessionSecurityHistory(num)
	return nil
}

// Deprecated: Use EAuthSessionSecurityHistory.Descriptor instead.
func (EAuthSessionSecurityHistory) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{3}
}

type ETokenRenewalType int32

const (
	ETokenRenewalType_k_ETokenRenewalType_None  ETokenRenewalType = 0
	ETokenRenewalType_k_ETokenRenewalType_Allow ETokenRenewalType = 1
)

// Enum value maps for ETokenRenewalType.
var (
	ETokenRenewalType_name = map[int32]string{
		0: "k_ETokenRenewalType_None",
		1: "k_ETokenRenewalType_Allow",
	}
	ETokenRenewalType_value = map[string]int32{
		"k_ETokenRenewalType_None":  0,
		"k_ETokenRenewalType_Allow": 1,
	}
)

func (x ETokenRenewalType) Enum() *ETokenRenewalType {
	p := new(ETokenRenewalType)
	*p = x
	return p
}

func (x ETokenRenewalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETokenRenewalType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[4].Descriptor()
}

func (ETokenRenewalType) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[4]
}

func (x ETokenRenewalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETokenRenewalType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETokenRenewalType(num)
	return nil
}

// Deprecated: Use ETokenRenewalType.Descriptor instead.
func (ETokenRenewalType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{4}
}

type EAuthenticationType int32

const (
	EAuthenticationType_k_EAuthenticationType_Unknown         EAuthenticationType = 0
	EAuthenticationType_k_EAuthenticationType_Password        EAuthenticationType = 1
	EAuthenticationType_k_EAuthenticationType_QR              EAuthenticationType = 2
	EAuthenticationType_k_EAuthenticationType_AccountCreation EAuthenticationType = 3
	EAuthenticationType_k_EAuthenticationType_GuestAccount    EAuthenticationType = 4
)

// Enum value maps for EAuthenticationType.
var (
	EAuthenticationType_name = map[int32]string{
		0: "k_EAuthenticationType_Unknown",
		1: "k_EAuthenticationType_Password",
		2: "k_EAuthenticationType_QR",
		3: "k_EAuthenticationType_AccountCreation",
		4: "k_EAuthenticationType_GuestAccount",
	}
	EAuthenticationType_value = map[string]int32{
		"k_EAuthenticationType_Unknown":         0,
		"k_EAuthenticationType_Password":        1,
		"k_EAuthenticationType_QR":              2,
		"k_EAuthenticationType_AccountCreation": 3,
		"k_EAuthenticationType_GuestAccount":    4,
	}
)

func (x EAuthenticationType) Enum() *EAuthenticationType {
	p := new(EAuthenticationType)
	*p = x
	return p
}

func (x EAuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[5].Descriptor()
}

func (EAuthenticationType) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[5]
}

func (x EAuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthenticationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthenticationType(num)
	return nil
}

// Deprecated: Use EAuthenticationType.Descriptor instead.
func (EAuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{5}
}

type EAuthTokenRevokeAction int32

const (
	EAuthTokenRevokeAction_k_EAuthTokenRevokeLogout                 EAuthTokenRevokeAction = 0
	EAuthTokenRevokeAction_k_EAuthTokenRevokePermanent              EAuthTokenRevokeAction = 1
	EAuthTokenRevokeAction_k_EAuthTokenRevokeReplaced               EAuthTokenRevokeAction = 2
	EAuthTokenRevokeAction_k_EAuthTokenRevokeSupport                EAuthTokenRevokeAction = 3
	EAuthTokenRevokeAction_k_EAuthTokenRevokeConsume                EAuthTokenRevokeAction = 4
	EAuthTokenRevokeAction_k_EAuthTokenRevokeNonRememberedLogout    EAuthTokenRevokeAction = 5
	EAuthTokenRevokeAction_k_EAuthTokenRevokeNonRememberedPermanent EAuthTokenRevokeAction = 6
	EAuthTokenRevokeAction_k_EAuthTokenRevokeAutomatic              EAuthTokenRevokeAction = 7
)

// Enum value maps for EAuthTokenRevokeAction.
var (
	EAuthTokenRevokeAction_name = map[int32]string{
		0: "k_EAuthTokenRevokeLogout",
		1: "k_EAuthTokenRevokePermanent",
		2: "k_EAuthTokenRevokeReplaced",
		3: "k_EAuthTokenRevokeSupport",
		4: "k_EAuthTokenRevokeConsume",
		5: "k_EAuthTokenRevokeNonRememberedLogout",
		6: "k_EAuthTokenRevokeNonRememberedPermanent",
		7: "k_EAuthTokenRevokeAutomatic",
	}
	EAuthTokenRevokeAction_value = map[string]int32{
		"k_EAuthTokenRevokeLogout":                 0,
		"k_EAuthTokenRevokePermanent":              1,
		"k_EAuthTokenRevokeReplaced":               2,
		"k_EAuthTokenRevokeSupport":                3,
		"k_EAuthTokenRevokeConsume":                4,
		"k_EAuthTokenRevokeNonRememberedLogout":    5,
		"k_EAuthTokenRevokeNonRememberedPermanent": 6,
		"k_EAuthTokenRevokeAutomatic":              7,
	}
)

func (x EAuthTokenRevokeAction) Enum() *EAuthTokenRevokeAction {
	p := new(EAuthTokenRevokeAction)
	*p = x
	return p
}

func (x EAuthTokenRevokeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthTokenRevokeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[6].Descriptor()
}

func (EAuthTokenRevokeAction) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[6]
}

func (x EAuthTokenRevokeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthTokenRevokeAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthTokenRevokeAction(num)
	return nil
}

// Deprecated: Use EAuthTokenRevokeAction.Descriptor instead.
func (EAuthTokenRevokeAction) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{6}
}

type EAuthTokenState int32

const (
	EAuthTokenState_k_EAuthTokenState_Invalid   EAuthTokenState = 0
	EAuthTokenState_k_EAuthTokenState_New       EAuthTokenState = 1
	EAuthTokenState_k_EAuthTokenState_Confirmed EAuthTokenState = 2
	EAuthTokenState_k_EAuthTokenState_Issued    EAuthTokenState = 3
	EAuthTokenState_k_EAuthTokenState_Denied    EAuthTokenState = 4
	EAuthTokenState_k_EAuthTokenState_LoggedOut EAuthTokenState = 5
	EAuthTokenState_k_EAuthTokenState_Consumed  EAuthTokenState = 6
	EAuthTokenState_k_EAuthTokenState_Revoked   EAuthTokenState = 99
)

// Enum value maps for EAuthTokenState.
var (
	EAuthTokenState_name = map[int32]string{
		0:  "k_EAuthTokenState_Invalid",
		1:  "k_EAuthTokenState_New",
		2:  "k_EAuthTokenState_Confirmed",
		3:  "k_EAuthTokenState_Issued",
		4:  "k_EAuthTokenState_Denied",
		5:  "k_EAuthTokenState_LoggedOut",
		6:  "k_EAuthTokenState_Consumed",
		99: "k_EAuthTokenState_Revoked",
	}
	EAuthTokenState_value = map[string]int32{
		"k_EAuthTokenState_Invalid":   0,
		"k_EAuthTokenState_New":       1,
		"k_EAuthTokenState_Confirmed": 2,
		"k_EAuthTokenState_Issued":    3,
		"k_EAuthTokenState_Denied":    4,
		"k_EAuthTokenState_LoggedOut": 5,
		"k_EAuthTokenState_Consumed":  6,
		"k_EAuthTokenState_Revoked":   99,
	}
)

func (x EAuthTokenState) Enum() *EAuthTokenState {
	p := new(EAuthTokenState)
	*p = x
	return p
}

func (x EAuthTokenState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthTokenState) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_auth_steamclient_proto_enumTypes[7].Descriptor()
}

func (EAuthTokenState) Type() protoreflect.EnumType {
	return &file_steammessages_auth_steamclient_proto_enumTypes[7]
}

func (x EAuthTokenState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuthTokenState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuthTokenState(num)
	return nil
}

// Deprecated: Use EAuthTokenState.Descriptor instead.
func (EAuthTokenState) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{7}
}

type CAuthentication_GetPasswordRSAPublicKey_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName *string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Request) Reset() {
	*x = CAuthentication_GetPasswordRSAPublicKey_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetPasswordRSAPublicKey_Request) ProtoMessage() {}

func (x *CAuthentication_GetPasswordRSAPublicKey_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetPasswordRSAPublicKey_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetPasswordRSAPublicKey_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Request) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

type CAuthentication_GetPasswordRSAPublicKey_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublickeyMod *string `protobuf:"bytes,1,opt,name=publickey_mod,json=publickeyMod" json:"publickey_mod,omitempty"`
	PublickeyExp *string `protobuf:"bytes,2,opt,name=publickey_exp,json=publickeyExp" json:"publickey_exp,omitempty"`
	Timestamp    *uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Response) Reset() {
	*x = CAuthentication_GetPasswordRSAPublicKey_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetPasswordRSAPublicKey_Response) ProtoMessage() {}

func (x *CAuthentication_GetPasswordRSAPublicKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetPasswordRSAPublicKey_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetPasswordRSAPublicKey_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Response) GetPublickeyMod() string {
	if x != nil && x.PublickeyMod != nil {
		return *x.PublickeyMod
	}
	return ""
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Response) GetPublickeyExp() string {
	if x != nil && x.PublickeyExp != nil {
		return *x.PublickeyExp
	}
	return ""
}

func (x *CAuthentication_GetPasswordRSAPublicKey_Response) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CAuthentication_DeviceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceFriendlyName *string                 `protobuf:"bytes,1,opt,name=device_friendly_name,json=deviceFriendlyName" json:"device_friendly_name,omitempty"`
	PlatformType       *EAuthTokenPlatformType `protobuf:"varint,2,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
	OsType             *int32                  `protobuf:"varint,3,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	GamingDeviceType   *uint32                 `protobuf:"varint,4,opt,name=gaming_device_type,json=gamingDeviceType" json:"gaming_device_type,omitempty"`
	ClientCount        *uint32                 `protobuf:"varint,5,opt,name=client_count,json=clientCount" json:"client_count,omitempty"`
	MachineId          []byte                  `protobuf:"bytes,6,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	AppType            *EAuthTokenAppType      `protobuf:"varint,7,opt,name=app_type,json=appType,enum=EAuthTokenAppType,def=0" json:"app_type,omitempty"`
}

// Default values for CAuthentication_DeviceDetails fields.
const (
	Default_CAuthentication_DeviceDetails_PlatformType = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
	Default_CAuthentication_DeviceDetails_AppType      = EAuthTokenAppType_k_EAuthTokenAppType_Unknown
)

func (x *CAuthentication_DeviceDetails) Reset() {
	*x = CAuthentication_DeviceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_DeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_DeviceDetails) ProtoMessage() {}

func (x *CAuthentication_DeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_DeviceDetails.ProtoReflect.Descriptor instead.
func (*CAuthentication_DeviceDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CAuthentication_DeviceDetails) GetDeviceFriendlyName() string {
	if x != nil && x.DeviceFriendlyName != nil {
		return *x.DeviceFriendlyName
	}
	return ""
}

func (x *CAuthentication_DeviceDetails) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CAuthentication_DeviceDetails_PlatformType
}

func (x *CAuthentication_DeviceDetails) GetOsType() int32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CAuthentication_DeviceDetails) GetGamingDeviceType() uint32 {
	if x != nil && x.GamingDeviceType != nil {
		return *x.GamingDeviceType
	}
	return 0
}

func (x *CAuthentication_DeviceDetails) GetClientCount() uint32 {
	if x != nil && x.ClientCount != nil {
		return *x.ClientCount
	}
	return 0
}

func (x *CAuthentication_DeviceDetails) GetMachineId() []byte {
	if x != nil {
		return x.MachineId
	}
	return nil
}

func (x *CAuthentication_DeviceDetails) GetAppType() EAuthTokenAppType {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return Default_CAuthentication_DeviceDetails_AppType
}

type CAuthentication_BeginAuthSessionViaQR_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceFriendlyName *string                        `protobuf:"bytes,1,opt,name=device_friendly_name,json=deviceFriendlyName" json:"device_friendly_name,omitempty"`
	PlatformType       *EAuthTokenPlatformType        `protobuf:"varint,2,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
	DeviceDetails      *CAuthentication_DeviceDetails `protobuf:"bytes,3,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
	WebsiteId          *string                        `protobuf:"bytes,4,opt,name=website_id,json=websiteId,def=Unknown" json:"website_id,omitempty"`
}

// Default values for CAuthentication_BeginAuthSessionViaQR_Request fields.
const (
	Default_CAuthentication_BeginAuthSessionViaQR_Request_PlatformType = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
	Default_CAuthentication_BeginAuthSessionViaQR_Request_WebsiteId    = string("Unknown")
)

func (x *CAuthentication_BeginAuthSessionViaQR_Request) Reset() {
	*x = CAuthentication_BeginAuthSessionViaQR_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_BeginAuthSessionViaQR_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_BeginAuthSessionViaQR_Request) ProtoMessage() {}

func (x *CAuthentication_BeginAuthSessionViaQR_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_BeginAuthSessionViaQR_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_BeginAuthSessionViaQR_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CAuthentication_BeginAuthSessionViaQR_Request) GetDeviceFriendlyName() string {
	if x != nil && x.DeviceFriendlyName != nil {
		return *x.DeviceFriendlyName
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaQR_Request) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CAuthentication_BeginAuthSessionViaQR_Request_PlatformType
}

func (x *CAuthentication_BeginAuthSessionViaQR_Request) GetDeviceDetails() *CAuthentication_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

func (x *CAuthentication_BeginAuthSessionViaQR_Request) GetWebsiteId() string {
	if x != nil && x.WebsiteId != nil {
		return *x.WebsiteId
	}
	return Default_CAuthentication_BeginAuthSessionViaQR_Request_WebsiteId
}

type CAuthentication_AllowedConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationType  *EAuthSessionGuardType `protobuf:"varint,1,opt,name=confirmation_type,json=confirmationType,enum=EAuthSessionGuardType,def=0" json:"confirmation_type,omitempty"`
	AssociatedMessage *string                `protobuf:"bytes,2,opt,name=associated_message,json=associatedMessage" json:"associated_message,omitempty"`
}

// Default values for CAuthentication_AllowedConfirmation fields.
const (
	Default_CAuthentication_AllowedConfirmation_ConfirmationType = EAuthSessionGuardType_k_EAuthSessionGuardType_Unknown
)

func (x *CAuthentication_AllowedConfirmation) Reset() {
	*x = CAuthentication_AllowedConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_AllowedConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_AllowedConfirmation) ProtoMessage() {}

func (x *CAuthentication_AllowedConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_AllowedConfirmation.ProtoReflect.Descriptor instead.
func (*CAuthentication_AllowedConfirmation) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CAuthentication_AllowedConfirmation) GetConfirmationType() EAuthSessionGuardType {
	if x != nil && x.ConfirmationType != nil {
		return *x.ConfirmationType
	}
	return Default_CAuthentication_AllowedConfirmation_ConfirmationType
}

func (x *CAuthentication_AllowedConfirmation) GetAssociatedMessage() string {
	if x != nil && x.AssociatedMessage != nil {
		return *x.AssociatedMessage
	}
	return ""
}

type CAuthentication_BeginAuthSessionViaQR_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId             *uint64                                `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	ChallengeUrl         *string                                `protobuf:"bytes,2,opt,name=challenge_url,json=challengeUrl" json:"challenge_url,omitempty"`
	RequestId            []byte                                 `protobuf:"bytes,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Interval             *float32                               `protobuf:"fixed32,4,opt,name=interval" json:"interval,omitempty"`
	AllowedConfirmations []*CAuthentication_AllowedConfirmation `protobuf:"bytes,5,rep,name=allowed_confirmations,json=allowedConfirmations" json:"allowed_confirmations,omitempty"`
	Version              *int32                                 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) Reset() {
	*x = CAuthentication_BeginAuthSessionViaQR_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_BeginAuthSessionViaQR_Response) ProtoMessage() {}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_BeginAuthSessionViaQR_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_BeginAuthSessionViaQR_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) GetChallengeUrl() string {
	if x != nil && x.ChallengeUrl != nil {
		return *x.ChallengeUrl
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) GetInterval() float32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) GetAllowedConfirmations() []*CAuthentication_AllowedConfirmation {
	if x != nil {
		return x.AllowedConfirmations
	}
	return nil
}

func (x *CAuthentication_BeginAuthSessionViaQR_Response) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type CAuthentication_BeginAuthSessionViaCredentials_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceFriendlyName  *string                        `protobuf:"bytes,1,opt,name=device_friendly_name,json=deviceFriendlyName" json:"device_friendly_name,omitempty"`
	AccountName         *string                        `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	EncryptedPassword   *string                        `protobuf:"bytes,3,opt,name=encrypted_password,json=encryptedPassword" json:"encrypted_password,omitempty"`
	EncryptionTimestamp *uint64                        `protobuf:"varint,4,opt,name=encryption_timestamp,json=encryptionTimestamp" json:"encryption_timestamp,omitempty"`
	RememberLogin       *bool                          `protobuf:"varint,5,opt,name=remember_login,json=rememberLogin" json:"remember_login,omitempty"`
	PlatformType        *EAuthTokenPlatformType        `protobuf:"varint,6,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
	Persistence         *ESessionPersistence           `protobuf:"varint,7,opt,name=persistence,enum=ESessionPersistence,def=1" json:"persistence,omitempty"`
	WebsiteId           *string                        `protobuf:"bytes,8,opt,name=website_id,json=websiteId,def=Unknown" json:"website_id,omitempty"`
	DeviceDetails       *CAuthentication_DeviceDetails `protobuf:"bytes,9,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
	GuardData           *string                        `protobuf:"bytes,10,opt,name=guard_data,json=guardData" json:"guard_data,omitempty"`
	Language            *uint32                        `protobuf:"varint,11,opt,name=language" json:"language,omitempty"`
	QosLevel            *int32                         `protobuf:"varint,12,opt,name=qos_level,json=qosLevel,def=2" json:"qos_level,omitempty"`
}

// Default values for CAuthentication_BeginAuthSessionViaCredentials_Request fields.
const (
	Default_CAuthentication_BeginAuthSessionViaCredentials_Request_PlatformType = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
	Default_CAuthentication_BeginAuthSessionViaCredentials_Request_Persistence  = ESessionPersistence_k_ESessionPersistence_Persistent
	Default_CAuthentication_BeginAuthSessionViaCredentials_Request_WebsiteId    = string("Unknown")
	Default_CAuthentication_BeginAuthSessionViaCredentials_Request_QosLevel     = int32(2)
)

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) Reset() {
	*x = CAuthentication_BeginAuthSessionViaCredentials_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_BeginAuthSessionViaCredentials_Request) ProtoMessage() {}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_BeginAuthSessionViaCredentials_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_BeginAuthSessionViaCredentials_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetDeviceFriendlyName() string {
	if x != nil && x.DeviceFriendlyName != nil {
		return *x.DeviceFriendlyName
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetEncryptedPassword() string {
	if x != nil && x.EncryptedPassword != nil {
		return *x.EncryptedPassword
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetEncryptionTimestamp() uint64 {
	if x != nil && x.EncryptionTimestamp != nil {
		return *x.EncryptionTimestamp
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetRememberLogin() bool {
	if x != nil && x.RememberLogin != nil {
		return *x.RememberLogin
	}
	return false
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CAuthentication_BeginAuthSessionViaCredentials_Request_PlatformType
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetPersistence() ESessionPersistence {
	if x != nil && x.Persistence != nil {
		return *x.Persistence
	}
	return Default_CAuthentication_BeginAuthSessionViaCredentials_Request_Persistence
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetWebsiteId() string {
	if x != nil && x.WebsiteId != nil {
		return *x.WebsiteId
	}
	return Default_CAuthentication_BeginAuthSessionViaCredentials_Request_WebsiteId
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetDeviceDetails() *CAuthentication_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetGuardData() string {
	if x != nil && x.GuardData != nil {
		return *x.GuardData
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Request) GetQosLevel() int32 {
	if x != nil && x.QosLevel != nil {
		return *x.QosLevel
	}
	return Default_CAuthentication_BeginAuthSessionViaCredentials_Request_QosLevel
}

type CAuthentication_BeginAuthSessionViaCredentials_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId             *uint64                                `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	RequestId            []byte                                 `protobuf:"bytes,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Interval             *float32                               `protobuf:"fixed32,3,opt,name=interval" json:"interval,omitempty"`
	AllowedConfirmations []*CAuthentication_AllowedConfirmation `protobuf:"bytes,4,rep,name=allowed_confirmations,json=allowedConfirmations" json:"allowed_confirmations,omitempty"`
	Steamid              *uint64                                `protobuf:"varint,5,opt,name=steamid" json:"steamid,omitempty"`
	WeakToken            *string                                `protobuf:"bytes,6,opt,name=weak_token,json=weakToken" json:"weak_token,omitempty"`
	AgreementSessionUrl  *string                                `protobuf:"bytes,7,opt,name=agreement_session_url,json=agreementSessionUrl" json:"agreement_session_url,omitempty"`
	ExtendedErrorMessage *string                                `protobuf:"bytes,8,opt,name=extended_error_message,json=extendedErrorMessage" json:"extended_error_message,omitempty"`
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) Reset() {
	*x = CAuthentication_BeginAuthSessionViaCredentials_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_BeginAuthSessionViaCredentials_Response) ProtoMessage() {}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_BeginAuthSessionViaCredentials_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_BeginAuthSessionViaCredentials_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetInterval() float32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetAllowedConfirmations() []*CAuthentication_AllowedConfirmation {
	if x != nil {
		return x.AllowedConfirmations
	}
	return nil
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetWeakToken() string {
	if x != nil && x.WeakToken != nil {
		return *x.WeakToken
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetAgreementSessionUrl() string {
	if x != nil && x.AgreementSessionUrl != nil {
		return *x.AgreementSessionUrl
	}
	return ""
}

func (x *CAuthentication_BeginAuthSessionViaCredentials_Response) GetExtendedErrorMessage() string {
	if x != nil && x.ExtendedErrorMessage != nil {
		return *x.ExtendedErrorMessage
	}
	return ""
}

type CAuthentication_PollAuthSessionStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId      *uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	RequestId     []byte  `protobuf:"bytes,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	TokenToRevoke *uint64 `protobuf:"fixed64,3,opt,name=token_to_revoke,json=tokenToRevoke" json:"token_to_revoke,omitempty"`
}

func (x *CAuthentication_PollAuthSessionStatus_Request) Reset() {
	*x = CAuthentication_PollAuthSessionStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_PollAuthSessionStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_PollAuthSessionStatus_Request) ProtoMessage() {}

func (x *CAuthentication_PollAuthSessionStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_PollAuthSessionStatus_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_PollAuthSessionStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CAuthentication_PollAuthSessionStatus_Request) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_PollAuthSessionStatus_Request) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *CAuthentication_PollAuthSessionStatus_Request) GetTokenToRevoke() uint64 {
	if x != nil && x.TokenToRevoke != nil {
		return *x.TokenToRevoke
	}
	return 0
}

type CAuthentication_PollAuthSessionStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewClientId          *uint64 `protobuf:"varint,1,opt,name=new_client_id,json=newClientId" json:"new_client_id,omitempty"`
	NewChallengeUrl      *string `protobuf:"bytes,2,opt,name=new_challenge_url,json=newChallengeUrl" json:"new_challenge_url,omitempty"`
	RefreshToken         *string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	AccessToken          *string `protobuf:"bytes,4,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	HadRemoteInteraction *bool   `protobuf:"varint,5,opt,name=had_remote_interaction,json=hadRemoteInteraction" json:"had_remote_interaction,omitempty"`
	AccountName          *string `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	NewGuardData         *string `protobuf:"bytes,7,opt,name=new_guard_data,json=newGuardData" json:"new_guard_data,omitempty"`
	AgreementSessionUrl  *string `protobuf:"bytes,8,opt,name=agreement_session_url,json=agreementSessionUrl" json:"agreement_session_url,omitempty"`
}

func (x *CAuthentication_PollAuthSessionStatus_Response) Reset() {
	*x = CAuthentication_PollAuthSessionStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_PollAuthSessionStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_PollAuthSessionStatus_Response) ProtoMessage() {}

func (x *CAuthentication_PollAuthSessionStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_PollAuthSessionStatus_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_PollAuthSessionStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetNewClientId() uint64 {
	if x != nil && x.NewClientId != nil {
		return *x.NewClientId
	}
	return 0
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetNewChallengeUrl() string {
	if x != nil && x.NewChallengeUrl != nil {
		return *x.NewChallengeUrl
	}
	return ""
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetHadRemoteInteraction() bool {
	if x != nil && x.HadRemoteInteraction != nil {
		return *x.HadRemoteInteraction
	}
	return false
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetNewGuardData() string {
	if x != nil && x.NewGuardData != nil {
		return *x.NewGuardData
	}
	return ""
}

func (x *CAuthentication_PollAuthSessionStatus_Response) GetAgreementSessionUrl() string {
	if x != nil && x.AgreementSessionUrl != nil {
		return *x.AgreementSessionUrl
	}
	return ""
}

type CAuthentication_GetAuthSessionInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId *uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (x *CAuthentication_GetAuthSessionInfo_Request) Reset() {
	*x = CAuthentication_GetAuthSessionInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetAuthSessionInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetAuthSessionInfo_Request) ProtoMessage() {}

func (x *CAuthentication_GetAuthSessionInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetAuthSessionInfo_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetAuthSessionInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CAuthentication_GetAuthSessionInfo_Request) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

type CAuthentication_GetAuthSessionInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip                        *string                      `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Geoloc                    *string                      `protobuf:"bytes,2,opt,name=geoloc" json:"geoloc,omitempty"`
	City                      *string                      `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	State                     *string                      `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Country                   *string                      `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	PlatformType              *EAuthTokenPlatformType      `protobuf:"varint,6,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
	DeviceFriendlyName        *string                      `protobuf:"bytes,7,opt,name=device_friendly_name,json=deviceFriendlyName" json:"device_friendly_name,omitempty"`
	Version                   *int32                       `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	LoginHistory              *EAuthSessionSecurityHistory `protobuf:"varint,9,opt,name=login_history,json=loginHistory,enum=EAuthSessionSecurityHistory,def=0" json:"login_history,omitempty"`
	RequestorLocationMismatch *bool                        `protobuf:"varint,10,opt,name=requestor_location_mismatch,json=requestorLocationMismatch" json:"requestor_location_mismatch,omitempty"`
	HighUsageLogin            *bool                        `protobuf:"varint,11,opt,name=high_usage_login,json=highUsageLogin" json:"high_usage_login,omitempty"`
	RequestedPersistence      *ESessionPersistence         `protobuf:"varint,12,opt,name=requested_persistence,json=requestedPersistence,enum=ESessionPersistence,def=-1" json:"requested_persistence,omitempty"`
	DeviceTrust               *int32                       `protobuf:"varint,13,opt,name=device_trust,json=deviceTrust" json:"device_trust,omitempty"`
	AppType                   *EAuthTokenAppType           `protobuf:"varint,14,opt,name=app_type,json=appType,enum=EAuthTokenAppType,def=0" json:"app_type,omitempty"`
}

// Default values for CAuthentication_GetAuthSessionInfo_Response fields.
const (
	Default_CAuthentication_GetAuthSessionInfo_Response_PlatformType         = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
	Default_CAuthentication_GetAuthSessionInfo_Response_LoginHistory         = EAuthSessionSecurityHistory_k_EAuthSessionSecurityHistory_Invalid
	Default_CAuthentication_GetAuthSessionInfo_Response_RequestedPersistence = ESessionPersistence_k_ESessionPersistence_Invalid
	Default_CAuthentication_GetAuthSessionInfo_Response_AppType              = EAuthTokenAppType_k_EAuthTokenAppType_Unknown
)

func (x *CAuthentication_GetAuthSessionInfo_Response) Reset() {
	*x = CAuthentication_GetAuthSessionInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetAuthSessionInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetAuthSessionInfo_Response) ProtoMessage() {}

func (x *CAuthentication_GetAuthSessionInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetAuthSessionInfo_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetAuthSessionInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetGeoloc() string {
	if x != nil && x.Geoloc != nil {
		return *x.Geoloc
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CAuthentication_GetAuthSessionInfo_Response_PlatformType
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetDeviceFriendlyName() string {
	if x != nil && x.DeviceFriendlyName != nil {
		return *x.DeviceFriendlyName
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetLoginHistory() EAuthSessionSecurityHistory {
	if x != nil && x.LoginHistory != nil {
		return *x.LoginHistory
	}
	return Default_CAuthentication_GetAuthSessionInfo_Response_LoginHistory
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetRequestorLocationMismatch() bool {
	if x != nil && x.RequestorLocationMismatch != nil {
		return *x.RequestorLocationMismatch
	}
	return false
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetHighUsageLogin() bool {
	if x != nil && x.HighUsageLogin != nil {
		return *x.HighUsageLogin
	}
	return false
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetRequestedPersistence() ESessionPersistence {
	if x != nil && x.RequestedPersistence != nil {
		return *x.RequestedPersistence
	}
	return Default_CAuthentication_GetAuthSessionInfo_Response_RequestedPersistence
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetDeviceTrust() int32 {
	if x != nil && x.DeviceTrust != nil {
		return *x.DeviceTrust
	}
	return 0
}

func (x *CAuthentication_GetAuthSessionInfo_Response) GetAppType() EAuthTokenAppType {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return Default_CAuthentication_GetAuthSessionInfo_Response_AppType
}

type CAuthentication_GetAuthSessionRiskInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId *uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Language *uint32 `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Request) Reset() {
	*x = CAuthentication_GetAuthSessionRiskInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetAuthSessionRiskInfo_Request) ProtoMessage() {}

func (x *CAuthentication_GetAuthSessionRiskInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetAuthSessionRiskInfo_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetAuthSessionRiskInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Request) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CAuthentication_GetAuthSessionRiskInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationConfirmer *string                 `protobuf:"bytes,1,opt,name=location_confirmer,json=locationConfirmer" json:"location_confirmer,omitempty"`
	LocationRequestor *string                 `protobuf:"bytes,2,opt,name=location_requestor,json=locationRequestor" json:"location_requestor,omitempty"`
	LocationOther     *string                 `protobuf:"bytes,3,opt,name=location_other,json=locationOther" json:"location_other,omitempty"`
	PlatformType      *EAuthTokenPlatformType `protobuf:"varint,4,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
}

// Default values for CAuthentication_GetAuthSessionRiskInfo_Response fields.
const (
	Default_CAuthentication_GetAuthSessionRiskInfo_Response_PlatformType = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
)

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) Reset() {
	*x = CAuthentication_GetAuthSessionRiskInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetAuthSessionRiskInfo_Response) ProtoMessage() {}

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetAuthSessionRiskInfo_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetAuthSessionRiskInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) GetLocationConfirmer() string {
	if x != nil && x.LocationConfirmer != nil {
		return *x.LocationConfirmer
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) GetLocationRequestor() string {
	if x != nil && x.LocationRequestor != nil {
		return *x.LocationRequestor
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) GetLocationOther() string {
	if x != nil && x.LocationOther != nil {
		return *x.LocationOther
	}
	return ""
}

func (x *CAuthentication_GetAuthSessionRiskInfo_Response) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CAuthentication_GetAuthSessionRiskInfo_Response_PlatformType
}

type CAuthentication_NotifyRiskQuizResults_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId        *uint64                                                             `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Results         *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults `protobuf:"bytes,2,opt,name=results" json:"results,omitempty"`
	SelectedAction  *string                                                             `protobuf:"bytes,3,opt,name=selected_action,json=selectedAction" json:"selected_action,omitempty"`
	DidConfirmLogin *bool                                                               `protobuf:"varint,4,opt,name=did_confirm_login,json=didConfirmLogin" json:"did_confirm_login,omitempty"`
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) Reset() {
	*x = CAuthentication_NotifyRiskQuizResults_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_NotifyRiskQuizResults_Notification) ProtoMessage() {}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_NotifyRiskQuizResults_Notification.ProtoReflect.Descriptor instead.
func (*CAuthentication_NotifyRiskQuizResults_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) GetResults() *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) GetSelectedAction() string {
	if x != nil && x.SelectedAction != nil {
		return *x.SelectedAction
	}
	return ""
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification) GetDidConfirmLogin() bool {
	if x != nil && x.DidConfirmLogin != nil {
		return *x.DidConfirmLogin
	}
	return false
}

type CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     *int32               `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ClientId    *uint64              `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Steamid     *uint64              `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Signature   []byte               `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	Confirm     *bool                `protobuf:"varint,5,opt,name=confirm,def=0" json:"confirm,omitempty"`
	Persistence *ESessionPersistence `protobuf:"varint,6,opt,name=persistence,enum=ESessionPersistence,def=1" json:"persistence,omitempty"`
}

// Default values for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request fields.
const (
	Default_CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request_Confirm     = bool(false)
	Default_CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request_Persistence = ESessionPersistence_k_ESessionPersistence_Persistent
)

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) Reset() {
	*x = CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) ProtoMessage() {}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) GetConfirm() bool {
	if x != nil && x.Confirm != nil {
		return *x.Confirm
	}
	return Default_CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request_Confirm
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) GetPersistence() ESessionPersistence {
	if x != nil && x.Persistence != nil {
		return *x.Persistence
	}
	return Default_CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request_Persistence
}

type CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response) Reset() {
	*x = CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response) ProtoMessage() {}

func (x *CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{16}
}

type CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId *uint64                `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Steamid  *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Code     *string                `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	CodeType *EAuthSessionGuardType `protobuf:"varint,4,opt,name=code_type,json=codeType,enum=EAuthSessionGuardType,def=0" json:"code_type,omitempty"`
}

// Default values for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request fields.
const (
	Default_CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request_CodeType = EAuthSessionGuardType_k_EAuthSessionGuardType_Unknown
)

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) Reset() {
	*x = CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) ProtoMessage() {}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) GetCodeType() EAuthSessionGuardType {
	if x != nil && x.CodeType != nil {
		return *x.CodeType
	}
	return Default_CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request_CodeType
}

type CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgreementSessionUrl *string `protobuf:"bytes,7,opt,name=agreement_session_url,json=agreementSessionUrl" json:"agreement_session_url,omitempty"`
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response) Reset() {
	*x = CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response) ProtoMessage() {}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response) GetAgreementSessionUrl() string {
	if x != nil && x.AgreementSessionUrl != nil {
		return *x.AgreementSessionUrl
	}
	return ""
}

type CAuthentication_AccessToken_GenerateForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken *string            `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	Steamid      *uint64            `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	RenewalType  *ETokenRenewalType `protobuf:"varint,3,opt,name=renewal_type,json=renewalType,enum=ETokenRenewalType,def=0" json:"renewal_type,omitempty"`
}

// Default values for CAuthentication_AccessToken_GenerateForApp_Request fields.
const (
	Default_CAuthentication_AccessToken_GenerateForApp_Request_RenewalType = ETokenRenewalType_k_ETokenRenewalType_None
)

func (x *CAuthentication_AccessToken_GenerateForApp_Request) Reset() {
	*x = CAuthentication_AccessToken_GenerateForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_AccessToken_GenerateForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_AccessToken_GenerateForApp_Request) ProtoMessage() {}

func (x *CAuthentication_AccessToken_GenerateForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_AccessToken_GenerateForApp_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_AccessToken_GenerateForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CAuthentication_AccessToken_GenerateForApp_Request) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *CAuthentication_AccessToken_GenerateForApp_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthentication_AccessToken_GenerateForApp_Request) GetRenewalType() ETokenRenewalType {
	if x != nil && x.RenewalType != nil {
		return *x.RenewalType
	}
	return Default_CAuthentication_AccessToken_GenerateForApp_Request_RenewalType
}

type CAuthentication_AccessToken_GenerateForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  *string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	RefreshToken *string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (x *CAuthentication_AccessToken_GenerateForApp_Response) Reset() {
	*x = CAuthentication_AccessToken_GenerateForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_AccessToken_GenerateForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_AccessToken_GenerateForApp_Response) ProtoMessage() {}

func (x *CAuthentication_AccessToken_GenerateForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_AccessToken_GenerateForApp_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_AccessToken_GenerateForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CAuthentication_AccessToken_GenerateForApp_Response) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CAuthentication_AccessToken_GenerateForApp_Response) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

type CAuthentication_RefreshToken_Enumerate_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthentication_RefreshToken_Enumerate_Request) Reset() {
	*x = CAuthentication_RefreshToken_Enumerate_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_RefreshToken_Enumerate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_RefreshToken_Enumerate_Request) ProtoMessage() {}

func (x *CAuthentication_RefreshToken_Enumerate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_RefreshToken_Enumerate_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_RefreshToken_Enumerate_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{21}
}

type CAuthentication_RefreshToken_Enumerate_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTokens   []*CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription `protobuf:"bytes,1,rep,name=refresh_tokens,json=refreshTokens" json:"refresh_tokens,omitempty"`
	RequestingToken *uint64                                                                    `protobuf:"fixed64,2,opt,name=requesting_token,json=requestingToken" json:"requesting_token,omitempty"`
}

func (x *CAuthentication_RefreshToken_Enumerate_Response) Reset() {
	*x = CAuthentication_RefreshToken_Enumerate_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_RefreshToken_Enumerate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_RefreshToken_Enumerate_Response) ProtoMessage() {}

func (x *CAuthentication_RefreshToken_Enumerate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_RefreshToken_Enumerate_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_RefreshToken_Enumerate_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CAuthentication_RefreshToken_Enumerate_Response) GetRefreshTokens() []*CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
	if x != nil {
		return x.RefreshTokens
	}
	return nil
}

func (x *CAuthentication_RefreshToken_Enumerate_Response) GetRequestingToken() uint64 {
	if x != nil && x.RequestingToken != nil {
		return *x.RequestingToken
	}
	return 0
}

type CAuthentication_GetAuthSessionsForAccount_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthentication_GetAuthSessionsForAccount_Request) Reset() {
	*x = CAuthentication_GetAuthSessionsForAccount_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetAuthSessionsForAccount_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetAuthSessionsForAccount_Request) ProtoMessage() {}

func (x *CAuthentication_GetAuthSessionsForAccount_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetAuthSessionsForAccount_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetAuthSessionsForAccount_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{23}
}

type CAuthentication_GetAuthSessionsForAccount_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIds []uint64 `protobuf:"varint,1,rep,name=client_ids,json=clientIds" json:"client_ids,omitempty"`
}

func (x *CAuthentication_GetAuthSessionsForAccount_Response) Reset() {
	*x = CAuthentication_GetAuthSessionsForAccount_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_GetAuthSessionsForAccount_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_GetAuthSessionsForAccount_Response) ProtoMessage() {}

func (x *CAuthentication_GetAuthSessionsForAccount_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_GetAuthSessionsForAccount_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_GetAuthSessionsForAccount_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CAuthentication_GetAuthSessionsForAccount_Response) GetClientIds() []uint64 {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

type CAuthentication_MigrateMobileSession_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid   *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Token     *string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Signature *string `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (x *CAuthentication_MigrateMobileSession_Request) Reset() {
	*x = CAuthentication_MigrateMobileSession_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_MigrateMobileSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_MigrateMobileSession_Request) ProtoMessage() {}

func (x *CAuthentication_MigrateMobileSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_MigrateMobileSession_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_MigrateMobileSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CAuthentication_MigrateMobileSession_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthentication_MigrateMobileSession_Request) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CAuthentication_MigrateMobileSession_Request) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

type CAuthentication_MigrateMobileSession_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken *string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	AccessToken  *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CAuthentication_MigrateMobileSession_Response) Reset() {
	*x = CAuthentication_MigrateMobileSession_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_MigrateMobileSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_MigrateMobileSession_Response) ProtoMessage() {}

func (x *CAuthentication_MigrateMobileSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_MigrateMobileSession_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_MigrateMobileSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CAuthentication_MigrateMobileSession_Response) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *CAuthentication_MigrateMobileSession_Response) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type CAuthentication_Token_Revoke_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *string                 `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	RevokeAction *EAuthTokenRevokeAction `protobuf:"varint,2,opt,name=revoke_action,json=revokeAction,enum=EAuthTokenRevokeAction,def=1" json:"revoke_action,omitempty"`
}

// Default values for CAuthentication_Token_Revoke_Request fields.
const (
	Default_CAuthentication_Token_Revoke_Request_RevokeAction = EAuthTokenRevokeAction_k_EAuthTokenRevokePermanent
)

func (x *CAuthentication_Token_Revoke_Request) Reset() {
	*x = CAuthentication_Token_Revoke_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_Token_Revoke_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_Token_Revoke_Request) ProtoMessage() {}

func (x *CAuthentication_Token_Revoke_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_Token_Revoke_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_Token_Revoke_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CAuthentication_Token_Revoke_Request) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CAuthentication_Token_Revoke_Request) GetRevokeAction() EAuthTokenRevokeAction {
	if x != nil && x.RevokeAction != nil {
		return *x.RevokeAction
	}
	return Default_CAuthentication_Token_Revoke_Request_RevokeAction
}

type CAuthentication_Token_Revoke_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthentication_Token_Revoke_Response) Reset() {
	*x = CAuthentication_Token_Revoke_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_Token_Revoke_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_Token_Revoke_Response) ProtoMessage() {}

func (x *CAuthentication_Token_Revoke_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_Token_Revoke_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_Token_Revoke_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{28}
}

type CAuthentication_RefreshToken_Revoke_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId      *uint64                 `protobuf:"fixed64,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	Steamid      *uint64                 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	RevokeAction *EAuthTokenRevokeAction `protobuf:"varint,3,opt,name=revoke_action,json=revokeAction,enum=EAuthTokenRevokeAction,def=1" json:"revoke_action,omitempty"`
	Signature    []byte                  `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
}

// Default values for CAuthentication_RefreshToken_Revoke_Request fields.
const (
	Default_CAuthentication_RefreshToken_Revoke_Request_RevokeAction = EAuthTokenRevokeAction_k_EAuthTokenRevokePermanent
)

func (x *CAuthentication_RefreshToken_Revoke_Request) Reset() {
	*x = CAuthentication_RefreshToken_Revoke_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_RefreshToken_Revoke_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_RefreshToken_Revoke_Request) ProtoMessage() {}

func (x *CAuthentication_RefreshToken_Revoke_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_RefreshToken_Revoke_Request.ProtoReflect.Descriptor instead.
func (*CAuthentication_RefreshToken_Revoke_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CAuthentication_RefreshToken_Revoke_Request) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Revoke_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Revoke_Request) GetRevokeAction() EAuthTokenRevokeAction {
	if x != nil && x.RevokeAction != nil {
		return *x.RevokeAction
	}
	return Default_CAuthentication_RefreshToken_Revoke_Request_RevokeAction
}

func (x *CAuthentication_RefreshToken_Revoke_Request) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CAuthentication_RefreshToken_Revoke_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthentication_RefreshToken_Revoke_Response) Reset() {
	*x = CAuthentication_RefreshToken_Revoke_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_RefreshToken_Revoke_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_RefreshToken_Revoke_Response) ProtoMessage() {}

func (x *CAuthentication_RefreshToken_Revoke_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_RefreshToken_Revoke_Response.ProtoReflect.Descriptor instead.
func (*CAuthentication_RefreshToken_Revoke_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{30}
}

type CAuthenticationSupport_QueryRefreshTokensByAccount_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid              *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeRevokedTokens *bool   `protobuf:"varint,2,opt,name=include_revoked_tokens,json=includeRevokedTokens" json:"include_revoked_tokens,omitempty"`
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) Reset() {
	*x = CAuthenticationSupport_QueryRefreshTokensByAccount_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_QueryRefreshTokensByAccount_Request) ProtoMessage() {}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_QueryRefreshTokensByAccount_Request.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_QueryRefreshTokensByAccount_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Request) GetIncludeRevokedTokens() bool {
	if x != nil && x.IncludeRevokedTokens != nil {
		return *x.IncludeRevokedTokens
	}
	return false
}

type CSupportRefreshTokenDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId          *uint64                                          `protobuf:"fixed64,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenDescription *string                                          `protobuf:"bytes,2,opt,name=token_description,json=tokenDescription" json:"token_description,omitempty"`
	TimeUpdated      *uint32                                          `protobuf:"varint,3,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	PlatformType     *EAuthTokenPlatformType                          `protobuf:"varint,4,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
	TokenState       *EAuthTokenState                                 `protobuf:"varint,5,opt,name=token_state,json=tokenState,enum=EAuthTokenState,def=0" json:"token_state,omitempty"`
	OwnerSteamid     *uint64                                          `protobuf:"fixed64,6,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	OsPlatform       *uint32                                          `protobuf:"varint,7,opt,name=os_platform,json=osPlatform" json:"os_platform,omitempty"`
	OsType           *int32                                           `protobuf:"varint,8,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	AuthType         *uint32                                          `protobuf:"varint,9,opt,name=auth_type,json=authType" json:"auth_type,omitempty"`
	GamingDeviceType *uint32                                          `protobuf:"varint,10,opt,name=gaming_device_type,json=gamingDeviceType" json:"gaming_device_type,omitempty"`
	FirstSeen        *CSupportRefreshTokenDescription_TokenUsageEvent `protobuf:"bytes,11,opt,name=first_seen,json=firstSeen" json:"first_seen,omitempty"`
	LastSeen         *CSupportRefreshTokenDescription_TokenUsageEvent `protobuf:"bytes,12,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
}

// Default values for CSupportRefreshTokenDescription fields.
const (
	Default_CSupportRefreshTokenDescription_PlatformType = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
	Default_CSupportRefreshTokenDescription_TokenState   = EAuthTokenState_k_EAuthTokenState_Invalid
)

func (x *CSupportRefreshTokenDescription) Reset() {
	*x = CSupportRefreshTokenDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSupportRefreshTokenDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSupportRefreshTokenDescription) ProtoMessage() {}

func (x *CSupportRefreshTokenDescription) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSupportRefreshTokenDescription.ProtoReflect.Descriptor instead.
func (*CSupportRefreshTokenDescription) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CSupportRefreshTokenDescription) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetTokenDescription() string {
	if x != nil && x.TokenDescription != nil {
		return *x.TokenDescription
	}
	return ""
}

func (x *CSupportRefreshTokenDescription) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CSupportRefreshTokenDescription_PlatformType
}

func (x *CSupportRefreshTokenDescription) GetTokenState() EAuthTokenState {
	if x != nil && x.TokenState != nil {
		return *x.TokenState
	}
	return Default_CSupportRefreshTokenDescription_TokenState
}

func (x *CSupportRefreshTokenDescription) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetOsPlatform() uint32 {
	if x != nil && x.OsPlatform != nil {
		return *x.OsPlatform
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetOsType() int32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetAuthType() uint32 {
	if x != nil && x.AuthType != nil {
		return *x.AuthType
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetGamingDeviceType() uint32 {
	if x != nil && x.GamingDeviceType != nil {
		return *x.GamingDeviceType
	}
	return 0
}

func (x *CSupportRefreshTokenDescription) GetFirstSeen() *CSupportRefreshTokenDescription_TokenUsageEvent {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *CSupportRefreshTokenDescription) GetLastSeen() *CSupportRefreshTokenDescription_TokenUsageEvent {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type CAuthenticationSupport_QueryRefreshTokensByAccount_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTokens  []*CSupportRefreshTokenDescription `protobuf:"bytes,1,rep,name=refresh_tokens,json=refreshTokens" json:"refresh_tokens,omitempty"`
	LastTokenReset *int32                             `protobuf:"varint,2,opt,name=last_token_reset,json=lastTokenReset" json:"last_token_reset,omitempty"`
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Response) Reset() {
	*x = CAuthenticationSupport_QueryRefreshTokensByAccount_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_QueryRefreshTokensByAccount_Response) ProtoMessage() {}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_QueryRefreshTokensByAccount_Response.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_QueryRefreshTokensByAccount_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Response) GetRefreshTokens() []*CSupportRefreshTokenDescription {
	if x != nil {
		return x.RefreshTokens
	}
	return nil
}

func (x *CAuthenticationSupport_QueryRefreshTokensByAccount_Response) GetLastTokenReset() int32 {
	if x != nil && x.LastTokenReset != nil {
		return *x.LastTokenReset
	}
	return 0
}

type CAuthenticationSupport_QueryRefreshTokenByID_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId *uint64 `protobuf:"fixed64,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Request) Reset() {
	*x = CAuthenticationSupport_QueryRefreshTokenByID_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_QueryRefreshTokenByID_Request) ProtoMessage() {}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_QueryRefreshTokenByID_Request.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_QueryRefreshTokenByID_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Request) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

type CAuthenticationSupport_QueryRefreshTokenByID_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTokens []*CSupportRefreshTokenDescription `protobuf:"bytes,1,rep,name=refresh_tokens,json=refreshTokens" json:"refresh_tokens,omitempty"`
}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Response) Reset() {
	*x = CAuthenticationSupport_QueryRefreshTokenByID_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_QueryRefreshTokenByID_Response) ProtoMessage() {}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_QueryRefreshTokenByID_Response.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_QueryRefreshTokenByID_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CAuthenticationSupport_QueryRefreshTokenByID_Response) GetRefreshTokens() []*CSupportRefreshTokenDescription {
	if x != nil {
		return x.RefreshTokens
	}
	return nil
}

type CAuthenticationSupport_RevokeToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId *uint64 `protobuf:"fixed64,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CAuthenticationSupport_RevokeToken_Request) Reset() {
	*x = CAuthenticationSupport_RevokeToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_RevokeToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_RevokeToken_Request) ProtoMessage() {}

func (x *CAuthenticationSupport_RevokeToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_RevokeToken_Request.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_RevokeToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CAuthenticationSupport_RevokeToken_Request) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CAuthenticationSupport_RevokeToken_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CAuthenticationSupport_RevokeToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthenticationSupport_RevokeToken_Response) Reset() {
	*x = CAuthenticationSupport_RevokeToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_RevokeToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_RevokeToken_Response) ProtoMessage() {}

func (x *CAuthenticationSupport_RevokeToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_RevokeToken_Response.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_RevokeToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{37}
}

type CAuthenticationSupport_GetTokenHistory_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId *uint64 `protobuf:"fixed64,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
}

func (x *CAuthenticationSupport_GetTokenHistory_Request) Reset() {
	*x = CAuthenticationSupport_GetTokenHistory_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_GetTokenHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_GetTokenHistory_Request) ProtoMessage() {}

func (x *CAuthenticationSupport_GetTokenHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_GetTokenHistory_Request.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_GetTokenHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CAuthenticationSupport_GetTokenHistory_Request) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

type CSupportRefreshTokenAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *int32         `protobuf:"varint,1,opt,name=action" json:"action,omitempty"`
	Time   *uint32        `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Ip     *CMsgIPAddress `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Actor  *uint64        `protobuf:"fixed64,4,opt,name=actor" json:"actor,omitempty"`
}

func (x *CSupportRefreshTokenAudit) Reset() {
	*x = CSupportRefreshTokenAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSupportRefreshTokenAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSupportRefreshTokenAudit) ProtoMessage() {}

func (x *CSupportRefreshTokenAudit) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSupportRefreshTokenAudit.ProtoReflect.Descriptor instead.
func (*CSupportRefreshTokenAudit) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CSupportRefreshTokenAudit) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *CSupportRefreshTokenAudit) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CSupportRefreshTokenAudit) GetIp() *CMsgIPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *CSupportRefreshTokenAudit) GetActor() uint64 {
	if x != nil && x.Actor != nil {
		return *x.Actor
	}
	return 0
}

type CAuthenticationSupport_GetTokenHistory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*CSupportRefreshTokenAudit `protobuf:"bytes,1,rep,name=history" json:"history,omitempty"`
}

func (x *CAuthenticationSupport_GetTokenHistory_Response) Reset() {
	*x = CAuthenticationSupport_GetTokenHistory_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_GetTokenHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_GetTokenHistory_Response) ProtoMessage() {}

func (x *CAuthenticationSupport_GetTokenHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_GetTokenHistory_Response.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_GetTokenHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CAuthenticationSupport_GetTokenHistory_Response) GetHistory() []*CSupportRefreshTokenAudit {
	if x != nil {
		return x.History
	}
	return nil
}

type CAuthenticationSupport_MarkTokenCompromised_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	TokenId *uint64 `protobuf:"fixed64,2,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
}

func (x *CAuthenticationSupport_MarkTokenCompromised_Request) Reset() {
	*x = CAuthenticationSupport_MarkTokenCompromised_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_MarkTokenCompromised_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_MarkTokenCompromised_Request) ProtoMessage() {}

func (x *CAuthenticationSupport_MarkTokenCompromised_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_MarkTokenCompromised_Request.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_MarkTokenCompromised_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{41}
}

func (x *CAuthenticationSupport_MarkTokenCompromised_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CAuthenticationSupport_MarkTokenCompromised_Request) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

type CAuthenticationSupport_MarkTokenCompromised_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAuthenticationSupport_MarkTokenCompromised_Response) Reset() {
	*x = CAuthenticationSupport_MarkTokenCompromised_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationSupport_MarkTokenCompromised_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationSupport_MarkTokenCompromised_Response) ProtoMessage() {}

func (x *CAuthenticationSupport_MarkTokenCompromised_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationSupport_MarkTokenCompromised_Response.ProtoReflect.Descriptor instead.
func (*CAuthenticationSupport_MarkTokenCompromised_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{42}
}

type CCloudGaming_CreateNonce_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform *string `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	Appid    *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCloudGaming_CreateNonce_Request) Reset() {
	*x = CCloudGaming_CreateNonce_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloudGaming_CreateNonce_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloudGaming_CreateNonce_Request) ProtoMessage() {}

func (x *CCloudGaming_CreateNonce_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloudGaming_CreateNonce_Request.ProtoReflect.Descriptor instead.
func (*CCloudGaming_CreateNonce_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CCloudGaming_CreateNonce_Request) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *CCloudGaming_CreateNonce_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloudGaming_CreateNonce_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce  *string `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	Expiry *uint32 `protobuf:"varint,2,opt,name=expiry" json:"expiry,omitempty"`
}

func (x *CCloudGaming_CreateNonce_Response) Reset() {
	*x = CCloudGaming_CreateNonce_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloudGaming_CreateNonce_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloudGaming_CreateNonce_Response) ProtoMessage() {}

func (x *CCloudGaming_CreateNonce_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloudGaming_CreateNonce_Response.ProtoReflect.Descriptor instead.
func (*CCloudGaming_CreateNonce_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CCloudGaming_CreateNonce_Response) GetNonce() string {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return ""
}

func (x *CCloudGaming_CreateNonce_Response) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

type CCloudGaming_GetTimeRemaining_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform  *string  `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	AppidList []uint32 `protobuf:"varint,2,rep,name=appid_list,json=appidList" json:"appid_list,omitempty"`
}

func (x *CCloudGaming_GetTimeRemaining_Request) Reset() {
	*x = CCloudGaming_GetTimeRemaining_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloudGaming_GetTimeRemaining_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloudGaming_GetTimeRemaining_Request) ProtoMessage() {}

func (x *CCloudGaming_GetTimeRemaining_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloudGaming_GetTimeRemaining_Request.ProtoReflect.Descriptor instead.
func (*CCloudGaming_GetTimeRemaining_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{45}
}

func (x *CCloudGaming_GetTimeRemaining_Request) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *CCloudGaming_GetTimeRemaining_Request) GetAppidList() []uint32 {
	if x != nil {
		return x.AppidList
	}
	return nil
}

type CCloudGaming_TimeRemaining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	MinutesRemaining *uint32 `protobuf:"varint,2,opt,name=minutes_remaining,json=minutesRemaining" json:"minutes_remaining,omitempty"`
}

func (x *CCloudGaming_TimeRemaining) Reset() {
	*x = CCloudGaming_TimeRemaining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloudGaming_TimeRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloudGaming_TimeRemaining) ProtoMessage() {}

func (x *CCloudGaming_TimeRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloudGaming_TimeRemaining.ProtoReflect.Descriptor instead.
func (*CCloudGaming_TimeRemaining) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CCloudGaming_TimeRemaining) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloudGaming_TimeRemaining) GetMinutesRemaining() uint32 {
	if x != nil && x.MinutesRemaining != nil {
		return *x.MinutesRemaining
	}
	return 0
}

type CCloudGaming_GetTimeRemaining_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CCloudGaming_TimeRemaining `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (x *CCloudGaming_GetTimeRemaining_Response) Reset() {
	*x = CCloudGaming_GetTimeRemaining_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloudGaming_GetTimeRemaining_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloudGaming_GetTimeRemaining_Response) ProtoMessage() {}

func (x *CCloudGaming_GetTimeRemaining_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloudGaming_GetTimeRemaining_Response.ProtoReflect.Descriptor instead.
func (*CCloudGaming_GetTimeRemaining_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CCloudGaming_GetTimeRemaining_Response) GetEntries() []*CCloudGaming_TimeRemaining {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform *bool `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
	Location *bool `protobuf:"varint,2,opt,name=location" json:"location,omitempty"`
	Action   *bool `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) Reset() {
	*x = CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) ProtoMessage() {}

func (x *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults.ProtoReflect.Descriptor instead.
func (*CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) GetPlatform() bool {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return false
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) GetLocation() bool {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return false
}

func (x *CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults) GetAction() bool {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return false
}

type CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *uint32        `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Ip      *CMsgIPAddress `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Locale  *string        `protobuf:"bytes,3,opt,name=locale" json:"locale,omitempty"`
	Country *string        `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	State   *string        `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	City    *string        `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) Reset() {
	*x = CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) ProtoMessage() {}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent.ProtoReflect.Descriptor instead.
func (*CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) GetIp() *CMsgIPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

type CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId            *uint64                                                          `protobuf:"fixed64,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenDescription   *string                                                          `protobuf:"bytes,2,opt,name=token_description,json=tokenDescription" json:"token_description,omitempty"`
	TimeUpdated        *uint32                                                          `protobuf:"varint,3,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	PlatformType       *EAuthTokenPlatformType                                          `protobuf:"varint,4,opt,name=platform_type,json=platformType,enum=EAuthTokenPlatformType,def=0" json:"platform_type,omitempty"`
	LoggedIn           *bool                                                            `protobuf:"varint,5,opt,name=logged_in,json=loggedIn" json:"logged_in,omitempty"`
	OsPlatform         *uint32                                                          `protobuf:"varint,6,opt,name=os_platform,json=osPlatform" json:"os_platform,omitempty"`
	AuthType           *uint32                                                          `protobuf:"varint,7,opt,name=auth_type,json=authType" json:"auth_type,omitempty"`
	GamingDeviceType   *uint32                                                          `protobuf:"varint,8,opt,name=gaming_device_type,json=gamingDeviceType" json:"gaming_device_type,omitempty"`
	FirstSeen          *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent `protobuf:"bytes,9,opt,name=first_seen,json=firstSeen" json:"first_seen,omitempty"`
	LastSeen           *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent `protobuf:"bytes,10,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	OsType             *int32                                                           `protobuf:"varint,11,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	AuthenticationType *EAuthenticationType                                             `protobuf:"varint,12,opt,name=authentication_type,json=authenticationType,enum=EAuthenticationType,def=0" json:"authentication_type,omitempty"`
}

// Default values for CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription fields.
const (
	Default_CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription_PlatformType       = EAuthTokenPlatformType_k_EAuthTokenPlatformType_Unknown
	Default_CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription_AuthenticationType = EAuthenticationType_k_EAuthenticationType_Unknown
)

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) Reset() {
	*x = CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) ProtoMessage() {}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription.ProtoReflect.Descriptor instead.
func (*CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{22, 1}
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetTokenDescription() string {
	if x != nil && x.TokenDescription != nil {
		return *x.TokenDescription
	}
	return ""
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetPlatformType() EAuthTokenPlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return Default_CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription_PlatformType
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetLoggedIn() bool {
	if x != nil && x.LoggedIn != nil {
		return *x.LoggedIn
	}
	return false
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetOsPlatform() uint32 {
	if x != nil && x.OsPlatform != nil {
		return *x.OsPlatform
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetAuthType() uint32 {
	if x != nil && x.AuthType != nil {
		return *x.AuthType
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetGamingDeviceType() uint32 {
	if x != nil && x.GamingDeviceType != nil {
		return *x.GamingDeviceType
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetFirstSeen() *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetLastSeen() *CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetOsType() int32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription) GetAuthenticationType() EAuthenticationType {
	if x != nil && x.AuthenticationType != nil {
		return *x.AuthenticationType
	}
	return Default_CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription_AuthenticationType
}

type CSupportRefreshTokenDescription_TokenUsageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *uint32        `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Ip      *CMsgIPAddress `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Country *string        `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	State   *string        `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	City    *string        `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) Reset() {
	*x = CSupportRefreshTokenDescription_TokenUsageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_auth_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSupportRefreshTokenDescription_TokenUsageEvent) ProtoMessage() {}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_auth_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSupportRefreshTokenDescription_TokenUsageEvent.ProtoReflect.Descriptor instead.
func (*CSupportRefreshTokenDescription_TokenUsageEvent) Descriptor() ([]byte, []int) {
	return file_steammessages_auth_steamclient_proto_rawDescGZIP(), []int{32, 0}
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) GetIp() *CMsgIPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CSupportRefreshTokenDescription_TokenUsageEvent) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

var File_steammessages_auth_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_auth_steamclient_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x2f, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x9a, 0x01, 0x0a, 0x30, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x86,
	0x03, 0x0a, 0x1d, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x2d, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61, 0x51,
	0x52, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x09, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x2e, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61, 0x51,
	0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x05, 0x0a,
	0x36, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x61, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x3a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x71, 0x6f, 0x73,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52,
	0x08, 0x71, 0x6f, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8f, 0x03, 0x0a, 0x37, 0x43, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69,
	0x61, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x59, 0x0a,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x2d,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x22, 0xfb, 0x02, 0x0a, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x68, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61,
	0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x47, 0x75, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22,
	0x49, 0x0a, 0x2a, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf2, 0x05, 0x0a, 0x2b, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x68, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x69, 0x0a, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x2f, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x32, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x69,
	0x73, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x69, 0x73, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x61, 0x0a, 0x0f, 0x52,
	0x69, 0x73, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab,
	0x02, 0x0a, 0x3f, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0x6b,
	0x5f, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x40,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xde, 0x01, 0x0a, 0x3b, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x72, 0x0a, 0x3c, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xc4, 0x01, 0x0a, 0x32, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x45, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a, 0x33,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x30, 0x0a, 0x2e, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x08,
	0x0a, 0x2f, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xa1, 0x01,
	0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x1a, 0xac, 0x05, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x73, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b,
	0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x33, 0x0a, 0x31, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x32, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x2c, 0x43, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x77, 0x0a, 0x2d, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x97, 0x01, 0x0a, 0x24, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x59, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x25, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x2b, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x3a, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x22, 0x90, 0x06, 0x0a, 0x1f, 0x43, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x73, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x1a, 0x89, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x3b, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0x51, 0x0a, 0x34, 0x43, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x35, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x61, 0x0a,
	0x2a, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4b, 0x0a, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x19,
	0x43, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x2f, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x43, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x6a, 0x0a, 0x33, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4d,
	0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x22, 0x36, 0x0a, 0x34, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x20, 0x43, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x51,
	0x0a, 0x21, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x22, 0x62, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x1a, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0xb9, 0x01, 0x0a, 0x16, 0x45, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57,
	0x65, 0x62, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x10, 0x03, 0x2a, 0x85, 0x01, 0x0a, 0x11, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x70,
	0x70, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x10, 0x02, 0x2a, 0xe5, 0x02, 0x0a, 0x15,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x6b,
	0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x6b,
	0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x10, 0x07, 0x2a, 0xac, 0x01, 0x0a, 0x1b, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x30,
	0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x55, 0x73, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x10, 0x01,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x10, 0x02, 0x2a, 0x50, 0x0a, 0x11, 0x45, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x10, 0x01, 0x2a, 0xcd, 0x01, 0x0a, 0x13, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x52, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x04, 0x2a, 0xaf, 0x02, 0x0a, 0x16, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x10, 0x07, 0x2a, 0x88, 0x02, 0x0a, 0x0f, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e,
	0x65, 0x77, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x10,
	0x63, 0x32, 0x87, 0x0f, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x30, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x53, 0x41,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61, 0x51, 0x52, 0x12, 0x2e, 0x2e,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x61, 0x51, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x61, 0x51, 0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93,
	0x01, 0x0a, 0x1e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x37, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x2e, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x15,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x69,
	0x73, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x47, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x47, 0x75, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x33, 0x2e, 0x43, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x43, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c,
	0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa1, 0x05, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x35, 0x2e, 0x43, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x4d, 0x61,
	0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
	0x65, 0x64, 0x12, 0x34, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xc8, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x54, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21,
	0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x43, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_auth_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_auth_steamclient_proto_rawDescData = file_steammessages_auth_steamclient_proto_rawDesc
)

func file_steammessages_auth_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_auth_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_auth_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_auth_steamclient_proto_rawDescData)
	})
	return file_steammessages_auth_steamclient_proto_rawDescData
}

var file_steammessages_auth_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_steammessages_auth_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_steammessages_auth_steamclient_proto_goTypes = []any{
	(EAuthTokenPlatformType)(0),                                                     // 0: EAuthTokenPlatformType
	(EAuthTokenAppType)(0),                                                          // 1: EAuthTokenAppType
	(EAuthSessionGuardType)(0),                                                      // 2: EAuthSessionGuardType
	(EAuthSessionSecurityHistory)(0),                                                // 3: EAuthSessionSecurityHistory
	(ETokenRenewalType)(0),                                                          // 4: ETokenRenewalType
	(EAuthenticationType)(0),                                                        // 5: EAuthenticationType
	(EAuthTokenRevokeAction)(0),                                                     // 6: EAuthTokenRevokeAction
	(EAuthTokenState)(0),                                                            // 7: EAuthTokenState
	(*CAuthentication_GetPasswordRSAPublicKey_Request)(nil),                         // 8: CAuthentication_GetPasswordRSAPublicKey_Request
	(*CAuthentication_GetPasswordRSAPublicKey_Response)(nil),                        // 9: CAuthentication_GetPasswordRSAPublicKey_Response
	(*CAuthentication_DeviceDetails)(nil),                                           // 10: CAuthentication_DeviceDetails
	(*CAuthentication_BeginAuthSessionViaQR_Request)(nil),                           // 11: CAuthentication_BeginAuthSessionViaQR_Request
	(*CAuthentication_AllowedConfirmation)(nil),                                     // 12: CAuthentication_AllowedConfirmation
	(*CAuthentication_BeginAuthSessionViaQR_Response)(nil),                          // 13: CAuthentication_BeginAuthSessionViaQR_Response
	(*CAuthentication_BeginAuthSessionViaCredentials_Request)(nil),                  // 14: CAuthentication_BeginAuthSessionViaCredentials_Request
	(*CAuthentication_BeginAuthSessionViaCredentials_Response)(nil),                 // 15: CAuthentication_BeginAuthSessionViaCredentials_Response
	(*CAuthentication_PollAuthSessionStatus_Request)(nil),                           // 16: CAuthentication_PollAuthSessionStatus_Request
	(*CAuthentication_PollAuthSessionStatus_Response)(nil),                          // 17: CAuthentication_PollAuthSessionStatus_Response
	(*CAuthentication_GetAuthSessionInfo_Request)(nil),                              // 18: CAuthentication_GetAuthSessionInfo_Request
	(*CAuthentication_GetAuthSessionInfo_Response)(nil),                             // 19: CAuthentication_GetAuthSessionInfo_Response
	(*CAuthentication_GetAuthSessionRiskInfo_Request)(nil),                          // 20: CAuthentication_GetAuthSessionRiskInfo_Request
	(*CAuthentication_GetAuthSessionRiskInfo_Response)(nil),                         // 21: CAuthentication_GetAuthSessionRiskInfo_Response
	(*CAuthentication_NotifyRiskQuizResults_Notification)(nil),                      // 22: CAuthentication_NotifyRiskQuizResults_Notification
	(*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request)(nil),         // 23: CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request
	(*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response)(nil),        // 24: CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response
	(*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request)(nil),             // 25: CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request
	(*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response)(nil),            // 26: CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response
	(*CAuthentication_AccessToken_GenerateForApp_Request)(nil),                      // 27: CAuthentication_AccessToken_GenerateForApp_Request
	(*CAuthentication_AccessToken_GenerateForApp_Response)(nil),                     // 28: CAuthentication_AccessToken_GenerateForApp_Response
	(*CAuthentication_RefreshToken_Enumerate_Request)(nil),                          // 29: CAuthentication_RefreshToken_Enumerate_Request
	(*CAuthentication_RefreshToken_Enumerate_Response)(nil),                         // 30: CAuthentication_RefreshToken_Enumerate_Response
	(*CAuthentication_GetAuthSessionsForAccount_Request)(nil),                       // 31: CAuthentication_GetAuthSessionsForAccount_Request
	(*CAuthentication_GetAuthSessionsForAccount_Response)(nil),                      // 32: CAuthentication_GetAuthSessionsForAccount_Response
	(*CAuthentication_MigrateMobileSession_Request)(nil),                            // 33: CAuthentication_MigrateMobileSession_Request
	(*CAuthentication_MigrateMobileSession_Response)(nil),                           // 34: CAuthentication_MigrateMobileSession_Response
	(*CAuthentication_Token_Revoke_Request)(nil),                                    // 35: CAuthentication_Token_Revoke_Request
	(*CAuthentication_Token_Revoke_Response)(nil),                                   // 36: CAuthentication_Token_Revoke_Response
	(*CAuthentication_RefreshToken_Revoke_Request)(nil),                             // 37: CAuthentication_RefreshToken_Revoke_Request
	(*CAuthentication_RefreshToken_Revoke_Response)(nil),                            // 38: CAuthentication_RefreshToken_Revoke_Response
	(*CAuthenticationSupport_QueryRefreshTokensByAccount_Request)(nil),              // 39: CAuthenticationSupport_QueryRefreshTokensByAccount_Request
	(*CSupportRefreshTokenDescription)(nil),                                         // 40: CSupportRefreshTokenDescription
	(*CAuthenticationSupport_QueryRefreshTokensByAccount_Response)(nil),             // 41: CAuthenticationSupport_QueryRefreshTokensByAccount_Response
	(*CAuthenticationSupport_QueryRefreshTokenByID_Request)(nil),                    // 42: CAuthenticationSupport_QueryRefreshTokenByID_Request
	(*CAuthenticationSupport_QueryRefreshTokenByID_Response)(nil),                   // 43: CAuthenticationSupport_QueryRefreshTokenByID_Response
	(*CAuthenticationSupport_RevokeToken_Request)(nil),                              // 44: CAuthenticationSupport_RevokeToken_Request
	(*CAuthenticationSupport_RevokeToken_Response)(nil),                             // 45: CAuthenticationSupport_RevokeToken_Response
	(*CAuthenticationSupport_GetTokenHistory_Request)(nil),                          // 46: CAuthenticationSupport_GetTokenHistory_Request
	(*CSupportRefreshTokenAudit)(nil),                                               // 47: CSupportRefreshTokenAudit
	(*CAuthenticationSupport_GetTokenHistory_Response)(nil),                         // 48: CAuthenticationSupport_GetTokenHistory_Response
	(*CAuthenticationSupport_MarkTokenCompromised_Request)(nil),                     // 49: CAuthenticationSupport_MarkTokenCompromised_Request
	(*CAuthenticationSupport_MarkTokenCompromised_Response)(nil),                    // 50: CAuthenticationSupport_MarkTokenCompromised_Response
	(*CCloudGaming_CreateNonce_Request)(nil),                                        // 51: CCloudGaming_CreateNonce_Request
	(*CCloudGaming_CreateNonce_Response)(nil),                                       // 52: CCloudGaming_CreateNonce_Response
	(*CCloudGaming_GetTimeRemaining_Request)(nil),                                   // 53: CCloudGaming_GetTimeRemaining_Request
	(*CCloudGaming_TimeRemaining)(nil),                                              // 54: CCloudGaming_TimeRemaining
	(*CCloudGaming_GetTimeRemaining_Response)(nil),                                  // 55: CCloudGaming_GetTimeRemaining_Response
	(*CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults)(nil),      // 56: CAuthentication_NotifyRiskQuizResults_Notification.RiskQuizResults
	(*CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent)(nil),         // 57: CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent
	(*CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription)(nil), // 58: CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription
	(*CSupportRefreshTokenDescription_TokenUsageEvent)(nil),                         // 59: CSupportRefreshTokenDescription.TokenUsageEvent
	(ESessionPersistence)(0),                                                        // 60: ESessionPersistence
	(*CMsgIPAddress)(nil),                                                           // 61: CMsgIPAddress
	(*NoResponse)(nil),                                                              // 62: NoResponse
}
var file_steammessages_auth_steamclient_proto_depIdxs = []int32{
	0,  // 0: CAuthentication_DeviceDetails.platform_type:type_name -> EAuthTokenPlatformType
	1,  // 1: CAuthentication_DeviceDetails.app_type:type_name -> EAuthTokenAppType
	0,  // 2: CAuthentication_BeginAuthSessionViaQR_Request.platform_type:type_name -> EAuthTokenPlatformType
	10, // 3: CAuthentication_BeginAuthSessionViaQR_Request.device_details:type_name -> CAuthentication_DeviceDetails
	2,  // 4: CAuthentication_AllowedConfirmation.confirmation_type:type_name -> EAuthSessionGuardType
	12, // 5: CAuthentication_BeginAuthSessionViaQR_Response.allowed_confirmations:type_name -> CAuthentication_AllowedConfirmation
	0,  // 6: CAuthentication_BeginAuthSessionViaCredentials_Request.platform_type:type_name -> EAuthTokenPlatformType
	60, // 7: CAuthentication_BeginAuthSessionViaCredentials_Request.persistence:type_name -> ESessionPersistence
	10, // 8: CAuthentication_BeginAuthSessionViaCredentials_Request.device_details:type_name -> CAuthentication_DeviceDetails
	12, // 9: CAuthentication_BeginAuthSessionViaCredentials_Response.allowed_confirmations:type_name -> CAuthentication_AllowedConfirmation
	0,  // 10: CAuthentication_GetAuthSessionInfo_Response.platform_type:type_name -> EAuthTokenPlatformType
	3,  // 11: CAuthentication_GetAuthSessionInfo_Response.login_history:type_name -> EAuthSessionSecurityHistory
	60, // 12: CAuthentication_GetAuthSessionInfo_Response.requested_persistence:type_name -> ESessionPersistence
	1,  // 13: CAuthentication_GetAuthSessionInfo_Response.app_type:type_name -> EAuthTokenAppType
	0,  // 14: CAuthentication_GetAuthSessionRiskInfo_Response.platform_type:type_name -> EAuthTokenPlatformType
	56, // 15: CAuthentication_NotifyRiskQuizResults_Notification.results:type_name -> CAuthentication_NotifyRiskQuizResults_Notification.RiskQuizResults
	60, // 16: CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.persistence:type_name -> ESessionPersistence
	2,  // 17: CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.code_type:type_name -> EAuthSessionGuardType
	4,  // 18: CAuthentication_AccessToken_GenerateForApp_Request.renewal_type:type_name -> ETokenRenewalType
	58, // 19: CAuthentication_RefreshToken_Enumerate_Response.refresh_tokens:type_name -> CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription
	6,  // 20: CAuthentication_Token_Revoke_Request.revoke_action:type_name -> EAuthTokenRevokeAction
	6,  // 21: CAuthentication_RefreshToken_Revoke_Request.revoke_action:type_name -> EAuthTokenRevokeAction
	0,  // 22: CSupportRefreshTokenDescription.platform_type:type_name -> EAuthTokenPlatformType
	7,  // 23: CSupportRefreshTokenDescription.token_state:type_name -> EAuthTokenState
	59, // 24: CSupportRefreshTokenDescription.first_seen:type_name -> CSupportRefreshTokenDescription.TokenUsageEvent
	59, // 25: CSupportRefreshTokenDescription.last_seen:type_name -> CSupportRefreshTokenDescription.TokenUsageEvent
	40, // 26: CAuthenticationSupport_QueryRefreshTokensByAccount_Response.refresh_tokens:type_name -> CSupportRefreshTokenDescription
	40, // 27: CAuthenticationSupport_QueryRefreshTokenByID_Response.refresh_tokens:type_name -> CSupportRefreshTokenDescription
	61, // 28: CSupportRefreshTokenAudit.ip:type_name -> CMsgIPAddress
	47, // 29: CAuthenticationSupport_GetTokenHistory_Response.history:type_name -> CSupportRefreshTokenAudit
	54, // 30: CCloudGaming_GetTimeRemaining_Response.entries:type_name -> CCloudGaming_TimeRemaining
	61, // 31: CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.ip:type_name -> CMsgIPAddress
	0,  // 32: CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.platform_type:type_name -> EAuthTokenPlatformType
	57, // 33: CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.first_seen:type_name -> CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent
	57, // 34: CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.last_seen:type_name -> CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent
	5,  // 35: CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.authentication_type:type_name -> EAuthenticationType
	61, // 36: CSupportRefreshTokenDescription.TokenUsageEvent.ip:type_name -> CMsgIPAddress
	8,  // 37: Authentication.GetPasswordRSAPublicKey:input_type -> CAuthentication_GetPasswordRSAPublicKey_Request
	11, // 38: Authentication.BeginAuthSessionViaQR:input_type -> CAuthentication_BeginAuthSessionViaQR_Request
	14, // 39: Authentication.BeginAuthSessionViaCredentials:input_type -> CAuthentication_BeginAuthSessionViaCredentials_Request
	16, // 40: Authentication.PollAuthSessionStatus:input_type -> CAuthentication_PollAuthSessionStatus_Request
	18, // 41: Authentication.GetAuthSessionInfo:input_type -> CAuthentication_GetAuthSessionInfo_Request
	20, // 42: Authentication.GetAuthSessionRiskInfo:input_type -> CAuthentication_GetAuthSessionRiskInfo_Request
	22, // 43: Authentication.NotifyRiskQuizResults:input_type -> CAuthentication_NotifyRiskQuizResults_Notification
	23, // 44: Authentication.UpdateAuthSessionWithMobileConfirmation:input_type -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request
	25, // 45: Authentication.UpdateAuthSessionWithSteamGuardCode:input_type -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request
	27, // 46: Authentication.GenerateAccessTokenForApp:input_type -> CAuthentication_AccessToken_GenerateForApp_Request
	29, // 47: Authentication.EnumerateTokens:input_type -> CAuthentication_RefreshToken_Enumerate_Request
	31, // 48: Authentication.GetAuthSessionsForAccount:input_type -> CAuthentication_GetAuthSessionsForAccount_Request
	33, // 49: Authentication.MigrateMobileSession:input_type -> CAuthentication_MigrateMobileSession_Request
	35, // 50: Authentication.RevokeToken:input_type -> CAuthentication_Token_Revoke_Request
	37, // 51: Authentication.RevokeRefreshToken:input_type -> CAuthentication_RefreshToken_Revoke_Request
	39, // 52: AuthenticationSupport.QueryRefreshTokensByAccount:input_type -> CAuthenticationSupport_QueryRefreshTokensByAccount_Request
	42, // 53: AuthenticationSupport.QueryRefreshTokenByID:input_type -> CAuthenticationSupport_QueryRefreshTokenByID_Request
	44, // 54: AuthenticationSupport.RevokeToken:input_type -> CAuthenticationSupport_RevokeToken_Request
	46, // 55: AuthenticationSupport.GetTokenHistory:input_type -> CAuthenticationSupport_GetTokenHistory_Request
	49, // 56: AuthenticationSupport.MarkTokenCompromised:input_type -> CAuthenticationSupport_MarkTokenCompromised_Request
	51, // 57: CloudGaming.CreateNonce:input_type -> CCloudGaming_CreateNonce_Request
	53, // 58: CloudGaming.GetTimeRemaining:input_type -> CCloudGaming_GetTimeRemaining_Request
	9,  // 59: Authentication.GetPasswordRSAPublicKey:output_type -> CAuthentication_GetPasswordRSAPublicKey_Response
	13, // 60: Authentication.BeginAuthSessionViaQR:output_type -> CAuthentication_BeginAuthSessionViaQR_Response
	15, // 61: Authentication.BeginAuthSessionViaCredentials:output_type -> CAuthentication_BeginAuthSessionViaCredentials_Response
	17, // 62: Authentication.PollAuthSessionStatus:output_type -> CAuthentication_PollAuthSessionStatus_Response
	19, // 63: Authentication.GetAuthSessionInfo:output_type -> CAuthentication_GetAuthSessionInfo_Response
	21, // 64: Authentication.GetAuthSessionRiskInfo:output_type -> CAuthentication_GetAuthSessionRiskInfo_Response
	62, // 65: Authentication.NotifyRiskQuizResults:output_type -> NoResponse
	24, // 66: Authentication.UpdateAuthSessionWithMobileConfirmation:output_type -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response
	26, // 67: Authentication.UpdateAuthSessionWithSteamGuardCode:output_type -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response
	28, // 68: Authentication.GenerateAccessTokenForApp:output_type -> CAuthentication_AccessToken_GenerateForApp_Response
	30, // 69: Authentication.EnumerateTokens:output_type -> CAuthentication_RefreshToken_Enumerate_Response
	32, // 70: Authentication.GetAuthSessionsForAccount:output_type -> CAuthentication_GetAuthSessionsForAccount_Response
	34, // 71: Authentication.MigrateMobileSession:output_type -> CAuthentication_MigrateMobileSession_Response
	36, // 72: Authentication.RevokeToken:output_type -> CAuthentication_Token_Revoke_Response
	38, // 73: Authentication.RevokeRefreshToken:output_type -> CAuthentication_RefreshToken_Revoke_Response
	41, // 74: AuthenticationSupport.QueryRefreshTokensByAccount:output_type -> CAuthenticationSupport_QueryRefreshTokensByAccount_Response
	43, // 75: AuthenticationSupport.QueryRefreshTokenByID:output_type -> CAuthenticationSupport_QueryRefreshTokenByID_Response
	45, // 76: AuthenticationSupport.RevokeToken:output_type -> CAuthenticationSupport_RevokeToken_Response
	48, // 77: AuthenticationSupport.GetTokenHistory:output_type -> CAuthenticationSupport_GetTokenHistory_Response
	50, // 78: AuthenticationSupport.MarkTokenCompromised:output_type -> CAuthenticationSupport_MarkTokenCompromised_Response
	52, // 79: CloudGaming.CreateNonce:output_type -> CCloudGaming_CreateNonce_Response
	55, // 80: CloudGaming.GetTimeRemaining:output_type -> CCloudGaming_GetTimeRemaining_Response
	59, // [59:81] is the sub-list for method output_type
	37, // [37:59] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_steammessages_auth_steamclient_proto_init() }
func file_steammessages_auth_steamclient_proto_init() {
	if File_steammessages_auth_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_auth_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetPasswordRSAPublicKey_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetPasswordRSAPublicKey_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_DeviceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_BeginAuthSessionViaQR_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_AllowedConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_BeginAuthSessionViaQR_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_BeginAuthSessionViaCredentials_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_BeginAuthSessionViaCredentials_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_PollAuthSessionStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_PollAuthSessionStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetAuthSessionInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetAuthSessionInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetAuthSessionRiskInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetAuthSessionRiskInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_NotifyRiskQuizResults_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_AccessToken_GenerateForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_AccessToken_GenerateForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_RefreshToken_Enumerate_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_RefreshToken_Enumerate_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetAuthSessionsForAccount_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_GetAuthSessionsForAccount_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_MigrateMobileSession_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_MigrateMobileSession_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_Token_Revoke_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_Token_Revoke_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_RefreshToken_Revoke_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_RefreshToken_Revoke_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_QueryRefreshTokensByAccount_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CSupportRefreshTokenDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_QueryRefreshTokensByAccount_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_QueryRefreshTokenByID_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_QueryRefreshTokenByID_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_RevokeToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_RevokeToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_GetTokenHistory_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CSupportRefreshTokenAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_GetTokenHistory_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_MarkTokenCompromised_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthenticationSupport_MarkTokenCompromised_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CCloudGaming_CreateNonce_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CCloudGaming_CreateNonce_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CCloudGaming_GetTimeRemaining_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CCloudGaming_TimeRemaining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CCloudGaming_GetTimeRemaining_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_NotifyRiskQuizResults_Notification_RiskQuizResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_auth_steamclient_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CSupportRefreshTokenDescription_TokenUsageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_auth_steamclient_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_steammessages_auth_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_auth_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_auth_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_auth_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_auth_steamclient_proto = out.File
	file_steammessages_auth_steamclient_proto_rawDesc = nil
	file_steammessages_auth_steamclient_proto_goTypes = nil
	file_steammessages_auth_steamclient_proto_depIdxs = nil
}
